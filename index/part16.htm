<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>A2. Agate Ltd Case Studyâ€”Requirements Model</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part15.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part17.htm">Next &gt;</a></p><h2 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark269">Agate Ltd</a><a name="bookmark270">&zwnj;</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="155" height="24" alt="image" src="Image_403.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a" name="bookmark271">In this chapter we bring together the models (diagrams and supporting textual information) that constitute the requirements model. In </a><a href="part9.htm#bookmark222" class="a">Chapters 5 and </a>6 we have introduced the following UML diagrams:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_404.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_405.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_406.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">use case diagram activity diagram package diagram.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">There is not the space in this book to produce a complete requirements model. However, in this chapter we have included a sample of the diagrams and other information. This is done to illustrate the kind of material that should be brought together in a requirements model. We have also tried to illustrate how iteration of the model will produce versions of the model that are elaborated with more detail.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="203" height="24" alt="image" src="Image_407.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.2 </a><a href="part4.htm#bookmark4" class="s29">Req uirements List</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.2 </a><a href="part4.htm#bookmark4" class="s29">Req uirements List</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.2 </a><a href="part4.htm#bookmark4" class="s29">Req uirements List</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark272">The requirements list on the next page includes a column to show which use cases provide the functionality of each requirement. This requirements list includes some use cases not in the first iteration of the use case model.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:19pt"><td style="width:441pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">No.  Req uirement                                     U se Case(s)</p></td></tr><tr style="height:16pt"><td style="width:441pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">1   To record names, address and contact details for each client              Add a new client</p></td></tr><tr style="height:36pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 31pt;text-indent: 0pt;text-align: left;">To record the details of each campaign for each client. This will include the title of the</p><p class="s76" style="padding-top: 1pt;padding-left: 31pt;padding-right: 17pt;text-indent: -20pt;line-height: 112%;text-align: left;">2  campaign, planned start and finish dates, estimated costs, budgets, actual costs and  Add a new campaign dates, and the current state of completion</p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s77" style="padding-top: 5pt;padding-left: 31pt;padding-right: 17pt;text-indent: -20pt;line-height: 74%;text-align: left;">3  <span class="s76">To provide information that can be used in the separate accounts system for invoicing  Record completion of a clients for campaigns                                 campaign</span></p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s77" style="padding-top: 5pt;padding-left: 31pt;padding-right: 17pt;text-indent: -20pt;line-height: 74%;text-align: left;">4  <span class="s76">To record payments for campaigns that are also recorded in the separate accounts   </span>Record client payment <span class="s76">system</span></p></td></tr><tr style="height:17pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">5   To record which staff are working on which campaigns, including the campaign      Assign staff to work on a</p></td></tr></table><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:13pt"><td style="width:441pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">manager for each campaign                              campaign</p></td></tr><tr style="height:17pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">6   To record which staff are assigned as staff contacts to clients              Assign a staff contact</p></td></tr><tr style="height:17pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">7   To check on the status of campaigns and whether they are within budget        Check campaign budget</p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s77" style="padding-top: 5pt;padding-left: 31pt;padding-right: 17pt;text-indent: -20pt;line-height: 74%;text-align: left;">8  <span class="s76">To allow creative staff to record notes of ideas for campaigns and adverts (concept   </span>Create concept note <span class="s76">notes)</span></p></td></tr><tr style="height:17pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">9   To provide other staff with access to these concept notes                Browse concept notes</p></td></tr><tr style="height:36pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 344pt;text-indent: 0pt;text-align: left;">Add a new advert to a</p><p class="s76" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">10   To record details of adverts, including the progress on their production          campaign. Record</p><p class="s76" style="padding-top: 1pt;padding-left: 344pt;text-indent: 0pt;text-align: left;">completion of an advert</p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 7pt;padding-left: 344pt;padding-right: 17pt;text-indent: -338pt;line-height: 61%;text-align: left;">11  To schedule the dates when adverts will be run                 <span class="s78">Add a new advert to a </span>campaign</p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 7pt;padding-left: 344pt;padding-right: 17pt;text-indent: -338pt;line-height: 61%;text-align: left;">12  To maintain staff records for creative and administrative staff             <span class="s78">Add a new member of </span>staff</p></td></tr><tr style="height:36pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 344pt;text-indent: 0pt;text-align: left;">Add a new staff grade.</p><p class="s76" style="padding-top: 1pt;padding-left: 344pt;padding-right: 17pt;text-indent: -338pt;line-height: 112%;text-align: left;">13  To maintain details of staff grades and the pay for those grades            Change the rate for a staff grade</p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 7pt;padding-left: 344pt;padding-right: 17pt;text-indent: -338pt;line-height: 61%;text-align: left;">14  To record which staff are on which grade                     <span class="s78">Change the grade for a </span>member of staff</p></td></tr><tr style="height:17pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">15   To calculate the annual bonus for all staff                       Calculate staff bonuses</p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s77" style="padding-top: 5pt;padding-left: 31pt;padding-right: 36pt;text-indent: -24pt;line-height: 74%;text-align: left;">16  <span class="s76">To enable data about clients, campaigns, adverts and staff to be shared between    </span>Not applicable <span class="s76">offices</span></p></td></tr><tr style="height:17pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">17   To allow the system to be modified to work in different languages            Not applicable</p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">18  To restrict the ability to create or update data to authorized users in the company.    <span class="s78">All use cases that create</span></p><p class="s76" style="padding-right: 44pt;text-indent: 0pt;line-height: 7pt;text-align: right;">or update data</p></td></tr><tr style="height:19pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">19   To limit planned downtime to one hour a week during the night UK time.         Not applicable</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:19pt"><td style="width:441pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark273">Actor    Description</a></p></td></tr><tr style="height:25pt"><td style="width:441pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s77" style="padding-top: 4pt;padding-left: 58pt;text-indent: -51pt;line-height: 74%;text-align: left;">Accountant  <span class="s76">The accountant works in the Accounts department and is responsible for the major resourcing issues for campaigns including staffing and related financial matters.</span></p></td></tr><tr style="height:46pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 51pt;line-height: 112%;text-align: left;">Either a Director or an Account Manager (job titles), who is responsible for estimating the campaign cost Campaign  and agreeing it with the client. They are responsible for assigning staff to the team and supervising their Manager   work, managing the progress of the campaign, conducting any further budget negotiations and authorizing</p><p class="s76" style="padding-left: 58pt;text-indent: 0pt;text-align: left;">the final invoices.</p></td></tr><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 17pt;text-indent: 0pt;line-height: 112%;text-align: left;">Staff    Member of staff who is the contact for a particular client. They provide a first point of contact for the client Contact   when the client wants to contact Agate.</p></td></tr><tr style="height:17pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Staff     Any member of staff in Agate.</p></td></tr><tr style="height:28pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s78" style="padding-top: 7pt;padding-left: 6pt;padding-right: 203pt;text-indent: 0pt;line-height: 61%;text-align: left;">Campaign <span class="s76">Member of staff working on a particular campaign. Staff</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="234" height="25" alt="image" src="Image_408.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.3  </a><a href="part4.htm#bookmark4" class="s29">Actors and U se Cases</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.3  </a><a href="part4.htm#bookmark4" class="s29">Actors and U se Cases</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.3  </a><a href="part4.htm#bookmark4" class="s29">Actors and U se Cases</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark276" class="a">Figures A2.1 to </a><a href="part16.htm#bookmark274" class="a">A2.3 show the use cases from the first iteration, with use case descriptions in the tables. The use case diagram in Figure </a>A2.1 has been drawn in a modelling tool, Enterprise Architect from SparxSystems, and is shown as a screenshot.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><a name="bookmark275"><span><img width="550" height="390" alt="image" src="Image_409.jpg"/></span></a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark274">Figure A2.1 </a><span class="s21">Staff Management use cases.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="470" alt="image" src="Image_410.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure A2.2 <span class="s21">Campaign Management use cases.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 103pt;text-indent: 0pt;text-align: left;"><span><img width="328" height="262" alt="image" src="Image_411.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark276">Figure A2.3 </a><span class="s21">Advert Preparation use cases.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:18pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">U se Case</p></td><td style="width:378pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:25pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;padding-right: 9pt;text-indent: 0pt;line-height: 112%;text-align: left;">Add a new staff member</p></td><td style="width:378pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">When a new member of staff joins Agate, his or her details are recorded. He or she is assigned a staff number, and the start date is entered. Start date defaults to todayâ€™s date. The starting grade is entered.</p></td></tr><tr style="height:36pt"><td style="width:63pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;padding-right: 18pt;text-indent: 0pt;line-height: 112%;text-align: left;">Add a new staff grade</p></td><td style="width:378pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 11pt;text-indent: 0pt;line-height: 112%;text-align: left;">Occasionally a new grade for a member of staff must be added. The name of the grade is entered. At the same time, the rate for that grade and the rate start date are entered; the date defaults to todayâ€™s date.</p></td></tr><tr style="height:36pt"><td style="width:63pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 112%;text-align: left;">Change the rate for a staff grade</p></td><td style="width:378pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Annually the rates for grades are changed. The new rate for each grade is entered, and the rate start date set (no default). The old grade rate is retrieved and the rate finish date for that grade rate set to the day before the start of the new rate.</p></td></tr><tr style="height:36pt"><td style="width:63pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 9pt;text-indent: 0pt;line-height: 112%;text-align: left;">Change the grade for a staff member</p></td><td style="width:378pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 11pt;text-indent: 0pt;line-height: 112%;text-align: left;">When a member of staff is promoted, the new grade and the date on which they start on that grade are entered. The old staff grade is retrieved and the finish date set to the day before the start of the new grade.</p></td></tr><tr style="height:28pt"><td style="width:63pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 112%;text-align: left;">Calculate staff bonuses</p></td><td style="width:378pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">At the end of each month staff bonuses are calculated. This involves calculating the bonus due on each campaign a member of staff is working on. These are summed to give the total staff bonus.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:18pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">U se Case</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:25pt"><td style="width:68pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;padding-right: 14pt;text-indent: 0pt;line-height: 112%;text-align: left;">Add a new client</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 112%;text-align: left;">When Agate obtains a new client, the full details of the client are entered. Typically this will be because of a new campaign, and therefore the new campaign will be added straight away.</p></td></tr><tr style="height:36pt"><td style="width:68pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Assign staff to work on a campaign</p></td><td style="width:372pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 112%;text-align: left;">The campaign manager selects a particular campaign. A list of staff not already working on that campaign is displayed, and he or she selects those to be assigned to this campaign.</p></td></tr><tr style="height:36pt"><td style="width:68pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 24pt;text-indent: 0pt;line-height: 112%;text-align: justify;">Add a new advert to a campaign</p></td><td style="width:372pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 112%;text-align: left;">A campaign can consist of many adverts. Details of each advert are entered into the system with a target completion date and estimated cost.</p></td></tr><tr style="height:27pt"><td style="width:68pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Change a client contact</p></td><td style="width:372pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Records when the clientâ€™s contact person with Agate is changed.</p></td></tr><tr style="height:36pt"><td style="width:68pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 14pt;text-indent: 0pt;line-height: 112%;text-align: left;">Record completion of an advert</p></td><td style="width:372pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">The actor selects the relevant client, campaign and advert. The selected advert is then completed by setting its completion date.</p></td></tr><tr style="height:36pt"><td style="width:68pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Add a new campaign</p></td><td style="width:372pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 9pt;text-indent: 0pt;line-height: 112%;text-align: left;">When Agate gets the business for a new campaign, details of the campaign are entered, including the intended finish date and the estimated cost. The manager for that campaign is the person who enters it.</p></td></tr><tr style="height:4pt"><td style="width:440pt;border-top-style:solid;border-top-width:2pt" colspan="2" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:33pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 1pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Record completion of a campaign</p></td><td style="width:374pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 1pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;line-height: 112%;text-align: left;">When a campaign is completed, the actual completion date and cost are entered. A record of completion form is printed out for the Accountant as the basis for invoicing the client.</p></td></tr><tr style="height:27pt"><td style="width:67pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Assign a staff contact</p></td><td style="width:374pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Clients have a member of staff assigned to them as their particular contact person.</p></td></tr><tr style="height:27pt"><td style="width:67pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 14pt;text-indent: 0pt;line-height: 112%;text-align: left;">Record client payment</p></td><td style="width:374pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;line-height: 112%;text-align: left;">When a client pays for a campaign, the payment amount is checked against the actual cost and the date paid is entered.</p></td></tr><tr style="height:38pt"><td style="width:67pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Check campaign budget</p></td><td style="width:374pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 7pt;padding-right: 7pt;text-indent: 0pt;line-height: 112%;text-align: left;">The campaign budget may be checked to ensure that it has not been exceeded. The current campaign cost is determined by the total cost of all the adverts and the campaign overheads.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:27pt"><td style="width:441pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 7pt;text-align: left;">U se</p><p class="s79" style="padding-left: 6pt;text-indent: 0pt;line-height: 70%;text-align: left;">Case  <span class="s75">Description</span></p></td></tr><tr style="height:35pt"><td style="width:441pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Browse  Any member of staff may view concept notes for a campaign. The campaign must be selected first. The titles of concept  all notes associated with that campaign will be displayed. The user will be able to select a note and view the notes   text on screen. Having viewed one note, others can be selected and viewed.</p></td></tr><tr style="height:38pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Create  A member of staff working on a campaign can create a concept note, which records ideas, concepts and concept  themes that will be used in an advertising campaign. The note is in text form. Each note has a title. The person note   who created the note, the date and time are also recorded.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark277" class="a" name="bookmark278">As part of the second iteration of use case modelling, it is suggested that all the use cases that require the user to select a client, a campaign or an advert should have include relationships with use cases called Find client, Find campaign and Find advert. An example of this is shown in </a>Fig. A2.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span><img width="492" height="103" alt="image" src="Image_412.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark277">Figure A2.4 </a><span class="s21">Inclusion of Find campaign use case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark278" class="a">In order to test out this idea, prototypes of the user interface were produced in the second iteration. The first prototypes used a separate user interface for these included use cases, as shown in </a>Fig. A2.5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="548" height="264" alt="image" src="Image_413.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure A2.5 <span class="s21">Prototype interface for the Find campaign use case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">However, feedback from the users indicated that this approach was not acceptable. They did not want to have to keep opening extra windows to find clients, campaigns and adverts. The users expressed the view that they should be able to select these from listboxes or dropdown lists that were part of the interface for whatever use case they were in at the time.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark279" class="a">In the third iteration of use case modelling, a set of prototypes was produced that uses listboxes. </a>Figure A2.6 shows an example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;"><span><img width="490" height="264" alt="image" src="Image_414.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark279">Figure A2.6 </a><span class="s21">Prototype interface for the use case Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark280" class="a">In the third iteration, some additional functionality was identified and added to the use case diagrams. As an example of this, Fig. </a><a href="part16.htm#bookmark279" class="a">A2.7 shows the use case Check campaign budget extended by the use case Print campaign summary and Print campaign invoice. This additional functionality will also require a change to the prototype interface in Fig. </a>A2.6. Two additional buttons, Print Summary and Print Invoice, need to be added to the row of buttons at the bottom of the window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="543" height="286" alt="image" src="Image_415.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark280">Figure A2.7 </a><span class="s21">Modified use case Check campaign budget with extensions.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark281">Also in the third iteration, the use case descriptions are elaborated to provide more detail about the interaction between the actors and the system. Two examples of these use case descriptions are provided below.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">U se case description: Check campaign budget</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:18pt"><td style="width:226pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Actor Action</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">System Response</p></td></tr><tr style="height:16pt"><td style="width:226pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">1. None</p></td><td style="width:215pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">2. Lists the names of all clients</p></td></tr><tr style="height:17pt"><td style="width:226pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">3. The actor selects the client name</p></td><td style="width:215pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">4. Lists the titles of all campaigns for that client</p></td></tr><tr style="height:17pt"><td style="width:226pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">5. Selects the relevant campaign. Requests budget check</p></td><td style="width:215pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">6. Displays the budget surplus for that campaign</p></td></tr><tr style="height:38pt"><td style="width:441pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" colspan="2" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Extensions</p><p class="s76" style="padding-top: 1pt;padding-left: 6pt;padding-right: 194pt;text-indent: 0pt;line-height: 112%;text-align: left;">After step 6, the campaign manager prints a campaign summary. After step 6, the campaign manager prints a campaign invoice.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">U se case description: Assign staff to work on a campaign</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:18pt"><td style="width:216pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Actor Action</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">System Response</p></td></tr><tr style="height:16pt"><td style="width:216pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">1. None</p></td><td style="width:224pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">2. Displays list of client names</p></td></tr><tr style="height:17pt"><td style="width:216pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">3. The actor selects the client name</p></td><td style="width:224pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">4. Lists the titles of all campaigns for that client</p></td></tr><tr style="height:27pt"><td style="width:216pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">5. Selects the relevant campaign</p></td><td style="width:224pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 33pt;padding-right: 2pt;text-indent: -8pt;line-height: 112%;text-align: left;">6. Displays a list of all staff members not already allocated to this campaign</p></td></tr><tr style="height:27pt"><td style="width:216pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 15pt;text-indent: -8pt;line-height: 112%;text-align: left;">7. Highlights the staff members to be assigned to this campaign. Clicks Allocate button.</p></td><td style="width:224pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 33pt;text-indent: -8pt;line-height: 112%;text-align: left;">8. Presents a message confirming that staff have been allocated</p></td></tr><tr style="height:28pt"><td style="width:440pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" colspan="2" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 364pt;text-indent: 0pt;line-height: 112%;text-align: left;">Alternative Courses None.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="129" height="25" alt="image" src="Image_416.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.4  </a><a href="part4.htm#bookmark4" class="s29">Glossary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.4  </a><a href="part4.htm#bookmark4" class="s29">Glossary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.4  </a><a href="part4.htm#bookmark4" class="s29">Glossary</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark282">A glossary of terms has been drawn up, which lists the specialist terms that apply to the domain of this projectâ€”advertising campaigns.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:19pt"><td style="width:48pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Term</p></td><td style="width:392pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:25pt"><td style="width:48pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;padding-right: 19pt;text-indent: 0pt;line-height: 112%;text-align: left;">Admin Staff</p></td><td style="width:392pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 3pt;padding-left: 6pt;padding-right: 11pt;text-indent: 0pt;line-height: 112%;text-align: left;">Staff within Agate whose role is to provide administrative support that enables the work of the creative staff to take place, for example secretaries, accounts clerks and the office manager</p></td></tr><tr style="height:27pt"><td style="width:48pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Advert</p></td><td style="width:392pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">An advertisement designed by Agate as part of a campaign. Adverts can be for TV , cinema, websites, newspapers, magazines, advertising hoardings, brochures or leaflets. Synonym: Advertisement</p></td></tr><tr style="height:27pt"><td style="width:48pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Agate</p></td><td style="width:392pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 11pt;text-indent: 0pt;line-height: 112%;text-align: left;">An advertising agency based in Birmingham, UK, but with offices around the world. The customer for this project</p></td></tr><tr style="height:36pt"><td style="width:48pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Campaign</p></td><td style="width:392pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">An advertising campaign. Adverts are organized into campaigns in order to achieve a particular objective, for example a campaign to launch a new product or service, a campaign to rebrand a company or product, or a campaign to promote an existing product in order to take market share from competitors</p></td></tr><tr style="height:27pt"><td style="width:48pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">Campaign Staff</p></td><td style="width:392pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Member of staff working on a particular campaign</p></td></tr><tr style="height:27pt"><td style="width:48pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Client</p></td><td style="width:392pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 112%;text-align: left;">A customer of Agate. A company or organization that wishes to obtain the services of Agate to develop and manage an advertising campaign, and design and produce adverts for the campaign</p></td></tr><tr style="height:27pt"><td style="width:48pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 12pt;text-indent: 0pt;line-height: 112%;text-align: left;">Concept Note</p></td><td style="width:392pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 11pt;text-indent: 0pt;line-height: 112%;text-align: left;">A textual note about an idea for a campaign or advert. This is where creative staff record their ideas during the process of deciding the themes of campaigns and adverts. Synonym: Note</p></td></tr><tr style="height:21pt"><td style="width:440pt;border-top-style:solid;border-top-width:2pt" colspan="2" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.25291pt" cellspacing="0"><tr style="height:44pt"><td style="width:45pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Term</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 6pt;padding-right: 9pt;text-indent: 0pt;line-height: 112%;text-align: left;">Creative Staff</p></td><td style="width:396pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s75" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s76" style="padding-left: 9pt;padding-right: 7pt;text-indent: 0pt;line-height: 112%;text-align: left;">Staff with a creative role in the company, such as designers, editors and copy-writers; those who are engaged in the work of the company to develop and manage campaigns and design and produce adverts</p></td></tr><tr style="height:17pt"><td style="width:45pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Grade</p></td><td style="width:396pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">A job grade. Each member of staff is on a particular grade, for example â€˜Graphic Artist 2â€™ or â€˜Copywriter 1â€™</p></td></tr><tr style="height:27pt"><td style="width:45pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;padding-right: 16pt;text-indent: 0pt;line-height: 112%;text-align: left;">Grade Rate</p></td><td style="width:396pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:2pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;line-height: 112%;text-align: left;">The rate of pay for a particular grade, for example the Grade â€˜Graphic Artist 2â€™ is paid Â£26 170 per year in the UK from 1/1/2010 to 31/12/2010</p></td></tr><tr style="height:19pt"><td style="width:45pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Staff</p></td><td style="width:396pt;border-top-style:solid;border-top-width:2pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E3F0F5"><p class="s76" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Any member of staff in Agate. Synonyms: Staff member, member of staff</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="204" height="24" alt="image" src="Image_417.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.5  </a><a href="part4.htm#bookmark4" class="s29">Initial Architecture</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.5  </a><a href="part4.htm#bookmark4" class="s29">Initial Architecture</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.5  </a><a href="part4.htm#bookmark4" class="s29">Initial Architecture</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark283">The initial architecture of the system is based on the packages into which the use cases are grouped. These use cases have been grouped into three subsystem packages: Campaign Management, Staff Management and Advert Preparation.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure A2.8 shows the initial architecture of these three packages, and a package that will provide the mechanisms for the distribution of the application. At this early stage in the project, it is not clear what this will be, but something will be necessary to meet Requirement 16. At this stage the packages have names that reflect the business context rather than how they might be implemented in Java packages or C#  namespaces or an equivalent structure. This will change later.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;"><span><img width="405" height="292" alt="image" src="Image_418.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark284">Figure A2.8 </a><span class="s21">Initial package architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="352" height="25" alt="image" src="Image_419.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.6 </a><a href="part4.htm#bookmark4" class="s29">Activities of Req uirements M odelling</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.6 </a><a href="part4.htm#bookmark4" class="s29">Activities of Req uirements M odelling</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A2.6 </a><a href="part4.htm#bookmark4" class="s29">Activities of Req uirements M odelling</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a" name="bookmark285">In Chapter </a><a href="part9.htm#bookmark222" class="a">5, we outlined the phases and activities of the iterative lifecycle, and in Chapter </a><a href="part16.htm#bookmark286" class="a">6 we included an activity diagram to show the activity Requirements capture and modelling. Figure </a><a href="part16.htm#bookmark287" class="a">A2.9 shows the same diagram. This activity can be broken down into other activities, and these are shown in </a><a href="part16.htm#bookmark288" class="a">Figs A2.10, </a><a href="part16.htm#bookmark289" class="a">A2.11 and </a>A2.12.</p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"><span><img width="454" height="266" alt="image" src="Image_420.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark286">Figure A2.9 </a><span class="s21">Activity diagram for Requirements capture and modelling.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 85pt;text-indent: 0pt;text-align: left;"><span><img width="376" height="207" alt="image" src="Image_421.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark287">Figure A2.10 </a><span class="s21">Activity diagram to show the activities involved in capturing requirements.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 85pt;text-indent: 0pt;text-align: left;"><span><img width="377" height="186" alt="image" src="Image_422.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark288">Figure A2.11 </a><span class="s21">Activity diagram to show the activities involved in developing prototypes.</span></p><p style="padding-left: 85pt;text-indent: 0pt;text-align: left;"><span><img width="377" height="130" alt="image" src="Image_423.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark289">Figure A2.12 </a><span class="s21">Activity diagram to show the activities in developing an initial architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark204" class="a">It is important to remember that in a project that adopts an iterative lifecycle, these activities may take place over a series of iterations. In the first iteration, the emphasis will be on requirements capture and modelling; in the second, it will shift to analysis, but some requirements capture and modelling activities may still take place. Refer back to </a><a href="part9.htm#bookmark186" class="a">Fig. 5.15. You may also want to look at Fig. </a>5.7, which illustrates the development of the use case model through successive iterations.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_424.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:346pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark290">LEARNING OBJECTIVES</a><a name="bookmark291">&zwnj;</a></p></td><td style="width:94pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_425.jpg"/></span></p></td></tr><tr style="height:149pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_426.jpg"/></span> <span class="s16">why we analyse requirements</span></p><p class="s17" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_427.jpg"/></span> <span class="s16">the technical terms used when working with analysis class diagrams</span></p><p class="s17" style="padding-top: 1pt;padding-left: 54pt;text-indent: -20pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_428.jpg"/></span> <span class="s16">how the analysis class diagram expresses a detailed model of user requirements</span></p><p class="s16" style="padding-left: 34pt;padding-right: 22pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_429.jpg"/></span><span class="s17"> </span>how to realize use cases with communication diagrams and class diagrams <span><img width="20" height="13" alt="image" src="Image_430.jpg"/></span><span class="s38"> </span>how to use robustness analysis to realize a use case</p><p class="s17" style="padding-left: 54pt;text-indent: -20pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_431.jpg"/></span> <span class="s16">how the CRC technique helps to identify analysis classes and allocate their responsibilities</span></p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_432.jpg"/></span> <span class="s16">how to evaluate and review analysis classes.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 12pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark292">7.1 </a><span><img width="4" height="20" alt="image" src="Image_433.jpg"/></span><a href="part4.htm#bookmark4" class="s43"> </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 12pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">The purpose of requirements analysis is to produce an analysis, or logical, model of the planned application. The analysis model can be seen as a necessary and important step between the requirements model, which was discussed in Chapter </a><a href="part16.htm#bookmark270" class="a">6 and illustrated in Case Study </a><a href="part23.htm#bookmark595" class="a">Chapter A2, and the design model, which will be introduced in </a><a href="part31.htm#bookmark931" class="a">Chapter 12 and illustrated in Case Study Chapter </a>A5. However, in an iterative lifecycle the three models represent different perspectives on the proposed system rather than distinct stages in its development. The analysis model focuses on the logical behaviour of the proposed system. It consists chiefly of a set of analysis classes contained in diagrams that collectively model the behaviour of the required application system in a way that is independent of any particular implementation approach. An analysis model helps to reduce errors and inconsistencies in software design and construction.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The analysis model is closely related to the domain model, if one exists. However, a domain model is a high-level view of the main concepts and logical elements related to the organization as a whole. An analysis model is specific to a single software system and its production forms part of the development of that system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1041" class="a" name="bookmark293">Some followers of Agile methods argue that it is rarely necessary to produce an analysis model. (Chapter </a>21 and the additional material on the book website give more information about Agile methods.) Indeed, some experienced developers follow familiar patterns and frameworks without building much in the way of tangible models at all. However, we believe that it is useful to produce an analysis model for all but the simplest of new software systems. This is particularly true for developers who are new to the profession.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We begin by considering how an analysis model differs from the other UML models mentioned above. Then we explain and illustrate the notation of the class diagram, which is the main artifact produced by the analysis workflow. We describe two approaches to creating an</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">analysis class diagram for a use case (or for a set of use cases). One approach is called use case realization (it is also often called robustness analysis). The other is a non-UML technique called Classâ€“Responsibilityâ€“Collaboration (CRC) cards, which predates UML by many years, but is still widely used in analysis. Finally, we explain how to derive an overall analysis class diagram from the various partial class diagrams that result from both CRC cards and the use case realization technique.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="202" height="25" alt="image" src="Image_434.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.2  </a><a href="part4.htm#bookmark4" class="s29">The Analysis M odel</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.2  </a><a href="part4.htm#bookmark4" class="s29">The Analysis M odel</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.2  </a><a href="part4.htm#bookmark4" class="s29">The Analysis M odel</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark294">The analysis model is a product of the analysis workflow, which concentrates on achieving a detailed understanding of the problem domain, and of the logical behaviour of an application system that can meet the requirements specified in the requirements model.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.2.1 <b>H ow does an analysis model differ from other models?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The analysis model goes beyond the requirements model in its completeness, its level of detail and its analysis of the logical structure of the problem situation and the ways that its logical elements interact. For example, a use case in the requirements model may be represented in the analysis model by a set of collaborating classes, together with the attributes, operations and associations needed to fulfil the goals of the use case.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Meanwhile, the analysis model also stops short of the design model in that it ignores physical and implementation details of how the requirements are to be met. For example, an analysis class diagram might represent the user interface aspect of a use case (in other words, the windows, buttons, text boxes and other interface widgets which the user can see, can press, into which they can enter data, and so on) as a single class, while the corresponding design class diagram may contain a large number of classes that precisely represent the actual user interface in Java, or in whichever programming language has been chosen for the implementation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark295">The analysis model also differs from the domain model, although the two are closely related. A domain model is a high-level view of the main concepts and logical elements related to the organization as a whole. Not all organizations maintain a domain model, but in those that do it typically consists of a set of classes that represent important business concepts such as customers, orders, products, and so on. These are specified to the same level of detail as analysis classes, but will include only those attributes and operations that can be identified without reference to any given application system. The domain model acts as a reference model of â€˜the things of interest to the organizationâ€™ that can be used as a way of eliminating duplication and as a basis for many different application systems. (Domain models are explained in more detail in the online material on the book website.)</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The analysis model is important because it specifies the requirements. This means much more than just gathering and documenting facts and requests from users. The use case model gives a perspective on user requirements, and models them in terms of what the software system can do to help the user perform their work (or play). In order to design software that will deliver this help, we must analyse the logical structure of the problem situation and the ways that its logical elements interact. We must examine the way in which different, possibly conflicting, requirements affect each other. We must then communicate this understanding clearly and unambiguously as a basis for the design model, which in turn guides the implementation model.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is one of the conceptual foundations of the object-oriented approach that the software developed to meet a need should be structured in a way that reflects the situation in which the need arises. The UML class diagram is designed to do just this. The structure of an analysis class diagram is a model of requirements that can be directly translated through design into software components. A successful analysis model must meet the following needs.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_435.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">It must contain an overall description of what the software should do.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_436.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">It must represent any people, physical things and concepts that are important to the analystâ€™s understanding of what is going on in the application domain.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_437.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">It must show connections and interactions among these people, things and concepts.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_438.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_439.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">It must show the business situation in enough detail to evaluate possible designs. Ideally, it should also be organized in such a way that it makes a sound basis for the design model.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In the next section, we discuss what is involved in achieving these goals.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.2.2 <b>What makes for good analysis?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The cost of fixing faults in a system increases as the system progresses through the systems development lifecycle. If an error occurs in the analysis of a system, it is cheaper to fix it during an early phase than later when that error may have propagated through numerous aspects of the design and implementation. It is most expensive to fix it after the system has been deployed and the error may be reflected in many different parts of the system. The quality of the design is, therefore, dependent to a large extent on the quality of the analysis.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some methodologies have explicit quality criteria that can be applied to the products of every stage of the lifecycle, but these quality criteria typically check syntactic aspects of the products, that is, whether the notation is correct in diagrams, rather than semantic aspects, that is, whether the diagrams correctly represent the organizationâ€™s requirements. To provide a sound foundation for design, analysis should meet the following four criteria:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_440.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_441.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_442.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_443.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">correct scope completeness correct content consistency.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">These are described in more detail below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark296">C orrect scope</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The scope of a system determines what is included in that system and what is excluded. It is important that the required scope of the system is clearly understood, documented and agreed with the clients from the start of the project. In many organizations, this will be defined in a formal document called a project initiation document (PID). (There is more about the role and content of a PID in the online chapter on project management on the bookâ€™s website.) It is also important that everything that is in the analysis models <i>does </i><a href="part38.htm#bookmark1138" class="a">fall within the scope of the system. In the case of the Agate system, it is not a requirement to replace the existing accounting system that is used to invoice clients. It is, however, a requirement that the new system should interface with the accounting system to provide for the transfer of data relating to financial aspects of advertising campaigns. The scope of the system therefore excludes use cases for accounting but should include use cases both to handle the entry of data that will be transferred to the accounting system and to handle the transfer itself. Coad et al. </a>(1997) include a <i>not this time </i>component with their other four components (problem domain, human interface, data management and system interaction). The not this time component is used to document classes and business services that emerge during the analysis but are not part of the requirements this time. This is a useful way of forcing consideration of the scope of the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C ompleteness</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1138" class="a">Just as there is a requirement that everything that is in the analysis models is within the scope of the system, so everything that is within the scope of the system should be documented in the analysis models. Everything that is known about the system from the requirements capture should be documented and included in appropriate diagrams. Often the completeness of the analysis is dependent on the skills and experience of the analyst. Knowing what questions to ask in order to elicit requirements comes with time and experience. However, analysis patterns and strategies, as proposed by Coad et al. </a><a href="part38.htm#bookmark1176" class="a">(1997) and Fowler </a>(1997), can help the less- experienced analyst to identify likely issues. (The use of patterns, which draw on past experience, can be a good way of ensuring that the analysis is effective.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1262" class="a">Non-functional requirements should be documented even though they may not affect the analysis models directly. Rumbaugh </a>(1997) suggests that some of the requirements found during analysis are not analysis requirements but design requirements. These should be</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">documented, but the development team may only have to consider them once the design phase has begun. An example in the Agate system is the requirement that the system should be usable in different offices around the world and should handle multiple currencies. This would be noted during analysis; during design, it will mean that the system must be designed to support localization (adaptation to local needs) and to display different national currency symbols (perhaps using the Unicode standard).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C orrect content</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark297">The analysis documentation should be correct and accurate in what it describes. This applies not only to textual information, logic, business rules and diagrams but also to quantitative features of the non-functional requirements. Examples include correct descriptions of attributes and any operations that are known at this stage, correct representation of associations between classes, particularly the multiplicity of associations, and accurate information about volumes of data. Accuracy should not be confused with precision. FoodCo owns 1500 acres of land (to the nearest 100 acres). To state that the company owns 1700 is inaccurate. To state that it owns 1523 is more precise. To state that it owns 1253 is still inaccurate, although the precision gives a spurious impression of accuracy.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C onsistency</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Where the analysis documentation includes different models that refer to the same things (use cases, classes, attributes or operations), the same name should be used consistently for the same thing. Errors of consistency can result in errors being made by designers: for example, creating two attributes with different names that are used in different parts of the system but should be the same attribute. If the designers spot the inconsistency, they may try to resolve it themselves, but may get it wrong because the information they have about the system is all dependent on what they have received in the specification of the system from the analysts.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Errors of scope or completeness will typically be reflected in the finished product not doing what the users require; the product will either include features that are not required or lack features that are. Errors of correctness and consistency will typically be reflected in the finished product performing incorrectly. Errors of completeness and consistency will most often result in difficulties for the designers; in the face of incomplete or inconsistent specifications, they will have to try to decide what is required or refer back to the analysts.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1303" class="a">One general way of ensuring that the analysis models reflect the requirements is to use walkthroughs. Walkthroughs are described by Yourdon </a><a href="part38.htm#bookmark1302" class="a">(1985) (and also in an appendix to </a>Yourdon, 1989). They provide a structured review with other developers. They may be used at various points in the systems development lifecycle as a way of ensuring the quality of products. For example, walkthroughs may also be used during program design and development to check the correctness of program code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="430" height="25" alt="image" src="Image_444.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.3  </a><a href="part4.htm#bookmark4" class="s29">Analysis Class Diagram: Concepts and Notation</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.3  </a><a href="part4.htm#bookmark4" class="s29">Analysis Class Diagram: Concepts and Notation</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.3  </a><a href="part4.htm#bookmark4" class="s29">Analysis Class Diagram: Concepts and Notation</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark298">7.3.1 </a><b>Classes and objects</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The analysis class diagram contains classes that represent the more permanent aspects of the application domain, but specifically those that are relevant to the application under development. For example, as long as Agate continues to operate in the advertising business, its business activities are likely to involve offices, computers, clients, campaigns, budgets, invoices, payments, adverts, a variety of different operational staff (including those in the creative, accounts and IT departments), directors, several kinds of managers (looking after finance, marketing and campaigns) and various relationships between them. If Agate has a domain model, then it is likely to contain classes that represent all these people, things and concepts. Among these, some will be specifically related to the application of interest. For example, we can readily identify clients, campaigns, budgets, payments, adverts, creative staff and campaign managers as being particularly relevant to the requirements listed in Section A1.4. We can therefore expect that these will all appear as classes in the analysis model.</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.3.2 <b>Attributes</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Attributes are the essential description of the data that belongs to a class. They are the common structure of what a member of the class can â€˜knowâ€™. Each object will have its own, possibly unique, value for each attribute (or values, if the attribute is an array).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark299" class="a">Figure </a>7.1 shows some possible attributes of Client and StaffMember in the Agate case study.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 70pt;text-indent: 0pt;text-align: left;"><span><img width="418" height="251" alt="image" src="Image_445.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark299">Figure 7.1 </a><span class="s21">Including attributes on a class diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note that this symbol for a class is subdivided into three compartments. The top compartment contains the class name while the second contains the attribute names (which begin with a lower case letter). The third compartment will contain the operations, but it remains empty for the moment.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark300" class="a">In the same way that a class is partly defined by its attributes, instances are described by the values of those attributes. For a particular client we give an appropriate value to each attribute. â€˜FoodCoâ€™ is the value given to the company name attribute for the instance of Client that represents the real-world client FoodCo. To describe an instance completely, we give a value to all its attributes, as in </a>Fig. 7.2.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span><img width="433" height="175" alt="image" src="Image_446.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark300">Figure 7.2 </a><span class="s21">Including attribute values on an instance diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some attribute values change during the life of an object. For example, FoodCoâ€™s managers may change their email address, their telephone number or their address. They may even decide to change the companyâ€™s name. In each case, the corresponding attribute value should be updated in the object that represents FoodCo. Other attribute values may not change. For example, a client reference number may be assigned to each client. As long as this is correctly recorded in the first place, there is probably no need for its value ever to change.</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark301">7.3.3 </a><b>Attributes and state</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark525" class="a">An objectâ€™s state affects how it responds to events (the idea of state was first explained in Section 4.2.7). The state of an object is partly described by the instance values of its attributes. When an attribute value changes, the object itself may change state. Not all attribute value changes are significant in the sense that they affect the behaviour of the object, and hence of the system as a whole. But some have important implications for object and system behaviour and these are modelled using statemachine diagrams (statemachine diagrams are explained in detail in </a>Chapter 11).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A simple illustration is the daily cash limit that most banks apply to ATM cash cards. For this to work, the ATM system must know your daily limit and it must keep a running total of your total withdrawals during the day. Requests that do not exceed your daily limit are granted and the running total is updated. Requests that would exceed the limit are refused, usually with a message that tells you how much you can withdraw. Once your daily limit is reached, no further requests are granted. At the end of the day, the total is reset to zero and the procedure starts again. (Note that this is greatly simplifiedâ€”real bank systems are much more complex.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">To understand this in terms of object states, imagine an object y<u>ourCard</u> with attributes dayTotal and dailyLimit. The values of these attributes at any given moment determine the objectâ€™s state. At the start of each dayâ€™s business, the value of dayTotal is set to zero. This places the object in its Active state. For as long as the value of dayTotal is less than the value of dailyLimit, y<u>ourCard</u> stays in the Active state. If the value of dayTotal becomes equal to the value of dailyLimit, y<u>ourCard</u> changes state to Barred. How y<u>ourCard</u><a href="part16.htm#bookmark302" class="a"> responds to a withdraw(amount) message depends on which state it is in at the time. In the Active state, valid requests (those that do not cause the limit to be exceeded) are granted, while invalid requests (those that would cause the limit to be exceeded) result in a warning message instead of cash being issued. However, in the Barred state, all cash requests are refused and the message is different. </a>Figure 7.3 shows this as a statechart diagram.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="360" alt="image" src="Image_447.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark302">Figure 7.3 </a><span class="s21">Simplified states and transitions for an ATM cash card.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Although this example is not intended as a presentation of statemachine diagrams, the notation is useful to illustrate what can happen when an object changes its state. At the instance level this is merely an update of attribute values, yet the consequences can extend</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">beyond the boundaries of the software system into the userâ€™s daily lifeâ€”as some bank customers know from experience.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.3.4 <b>Links between instances</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark303" class="a">A link is a logical connection between two or more objects (in most modelling situations a link connects only two instances; a link can connect three or more instances, but this is rare and we do not consider it here). An example for Agate is the connection between FoodCo and the â€˜World Traditionâ€™ TV  campaign, described by the sentence â€˜FoodCo is the client for the World Tradition campaign.â€™ This is shown in Figure </a>7.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;"><span><img width="406" height="95" alt="image" src="Image_448.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark303">Figure 7.4 </a><span class="s21">A link between two instances.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark303" class="a" name="bookmark304">Linked instances may be from different classes, as in Fig. </a>7.4. A link can also connect instances of the same class: for example, the link supervises between a manager and another staff member who are both instances of Staff Member. Less commonly, a link can connect an instance to itself. An example might arise where the captain of a hockey team selects the players. Assuming that the captain is also a player, she might link to herselfâ€”for example â€˜the captain selects herself for the teamâ€™.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark305" class="a">Figure </a>7.5 shows some links between clients and campaigns, but this is not a very economic way of modelling them. To show every link would be unnecessarily complex. There may be many staff and hundreds of clients, not to mention many thousands of links between instances of other classes. In addition to this, links may change frequently and such a detailed model would soon be out of date.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="448" height="253" alt="image" src="Image_449.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark305">Figure 7.5 </a><span class="s21">Links between instances of StaffMember and Client.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.3.5 <b>Associations between classes</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An association is an abstraction that connects two classes and represents the possibility of links between their instances. (An association may connect more than two classes, butâ€”just as for linksâ€”this is rare and we do not consider it here.) For example, at Agate a member of staff is assigned to each client as a staff contact. This will be instantiated by a set of links, each connecting a specific <u>:Client</u> (the colon before the class name indicates an anonymous</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">instance of the class, in other words <i>any </i>client) to the corresponding <u>:StaffMember</u>. However, links are modelled only if this is necessary to show a specific requirement. We know from the use cases that campaign managers need to be able to assign and change a client contact. Therefore the model must permit these links to exist, otherwise it will not be possible to design software that meets these needs. In the same way that a class describes a set of similar objects, an association describes a set of similar links (links are called <i>association instances </i>by some authors).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some associations can be recognized easily without any initial awareness that there are any specific links. For example, the association between a client and each of their campaigns is obvious. Staff at Agate need only record information about clients because they have won (or hope to win) business in the form of campaigns, and a campaign would not be undertaken except on behalf of a specific client. Other associations may be identified through the activity of use case realization (which we describe later in this chapter). As a general rule, wherever a link exists between two objects, there must be a corresponding association between their classes. Like object instances, links are not usually modelled explicitly on class diagrams.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure 7.6 shows an association that includes all possible liaises with links between clients and members of staff (although it does not tell us which instances are linked, if anyâ€”an association is abstract and general, not particular). The association is the line between the two class symbols. The text liaises with near the middle of the line is the <i>association name</i>. Every association must have a descriptive name (although it is not obligatory to show this on diagrams). The text at the association end gives a name to the role that the instances of the class at that end of the association play in relation to instances of the class at the other end of the association. The link acts as a constraint: only those instances of StaffMember that are linked to an instance of Client by the liaises with association will participate in collaborations that involve the role staffContact. At a later stage, we will see that this association end name represents a data value, not unlike an attribute; it just happens to hold a reference to an instance of another domain class rather than a value like an integer or a string. In design and implementation, the association end name will become an attribute.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;"><span><img width="435" height="256" alt="image" src="Image_450.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark306">Figure 7.6 </a><span class="s21">Liaises with association between StaffMember and Client.</span><a name="bookmark307">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.3.6 <b>Associations and state</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">As we saw in Section 7.3.3, an objectâ€™s state is partly defined by its current attribute values. It is also partly defined by its current links. When a link to another object is created or destroyed, the object may change state. As with attribute value updates, some changes to links are significant and represent a state change. An example of link creation is when a campaign manager is assigned to a campaign. The creation of this link may be all that is needed for the campaign to be treated as commissioned, ready for work to start on advert preparation. This will affect the way that the <u>:Campaign</u> object should respond to certain messages and could be modelled as a transition to a Commissioned state.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The creation of other links is less significant and does not represent a state change. For example, when a campaign manager assigns a staff member to act as staff contact for a campaign this will not affect the behaviour of the <u>:Campaign</u> object, and thus need not be modelled as a state change.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.3.7 <b>M ultiplicity</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The <i>multiplicity </i>of an association is a description of the number of objects that can participate in the association. It reflects an <i>enterprise </i>(or <i>business</i>) <i>rule</i>; these are real-world constraints on the way that business activities are allowed to happen. Note that enterprise rules always come in pairs, because a full description of an association involves â€˜readingâ€™ it in both directions.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A familiar example is the relationship between a bank account and its designated accountholder(s). The enterprise rules that apply vary according to the type of account, as shown below.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_451.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">A sole account has <i>one and only one </i>accountholder. An accountholder has <i>one or more </i>accounts.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_452.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">A joint account has <i>exactly two </i>accountholders. An accountholder has <i>one or more</i></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">accounts.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_453.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">A business partnership account has <i>one or more </i>accountholders. An accountholder has <i>one or more </i>accounts.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In each case, we must specify both the number of accountholders that can be linked to an account, and also the number of accounts that can be linked to an accountholder. It is important to model these constraints correctly, as they may determine whether or not an operation will be permitted to execute in the software. A badly specified system might incorrectly allow an unauthorized second person to draw money from a sole account. Alternatively, it might prevent a legitimate customer from being able to draw money from a joint account. The multiplicity of an association defines upper and lower limits on the number of other instances to which any one object may be linked.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark308" class="a">We already know that in the Agate case study, each client has one and only one member of staff assigned as staffContact, while each member of staff may be assigned to zero or more clients. This is shown in Fig. </a>7.7, where each end of the association is now qualified by its multiplicity. Thus the possible number of clients allocated to a staff member ranges from â€˜zeroâ€™ to â€˜any numberâ€™, while the possible number of staff members allocated to a client must be â€˜exactly oneâ€™.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><span><img width="445" height="267" alt="image" src="Image_454.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark308">Figure 7.7 </a><span class="s21">Multiplicity of the association between Client and StaffMember.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The statement of multiplicity at each end of an association is known as a <i>multiplicity string</i><a href="part16.htm#bookmark309" class="a">. To be useful, the notation must cater for all possible multiplicities, not just â€˜exactly oneâ€™ and â€˜zero or moreâ€™. There are many variations that allow any range of values to be specified, for example 0..3, 1..5, 2..10, 3..*, or discrete values, such as 3, 5 or 19, or combinations of the two, for example 1,3,7..*. Normally, however, it is best not to restrict the multiplicity unnecessarily. Multiplicity strings are formally defined in the BNF syntax of the UML spec as shown in </a>Fig 7.8.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 87pt;text-indent: 0pt;text-align: left;"><span><img width="372" height="105" alt="image" src="Image_455.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark309">Figure 7.8 </a><span class="s21">BNF definition of the syntax for multiplicity strings.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark311" class="a" name="bookmark310">(Note that for simplicityâ€™s sake, we have omitted from this definition the optional features for ordered sequences and unique values.) </a><a href="part16.htm#bookmark312" class="a">Figs 7.9â€“</a>7.11 show some of the variations in practice (although these examples are not exhaustive).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="451" height="68" alt="image" src="Image_456.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark311">Figure 7.9 </a><span class="s21">A Campaign is conducted by zero or more Adverts, while each Advert belongs to exactly one Campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="451" height="101" alt="image" src="Image_457.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 7.10 <span class="s21">Every StaffMember is allocated to one or more Grades, while a Grade may have zero, one or more staff allocated to it.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="451" height="69" alt="image" src="Image_458.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark312">Figure 7.11 </a><span class="s21">A Poker Hand contains up to 7 Cards. Each Card dealt must be in only one Hand (although a card may still be undealt in the pack). This assumes no cheating!</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Association multiplicity conveys important information about the structure of the problem domain. Different assumptions about multiplicity have significant effects on the software design. If association multiplicities are modelled incorrectly, this may later make it impossible for the software to do things that users want it to do.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">7.3.8 <b>Operations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Operations are the elements of common behaviour shared by all instances of a class. They are actions that can be carried out by, or on, an object. The classes modelled during requirements</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">analysis represent real-world things and concepts, so their operations can be said to represent aspects of the behaviour of the same things and concepts. However, as the basic idea of an object-oriented system is that it should consist of independent, collaborating objects, it is probably better to understand operations as aspects of behaviour required to <i>simulate </i>the way that the application domain works. Another way of putting this is that operations are services that objects may be asked to perform by other objects.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: right;"><a name="bookmark313">For example, in the Agate case study, StaffMember needs an operation to calculate the amount of bonus pay due for a staff member, because other objects may request this information. And, since staff bonus is partly based on the profit of each campaign a member of staff has worked on, a </a><u>:StaffMember</u> object will ask the relevant <u>:Campaign</u> objects for this information. Therefore Campaign needs an operation to calculate the profit for each campaign. The decision to model StaffMember with an operation to calculate its own bonus does not mean that we think a real member of staff has responsibility for calculating her own bonus. Nor are real (but abstract) campaigns capable of calculating their own profitâ€”or anything else, for that matter. This is an appropriate way of simulating the real-world behaviour, but it does not imply that the model is identical to the reality. However, the ability to carry out these tasks is a</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">requirement of the system and the behaviour must be located somewhere in the model.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">From an analysis perspective, we do not need to be concerned with the details of how each operation will work. But we do need to make a good first guess at which operations to include. As a general rule, <i>primary </i>operations are excluded from the analysis model. These are: <i>constructor </i>operations, which create new instances of a class, <i>get </i>operations, which return attribute values in response to messages from other objects and <i>set </i>operations, which update attribute values.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a">We must also make a preliminary judgement about where to locate operations within classes. This is mainly based on thinking about class responsibilities, and does not necessarily mean that the classes will be implemented in the same way. From a design perspective, we may reach very different conclusions about where best to locate operations. Some may be delegated in part, or in full, to objects of other classes. Later in this chapter we introduce CRC cards and in </a>Chapter 9 we introduce interaction diagrams, two techniques that can be used to help with the allocation of responsibilities to classes in a coherent manner.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark314" class="a">Operations are defined for a class and are valid for every instance of the class. Figure </a>7.12 shows some examples of operations for the Agate case study.</p><p style="padding-left: 49pt;text-indent: 0pt;text-align: left;"><span><img width="472" height="473" alt="image" src="Image_459.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark314">Figure 7.12 </a><span class="s21">Partial class diagram for Agate, with some attributes and operations.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Operation names are shown in the third compartment of the rectangular class symbol. As for attributes, operation names are written beginning with a lower-case letter. There is no separate notation for showing the operations of an object instance. In this respect, operations are unlike attributes and associations, in that they have exactly the same significance for instances as they do for classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The effects of an operation can include changing the characteristics of an object, for example, updating an attribute value. Another effect may be to change an objectâ€™s links with other objects, for example assigning <u>:StaffMember</u> to work on <u>:Campaign</u>. (The creation of this link will be necessary for that member of staff to earn a bonus from the campaign profits.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some operations delegate part of their work to other objects. One example that we mentioned earlier is StaffMember.calculateBonus(). This operation needs data that is obtained by calling Campaign.getCampaignContribution() for each associated campaign in order to arrive at its result. Individual operations often represent only small parts of larger tasks that are distributed among many objects. A relatively even distribution of computational effort is desirable, and this is a big step on the way to building a modular system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.3.9 <b>Operations and state</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark315">An objectâ€™s operations and its state behaviour are related in two ways. First, it is only through the execution of an operation that an object can change its state. In fact, this is just another way of saying that an attribute cannot store or update its own values, nor can a link make or break itself. It also illustrates encapsulation in action, since it is only through invoking an objectâ€™s operations that another object can get it to do anything at allâ€”change its data, create or destroy links, or even respond to simple queries. Secondly, the way that an operation can respond when it is invoked by a message often depends on the objectâ€™s current state. In the</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark318">ATM cash card example described earlier, the behaviour of the withdraw() operation depends on whether y</a><u>ourCard</u> is in the Active or the Barred state. In other words, it depends on the current value of the attributes dailyLimit and dayTotal.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark492" class="a">Alternative courses of action, and the basis for choosing between them, are included in the detailed definition of an operation (we describe this in </a>Chapter 10).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.3.10 <b>Stability of the analysis class diagram</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark316">The description of each class (its attributes, operations and associationsâ€”i.e. the specification of what it knows and what it can do) is likely to be relatively stable, and will probably only change as a result of major changes in the way that business itself operates. By contrast, object instances change frequently, reflecting the need for the system to maintain an up-to- date picture of a dynamic business environment. Instances are subject to three main types of change during system execution.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">First, they are created. For example, when Agate undertakes a new campaign, details are stored in a new Campaign object. When a new member of staff is recruited, a corresponding StaffMember object is created.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Second, they can be destroyed. For example, after a campaign is completed and all invoices are paid, eventually there comes a time when it is no longer of interest to the company. All information relating to the campaign is then deleted by destroying the relevant Campaign instance.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Finally, an object can be updated, which either means a change to one or more of its attribute values, or it means a change to its links with other objects. In either case, this is typically done to keep the object in step with the thing that it represents. For example, a client may increase the budget for a campaign, in order to cover a longer run of a TV  commercial than was originally planned. To reflect this, the budget value set in the corresponding Campaign object must also be changed. Many objects in the analysis model are relatively long-lived and some are updated frequently during their lifetime.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="25" alt="image" src="Image_460.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.4 </a><a href="part4.htm#bookmark4" class="s29">U se Case Realization</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.4 </a><a href="part4.htm#bookmark4" class="s29">U se Case Realization</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.4 </a><a href="part4.htm#bookmark4" class="s29">U se Case Realization</a></p><p class="s13" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark317">Realization </a><span class="p">is the name given in UML to the activity of developing an abstract model or element into another model or element that is closer to its implementation. Use cases are realized by a series of models that culminate in the implementation of software that adequately fulfils the requirements identified by the use case. To move from an initial use case ultimately to the implementation of software involves at least one iteration through all of the development activities, from requirements modelling to implementation. In this chapter, we are interested in producing an analysis model, and this consists mainly of the analysis class diagram. Initially, we will develop separate analysis class diagrams for each use case, based on the collaboration and using communication diagrams to refine our allocation of attributes and operations to classes. These separate use case class diagrams can then be combined into larger diagrams that together will comprise a class model for the application as a whole.</span></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><a href="#bookmark254">We will illustrate this with the use case Add a new advert to a campaign, introduced in Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark318" class="a">6.9. </a><a href="part9.htm#bookmark254" class="a">Figure </a>7.13 repeats the use case diagram, and the series of figures that follow show some of the alternative ways that the use case can be represented, viewing it both from different perspectives and at different levels of abstraction. Some of the notation used in the diagrams may not mean much yet, but do not worry about this. It will be explained step by step later in the chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"><span><img width="358" height="103" alt="image" src="Image_461.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 7.13 <span class="s21">Use case diagram for Add a new advert to a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark319">Among other things, use case realization involves the identification of a possible set of classes, together with an understanding of how those classes might interact to deliver the functionality of the use case. The set of classes is known as a </a><i>collaboration</i><a href="part16.htm#bookmark320" class="a">. The simplest representation of a collaboration is shown in </a>Fig. 7.14.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 61pt;text-indent: 0pt;text-align: left;"><span><img width="442" height="199" alt="image" src="Image_462.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark320">Figure 7.14 </a><span class="s21">A collaboration can realize a specific use case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">You can see immediately that this tells us little except that the collaboration has a relationship with a use case. However, this can be useful in itself. In particular, the <i>dependency </i>arrow signifies that the specification of the collaboration (together with the specifications of any classes or other components that it includes) must maintain a reference to the use case. Later, we will see many more examples of dependencies between one model element and another (this notation is particularly useful when the elements are in different packages).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark322" class="a" name="bookmark321">Figure </a>7.15 gives a more detailed view of the collaboration, which shows the objects that participate in the collaboration and the links between them. These are the objects that will interact, when implemented as software, in such a way as to achieve the result described by the use case. This view of the collaboration still doesnâ€™t tell us how they interact, nor does it show how they relate to other parts of the model. All details that are not directly relevant to the collaboration are suppressed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><span><img width="422" height="303" alt="image" src="Image_463.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark322">Figure 7.15 </a><span class="s21">Collaboration for Add a new advert to a campaign.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">A <i>communication diagram </i><a href="part16.htm#bookmark323" class="a">is one of the most useful views of the internal details of a collaboration, since it shows explicitly the interaction between objects. Figure </a><a href="part16.htm#bookmark322" class="a">7.16 adds interaction to the collaboration in </a><a href="part18.htm#bookmark418" class="a">Fig. 7.15. Donâ€™t be too concerned about making full sense of this diagram for the moment (the notation for communication diagrams is covered in more depth in </a>Chapter 9). The important thing to notice is that it shows how the objects that take part in the collaboration may communicate with each other.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="348" alt="image" src="Image_464.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark323">Figure 7.16 </a><span class="s21">Communication diagram for Add a new advert to a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Interaction shown in a communication diagram takes the form of messages between objects, and the example shown here assumes quite a lot of understanding about the behaviour of the individual objects shown. Initial communication diagrams will not often be this detailed, as we will see later in this chapter.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark324" class="a">Finally (for the time being, at any rate), a collaboration can be represented as a class diagram. Figure </a><a href="part16.htm#bookmark323" class="a">7.17 shows a class diagram for this example (and, during a first iteration through requirements analysis, this is as far as we need to go). This has structural and notational similarities to the collaboration </a><a href="part16.htm#bookmark322" class="a">in Fig. </a><a href="part16.htm#bookmark323" class="a">7.15 and the communication diagram in </a><a href="part16.htm#bookmark323">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark323" class="a">7.16. There is a class for each object, some classes in the class diagram have </a>associations that correspond to the links between objects in the communication diagram and the classes have operations that correspond to messages in the communication diagram.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="272" alt="image" src="Image_465.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark324">Figure 7.17 </a><span class="s21">Analysis class diagram for Add a new advert to a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark322" class="a" name="bookmark325">In this example, however, even the obvious differences are perhaps more apparent than real. For example, this class diagram shows a lot of the internal detail of the classes. Collaborations and communication diagrams can show some (though not all) of these details if this is desired. Also, some links between objects in Fig. </a>7.15 have no corresponding association in the class diagram. The reason for this will be explained a little later in this chapter.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark320" class="a">At this point, it is worth saying a little more about the purposes of all these diagrams. The collaboration icon in </a><a href="part16.htm#bookmark322" class="a">Fig. 7.14 is in itself simply a high-level abstraction that can stand for any of the other forms. The diagrams in </a><a href="part16.htm#bookmark324" class="a">Figs. 7.15â€“</a><a href="part18.htm#bookmark418" class="a">7.17 show some of the intermediate forms that realize a use case during the progressive and iterative development of the resulting software. Each form in this series is, in a sense, one step closer to executable code. Each also serves a particular modelling perspective. For instance, a collaboration identifies the participating objects and the links between them, but ignores messages and the internal details of objects. A communication diagram highlights interaction among a group of collaborating objects, although it can be hard to read the sequence of messages if the collaboration is complex. A class diagram ignores interaction, but shows the structure in more detail and usually shows a lot of the internal features of the classes. Collaborations can also be expressed in other ways that do not concern us so much from an analysis perspectiveâ€”for example, interaction sequence diagrams hide most of the structure but display the sequence of messages with greater clarity (sequence diagrams are explained in Chapter </a>9). These other representations are useful for the design, test or implementation perspectives of the system model.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="247" height="25" alt="image" src="Image_466.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.5  </a><a href="part4.htm#bookmark4" class="s29">Drawing a Class Diagram</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.5  </a><a href="part4.htm#bookmark4" class="s29">Drawing a Class Diagram</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.5  </a><a href="part4.htm#bookmark4" class="s29">Drawing a Class Diagram</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark326">7.5.1 </a><b>Robustness analysis</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark327">There are several ways to produce an analysis class diagram for a use case, but we will mainly follow an approach known as robustness analysis, which was originally proposed by Rosenberg (1999). The essence of robustness analysis, and the reason for its name, is that the approach aims to define a set of classes that are robust enough to meet all the requirements of the use case. We will illustrate the process of developing an analysis class diagram in detail in Section 7.5.3. Later, in Section 7.6, we will introduce the Classâ€“ Responsibilityâ€“Collaboration (CRC) cards technique. CRC cards can be used either on their own or they can be used to complement the robustness analysis approach. Before going any further, however, it is necessary to explain the concept of analysis class stereotypes.</a></p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.2 <b>Analysis class stereotypes</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a">These represent particular kinds of class that will be encountered again and again during analysis, and their use in modelling a use case is fundamental to the robustness analysis approach. (UML stereotypes were introduced in </a>Chapter 5.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Instances of a stereotyped class have a shared focus on certain kinds of task, which distinguishes them in a significant way from classes that are instances of another stereotype. It is often useful to identify this in our models. The everyday use of the word stereotype is not so very different. For example, if a friend says that the roles played by Arnold Schwarzenegger in his movies are quite stereotyped, you would probably understand that they think his characters are all similar to each other in certain ways, even though the plot and context may vary a lot from one film to another. Thus, if you know that Schwarzenegger is the star of a film that you are going to see, you already have some idea of what the film will be like, and also of some of the ways that it might differ from a Leonardo DiCaprio film.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">UML is designed to be capable of extension, and developers can add new stereotypes where there is a clear need to do so. We need only concern ourselves at this point with three widely used analysis class stereotypes: <i>boundary</i>, <i>control </i>and <i>entity </i><a href="part38.htm#bookmark1211" class="a">classes. These date from the pre-UML work of Jacobson (Jacobson et al., </a><a href="part38.htm#bookmark1260" class="a">1992). Their use today in analysis modelling is recommended by a number of leading authors, including Rosenberg and Scott </a><a href="part38.htm#bookmark1102" class="a">(2001), whose approach is based partly on these stereotypes, and </a>Ambler (2004).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is not always necessary to stereotype classes. Nor, if classes are stereotyped, is it always necessary to show the stereotype of a class on diagrams. Stereotypes are shown where they add useful meaning to a model, but their use is not obligatory. In many diagrams shown later in this book, the stereotype is omitted, either because it can be assumed from the context or because it has no specific relevance to the purpose of the diagram.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">B oundary classes</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="a">Boundary classes â€˜model interaction between the system and its actorsâ€™ (Jacobson et al., 1999). Since they are part of the requirements model, boundary classes are relatively </a>abstract. They do not directly represent all the different sorts of interface widget that will be used in the implementation language. The design model may well do this later, but from an analysis perspective we are interested only in identifying the main logical interfaces with users and other systems. This may include interfaces with other software and also with physical devices such as printers, motors and sensors. Stereotyping these as boundary classes emphasizes that their main task is to manage the transfer of information across system boundaries. It also helps to partition the system, so that any changes to the interface or communication aspects of the system can be isolated from those parts of the system that provide the information storage or business logic.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark323" class="a" name="bookmark328">The class User Interface::AddAdvertUI (shown in the communication diagram in Fig. </a><a href="part16.htm#bookmark324" class="a">7.16 and in the class diagram in </a><a href="part9.htm#bookmark171" class="a">Fig. 7.17) is a typical boundary class. This style of writing the name shows that the class is AddAdvertUI (the UI is just an abbreviation for user interface) and it belongs to the User Interface package (the concept of packages was introduced in Chapter </a>5). When we write the package name in this way before the class name, it means that this class is imported from a different package from the one with which we are currently working. In this case, the current package is the Agate Application package, which contains the application requirements model, and thus consists only of domain objects and classes. As its name suggests, the User Interface package contains only user interface classes. While some of these may be developed specifically for the current application, they are placed in a separate package for ease of management.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If this is an early iteration of the analysis workflow, we are unlikely to know what the user interface will look like, how it will behave, or even the programming language or application package in which the software will be written. These are all design decisions. However, we know that some sort of interface is needed to manage communication with the user, and we can already identify its main responsibilities, modelled for now as operations. In effect, boundary classes shown in analysis models are little more than placeholders for the â€˜realâ€™ boundary classes that will be specified in much more detail in the design model.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark329" class="a">On class diagrams and communication diagrams, the stereotype of a class can be shown in different ways. </a>Figure 7.18 shows the different symbols for a boundary class.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="265" alt="image" src="Image_467.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark329">Figure 7.18 </a><span class="s21">Alternative notations for the boundary class stereotype.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Entity classes</p><p class="s41" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark358" class="a" name="bookmark330">Entity classes</a>1<a href="part38.htm#bookmark1210" class="a"> model â€˜information and associated behaviour of some phenomenon or concept such as an individual, a real-life object or a real-life eventâ€™ (Jacobson et al., </a><a href="part16.htm#bookmark324" class="a">1999). The three classes Client, Campaign and Advert in Fig. </a><span class="p">7.17 are all examples of entity classes (since these exist within the current package, their package name does not need to be made explicit). As a general rule, entity classes represent something from the application domain, external to the software system, about which the system must store some information. The thing they represent might be quite abstract, for example, a campaign, or it may be quite concrete, for example a member of staff.</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark332" class="a" name="bookmark331">Instances of an entity class usually require persistent storage of their information. This can sometimes help to decide whether an entity class is the appropriate modelling construct. For example, actors are not automatically represented as entity classes, although they can be when it is appropriate. Actors are within the application domain, external to the software system and important to its operation. But not all systems necessarily need to store information about their users, or need to model user behaviour. There are obvious exceptions to this, for example a system that monitors user access for security or audit purposes must store information about those users. In that case, the user would be modelled appropriately as an entity class as well as an actor, since the requirements for such a system would include storing information about users, monitoring their system access and tracking their actions while logged on to a network. Sometimes these are specialist applications in their own right. In any case, when actors are also modelled as entity classes this is because the software needs to store information about the people who use it, and not simply because they are actors in relation to the system. </a>Figure 7.19 shows the symbols for an entity class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;"><span><img width="467" height="136" alt="image" src="Image_468.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark332">Figure 7.19 </a><span class="s21">Alternative notations for an entity class.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C ontrol classes</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="a">Control classes â€˜represent coordination, sequencing, transactions and control of other objectsâ€™ (Jacobson et al., </a><a href="part16.htm#bookmark324" class="a">1999). The class Control::AddAdvert in Fig. </a>7.17 is an example (again note</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark334" class="a">the explicit package name). Figure </a><a href="part38.htm#bookmark1102" class="a">7.20 shows the symbols for a control class. In UP, it is generally recommended that there should be a control class for each use case. Some authors, for example, Ambler </a>(2004), recommend one control class for each business rule, but ultimately the number of control classes that get implemented will be a design decision. Control classes represent the calculation and scheduling aspects of the logic of their use cases</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark333">â€”at any rate, those parts that are not specific to the behaviour of a particular entity class and that are specific to the use case. Meanwhile the boundary class represents interaction with the user and the entity classes represent the behaviour of things in the application domain and storage of information that is directly associated with those things (possibly including some elements of calculation and scheduling).</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="475" height="106" alt="image" src="Image_469.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark334">Figure 7.20 </a><span class="s21">Alternative notations for a control class.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the next section we will examine the practical aspects of drawing a class diagram, in particular, where to look for the necessary information, and also a recommended sequence for carrying out the various tasks. However, neither the information sources nor the sequence of tasks are intended to be prescriptive. Nor do we try to cover every eventuality on every project. Experienced analysts will always use their own judgement on how to proceed in a given situation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.3 <b>Identifying classes</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The first practical step in use case realization is to identify potential classes that can provide the required functionality. In this section we illustrate how to do this by following a robustness analysis approach.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a">In parallel with analysing the static structure shown on class diagrams, we are also interested in the dynamic interaction among classes. This, too, can be derived from use cases and is shown on communication diagrams. Interaction is often further explored using sequence diagrams, especially where the interaction is complex. In practice, these are often developed side-by-side with the class diagrams. In this chapter, however, we will concentrate mainly on the notation and development of the class diagram. Object interaction is left for detailed consideration in </a>Chapter 9.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="a">Identifying the objects involved in a collaboration can be difficult at first, and takes some practice before the analyst can feel really comfortable with the process. Many texts, including the authoritative text on USDP (Jacobson et al., </a>1999), give little guidance for the novice on how to carry out the task. These authors suggest that a collaboration (i.e. the set of classes that it comprises) can be identified directly for a use case, and that, once the classes are known, the next step is to consider the interaction among the classes and so build a communication diagram. We believe that it is usually easier to identify classes through considering their interaction together with their static structure. But it is worth stressing again that first-cut models are often tentative, and may be refined and modified more than once during later iterations.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Since the starting point is the use case, an extended version of a use case description is repeated below (for simplicity, we ignore alternative courses).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The task is to find a set of classes that can interact to realize the use case. This means thinking about those things and concepts in the application domain that are important to the goals of the use case. We know from the use case diagram that the campaign manager is the actor. The use case description tells us how the system should respond to the actorâ€™s various inputs, such as selecting a client by name. The objective of this use case is to allow the manager to assign staff to a campaign.</p><p class="s21" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">Use case description: <b>Assign staff to work on a campaign</b></p><p class="s39" style="padding-top: 5pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">Actor Action                 System Response</p><p class="s21" style="padding-top: 4pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">1. None                    2. Displays list of client names</p><p class="s21" style="padding-top: 3pt;padding-left: 45pt;text-indent: -9pt;text-align: left;">3. The actor (a campaign manager) selects the client name</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">4. Lists the titles of all campaigns for that client</p><p class="s81" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;line-height: 63%;text-align: left;">5. Selects the relevant campaign       <span class="s21">6. Displays a list of all staff members not already</span></p><p class="s21" style="padding-left: 234pt;text-indent: 0pt;line-height: 8pt;text-align: left;">allocated to this campaign</p><p class="s21" style="padding-top: 3pt;padding-left: 45pt;text-indent: -9pt;text-align: left;">7. Highlights the staff members to be assigned to this campaign</p><p class="s21" style="padding-top: 3pt;padding-left: 45pt;text-indent: -9pt;text-align: left;">8. Presents a message confirming that staff have been allocated</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Letâ€™s begin by picking out the important things or concepts in the application domain. A first list might include: campaign manager, client name, campaigns, client, staff. But we are only interested in those about which the system must store some information or knowledge in order to achieve its objectives. The campaign manager will be modelled initially as an actor because we know that he or she is the user. It is possible that the system may need to encapsulate further knowledge about the campaign manager, for example, in order to ensure that only an authorized party can execute this use case, but we will leave that consideration to one side for the moment. We can also eliminate client name, since this is part of the description of a client. That leaves Client, Campaign and StaffMember in the collaboration.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a">Next, we begin work on a communication diagram using these classes. This will help us to see whether they are all needed, and whether any other, less obvious, classes are needed too. It will also help us to identify their structure. (Note that our use of communication diagrams in this chapter is limited to identifying classes for a use case. They are covered in greater depth in </a>Chapter 9.)</p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark359" class="a" name="bookmark335">Figure 7.21 shows an initial collaboration for this use case.</a>2<a href="part16.htm#bookmark323" class="a"> This is not yet a communication diagram (hence the differences in both detail and structure from the more highly developed diagram for Add a new advert to a campaign in </a><span class="p">Fig. 7.16. That, as we shall see over the next few pages, was the result of further analysis). So far, we have identified the main participating entity objects, their classes and some probable links that might carry suitable messages.</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark336" class="a">In Fig. </a>7.21, we have shown only entity object icons and links, because we have not yet thought about other details that will be added later. Once a class diagram has been derived from this relatively simple communication diagram, it will eventually grow quite complex. Nevertheless it is a good start at abstracting some useful details from a description that may be cluttered with many irrelevant facts. As more detail is added to the class diagram, it will soon be much easier to absorb and less ambiguous than the corresponding textâ€”subject, of course, to the modellerâ€™s skill and comprehension. In real life, of course, even first-cut models are often more complicated than this, and a great deal more effort may be needed to arrive at a preliminary understanding.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><span><img width="385" height="115" alt="image" src="Image_470.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark336">Figure 7.21 </a><span class="s21">Initial collaboration for Assign staff to work on a campaign (not yet a communication diagram, as no messages are shown).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark336" class="a">The diagram in Fig. </a>7.21 does not yet show any boundary or control objects, and these must be added. It is also based on certain assumptions about how the interaction between objects would take place, and we must make these assumptions explicit and question them. The diagram implies that there will be a linear flow of messages, along the following lines. An initial message could be directed to a Client, which is assumed to know its Campaigns. Each Campaign is also assumed to know which StaffMembers are currently assigned to it, and which are not.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark337" class="a">Although we are primarily concerned with analysis questions at present, this scenario raises some serious design issues. In particular, it effectively locates control of the use case within the client object, which would give this class responsibility for tasks that are not directly relevant to the responsibilities of a Client. The introduction of a control object allows this responsibility to be encapsulated separately from the application domain knowledge that the entity classes represent. Figure </a>7.22 shows the collaboration after this refinement. Also, all links have now been routed centrally through the control object. This means that no entity class can directly request any information from any other entity class. Instead, each entity object must now ask the control object for any information it needs from an object of a different class, since the control object is the only one with a link that enables it to get the information. For example, the control object will need to keep track of which Client, Campaign and StaffMember objects participate in the current interaction. A boundary object has been added too. This will be responsible for the capture of input from the user and the presentation and display of results. In a limited sense, we have begun to design a software architecture that will allow a great deal of flexibility as to how the system will be implemented.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;"><span><img width="435" height="209" alt="image" src="Image_471.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark337">Figure 7.22 </a><span class="s21">Boundary and control objects added to the collaboration, giving a different view on how the interaction might work.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark337" class="a">The collaboration in Fig. </a><a href="part16.htm#bookmark338" class="a">7.22 is still drawn using the stereotype icon symbols for objects, but it could equally well be represented using rectangular object symbols, as shown in </a><a href="part16.htm#bookmark338">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part16.htm#bookmark338" class="a">7.23. This also adds the communication diagram frame, some messages and links </a><a href="part16.htm#bookmark338">between</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark338" class="a">:Client, :Campaign and :StaffMember. These links address the question of how a Client can be responsible for knowing its own Campaigns, or how a Campaign can know the StaffMembers who are assigned to it. Taken together, the sequence of messages in </a>Fig. 7.23 shows how the interaction might work.</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"><span><img width="500" height="318" alt="image" src="Image_472.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark338">Figure 7.23 </a><span class="s21">This communication diagram shows a more detailed version of the collaboration.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We can expand this as follows. First, the user interface starts and then the control object is instantiated. The control object then obtains a list of Clients, and we can assume that it asks the boundary object to display them, although this message is not yet shown. It then asks a Client for a list of its Campaigns. The link suggests that the Client may be able to obtain some information directly from the Campaign objects themselves (perhaps which ones are associated with the Client, along with their names or status), but this message, too, is not yet shown. The control object then directly asks a selected Campaign for information about itself. Next, it asks StaffMembers for some of their details (perhaps to find out which ones are already assigned to a Campaign). At each point, since much of the information flow is routed through the control object, we can assume that it asks the boundary object to display a chunk or set of information. Finally, the control object instructs each selected StaffMember to assign itself, which it does by sending messages to the Campaign.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><a href="part16.htm#bookmark338" class="a">Figure </a>7.23 illustrates a number of general notational points. The object symbols in a</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a">collaboration or communication diagram represent the lifelines of individual object instances, not classes. This is indicated by the colons before each class name; remember that these indicate anonymous instances rather than classes. Class names are always written in the singular, although we know there are many staff, campaigns, adverts, etc. This convention reinforces the view of a class as a descriptor for a collection of objects, rather than the collection itself. Another convention (derived from object-oriented programming style) is that most names are written in lower case, but classes are capitalized at the beginning of the name. Multiple words are run together, punctuated by upper case letters at the start of each new word to improve readability: for example, the control class AssignStaff. Note, however, that use case names, such as Assign staff to work on a campaign, are written in sentence case, while operation names, such as getClients, are run together with initial capitals after the first word. An asterisk (*) indicates that a message may be iterated. For example 3*:get clients() refers to a request for the details of more than one client. Iteration in sequence and collaboration diagrams are explained further in </a>Chapter 9.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Figure 7.24 shows almost the same collaboration using the stereotype icon notation. Other</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">changes are minor. We have added messages between Client and Campaign and between Campaign and StaffMember. We have arrived at an initial judgement about how to distribute the responsibility for this use case among the various collaborating objects (this is shown by the sequence and labelling of the messages).</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="502" height="301" alt="image" src="Image_473.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark339">Figure 7.24 </a><span class="s21">Alternative notation for a slightly refined version of the diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark340" class="a">The final diagram (for the moment) in this set is shown in </a><a href="part16.htm#bookmark338" class="a">Fig. 7.25. In this version, the first message is sent by the control object to request a list of clients. This allows the interface object to be populated with the client list immediately upon instantiation. The preliminary versions of the interaction shown in Figs </a><a href="part16.htm#bookmark339" class="a">7.23 and </a>7.24 focused on how the entity classes might share responsibilities, but did not adequately address the flow of information to and from the actor. Several other changes to the sequence of messages follow from more careful analysis of the scenario. Even this is still a simplified version of the full interaction, with many details left to be determined by further analysis. For example, we will still need to think about the signatures of the operations that the messages will call. This will be important to understanding the interaction as a whole. But, while some issues remain to be clarified, this diagram approaches the level of understanding that we need in order to develop a robust class model capable of fully supporting the use case. But remember, too, that no decisions made at this stage are necessarily final, and we may well need to make several iterations through this activity before we achieve a full understanding.</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="548" height="355" alt="image" src="Image_474.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark340">Figure 7.25 </a><span class="s21">Near-final communication diagram for Assign staff to work on a campaign.</span><a name="bookmark341">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.4 <b>From communication diagram to class diagram</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark342" class="a">The next step is to produce a class diagram that corresponds to each communication diagram, which in turn is a realization of a use case. The class diagram that corresponds to the use case Assign staff to work on a campaign is shown in </a>Fig. 7.26.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="291" alt="image" src="Image_475.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark342">Figure 7.26 </a><span class="s21">Class diagram for the use case Assign staff to work on a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Provided that the communication diagrams are the result of reasonably careful analysis, the transition is not usually difficult. For a start, there are some obvious similarities between the two diagrams, although there are also some important differences.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">First, consider the similarities. Both show class or object symbols joined by connecting lines. In general, a class diagram has more or less the same structure as the corresponding</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">communication diagram. In particular, both should show classes or objects of the same types. Any of the three analysis stereotype notations for a class can be used on either diagram, and stereotype labels (if used) can also be omitted from individual classes, or from an entire diagram.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Next, we examine the differences, some of which are less obvious than others. Perhaps the most obvious difference is that an actor is often shown on a communication diagram, but rarely shown on a class diagram. This is because the communication diagram represents a particular interaction (for example, one that supports a specific path through a single use case) and the actor is an important part of this interaction. Actors <i>can </i>be shown on a class or object diagram when necessary, and they usually <i>are </i>if the actor is to be represented by a classâ€”we mentioned this possibility earlier, in the discussion about entity classes in Section 7.5.2. However, a class diagram shows the more enduring structure of associations among the classes and frequently supports a number of different interactions that may represent several different use cases.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some subtler details are associated with this change in conceptual emphasis. First, a communication diagram contains only object instances, while a class diagram (as its name suggests) usually contains only classes. This is visible (but maybe not obvious) in the names given to the class and object symbols on each diagram. A class diagram can contain instances too, but this is relatively unusual in practice. Another difference is that connections between object symbols on a communication diagram symbolize links, while connections on a class diagram stand for associations between classes. This is why some links have not been shown on the class diagramâ€”those between AssignStaffUI and AssignStaff and between AssignStaff and Client. Transient boundary and control objects like these are created only when needed during the execution of the software, while entity objects and their links normally endure beyond one cycle of execution, and probably therefore require persistent storage. But the classes  that  boundary  and  control  objects  instantiate  are  important  aspects  of  the requirements, and so they are still included in the class diagram. As the model develops, we can anticipate that these classes will be located in separate packages. But, since the class diagram is essentially a model of static structure, we take the view that their transient links do not need to be modelled in an analysis class diagram; hence their omission here. By contrast, a communication diagram shows the dynamic interaction of a group of objects and thus every link needed for message passing is shown.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Next, the labelled arrows alongside links represent messages between objects. On a class</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">diagram, associations are usually labelled, but messages are not shown.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark343">Finally, there are differences in the class and object symbols. Although any stereotype symbol can be used on either diagram, there are differences in this notation. When the rectangular box variant of the notation is used in a communication diagram it represents the lifeline of an object instance rather than a class, is normally undivided and contains only the class name (optionally, together with the object name). On a class diagram, the symbol is usually divided into three compartments that contain in turn the class name (optionally, together with its stereotype), its attributes and its operations (but all except the class name can be omitted if desired). The style of instance names also differs slightly. On a class or object diagram, instance names are underlined, while on a communication diagram instance names are not underlined (there is no need to distinguish an object from a class on a diagram that can only show objects).</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.5 <b>Other approaches to finding objects and classes</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1259" class="a">Use cases are the best place to look for entity objects, and the best way to find them is through thinking about interactions between them that support the use case, but there are other approaches. One is to first develop a domain model. For example, the domain model is a significant feature of the ICONIX method (Rosenberg and Scott, </a><a href="part18.htm#bookmark378" class="a">1999). In the approach that we follow in this book, the development of a domain model is considered to follow, rather than precede, the development of analysis class diagrams (see </a>Chapter 8). However, this is largely to make it easier to understand. We do not believe that any one approach is necessarily the best for all situations (nor, indeed, do most other writers). Where a domain model already exists, it makes sense to reuse as many classes as possible in the application analysis model. Sometimes it may make sense to produce a domain model before producing any use cases.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The key to success is iterative refinement of the models, however they are produced in the first place.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is worth reviewing any background documentation gathered during the fact-finding stage. A second reading, after an initial attempt at class modelling, can discover more classes as a result of your clearer understanding of the problem.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Ideally, user representatives will be closely involved in discussing and developing the class diagram. Nowadays users often work alongside professional analysts as part of the project team. Most projects are a learning experience for everyone involved, so it is not unusual for usersâ€™ understanding of their own business activity to grow and develop, and it is likely that users will identify a number of additional classes that were not apparent at first.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a">Your own intuition is another useful source, together with that of colleagues. And you can look for analysis patterns (an advanced technique that we will introduce in </a>Chapter 8).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">With experience these can all give guidance, but always check your intuitions with someone who knows the business well. Similarities to other projects can lead the developer to overlook important differences. As an analyst, you should remember at all times that users are the experts on the business and on what the software system should do. Your role is to make users aware of the possibilities offered by modern information systems, and to help translate their requests into a system that meets as many of their needs as possible.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1263" class="a">However you approach the identification of classes, it helps to have a general idea of what you are looking for. Some pointers have been developed over the years that help to discriminate between likely classes and unlikely ones. Rumbaugh et al. </a>(1991) usefully categorized the kinds of things and concepts that are more likely than others to need representation as an entity object or class.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark344" class="a">The main categories shown in Fig. </a><a href="part9.htm#bookmark102" class="a">7.27 are based on their categories. It is best to keep a list of potential classes, with a brief description for each. A rough list is fine; it will grow over time, but many items will also be crossed out and removed. When you enter your models into a CASE tool repository (CASE tools are discussed in Chapter </a>3), these textual descriptions and definitions will be an important supplement to the diagrams. Check your list carefully as it grows. Even the most experienced analyst will probably include at first some potential classes that may cause confusion later if they are retained in the model.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="224" alt="image" src="Image_476.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark344">Figure 7.27 </a><span class="s21">Looking for objects.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Next, there are some guidelines to help you to prune out unsuitable candidate classes. For each item on the list, ask yourself the following questions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Is it beyond the scope of the system?</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">You may have included people, things or concepts that are not strictly necessary to describe the application domain that you are investigating. Remove these from your list. They may become clear from use case descriptions or from collaborations, but do not worry if the odd one slips through. There will be lots of opportunities to catch them later on. Remember, too, that only the users can finally set the system boundary.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark964" class="a">Beginners often include classes that represent the people who operate the current system, perhaps because their names or job titles appear in a use case description. It is frequently necessary to model the operators of the system as classes, but only when this is necessary to meet a requirement. An example might be an office worker handling a companyâ€™s pension scheme, who is also a member of the scheme. In this case, you may need to model them as a member of the scheme (i.e. a potential object), as well as an operator of the system (i.e. an actor). Another example (which we will discuss further in Chapter </a>19) is when the system requirements include security restrictions on which users are permitted to carry out certain transactions. In this case we would model them as an operator (an entity class called Operator, that is, or something similar) in order to be able to assign access rights to certain parts of the system or to permit some users to be able to create, update or delete data that other users can only view. However, unless there is a clear system requirement for actors to be represented as objects, there is generally no need to do so.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Does it refer to the system as a whole?</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">You may include an item that refers to the system you are modelling, or to the department or organization that contains it. It is not usually necessary for a model to contain a class that represents the entire system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Does it duplicate another class?</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">You may include two items that are really synonyms. If you are not sure, check with your users exactly what they understand by each item on the list. This should become clearer as you write the descriptions for each class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Is it too vague?</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Eliminate any potential classes for which you are unable to write a clear description, unless you are sure this is only because of a temporary lack of information.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Is it too specific?</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Unless you are modelling a specific interaction (for example, when drawing an initial communication diagram), it is usually better to model classes, rather than instances. Think carefully about any items on your list that are unique. For example, a company may currently have only one supplier, tempting you to model the specific supplier. But a supplier might be replaced tomorrow for business reasons. A class named Supplier would be unaffected by this, whereas one modelled too closely on the specific company might require modification.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Is it too tied up with physical inputs and outputs?</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Avoid modelling things that depend closely on the physical way that system inputs and outputs are currently handled. For example, the current system may involve telephone enquiries and printed order forms, but it is much too early to make a decision on whether they will play the same role in the new system. Try to think of names that express a logical meaning rather than a physical implementation: Enquiry and Order would be acceptable alternatives.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">On the other hand, physical objects that are an essential part of the business activity should be included. This can depend a lot on contextâ€”Truck may be an acceptable class in a system to co-ordinate vehicles used for parcel deliveries, but irrelevant in another system that records customer payments for the deliveries, even though invoices and payments might travel on the same truck.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Is it really an attribute?</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An attribute is a characteristic of a class. What makes this a problem is that an item that is an attribute in one domain may be a class in another, depending on the requirements. So some items on your potential class list may be better modelled as attributes. The primary test is this: does the item only have meaning as a description or qualification of another item? To illustrate this, we will look at examples that show how the significance of a date can vary between two different application domains.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the Agate case study, the significance of a staff memberâ€™s start date is to allow appropriate salary, bonus and grading calculations to be carried out. It would therefore be</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">appropriate to model staffStartDate as a single attribute of StaffMember. But now consider a weather forecasting agency, keeping daily records of atmospheric conditions, and producing analyses for different weeks, months and years. Each date may be described by many other variables, e.g. maximum, minimum and average temperature, hours of sunshine, total precipitation, average windspeed, etc. These analyses might also require separate attributes for day of the week, month and year. We might then choose to model a Date class, with the other variables as its attributes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark345">Is it really an operation?</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An operation is an action, a responsibility of a class. This can also be confusing, as some actions may be better modelled as classes. It is particularly easy to confuse the two if the use case descriptions are ambiguous. For an example of an action that can be considered as a class, consider a sale transaction. Whenever you buy something in a shop (a new CD, say), some sort of record is kept of the sale. The nature of this record depends on how the shop intends to use the information. This, in turn, determines whether we should model the sale as a class or as an operation. There are two considerations that might make a sale transaction a class rather than an operation.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_477.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">A sale may have characteristics of its own, which would be best modelled as attributes of a class, e.g. value, date, etc.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_478.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">There may be a requirement for the system to remember particular sales over a period of time, e.g. in order to respond to warranty claims or to audit the shopâ€™s accounts.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">If there is no requirement to record a history made up of individual sales, or to describe sales in terms of their value, date, etc. it may make more sense to model them as an operation of another class, perhaps as StockItem.sell(). This would probably be quite adequate if the shopkeeper was only interested in knowing the total value or quantity sold for each item. For each action on your preliminary class list, consider whether these criteria apply. If they do not, it may be an operation rather than a class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Is it really an association?</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An association is a relationship of some kind between two classes. But this too can be confusing as we may prefer to represent some relationships as classes. The sales transaction can also be counted as an example of this (a sale is both an action and a relationship). How do we decide which relationships to represent as associations, and which as classes? This can sometimes be a difficult and complex problem. You can apply a similar test to those described above for attributes and operations. If an association is something we need to describe in terms of further characteristicsâ€”if it is apparent that it has attributes of its ownâ€”then it should be modelled as a class. If it only has meaning as a relationship between two classes, leave it as an association.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark681" class="a">But the best answer at this stage is not to spend too long on making the distinction. The important thing during requirements analysis is to make sure all significant relationships are modelled, whether as classes or associations. We can review our judgements later when we understand more about the situation. Indeed, following the transition from requirements modelling to software design, it is often the case that certain types of association may be changed into classes, or further classes may be added to help implement the association effectively (this is covered in </a>Chapter 14).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.6 <b>Adding and locating attributes</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Many attributes will already appear in the use case descriptions. Others will become apparent as you think about your model in more detail. The simple rule is that attributes should be placed in the class they describe. This usually presents few problems. For example, the attributes staffNo, staffName and staffStartDate all clearly describe a member of staff, so should be placed in the Staff class.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Sometimes it is more difficult to identify the correct class for an attribute. The attribute may not properly belong to any of the classes you have already identified. An example will help to</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">illustrate this. Consider this extract from an interview with Amarjeet Grewal (Agate Finance Director):</p><p class="s27" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">Amarjeet Grewal: <span class="s7">Agateâ€™s pay structure is based on distinct grades. Directors and managers negotiate their own salaries, but other staff are placed on a grade that determines their basic salary. You can only change grade as a result of an appraisal with your line manager.</span></p><p class="s14" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">(A member of staff has one grade at a time, but it sounds like they may have several previous grades, and several members of staff may be on the same grade at the same time. Staff and Grade are probably classes with an association between them.)</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">The basic salary for each grade is fixed, usually for a year at a time. Every year after the final accounts are closed, I review the grade rates with the Managing Director, and we increase them roughly in line with inflation.</p><p class="s14" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">(A grade has only one rate at a time, though it can change, and each rate has a money value. Grade may have a rate attribute.)</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">If the company has performed well, we increase the rates by more than the rate of inflation. In case there are any queries, either from an employee or from the Tax Office, it is most important that we keep accurate records of every employeeâ€™s grades; that is, the rates for all present and all past grades, and the dates these came into force.</p><p class="s14" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: left;">(Thereâ€™s quite a lot in this bit. A grade may have several previous rates, which suggests either that Grade has multiple rate attributes, or that Rate and Grade are distinct classes. If the latter, then Rate must have a date attribute, since we need to know when it took effect. We must also record when a member of staff changes to a grade, and possibly also when they change from a grade, which suggests one or two more date attributes. Each grade has a date it came into force another attribute.)</p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">Itâ€™s actually quite complicated, because you can have an employee who changes to several different grades, one after the other, and then the rate for each grade also changes each year. So, for each employee, I have to be able to tell exactly what grade they were on for every day they have worked for the company, and also what the rate for each grade was when they were on it. This is all quite separate from bonus, which is calculated independently each year. For creative staff, bonus is based on the profits from each campaign they have worked on, and for other staff we use an average profit figure for all campaigns.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is necessarily tentative, but a preliminary analysis yields the following list of classes and attributes:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_479.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">classes: StaffMember, Grade, Rate</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_480.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">attributes:  gradeStartDate,  gradeFinishDate,  rateStartDate,  rateFinishDate, rateV alue.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark347" class="a" name="bookmark346">In order to be reasonably lifelike, we can assume some other attributes not given above, such as  staffName  and  gradeDescription,  and  also  some  other  operations,  such  as assignNewStaffGrade and assignLatestGradeRate. An initial, though incomplete, class diagram might then look like the one in Fig. </a><a href="part16.htm#bookmark348" class="a">7.28. One problem is where to put the attributes gradeStartDate and gradeFinishDate. These could be placed in Grade, but this would commit it to recording multiple start and finish dates. There may be also many members of staff associated with a grade. The computer system must be able to identify the member of staff to which each date applies, so the structure of dates that might need to be stored could grow quite complex. A similar problem occurs if date attributes are placed in Staff. The explanation for this difficulty is that these attributes do not describe either a member of staff or a grade in isolation. They only have meaning as a description of the link between a specific member of staff and a specific grade. Thus, the clearest answer is to create an additional class (called an association class) specifically to provide these attributes with a home. This is shown in </a><a href="part16.htm#bookmark348">Fig. 7.29.</a></p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="325" alt="image" src="Image_481.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark347">Figure 7.28 </a><span class="s21">Partially completed Agate class diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="386" alt="image" src="Image_482.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark348">Figure 7.29 </a><span class="s21">An association class gives a home to attributes that properly belong to a link between two objects.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">Some readers may be familiar with the relational database technique known as normalization, a technique that provides a rigorous guide to placing attributes in tables (or relations) and ensures minimum redundancy of data. The case illustrated is an example of normalization in practice, but a full treatment of the underlying theory is beyond the scope of this book. Normalization is used in object-oriented data design (this is discussed in Chapter 18) but on the whole, object-oriented approaches concentrate on capturing the structure of </a>the world as perceived by the systemâ€™s users. Unnormalized relations are therefore often</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">acceptable in an object model, provided that they correspond accurately to usersâ€™ intuitions about how their business activities are organized.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.7 <b>Adding associations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">You can find some associations by considering logical relationships among the classes in the model. Associations may be found in use case descriptions and other text descriptions of the application domain, as stative verbs (which express a permanent or enduring relationship) or as actions that need to be remembered by the system. â€˜Customers <i>are responsible for </i>the conduct of their accountâ€™ is an example of the first, while â€˜purchasers <i>place ordersâ€™ </i>is an example of the second.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a" name="bookmark349">But this is not a very reliable way of finding associations. Some will not be mentioned at all, while others may be too easily confused with classes, attributes or operations. With practice, the most important ones will be found fairly easily, and for the moment it is not important if some are missed. A full understanding of the associations in a class model can only be reached later by analysing the interaction between different classes. </a>Chapter 9 describes how to model class interaction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.8 <b>Determining multiplicity</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Since association multiplicities represent constraints on the way users carry out their business activities, it is important to get these right, and the only way to do this is to question users about each association in turn. This is true even when the existence and character of the association have been inferred from user documents. An analyst should always check what is said in documents, in case it is ambiguous, erroneous or out of date.</p><p class="s27" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">Rosanne M artel: <span class="s7">So let me be clear about this. A client must have exactly one staff contact, but a member of staff can be contact for no clients, one client or several clients. Is there an upper limit on that? A campaign must have one client, but a client can have many campaigns. Can you have a client with no campaignsâ€”say, a new client who hasnâ€™t given you any business yet?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.9 <b>Finding operations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a" name="bookmark350">Operations are really a more detailed breakdown of the high-level system responsibilities already modelled as use cases. An operation can be thought of as a small contribution of one class to achieving the larger task represented by a whole use case. They are sometimes found as action verbs in use case descriptions, but this picture is likely to be fairly incomplete until the interaction between classes has been understood in more depth. </a>Chapter 9 describes how to model class interaction. So, as with associations, do not worry if your first attempt has gaps.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">7.5.10 <b>Preliminary allocation of operations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Before attempting to allocate operations to specific classes, it is worth remembering that each entity class is only a representation of something in the application domain. As an analyst, you are trying to build a logical model that helps to understand the domain, not necessarily a replica that is perfect in every detail. Two guidelines help in deciding which class to locate each operation in, but there is not a single answerâ€”only a satisfactory fit:</p><p class="s25" style="padding-top: 5pt;padding-left: 19pt;text-indent: -13pt;text-align: justify;">1.  <span class="p">Imagine each class as an independent actor, responsible for doing or knowing certain things. For example, we might ask: â€˜What does a staff member need to know or need to be able to do in this system?â€™</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">2.  <span class="p">Locate each operation in the same class as the data it needs to update or access. However, this is often problematic, as you may not have identified all the attributes yet.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">As a general comment on this stage, the most important thing is not to expect to get things right at the first attempt. You will always need to revise your assumptions and models as your understanding grows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="375" height="25" alt="image" src="Image_483.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.6  </a><a href="part4.htm#bookmark4" class="s29">Class Responsibility Collaboration Cards</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.6  </a><a href="part4.htm#bookmark4" class="s29">Class Responsibility Collaboration Cards</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.6  </a><a href="part4.htm#bookmark4" class="s29">Class Responsibility Collaboration Cards</a></p><p class="s13" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark351">Class Responsibility Collaboration </a><span class="p">(</span>CRC<a href="part38.htm#bookmark1115" class="a">) cards provide an effective technique for exploring the possible ways of allocating responsibilities to classes and the collaborations that are necessary to fulfil the responsibilities. They were invented by Beck and Cunningham </a><span class="p">(1989) while they were working together on a Smalltalk development project. They found it helpful to think first in terms of the overall responsibilities of a class rather than its individual operations. A responsibility is a high-level description of something a class can do. It reflects the knowledge or information that is available to that class, either stored within its own attributes or requested via collaboration with other classes, and also the services that it can offer to other objects. A responsibility may correspond to one or more operations. It can be difficult to determine the most appropriate choice of responsibilities for each class as there may be many alternatives and all appear to be equally justified.</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark352" class="a">CRC cards can be used at several different stages of a project for different purposes. For example, they can be used early in a project to aid the production of an initial class diagram and to develop a shared understanding of user requirements among the members of the team. Here we concentrate on their use in modelling object interaction. The format of a typical CRC card is shown in </a>Fig. 7.30.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="403" height="137" alt="image" src="Image_484.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark352">Figure 7.30 </a><span class="s21">Format of a CRC card.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">CRC cards are an aid to a group role-playing activity that is often fun to do. A useful spin-off is that this can support team building and help a team identity to emerge. Index cards are used in preference to pieces of paper because of their robustness and the limitations that their size (approximately 15 cm Ã— 8 cm) imposes on the number of responsibilities and collaborations that can be effectively allocated to each class. A class name is entered at the top of each card and responsibilities and collaborations are listed underneath as they become apparent. For the sake of clarity, each collaboration is normally listed next to the corresponding responsibility.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1300" class="a">Wirfs-Brock et al. </a>(1990) and others recommend the use of CRC cards to enact a systemâ€™s response to particular scenarios. From a UML perspective, this corresponds to the use of CRC cards in analysing the object interaction that is triggered by a particular use case scenario. The process of using CRC cards is usually structured as follows:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_485.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Conduct a brainstorming session to identify which objects are involved in the use case.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_486.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Allocate each object to a team member who will play the role of that object.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_487.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Act out the use case. This involves a series of negotiations among the objects (played by team members) to explore how responsibility can be allocated and to identify how the objects can collaborate with each other.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_488.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Identify and record any missing or redundant objects.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1117" class="a">Before beginning a CRC session it is important that all team members are briefed on the organization of the session. Some authors (Bellin and Simone, </a>1997) recommend that a CRC session should be preceded by a separate exercise that identifies all the classes for that part of the application to be analysed. The team members to whom these classes are allocated can then prepare for the role-playing exercise by considering in advance a first-cut allocation of responsibilities and identification of collaborations. Others prefer to combine all four steps into a single session and perform them for each use case in turn. Whatever approach is adopted, it</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1198" class="a">is important to ensure that the environment in which the sessions take place is free from interruptions and conducive to the free flow of ideas (</a>Hicks, 1991).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">During a CRC card session, there must be an explicit strategy that helps to achieve an appropriate distribution of responsibilities among the classes. One simple but effective approach is to apply the rule that each object (or role-playing team member) should be as lazy as possible, refusing to take on any additional responsibility unless persuaded to do so by its fellow objects (the other role-playing team members). During a session conducted according to this rule, each role-player identifies the object that they feel is the most appropriate to take on each responsibility and attempts to persuade that object to accept the responsibility. For each responsibility that must be allocated, one object (one of the role-players) is eventually persuaded by the weight of rational argument to accept it. This process can help to highlight missing objects that are not explicitly referred to by the use case description.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An alternative strategy is for each object to be equally keen to take on a responsibility, with the final choice determined by negotiation. Irrespective of the strategy chosen, it is important that all team members understand the need for an effective distribution of responsibilities. When responsibilities can be allocated in several different ways, it is useful to role-play each allocation separately to determine which is the most appropriate. The aim normally is to minimize the number of messages that must be passed and their complexity, while also producing class definitions that are cohesive and well focused.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We illustrate how a CRC exercise might proceed by considering the use case Add a new advert to a campaign. The use description is repeated below for ease of reference.</p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">The campaign manager selects the required campaign for the client concerned and adds a new advert to the existing list of adverts for that campaign. The details of the advert are completed by the campaign manager.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This use case involves instances of Client, Campaign and Advert, each role played by a team member.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The first issue is how to identify which client is involved. In order to find the correct Client the Campaign Manager (an actor and therefore outside the system boundary from the perspective of this use case) needs access to the clientâ€™s name. Providing a client name and any other details for that client is clearly a responsibility of the Client object.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Next, the Campaign Manager needs a list of the campaigns that are being run for that client. This list should include the title, start date and finish date for each campaign. Although a Campaign object holds details of the campaign, it is not clear which object (and hence which class) should be responsible for providing a list of campaigns for a client. The team member playing the Campaign object argues that although it knows which Client object commissioned it, it does not know which other Campaign objects have been commissioned by the same Client.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark353" class="a">After some discussion, the Client object is persuaded to accept responsibility for providing a list of its campaigns and the Campaign object is persuaded that it should provide the information for this list. Once the Campaign Manager has obtained details of the campaigns for that client, she requests that the Campaign object provide a list of its adverts, to which list the new advert will be added. Since the Campaign object already has responsibility for looking after the list of adverts, it is reasonable for it to add the new advert to its list. In order to do this it must collaborate with the Advert class which, by definition, has responsibility for creating a new Advert object. This completes the analysis of the use case interaction, and the new responsibilities and collaborations that have been identified are added to the cards, as shown in Fig. </a><a href="part16.htm#bookmark323" class="a">7.31. We have already seen a preliminary communication diagram in Fig. </a><a href="part16.htm#bookmark324" class="a">7.16 and a class diagram developed from this use case in </a>Fig. 7.17. The reader is invited to refer back to these to see how CRC cards relate to the development of a requirements model.</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><span><img width="463" height="398" alt="image" src="Image_489.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark353">Figure 7.31 </a><span class="s21">CRC cards for the use case Add a new advert to a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">During a CRC session, the team can keep track of the relationships between classes by sticking the index cards on a large board and attaching pieces of thread or string to represent collaborations. This is particularly useful when CRC cards are used early in the development cycle to help produce a class diagram. The cards and pieces of thread can be a very effective prototype of the class diagram. CRC cards can also be extended in various ways. For example, superclasses and subclasses can be shown beneath the class name and some users of the technique also like to list attributes on the back of each card.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="366" height="25" alt="image" src="Image_490.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.7  </a><a href="part4.htm#bookmark4" class="s29">Assembling the Analysis Class Diagram</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.7  </a><a href="part4.htm#bookmark4" class="s29">Assembling the Analysis Class Diagram</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.7  </a><a href="part4.htm#bookmark4" class="s29">Assembling the Analysis Class Diagram</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark354">The final step that we look at in this chapter is to assemble the various class diagrams that result from use case realization into a single analysis class diagram. This may consist of a single package of entity classes (the domain model), with boundary and control classes typically located in separate packages. With large systems, the domain model alone may comprise several distinct packages, each representing a different functional subsystem of the overall system.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark355" class="a">There is usually little conceptual or technical difficulty in this step. All we really have to do is to place the various entity classes into a single class diagram. Where we find that we have defined the same class in different ways to meet the needs of different use cases, we simply assemble all of the operations and attributes into a single class definition. For example, consider the Campaign class as seen in relation to Add a new advert to a campaign and Assign staff to work on a campaign. Different use cases have suggested different operations. Putting these together results in a class that is capable of meeting the needs of both use cases. When we consider other use cases too, a more complete picture of the class emerges. The stages are illustrated in </a>Fig. 7.32.</p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="498" height="540" alt="image" src="Image_491.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark355">Figure 7.32 </a><span class="s21">Putting together different partial definitions of a class.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Integrating the various associations derived from different use cases can seem a little more problematic, but it is actually quite straightforward. The general rule is that if <i>any </i>use case requires an association, it should be included. Where there is an apparent conflict in the multiplicity values for an association, then clarification should be sought from users who understand the business rules of the organization.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark355" class="a">Figure </a><a href="part18.htm#bookmark361" class="a">7.32 illustrates the process of consolidation. A full analysis class diagram can be found in Case Study Chapter </a><a href="part9.htm#bookmark222" class="a">A3. This includes the requirements identified from many of the use cases modelled in </a>Chapter 6.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="122" height="25" alt="image" src="Image_492.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">7.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark356">In this chapter we have seen how to realize use cases, resulting in an initial version of the analysis class diagram. This is the main artefact of the analysis model. To do this, we followed the process known as robustness analysis to define boundary, control and entity classes that are closely based on the use cases in the requirements model. We have also seen how to use the CRC technique to help with the preliminary allocation of attributes and operations to classes. The important elements of the analysis model at this stage are analysis classes with attributes and operations, and associations that show the relationships between classes, together with any multiplicity constraints. Once it is complete, the analysis model will embody a good understanding of the main functional requirements for the system, in terms of its</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">responsibilities for providing services to users and to other application systems. The analysis model also defines an initial logical architecture that will be a foundation for the design work that follows. However, the model is not yet complete. For detailed design to be undertaken successfully, we must next refine the analysis model. This is the subject of the next chapter, and will involve the identification of any latent generalization and aggregation associations and any opportunities for the application of analysis patterns. These can help to simplify the structure of the model, and may also suggest opportunities for the reuse of analysis components from previous models.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:281pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">7.1  <span class="s16">Explain what is meant by â€˜use case realizationâ€™.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.2  <span class="s16">Distinguish between attribute and value.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">7.3  <span class="s16">In what sense are classes generally more stable than their instances, and why is this usually the case?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.4  <span class="s16">Distinguish between link and association.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.5  <span class="s16">What is a UML analysis model?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.6  <span class="s16">What is multiplicity, and why can it be called a constraint?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.7  <span class="s16">What is an operation?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.8  <span class="s16">How are operations related to messages?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.9  <span class="s16">What is an attribute?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">7.10 <span class="s16">Section 7.4.6 discusses the creation and destruction of links but makes no mention of updating a link when it is changed. Why is this?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.11 <span class="s16">What is a collaboration?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.12 <span class="s16">How does a communication diagram differ from a class diagram?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">7.13 <span class="s16">Outline the main steps in developing a class diagram for a use case.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">7.14 <span class="s16">What are the advantages of team members acting the parts of objects when they are developing a set of CRC cards?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark357">Case Study Work, Exercises and Projects</a></p></td></tr><tr style="height:244pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">(The following transcript gives the first part of an interview that Rosanne Martel conducted with Hari Patel, the Factory Manager in charge of FoodCoâ€™s Beechfield factory. Read this through carefully, and then carry out the exercises that follow.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s82" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">Rosanne M artel: <span class="s16">Hari, for the benefit of the tape, Iâ€™d be grateful if you could confirm that youâ€™re the manager responsible for all production at Beechfield.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">H ari Patel: <span class="s16">Yes, thatâ€™s right.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">RM  : <span class="s16">Good. Now the purpose of this interview is for me to find out about operations on the production lines. Can you tell me how this is organized?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Sure. How much detail do you want?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Can we start with those aspects that are common to all lines? That will give me a general feel, then if there are differences we can go into more detail later.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">OK, there are quite a few similarities. First, there are two main grades of shop-floor staff: operatives and supervisors. Different operatives have a range of skills, of course, but that doesnâ€™t affect the way the line works.</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:698pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s82" style="padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">RM : <span class="s16">How many operatives work on a line, and what do they actually do?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">There might be anything from around six operatives to over twenty, depending on the product. They really do all the actual work on the line, either by hand or operating a machine. This could be a semi-skilled labourer feeding in the different kinds of lettuce for salad packs, or a more skilled operator running one of the automatic mixing machines. In this factory, unlike Coppice and Watermead, the work is mostly quite unskilled.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">How many supervisors are there to each line?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Just one. They are on full-time supervision duties, and they each look after one production line.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Always the same line?</span></p><p class="s42" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">(Rosanne is trying to find out what possible classes there are. What else do you think her questions seek to discover? )</p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Well, letâ€™s just say nobody has changed line in the last couple of years.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">How about the operativesâ€”are they always on the same line too?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">No, we swap them around quite a bit. But it doesnâ€™t really matter what line an operative works on. They get paid piecework rates depending on the production run, and the rates are based on the job numbers that appear on their timesheets. Thereâ€™s a separate job number for each run.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Iâ€™d like a copy of a timesheet pleaseâ€”preferably a real one with some data, if thatâ€™s all right. We can blot out the name and staff number on the copy for confidentiality.</span></p><p class="s42" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark30" class="s83">(A sensible request. Real documents with live data are an invaluable source of information. </a>Figure B1.4 shows the timesheet that Rosanne collected.)</p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">M P: <span class="s16">Sure. Remind me when we finish, and Iâ€™ll get you one.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Thanks. Now, does one line always produce the same product?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">No, that changes from one day to the next. The production planners produce a new schedule every Friday, and this lists all the production runs for each line for the following week.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Iâ€™ll take a copy of a production schedule too, please. So the supervisor finds out on Friday what their line is working on over the next week?</span></p><p class="s42" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">(Here Rosanne is checking where the inputs come from, as well as what they contain.)</p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Thatâ€™s right.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Good, I think Iâ€™ve got that clear. Now letâ€™s talk about what happens when people come in to work. Do all the lines start up first thing in the morning?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Usually. Production runs generally last for a whole day if possible, or sometimes a half-day. Production Planning try to keep the change-overs simple, so they tend to schedule changes during breaks to avoid wasting productive time.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">The lines donâ€™t keep running all the time?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">No, they stop for coffee and meal breaks.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">What role does the line supervisor play in this?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Well, they make sure the lines have enough raw materials, and they deal with minor emergencies. They also monitor output, liaise with production control, keep track of employee absences, and so on.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Can we go through what a supervisor does on a typical run, please, step-by-step?</span></p><p class="s42" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">(Another sensible request. Asking someone to go over things again in more detail will often reveal aspects of the situation that are not obvious from a brief description.)</p></td></tr></table><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:698pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s82" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">First, they make sure everything is ready before the run starts. They check the storage area to see there is enough of each ingredient. If a long run is planned, you donâ€™t need all the ingredients ready at the beginning, but there has to be enough to keep the line running smoothly until the next supply drop. They also have to check if the staff allocated to that run have turned up. A line can usually run for a little while with one or two staff missing, but itâ€™s best to have everyone there from the start.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">How does a supervisor know what ingredients are required, and how many staff?</span></p><p class="s42" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">(A good analyst always probes to find out how, what, why, when, where and who.)</p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Every run has a job card, with this information on it. The warehouse gets a copy of the job card too, so in theory they know what supplies to deliver, to which line and when they will be needed.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Does that usually work?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">(Laughs) Sometimes!</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">What if there arenâ€™t enough staff?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Sometimes the supervisor can find a spare body on another line. Or they can run the line slower. You can manage with fewer staff if necessary, but productivity is a lot lower.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Letâ€™s say the ingredients are all ready, and all the staff are there waiting to go. What next?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">The supervisor switches on the line, and then itâ€™s mostly troubleshooting and paperwork.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">What does the paperwork involve?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Well, they start by taking the names of all the staff at the start of the run. They copy the job number from the job card to the production record sheet and all the timesheets. If it is the first time that operative has worked that week, then the supervisor makes out a new timesheet. When they start the line, they note the time on the production record sheet. Then they keep a rough note of anyone who leaves the line during a run, and how long theyâ€™re absent.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">What kind of problems does the supervisor deal with?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">The main problem is if something goes wrong with the run. Say the line breaks down. They would have to call in maintenance, record the downtime while the lineâ€™s not running, and try to find useful things for the staff to do while theyâ€™re waiting for it to be repaired. If an ingredient runs out this could also halt the line, and might mean chasing the warehouse, or contacting the farm or an outside supplier. Sometimes people go missing, or leave early because theyâ€™re sick. The supervisor has to find a replacement as quickly as possible.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Right, now letâ€™s go to the end of a run. What information is formally recorded, and by whom?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">First the supervisor notes the finish time on the production record sheet.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Iâ€™ll have one of those too, please.</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">OK, no problem.</span></p><p class="s42" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark29" class="s83">(</a>Figure B1.3 shows a blank production record sheet.)</p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">Next the supervisor phones for someone to come over from Production Control to verify the quantity produced and note this on the production record sheet. Then the supervisor totals all the absences, because if anyone has more than 15 minutesâ€™ absence, itâ€™s deducted from their total unless they have a good reason, say a medical certificate. Then they work out the total hours for each operative. If someone joined the line in mid- session they might not have a timesheet, so one is made out now and their hours are added in. By the time all that has been done, Production Control has usually checked out</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:312pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793"><p class="s16" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">the total quantity produced, and this goes on the production record sheet. After that, itâ€™s just returning unused ingredients to the warehouse, tidying up the line ready for the next run, that kind of thing.</p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">RM : <span class="s16">Thanks, that was really helpful. Now Iâ€™d like to ask about how the piecework formula works. Can you tell me what the calculation is?</span></p><p class="s82" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">H P: <span class="s16">To be honest, I can never remember the exact formula. Youâ€™d do better asking a supervisor or someone from payrollâ€¦</span></p><p class="s42" style="padding-top: 5pt;padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">Now carry out the following exercises, based on the information given in the interview transcript.</p><p class="s35" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">7.A <span class="s16">Write descriptions for the following use cases:</span></p><p class="s16" style="padding-left: 92pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Start line run</p><p class="s16" style="padding-left: 92pt;padding-right: 191pt;text-indent: 0pt;text-align: justify;">Record employee joining the line Record employee leaving the line Stop line</p><p class="s16" style="padding-left: 92pt;padding-right: 252pt;text-indent: 0pt;text-align: justify;">Record line problem End line run</p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">7.B <span class="s16">From your use case descriptions, produce communication diagrams and then class diagrams.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">7.C <span class="s16">Produce a draft analysis class diagram, initially showing only classes and associations.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;line-height: 12pt;text-align: justify;">7.D <span class="s16">Review your analysis class diagram together with the various intermediate models, and add any attributes and operations that you think are justified by your use cases. Make reasonable assumptions and add others that you think might be justified by other use cases not directly derived from the transcript.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="587" height="416" alt="image" src="Image_493.png"/></span></p><p class="s37" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_494.png"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="s6">The natural source for this subject, though now quite dated, is the â€˜Three Amigosâ€™ book on USDP (Jacobson et al., </a>1999). However this text, while authoritative, is not (in our view, at any rate) ideally suited to the novice requirements analyst.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1259" class="s6">Rosenberg and Scott </a><a href="part38.htm#bookmark1260" class="s6">(1999) and Rosenberg and Scott </a>(2001) describe in a very accessible way a process that uses UML for object-oriented modelling. ICONIX, the development process described in these books, differs in many respects from the one followed in this book, but is very much in sympathy with our aim of producing a robust class model.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1223" class="s6">Larman </a>(2005) also describes a process for using UML in object-oriented requirements modelling. Larmanâ€™s approach is very different again from the one taken in this book, and also from that recommended by Rosenberg and Scott.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_495.png"/></span></p><p class="s1" style="padding-top: 4pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark358">1 Some readers may be tempted to confuse the concept of an entity class with the similarly named â€˜entityâ€™ in relational data modelling. There are similarities (e.g. entity classes may show the same kind of logical data structure that is revealed by relational data modelling), but there is also a crucial difference. Entity classes may have complex behaviour related to their information, whereas relational entities represent pure data structures with no behavioural aspect.</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark359">2 Hand-drawn diagrams are not necessarily rough-cut or transient, although it happens that this one is both. Most UML diagrams are drawn using a modelling tool, but this does not automatically lend authority. As long as a diagram adheres to the standard, any medium is as good as any other.</a></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="281" alt="image" src="Image_496.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part15.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part17.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>

<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>A3. Agate Ltd Case Studyâ€”Requirements Analysis</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part17.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part19.htm">Next &gt;</a></p><h2 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark360">Agate Ltd</a><a name="bookmark361">&zwnj;</a></h2><p style="padding-top: 10pt;padding-bottom: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part4.htm#bookmark4" class="s28" name="bookmark362">A3.1 </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="141" height="2" alt="image" src="Image_497.png"/></span></p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark270" class="a">In this chapter we analyse the Requirements Model described in Chapter </a><a href="part16.htm#bookmark291" class="a">A2 and produce a number of use case realizations. The activities involved in use case realization are described in </a>Chapter 7 and involve the production of the following UML diagrams:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_498.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">communication diagrams</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_499.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_500.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">class diagrams that realize individual use cases analysis class model.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Use cases are initially analysed as collaborations and as communication diagrams. This helps to identify classes involved in their realization. After individual use case realizations have been developed, a combined analysis class model is produced from them. A more detailed analysis class diagram is also included to indicate how the model develops as the use cases are analysed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="235" height="24" alt="image" src="Image_501.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.2 </a><a href="part4.htm#bookmark4" class="s29">U se Case Realizations</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.2 </a><a href="part4.htm#bookmark4" class="s29">U se Case Realizations</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.2 </a><a href="part4.htm#bookmark4" class="s29">U se Case Realizations</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark270" class="a" name="bookmark363">The first use case analysed here is Add a new campaign (all the use cases are specified in </a><a href="part18.htm#bookmark364" class="a">Chapter A2). </a><a href="part18.htm#bookmark365" class="a">Figure A3.1 shows a collaboration that realizes the use case. Figure </a>A3.2 shows the communication diagram, with boundary and control classes added.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"><span><img width="369" height="155" alt="image" src="Image_502.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark364">Figure A3.1 </a><span class="s21">Collaboration for the use case Add a new campaign.</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="302" alt="image" src="Image_503.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark365">Figure A3.2 </a><span class="s21">Communication diagram for the use case Add a new campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark366" class="a">Note that the initiation of the dialogue described by the use case is not modelled explicitly (apart from the inclusion of a startInterface message). Details such as this will be added later for this system, though in some projects it may be important to model them early on. The class diagram that supports this use case (and its collaboration) is shown in Fig. </a>A3.3. Notice that the class Campaign includes only attributes that are required for the use case. The requirements analyst may identify the need for additional attributes (or functionality) while the use case is being analysed, but it is important to confirm any changes with the stakeholders. In these models we have named the constructor operation createCampaign to make it clear where in the interaction a new campaign object is created. If we were preparing a design model, the naming conventions used in object-oriented programming languages would be more appropriate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;"><span><img width="488" height="279" alt="image" src="Image_504.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark366">Figure A3.3 </a><span class="s21">Class diagram for the use case Add a new campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark369" class="a">Figures A3.4 to </a>A3.12 show the development of the use case realizations for the use cases Assign staff contact, Check campaign budget and Record completion of a campaign. The use case Record completion of a campaign involves the production of a completion note. The</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">boundary class Completed CampaignPI (we use the suffix PI to stand for printer interface) is responsible for printing the completion note.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"><span><img width="368" height="155" alt="image" src="Image_505.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark367">Figure A3.4 </a><span class="s21">Collaboration for the use case Assign staff contact.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="540" height="297" alt="image" src="Image_506.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure A3.5 <span class="s21">Communication diagram for the use case Assign staff contact.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><span><img width="466" height="311" alt="image" src="Image_507.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure A3.6 <span class="s21">Class diagram for the use case Assign staff contact.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 94pt;text-indent: 0pt;text-align: left;"><span><img width="351" height="148" alt="image" src="Image_508.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure A3.7 <span class="s21">Collaboration for the use case Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="274" alt="image" src="Image_509.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark368">Figure A3.8 </a><span class="s21">Communication diagram for the use case Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="332" alt="image" src="Image_510.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure A3.9 <span class="s21">Class diagram for the use case Check campaign budget. This version has been drawn in the Enterprise Architect modelling tool.</span></p><p style="padding-left: 94pt;text-indent: 0pt;text-align: left;"><span><img width="352" height="148" alt="image" src="Image_511.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure A3.10 <span class="s21">Collaboration for the use case Record completion of a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="221" alt="image" src="Image_512.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure A3.11 <span class="s21">Communication diagram for the use case Record completion of campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="304" alt="image" src="Image_513.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark369">Figure A3.12 </a><span class="s21">Class diagram for the use case Record completion of campaign.</span><a name="bookmark370">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="377" height="25" alt="image" src="Image_514.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.3  </a><a href="part4.htm#bookmark4" class="s29">Assembling the Analysis Class Diagram</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.3  </a><a href="part4.htm#bookmark4" class="s29">Assembling the Analysis Class Diagram</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.3  </a><a href="part4.htm#bookmark4" class="s29">Assembling the Analysis Class Diagram</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark372" class="a" name="bookmark371">The class diagram in Fig. </a>A3.13 has been assembled from the realizations for Add a new campaign, Assign staff contact, Check campaign budget and Record completion of a campaign.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="483" alt="image" src="Image_515.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark372">Figure A3.13 </a><span class="s21">Combined class diagram for four use cases.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a">Figure A3.14 shows a more fully developed class diagram that includes classes, attributes, operations and associations that have been identified from the other use cases in the Campaign Management package. This illustrates how a more detailed and complete picture of the analysis model is developed as the use cases are analysed. The use cases Add a new advert to a campaign and Assign staff to work on a campaign are analysed in </a><a href="part16.htm#bookmark324" class="a">Chapter 7. Their realizations are shown in </a><a href="part16.htm#bookmark342" class="a">Figs 7.17 and </a>7.26 respectively.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="553" alt="image" src="Image_516.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark373">Figure A3.14 </a><span class="s21">Combined class diagram after further requirements analysis.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="342" height="25" alt="image" src="Image_517.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.4  </a><a href="part4.htm#bookmark4" class="s29">Activities of Req uirements Analysis</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.4  </a><a href="part4.htm#bookmark4" class="s29">Activities of Req uirements Analysis</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A3.4  </a><a href="part4.htm#bookmark4" class="s29">Activities of Req uirements Analysis</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark375" class="a" name="bookmark374">Figure </a><a href="part18.htm#bookmark376" class="a">A3.15 shows an activity diagram that illustrates the relationship between the requirements models and the products of requirements analysis. The activity diagram in </a><a href="part18.htm#bookmark376">Fig. A3.16 shows the main activities involved in use case realization.</a></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;"><span><img width="468" height="297" alt="image" src="Image_518.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark375">Figure A3.15 </a><span class="s21">High-level activity diagram for Requirements analysis.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><span><img width="506" height="371" alt="image" src="Image_519.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark376">Figure A3.16 </a><span class="s21">Activity diagram describing analysis use case realization.</span></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="244" alt="image" src="Image_520.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:345pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark377">LEARNING OBJECTIVES</a><a name="bookmark378">&zwnj;</a></p></td><td style="width:95pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_521.jpg"/></span></p></td></tr><tr style="height:108pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 34pt;padding-right: 142pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_522.jpg"/></span><span class="s17"> </span>the significance of reuse in software development <span><img width="20" height="13" alt="image" src="Image_523.jpg"/></span><span class="s38"> </span>how object-oriented principles contribute to reuse</p><p class="s16" style="padding-left: 34pt;padding-right: 110pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_524.jpg"/></span><span class="s17"> </span>how to identify and model generalization and composition <span><img width="20" height="13" alt="image" src="Image_525.jpg"/></span><span class="s38"> </span>one approach to modelling reusable components</p><p class="s16" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_526.jpg"/></span><span class="s17"> </span>what the term <i>pattern </i>means in software development</p><p class="s17" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_527.jpg"/></span> <span class="s16">how analysis patterns can be used to help structure a model.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="144" height="25" alt="image" src="Image_528.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark379">The aim of refining and adding further structure to the analysis model is to create the conditions for reuse. This may mean the reuse of existing specifications or software originally written for an earlier system. Alternatively, the new specifications or software created for the current development project may be useful for other systems in the future. In either case, the model must be structured in such a way that reuse opportunities can be readily identified. While the practical benefits of reuse are more likely to be gained in the design and construction workflows, it is important to lay the groundwork in analysis since this is where the logical specification is created. Object-oriented analysis offers three main mechanisms for reuse:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_529.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">the  fundamental  abstraction  mechanisms  of  generalization,  composition, encapsulation and information hiding</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_530.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_531.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">the specification of reusable software components the application of analysis patterns.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a">The key role of abstraction in object-orientation was explained in Chapter </a><a href="part16.htm#bookmark291" class="a">4. Here we will consider how to introduce generalization and composition structures to the analysis class diagram introduced in </a>Chapter 7.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1004" class="a" name="bookmark380">Component-based development is based on the specification of composite structures that can function as reusable software components. Effective information hiding already requires that internal aspects of an object or structure should be hidden behind an interface. Components take this a step further, in that they are designed to be free standing. In this chapter we will introduce the UML notation for modelling components and their interfaces independently of their internal details. Components are also an important ingredient of the service-oriented architecture approach. (In Chapter </a>20, we will discuss web services, which are a common implementation of service-oriented architecture concepts.)</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark595" class="a">Since the late 1980s, the â€˜patternsâ€™ movement has offered a new way of capturing and communicating generalizable knowledge, particularly during analysis and design activities. In this chapter, we introduce the concept of patterns and show how to apply analysis patterns. (Later, in </a><a href="part23.htm#bookmark738" class="a">Chapters 12 and </a>15 respectively, we will discuss architecture and design patterns.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1004" class="a">Software and specification reuse requires careful management, since its application covers the entire lifecycle and is not restricted to a single workflow. We discuss this further in later chapters (particularly in </a>Chapter 20).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="315" height="25" alt="image" src="Image_532.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.2  </a><a href="part4.htm#bookmark4" class="s29">Software and Specification Reuse</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.2  </a><a href="part4.htm#bookmark4" class="s29">Software and Specification Reuse</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.2  </a><a href="part4.htm#bookmark4" class="s29">Software and Specification Reuse</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark381">For several years now, a small revolution has been occurring in the software development world. Many people who work in the sector focus mainly on the assembly of systems, mainly from pre-existing components, rather than on the development of entire new software systems. Object-oriented development has always aimed to minimize the amount of new specification, design and programming work that must be done when a new system is built. In theory, the object-oriented approach made this possible through well-established principles of abstraction and information hiding, yet for many years large-scale reuse proved elusive. It is now at last becoming a reality. This is partly due to the familiar object-oriented principles mentioned above, but also due to newer ideas that have emerged from the patterns movement, and to the rise of component-based development and service-oriented architectures.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.2.1 <b>Why reuse?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Generally speaking, it is a waste of time and effort to produce from scratch anything that has already been produced elsewhere to a satisfactory standard. If you need a new light bulb for your room, it would not be very sensible to invent and build your own. Even if you have the knowledge, skill and equipment, the cost would be prohibitive.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This applies just as much to software development as to any other field of production. Good professionals have always learned as much as they could from their own experience, and from that of their colleagues. Programmers have built up extensive libraries that range from personal collections of useful subroutines to commercially distributed products that contain large numbers of industry-standard components. Examples of the latter include the DLL (Dynamic Link Library) files used in Microsoft Windows and the class libraries available to Java programmers. Designers have built up corresponding libraries that consist of fragments of designs, templates, patterns and frameworks. In most professional situations it makes very little sense to repeat work that others have done before.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark382">8.2.2 </a><b>Why has it been hard to achieve reuse?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Most authors agree that the promised benefits of software reuse were not fulfilled in practice until quite recently. Why was this so?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Reuse is not always appropriate</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">There are exceptions to the general rule that reuse is good. For example, students are frequently asked to solve, as if they were the very first person ever to do so, problems that have been completely solved by others before them. This makes good educational sense, since it is usually the process of enquiry that brings understanding, not just knowledge of the solution. This is one of the reasons that educators are deeply hostile to copying: a student who passes off anotherâ€™s work as his or her own has learned nothing from its creation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is also desirable to start a new project without preconceptions. For example, at first we probably know nothing about the requirements for a new system. Analysts should take account of the unique characteristics of a proposed system and its environment. Thus we should begin to investigate a new situation with as few preconceptions as possible. But it would be madness to assume that we know nothing about how to solve any of the problems encountered along the way. Wherever we can, we should capitalize on successful past work, provided that it is relevant to the current problem.</p><p class="s26" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The â€˜not invented hereâ€™ syndrome</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Some software developers (even occasionally whole departments) seem to ignore the accumulated wisdom of their profession. Why? One reason is the NIH (â€˜not invented hereâ€™) syndrome, which is said mainly to afflict programmers. This describes the attitude of someone who thinks: â€˜I donâ€™t trust other peopleâ€™s widgetsâ€”even those that appear to work, suit my purpose and are affordableâ€”I want to invent my own widgets anyway.â€™ This may be understandable in someone who enjoys a technical challenge, or has reasons not to trust the work of others, but it usually does not make good commercial sense.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Reuse can be difficult to manage</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">One key to successful reuse is the management of the process. A developer who wishes to find artefacts for possible reuse (models, templates, program subroutines, entire programs, etc.) needs a catalogue. This must be comprehensive, up to date, and organized in such a way that it is easy to find artefacts that meet a present need. The artefacts themselves must be designed for reuse, and this often makes their construction more difficult and more costly. But any artefact that is too specific in its design is likely to need extensive adaption before it can be reused in another context. The adaptation may prove more trouble than the creation of a new artefact that precisely suits the context. The difficulties of managing this process well sometimes mean that reuse is difficult to achieve in practice, although few people doubt its benefits.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Analysis work is harder to reuse than either designs or software</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark383">At its simplest, software reuse can be very easy to achieve. For example, to use a library function within a program, you may need to import the library, call the function by name and pass to it any required parameters. Your program can then carry on to use the result. For the programmer, all that is required is a copy of the library, knowledge of its signature and some understanding of what the function does. These things are typically learned fairly early in any programming course.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Reuse of design artifacts can also be relatively straightforward. A familiar example in user interface design are the templates that give users some limited flexibility in the ways that they can customize a home page on a social networking site. Each template is essentially a design that can be reused many times by different users.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Analysis models, however, are still at a fairly high level of abstraction. Thus this is one of the least developed areas of reuse because it is complex by its nature and only parts of any model are likely to be reusable. It is also necessary to organize a model so that it abstracts out (hides) those features of a requirement that are not necessary for a valid comparison with a similar requirement on another project. Next, the whole point of reuse is to save work, so it should also not be necessary to develop a full model of a new requirement in order to make the comparison. Finally, any relevant differences between the two requirements being compared should be clearly visibleâ€”so it should also not be necessary to develop a full model of the new requirement in order to see these. We shall see later that patterns are one way of overcoming these difficulties.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.2.3 <b>H ow object-orientation contributes to reuse</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Object-oriented software development relies on two main forms of abstraction that help to achieve reuse: first, generalization and second, encapsulation combined with information hiding. Not surprisingly, their use resembles the practice in many other industries.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">G eneraliz ation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a">Generalization is a form of abstraction that (as we saw in </a>Chapter 4) means concentrating on those aspects of a design or specification that are relevant to more than one situation, while ignoring those that are only relevant to a specific situation. It is often possible to identify some element of a design, or of a solution to a problem, that has general application to a variety of situations or problems. At the risk of labouring a metaphor, the wheel is a good example. Wheels can be made almost any size and of many different designs and materials, depending on their intended use. The little plastic wheels inside a mouse register its movement over the mousemat. The rubber-tyred wheels on a bicycle push and steer it along its track, and provide</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">some cushioning to the rider. The huge iron balance wheel on an old-fashioned steam engine smooths the jerky motion of the pistons. Despite the obvious differences in their size, material and method of construction, all share the same general circular form and rotate around a central shaft.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The engineer who designs the wheels for a mouse must consider specific aspects of the situation, such as the need for them to be non-conducting, small, light and cheap to make. But the basic principle of circular movement around an axle requires no special thought, since this is a long-understood solution to a well-known family of engineering problems. The particular size, weight, etc. of a wheel are specific to its application. But the circular form is a general principle that has been abstracted from all the wheels made over the years, and can be applied again and again to the design of many other wheels to come.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a" name="bookmark384">Generalization in software is a lot like this. The aim is to identify features of a specification or design that are likely to be useful in systems, or for purposes, for which they were not specifically developed. In Chapter </a>4, we saw how the introduction of an abstract Employee superclass generalized the common aspects of the descriptions of different kinds of real employee (hourly, weekly and monthly-paid). In the next section, we explain how to find generalization using further examples from the Agate case study.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Encapsulation and information hiding</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a">Encapsulation and information hiding together represent a kind of abstraction that, as we saw in Chapter </a>4, focuses on the external behaviour of something and ignores the internal details of how the behaviour is produced. This is necessary for successful modularization. The assembly of modern desktop computer systems provides many examples. For example, PC mice can use very different technologies, but still behave in a similar way from a userâ€™s perspective. On my desk as I write are three different mice: two are wired, but one of these is a wheel mouse while the other is optical; the third is optical and wireless. You can tell the difference if you look, since there are some external clues (presence or absence of wire or red light). But most of the time whether a mouse is wheeled or optical, wired or wireless, makes little practical difference. More important, modularization allows one component to be replaced by another with no need for an exact match. If a wired wheel mouse fails, it can be replaced with a wireless optical mouse. Regardless of how the mouse itself works, there is a standard definition of the interface between the mouse and the computer subsystem with which it interacts. This interface is defined by the plug type and pin connections (what type of signal each pin carries, and at what voltage). Modularization of software aims at the same ease of replacement, and software interfaces also need to be defined in a standard way for this to work. The definition of a software interface is usually in terms of services provided and the message signature required to call each service.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Composition involves encapsulating a group of classes that collectively have the capacity to</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">be a reusable subassembly: in other words, an independent module. The idea is that a complex whole is made of simpler components. These, while less complex than the whole, may themselves be made of still less complex subassemblies, elementary components or a mixture of the two. In the next section, we consider the use of composition using examples from the Agate case study.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="246" height="24" alt="image" src="Image_533.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.3  </a><a href="part4.htm#bookmark4" class="s29">Adding Further Structure</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.3  </a><a href="part4.htm#bookmark4" class="s29">Adding Further Structure</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.3  </a><a href="part4.htm#bookmark4" class="s29">Adding Further Structure</a></p><p class="s24" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark385">8.3.1 </a><b>Finding and modelling generalization</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Figure 8.1 shows a note of an interview carried out by an analyst in the Agate case study. Her main objective was to understand more about different types of staff. In her haste, the analyst gathered only a handful of facts, but these highlight some useful information that must be modelled appropriately.</p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;"><span><img width="458" height="301" alt="image" src="Image_534.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark386">Figure 8.1 </a><span class="s21">Analystâ€™s note of the differences between Agate staff types.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_535.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_536.jpg"/></span></p><p style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">There are two types of staff. Bonuses are calculated differently.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_537.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Different data should be recorded for each type of staff.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 14pt;text-align: left;"><a href="part18.htm#bookmark387" class="a">Figure </a>8.2 shows a partial class diagram that corresponds to this (for clarity, only the affected classes are shown).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span><img width="509" height="361" alt="image" src="Image_538.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark387">Figure 8.2 </a><span class="s21">A generalization hierarchy for Agate staff roles.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Redefined operations</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark387" class="a">Why is there a calculateBonus() operation in all three classes in the hierarchy in </a>Fig. 8.2? Has the analyst made a mistake? Or has she failed to take advantage of the economy of representation offered by the generalization notation?</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a">The explanation is that the superclass operation is expected to be overridden in its subclasses (overriding of inherited characteristics was introduced in Chapter </a>4). While both AdminStaff and CreativeStaff require an operation calculateBonus(), it works differently in each case. Since the precise logic for the calculation differs between these two groups of staff, the two operations need to be treated separately when each algorithm is designed, and also when code is written to implement them. This justifies the separate appearance of a superficially similar operation in both subclasses.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Why then include the operation in the superclass at all? The answer is that it is an attempt at â€˜future-proofingâ€™. A superclass may later acquire other subclasses that are as yet unknown. Here, the analyst has recognizedâ€”or assumedâ€”that objects belonging to <i>all </i>subclasses of StaffMember are likely to need an operation to calculate bonus. For this reason, at least a â€˜skeletonâ€™ of the operation is included in the superclass. This may consist of no more than the signature, but since the interface is all that matters to other classes, this alone justifies its inclusion in the superclass definition. Even if the superclass operation is defined in full, the programmers of some subclasses may choose not to use it because the logic for their version of the operation is different.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Abstract and concrete classes</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">StaffMember is <i>abstract </i><a href="part18.htm#bookmark387" class="a">in the sense that it has no instances. This means that no staff exist at Agate who are â€˜generalâ€™ members of staff, and not members of a particular subgroup, and is indicated by the {abstract} annotation below the class name in </a>Fig. 8.2 (an alternative notation is to write the class name in italics.) Only a superclass in a generalization hierarchy can be abstract. All other classes can have one or more instances, and are said to be <i>concrete </i>or <i>instantiated</i>. All staff members encountered so far (among those that are relevant to the model) are defined as either AdminStaff or CreativeStaff. If we later discover another group of staff that is distinct in behaviour, data or associations, and if we need to model this new group, it will be represented in the diagram by a new subclass. The point of a superclass is that it sits at a higher level of abstraction than its subclasses. This generality allows it to be adapted for use in other systems. While this in itself is not always enough for it to be declared as an abstract class, this is usually the case, and for the moment we can safely ignore exceptions to the rule.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">How generaliz ation helps to achieve reuse</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The reason for creating a generalization hierarchy is to enable the specifications of its superclasses to be reused in other contexts. Often this reuse is within the current application.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark388" class="a">Imagine that the Agate system has been completed and is in regular use. Some time later, the directors reorganize the company, and as a result account managers are to be paid bonuses related to campaign profits. This bonus will be calculated in a different way from both administrative and other creative staff. For example, it may include an element from campaigns that they supervise and an element from the general profitability of the company. It is easy to add another subclass to cater for this new behaviour, as shown in </a>Fig. 8.3.</p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span><img width="434" height="276" alt="image" src="Image_539.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark388">Figure 8.3 </a><span class="s21">A new subclass is easy to add.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark387" class="a">Note also the alternative notation styles. In Fig. </a><a href="part18.htm#bookmark388" class="a">8.2 each subclass is joined to the superclass by its own generalization association, while in Fig. </a>8.3 the three subclasses are organized into a tree structure with a single triangle joining this to the superclass. The single tree structure is known as the <i>shared target </i>form of the notation. Both forms are acceptable, but the shared target notation is used only where the generalization relationships belong to the same <i>generalization set</i><a href="part18.htm#bookmark388" class="a">. In the example shown in Fig. </a><a href="part18.htm#bookmark389" class="a">8.3 this is appropriate, since the types of employee shown represent a single coherent way of partitioning the superclass. However, suppose that for some reason we need also to specialize employees as Male and Female. The new generalization relationships for this belong to a different generalization set. The name of the applicable generalization set can optionally be shown on the diagram next to the relationship. This is illustrated in </a>Fig. 8.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 73pt;text-indent: 0pt;text-align: left;"><span><img width="410" height="356" alt="image" src="Image_540.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark389">Figure 8.4 </a><span class="s21">Generalization sets partition a superclass in different ways.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Adding a new AccountManager subclass has little or no impact on the rest of the class model. The reuse derives from basing AccountManager on the existing abstract class StaffMember. The new class inherits all attributes and operations that are not part of its own specialismâ€”in this case roughly 85% of its specification. This is for only one class; over the many classes of a large system, the saving in design and coding effort can clearly be significant. But the opportunity is available because we have previously identified the generalized aspects of a staff member. This is the main benefit of generalization, that hierarchies can usually be extended without significant effects on existing structures.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark388" class="a">Generalization can also provide possibilities of reuse within other applications. For example, the developers at Agate application may find that an abstract class StaffMember already exists in a catalogue that records the generalization hierarchies from previous projects. There is therefore no need to document it afresh, and analysis can focus on those characteristics that are specific to the current application. Of course, if this superclass were as simple as the one shown in Fig. </a>8.3 there would be little benefit. But in real projects, class hierarchies are sometimes complex, and inherited class definitions may be accompanied by complex structures of associations in addition to their attribute and operation specifications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">A top-down approach to finding generaliz ation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It is relatively easy to discover generalization where both superclasses and subclasses have already been identified. If an association can be described by the expression <i>is a kind of</i>, then it can usually be modelled as generalization. Sometimes this is so obvious that you may wonder if that is all there is to it. For example, â€˜administrative staff are a kind of staffâ€™. In just the same way â€˜a helicopter is a type of aircraft and so is a fixed-wing jetâ€™ and â€˜a truck is a type of vehicle and so is a buffalo cartâ€™ imply generalizations with similar structures.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1263" class="a">It is not uncommon to find multiple levels of generalization. This simply means that a superclass in one relationship may be a subclass in another. For example, Aircraft is both a superclass of Helicopter and a subclass of V ehicle. In practice, more than about four or five levels of generalization in a class model is too many (Rumbaugh et al., </a>1991), but this is primarily for design reasons.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">A bottom-up approach to finding generaliz ation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a">An alternative approach is to look for similarities among classes in your model, and consider whether the model can be â€˜tidied upâ€™ or simplified by introducing superclasses that abstract out the similarities. This needs to be done with some care. The purpose of doing this is to increase the level of abstraction of the model, but any further abstraction introduced should still be â€˜usefulâ€™. The guiding principle is still that any new generalization must meet all the tests described in </a>Chapter 4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">When not to use generaliz ation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Generalization can be overused, so some judgement is needed to determine its likely future usefulness on each occasion. For example, at Agate, staff and (some) clients are people (for the sake of illustration we will ignore the fact that most clients are in fact companies and not individuals). An inexperienced analyst might feel that this justifies the creation of a Person superclass, to contain any common attributes and operations of Client and StaffMember. But it may quickly become apparent that the new class definition contains little but the attribute personName. This is really an attempt to force a generalization hierarchy to include subclasses that are too dissimilar.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark390">Second, we should not anticipate subclasses that are not justified by currently known requirements. For example, at Agate AdminStaff and CreativeStaff are distinct classes based on differences in their attributes and operations. We also know about other kinds of staff in the organization, e.g. directors. But we should not automatically create another subclass of StaffMember called Director-Staff. Even if it were to turn out that directors have some relevance for the system, there is no reason yet to suppose they will be a distinct class. They may be adequately modelled by an existing class (say, AdminStaff) unless we find that their behaviour or information structure differs in some way.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There is a tension here. On the one hand, generalization is modelled to permit future subclassing in situations that the analyst cannot reasonably anticipate. The ability to take advantage of this is one of the main benefits of constructing a generalization hierarchy. On the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">other hand, if generalization is overdone, it adds to the complexity of the model for little or no return. There is no simple answer to this problem, except to use the judgement that comes with experience, and any guidance issued by the organization for whom you work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M ultiple inheritance</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a">Multiple inheritance was introduced in Chapter </a>4. It is often appropriate for a class to inherit from more than one superclass. This is familiar in everyday classification. For example, if we classify household items according to their use, a coffee mug is a drinking vessel. If we classify the same items according to their value and aesthetic qualities, the mug might be â€˜everydayâ€™ rather than â€˜bestâ€™. If we classify the same items according to their health risk, the mug might be a hazard (because it is cracked). The mug can belong at one time to various categories derived from different classification schemes without any logical conflict.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In object-oriented modelling, especially during design, it can be useful to define classes that inherit features from more than one superclass. In each case, all features are inherited from every superclass.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.3.2 <b>Finding and modelling composition</b></p><p class="s13" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Composition <span class="p">(or </span>composite aggregation<span class="p">) is based on the concept of </span>aggregation<span class="p">, which is a feature of many object-oriented programming languages. At its simplest, aggregation represents a wholeâ€“part relationship between classes, while composition shows a stronger form of ownership of the part by the whole.</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark391" class="a">One application of composition is familiar to users of any common computer drawing package. For example, many drawings in this text were prepared and edited with a widely used drawing package. This application allows the user to select and group several objects. Grouped objects behave as a single object, and can be sized, rotated, copied, moved or deleted with a single command. Figure </a><a href="part18.htm#bookmark392" class="a">8.5 illustrates this, while Fig. </a>8.6 models the composition as a class diagram. Note that the composite structure is nestedâ€“a composition can itself contain a further composition. In the same way that a composite drawing object can only be handled as a single drawing component, the â€˜partâ€™ objects in a composition structure cannot be directly accessed, while the whole object presents a single interface to other parts of the system.</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><span><img width="465" height="415" alt="image" src="Image_541.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark391">Figure 8.5 </a><span class="s21">Composition of objects in a drawing package.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><span><img width="386" height="189" alt="image" src="Image_542.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark392">Figure 8.6 </a><span class="s21">The same composite structure, expressed as UML classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Composition and aggregation may both be identified during requirements analysis, but their main application is during design and implementation activities, where they can be used to encapsulate a structure of objects as a potentially reusable subassembly. This is more than just a matter of labelling the structure with a single name. Its encapsulation as a coherent, cohesive module is much more important. The external interface for a composition is the interface of the single object at the â€˜wholeâ€™ end of the association. Details of the internal structure of the compositionâ€”that is, the other objects it contains, and to which it delegates some of its responsibilitiesâ€”remain hidden from the client.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark393" class="a">The notation is similar to a simple association, but with a diamond at the â€˜wholeâ€™ end. The diamond is filled with solid colour to indicate composition, and left unfilled for aggregation. An alternative notation for a composite structure is illustrated in </a>Fig. 8.7. This explicitly shows the composite object as a container for its parts.</p><p style="padding-left: 136pt;text-indent: 0pt;text-align: left;"><span><img width="241" height="142" alt="image" src="Image_543.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark393">Figure 8.7 </a><span class="s21">Alternative notation for a composite structure.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Use of composition and aggregation in business-oriented applications is more problematic than in the drawing package example, but it is still worth modelling where it conveys useful information about the structure of the business domain. An example from the Agate case study is used in the next section to illustrate how aggregation is identified.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark394">8.3.3 </a><b>Combining generalization with composition or aggregation</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The Agate case study provides at least one occasion to model a combination of generalization and composition. This is contained in the statement in Section A1.3 that â€˜adverts can be one of several typesâ€™. For each type, it is certainly true that, for example, a newspaper advert <i>is a kind of </i>advert. For simplicity, we assume that â€˜advertâ€™ refers to a <i>design</i>, rather than an <i>insertion</i>â€” so an advert that appears five times in one newspaper is one advert appearing five times, and not five adverts each appearing once. This suggests that advert could be a superclass, with newspaper advert, etc. as subclasses. Would this meet the tests described in Section 4.2.4? An authoritative answer would require a detailed examination of attributes and operations for each class, but the answer appears likely to be yes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An advert also consists of a set of parts. The precise composition of each type of advert is different, and so this structure of associations cannot be defined at the superclass level (the attributes, operations and composition structure of television adverts may resemble newspaper adverts in some respects, but will differ in others).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We can see possible composition in the association between Campaign and Advert, and in turn between Advert and its associated parts. A campaign includes one or more adverts. A newspaper advert includes written copy, graphics and photographs.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark395" class="a">Is this really composition rather than aggregation? First, can an advert belong to more than one campaign? This is not stated in the case study, but it seems unlikely that an advert can simultaneously be part of more than one campaign. Second, has each Advert a coincident lifetime with its Campaign? Again, this is not stated explicitly, but a client might wish to use an expensive advert again on another campaign. This point needs to be clarified, but in the meantime it does not appear justified to model this as composition. Third, can copy, graphics or photographs belong to more than one newspaper advert? Perhaps graphics or photographs may be reused, but this seems very unlikely to be the case for copy. Finally, has each of these components a coincident lifetime with the advert? Probably some do and some do not. This would all need further clarification, but in the meantime composition seems justified only in the </a><a href="part18.htm#bookmark395">case of NewspaperAdvertCopy, and aggregation has therefore been applied elsewhere. Figure</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark395">8.8 shows the partial class model that results from this analysis.</a></p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="268" alt="image" src="Image_544.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark395">Figure 8.8 </a><span class="s21">Aggregation, composition and generalization in the Agate model.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.3.4 <b>Organizing the analysis model packages and dependencies</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark681" class="a" name="bookmark396">An analysis model may include completely free-standing components, which are discussed in the following section. Even if it does not, it must still be organized in such a way that it will remain robust in the face of changing requirements. This demands skill and judgement on the part of the analyst. Part of this task is the definition of analysis packages that are relatively independent of each other while still internally highly cohesive (cohesion is explained in detail in </a><a href="part16.htm#bookmark291" class="a">Chapter 14). We saw in </a><a href="part9.htm#bookmark171" class="a">Chapter 7 that packages (introduced in </a>Chapter 5) are a means by which the developer can â€˜factor outâ€™ classes or structures that have potential use in a wider context than one project alone. But when a model is partitioned into packages (or when pre- existing components are used to support a current project) it is important to keep track of the dependencies between different classes and packages.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark270" class="a">We saw in Chapter </a><a href="part18.htm#bookmark398" class="a">A2 that the Agate case study suggests three related but distinct application areas: advert preparation, campaign management and staff management. It probably makes sense to model these as separate packages, but it is likely that some entity objects will be used by more than one package. Based on our analysis so far, StaffMember plays a role in both the Campaign Management and the Staff Management packages. This leads to an architectural decision. </a>Figure 8.9 illustrates some of the variations described below.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_545.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">We could place StaffMember in the Staff Management package. In this case, we need to model a dependency from Campaign Management to Staff Management, since the Client and Campaign classes need an association with StaffMember (diagram variation (i)).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_546.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">We could remove StaffMember to a separate package. This would be justified if it appeared to have more widespread use. For example, there may also be wages, personnel, welfare and pension applications that need this class. In this case, we need to model dependencies from all the corresponding packages to the package that contains StaffMember (diagram variation (ii)).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_547.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Further analysis may yet reveal that in fact StaffMember is not a single class. In this case, the derivative classes may remain within their respective packages, but it is likely that there will be an association between them and the dependency must still be documented.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_548.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a" name="bookmark397">In addition, we made a judgement in </a>Chapter 7 to separate all boundary objects into a User Interface package and all control objects into a Control package. Objects in these specialized packages will certainly have dependencies on objects in other packages (diagram variation (iii)).</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="409" alt="image" src="Image_549.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark398">Figure 8.9 </a><span class="s21">Alternative dependencies among packages and objects.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The significance of documenting package dependencies is perhaps not obvious when dealing, as we are here, with a relatively simple model. But it will become more important when the models are large, complex and, above all, when there is a substantial element of reuse involved, whether this occurs at the level of individual classes or at a component scale.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="303" height="25" alt="image" src="Image_550.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.4  </a><a href="part4.htm#bookmark4" class="s29">Reusable Software Components</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.4  </a><a href="part4.htm#bookmark4" class="s29">Reusable Software Components</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.4  </a><a href="part4.htm#bookmark4" class="s29">Reusable Software Components</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1004" class="a" name="bookmark399">A software component is a package or module that provides services to other components or systems. A reusable component is one that has been designed for use in more than one context. In one sense, a component is a special case of a composition structure, as described above. Indeed, in some circumstances, a single class can be a reusable component. However, the term is now generally reserved for relatively complex structures that operate independently of each other, are often developed separately at different times or in different organizations, and are then â€˜plugged togetherâ€™ to achieve the desired overall functionality. We will discuss reusable components in much more detail in </a>Chapter 20; here, we will do no more than briefly introduce the concept and illustrate the UML notation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The reasons for employing standardized components are familiar and obvious, and indeed it is hard to think of an industry that does not make widespread use of them. For example, houses are typically designed and assembled from bricks, roofing timbers, tiles, doors, window frames, electrical components, water pipes, floorboards, etc., that are all picked from a catalogue. An architect may use these components to design (and a builder to build) houses that differ widely in their overall appearance, floorplan and number of rooms. The difference is in the way that standard components have been assembled.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For anything to be treated as a component (a window, for example), it must be specified in a way that allows the architect, builder, etc. to work with it as a single, simple thing, even though really it is not. Elsewhere, specialist designers tackle the problems of window design (what materials, structure, etc. make a good window) and specialist constructors build them to the designersâ€™ specifications. Construction details of a standard window may change due to a</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark401">design improvement, availability of materials or new manufacturing methods. However, as long as key features such as height, width and overall appearanceâ€”in effect, the windowâ€™s interfaceâ€”are not altered, a new window can be substituted for an old one of the same type should it need to be replaced in the future.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Similarly, the implementation of a software component is hidden from other components requesting its services. Different subsystems can thus be effectively isolated in operation. This greatly reduces the problems in getting them to interact with each other, even if they were developed at different times, or in different languages, or execute on different hardware platforms. It also allows one component to be substituted for another as long as both offer the same interface. Subsystems that have been specified in this way are said to be <i>decoupled </i>from each other.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The approach can be scaled up to any arbitrarily complex level. Any part of a software systemâ€”or model of oneâ€”can be considered for reuse in other contexts, provided the following criteria are met.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_551.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">A component meets a clear-cut but general need (in other words, it delivers a coherent service or set of services).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_552.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">A component has one or more simple, well-defined external interfaces.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1143" class="a">Object-oriented development is particularly well suited to the task of designing reusable components. Well-chosen objects already meet both the above criteria. Object-oriented models, and hence also code, are also organized in a way that is helpful for reuse. For example, Coleman et al. </a>(1994) point out that generalization hierarchies are a very practical way of organizing a catalogue of components. This is because they encourage the searcher to begin first with a general category, then progressively to refine their search to more and more specialized levels.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Inheritance permits a â€˜software architectâ€™ to spawn new classes from existing ones. Thus some parts of a new software component can often be built with minimal effort. Only the specialized details need to be added. There is nothing properly analogous to this in most other industries (although there may be a closer comparison between design activities). The manufacturing effort for a new window is similar to that for any previous window. Maintenance, too, can be easierâ€”in a generalization hierarchy, characteristics that are specified at the superclass level are instantly available to any subclass upon instantiation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark400">8.4.1 </a><b>U M L notation for components</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark401" class="a">The basic notation for modelling components in UML is illustrated in </a>Fig. 8.10. This shows two components whose interfaces are joined by a ball-and-socket assembly connector. Component A has a <i>provided interface</i>, which offers services to other components that know how to request those services. Meanwhile, component B has a <i>required interface</i>, which requests services from a provided interface on another component. The form of the protocol for requesting a service is the same as that for calling an object operation. The requesting component sends a message that contains an operation name and any necessary parameters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;"><span><img width="468" height="224" alt="image" src="Image_553.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Figure 8.10 <span class="s21">Basic notation in UML 2.0 for a component structure diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1136" class="a">Each interface may offer a range of services, and each service has its own specific protocol or signature. These are modelled independently of any decisions about the internal class structure of the component. The interface operations that result from this analysis imply what Cheesman and Daniels </a>(2001) call â€˜an information modelâ€™ of the interface, and this can give a good starting point for modelling the internal design of a component.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1136" class="a">In this section we introduce some elements of the component notation and show how it can be used to model a component-based architecture and to specify important aspects of component interfaces. However, this is certainly not intended as a complete description of how to analyse software components for component-based development. Readers who are interested in learning more should consult a specialist work on the subject, such as </a><a href="part38.htm#bookmark1136">Cheesman and Daniels (2001), which in our view is one of the clearest books on modelling components.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.4.2 <b>Component-based development</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark402">Many activities involved in component-based development (CBD) are much the same as they would be for the development of any other software. The classes that comprise an individual component must be identified, modelled, specified, designed and coded. These activities are carried out as described elsewhere in this book. CBD differs from â€˜simpleâ€™ object-oriented analysis and design mainly in that it involves the specification of component architectures and component interactions. Much of this relates to interfaces and behaviour at a higher level of abstraction than single classes or the kind of small-scale composition structures that we have described up to this point.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1136" class="a">Components can themselves be specified at different levels of abstraction. Cheesman </a>and Daniels (2001) discuss the different forms that a single component can take. First, components must follow some sort of common standard if they are to work together with each other when they are assembled. An everyday example is the way that many electrical devices follow a standard that defines the operating voltage and the size and shape of the plug. V oltage and plug designs vary from one country to another; hence the need for the kind of travel adaptors sold at airports. The standard for software components is effectively realized as the environment within which a given component is designed to work.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Component function is also important. The speaker and headphone output sockets on most electric guitar amplifiers are designed to accept the same jack plug connectors. But if you plug a pair of headphones into the speaker output socket, you could end up blowing the headphones. Or, if it is a transistor amplifier, you might destroy the power transistors instead. Plugging in a speaker just allows you to hear the guitar. A componentâ€™s behaviour is described by its specification, much of which will consist of definitions of its interfaces with other components.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Each specification may have many implementations. It should be possible to substitute one implementation of a specification for another, just as a guitarist can unplug one guitar and plug in another. That, after all, is the whole point of using components.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is possible to imagine a component implementation that will be installed only once, but it is much more likely that there will be multiple installations of each implementation. Consider a web browser (Mozilla Firefox version 3.0, say) as an example. We can assume a single specification for the browser, but there are different implementations for each of the main operating systems (Windows, Mac and Linux). Each implementation is installed on millions of computers around the world. On each computer there is an installed copy of the implementation, and for this to work properly it needs to be registered with its operating system environment. Finally, each time that the software is launched, a new component â€˜objectâ€™ starts. This brings us finally to the level where actual working components are realizedâ€”the level where data is stored and processes are executed.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Another way in which CBD differs from conventional systems development is that it involves not only the creation of new components, but also the reuse of existing ones. These may be components that have been developed in-house during earlier projects, or they may be supplied commercially by an external third party. In either case, there is a need for catalogues that describe components in a standardized way, so that developers can find components that will be useful, orâ€”equally importantâ€”can determine that none yet exist. For this reason, CBD</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1004" class="a">lifecycles typically have a pattern that differentiates between the development and the use of components, and that also recognize the need for life-long management of components from specification through to end use. We will return to the topic of managing components in Chapter </a>20. For now, we concentrate on describing how UML can be used in their specification.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.4.3 <b>Example of modelling components</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An airline seat booking system provides a typical scenario for the use of software components. This is partly because legacy systems (see Section 6.2.1) are still in widespread use in the industry. These must interoperate with newer systems, themselves often developed using object-oriented methods and also (increasingly often) interacting over the web. New systems components developed for such an environment must be capable of integrating with components that are already in useâ€”some quite antiquated in their design and implementation</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">â€”and also with new components still to come, some of which have not yet been specified.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Let us assume that bookings are to be taken from various sources, including traditional travel agents, online travel agents and the companyâ€™s own website. A component architecture makes sense, so that individual components can be replaced in a plug-and-play fashion without disrupting the operation of other systems. This will permit the upgrading of older components with minimum fuss. It will also allow the substitution of different booking processes and platforms while using a single component to manage all the transactions.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure 8.11 shows part of a possible component-based architecture for an airline. The main components in this simplified view are systems to handle bookings, to handle payments, to keep records of customers, to check in passengers at the airport, and to manage flight information (including the allocation of passengers to seats on the aircraft). A real airline would, of course, require many other systems to support its operations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;"><span><img width="530" height="343" alt="image" src="Image_554.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark403">Figure 8.11 </a><span class="s21">Component structure diagram for airline systems.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The Bookings component provides an interface called MakeBooking. This is available to any other system that understands how to use it, which really just means knowing the services that are provided by the interface and the protocol or signature for each service. Implementation details of a component are encapsulated in just the same way that the attributes and operations of an object are encapsulated.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this case, other systems that might use the interface include those of travel agents and an e-commerce system on the airlineâ€™s website. The interface decouples client systems that wish to make a seat booking from the actual operation of the booking system component, allowing bookings to be made remotely from other networks or over the Web. The architecture shown also permits new clients to be implemented for other platforms. For example, if the airline wishes to enable bookings from mobile devices, the booking system will need no modification. All that is required is for any new system using this interface to be designed so that it can send properly formed requests to the MakeBooking interface.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The Bookings component provides an interface to the Check-in component, which needs details of bookings to ensure that the correct customers are checked in. It uses an interface provided by the Payments component, which handles the processing of credit cards and any other types of payment. Both Bookings and Check-in components use an interface provided by the Flight Management component to obtain (and to update) details of seat availability on flights. Finally, the Booking component uses an interface provided by the Customers component to obtain and update details of the airlineâ€™s customers.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a">A communication diagram can be used to model the interaction of these interfaces in more detail (communication diagrams are explained fully in Chapter </a><a href="part18.htm#bookmark404" class="a">9). Figure </a>8.12 shows the interaction for checking in passengers for a booking. Note that individual messages are shown with their parameters, allowing the analyst to specify in some detail the operations and thus, by extension, the classes needed to implement each interface. Once a model has been built up that gives a complete picture of the interactions, the specification of a component can be represented as the totality of all operations on all its interfaces.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="358" alt="image" src="Image_555.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark404">Figure 8.12 </a><span class="s21">A communication diagram can show interaction between instances of component interfaces.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark405" class="a">Figure </a>8.13 shows the &lt;realize&gt; dependency between the Flight Management component and its AllocateSeats interface. The component itself is realized by a package (or packages) of classes analysed as described elsewhere in this book.</p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;"><span><img width="400" height="134" alt="image" src="Image_556.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark405">Figure 8.13 </a><span class="s21">Dependency relationship between an interface and a package that implements it.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note that this diagram, even if it were complete and showed all interfaces offered by the Flight Management component, still represents the specification of a component, rather than its implementation. Component specifications concentrate on the external view of operations and attributes, in just the same way that a class specification does. A component implementation (in other words, the specification of classes and associations that exist within the component) would be much more detailed than we have shown here, but would also be beyond the scope of this chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="298" height="25" alt="image" src="Image_557.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.5  </a><a href="part4.htm#bookmark4" class="s29">Software Development Patterns</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.5  </a><a href="part4.htm#bookmark4" class="s29">Software Development Patterns</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.5  </a><a href="part4.htm#bookmark4" class="s29">Software Development Patterns</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark406">A </a><i>software development pattern </i>(usually just called <i>pattern</i><a href="part16.htm#bookmark291" class="a">) is an abstract solution to a recurring problem that can be applied in different ways depending upon the specific problem at issue. Patterns are applied widely in systems development, most of all in design, but also to requirements analysis, project management, business process design, testing and more. The boundary, control and entity object architecture introduced in Chapter </a>7 is in fact a pattern widely applied during requirements analysis and systems design. Other architectures that we will consider later are also examples of the application of patterns to the activities of analysis and design. A pattern is useful when it captures the essence of a problem and a possible solution, without being too prescriptive.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.5.1 <b>Origin of patterns</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In everyday speech, a pattern refers to a kind of design that is used to reproduce images or products in a repetitive manner (on wallpaper or fabric, for example). This suggests that patterns are a sort of generalization, which is not too far removed from the use of the term in software development. The usage is traced back to the architect Christopher Alexander, who first used the term <i>pattern </i>to describe solutions to recurring problems in architecture. Alexander identified many related patterns for the development of effective and harmonious architectural forms in buildings. Alexanderâ€™s patterns address many architectural issuesâ€”for example the best place to site a door in a room, or how to organize and structure a waiting area in a building so that waiting can become a positive experience. Alexander argued that his patterns became a design â€˜languageâ€™ within which solutions to recurring architectural problems could be developed and described. Alexanderâ€™s definition of a pattern is as follows.</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of a solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice.</p><p class="s7" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">Alexander et al. (1977)</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1115" class="a" name="bookmark407">Alexander made no reference to buildings or architecture but only to â€˜our environment,â€™ which he meant as the physical environment in which we live. There was clearly an analogy with software development, and some among the early object-oriented community took up his ideas. Beck and Cunningham </a><a href="part38.htm#bookmark1152" class="a">(1989) documented some of the earliest software patterns in order to describe aspects of interface design in Smalltalk environments. Coplien </a>(1992) catalogued a set of patterns specifically for use in C++ programming (patterns that relate to constructs in a specific programming language are now known as <i>idioms</i>).</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark408">The publication of </a><a href="part18.htm#bookmark416" class="s40">Design Patterns: Elements of Reusable Object-Oriented Software</a><span class="s41">1</span><a href="part38.htm#bookmark1182" class="a"> by Gamma et al. </a><a href="part38.htm#bookmark1138" class="a">(1995) gave significant impetus to the use of patterns in software design, but other authors have identified patterns that are concerned with analysis (Coad et al., </a><a href="part38.htm#bookmark1129" class="a">1997; </a><a href="part38.htm#bookmark1176" class="a">Fowler</a><a href="part38.htm#bookmark1129" class="a">, 1997), organizational issues </a><a href="part38.htm#bookmark1154" class="a">(</a><a href="part38.htm#bookmark1129" class="a">Coplien, 1996) and systems architecture (Buschmann et al., 1996). Software patterns have also been applied to non-object-oriented </a><a href="part38.htm#bookmark1195" class="a">development approaches. For example, Hay </a>(1996) identified a series of analysis patterns for data modelling. These include patterns relating to concepts such as Party and Contract, which appear widely in information systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.5.2 <b>What is a software pattern?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1254" class="a">Riehle and Z ullighoven </a><a href="part38.htm#bookmark1179" class="a">(1996) describe a pattern as a generalized abstraction from concrete forms that recur in certain situations. We can interpret â€˜concreteâ€™ as meaning â€˜specificâ€™ or â€˜particularâ€™. Gabrielâ€™s </a>(1996) definition is more detailed and expresses the structure of a pattern:</p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">Each pattern is a three-part rule, which expresses a relation between a certain context, a certain system of forces which occurs repeatedly in that context, and a certain software configuration which allows these forces to resolve themselves.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In this definition, <i>context </i>can be understood as a set of circumstances or preconditions and <i>forces </i><a href="part38.htm#bookmark1154" class="a">are issues that have to be addressed, while the software configuration addresses and resolves the forces. </a>Coplien (1996) identifies the critical aspects of a pattern as follows.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_558.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">It solves a problem.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_559.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">It is a proven concept.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_560.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_561.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">The solution is not obvious. It describes a relationship.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_562.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The pattern has a significant human component.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark409">The human component is not simply a good user interface to a working application; it is concerned with the nature of the software constructs used to build the application. Software patterns should result in structures that are sympathetic to the human perspective. A good software pattern offers a solution that not only works, but that also has an aesthetic qualityâ€” that is in some way elegant. This aesthetic quality is sometimes called â€˜quality without a nameâ€™ (Q WAN). The exact nature of Q WAN is naturally the subject of much controversy, and our discussion of patterns will not address issues of elegance. However, readers may judge for themselves whether the solutions developed from the patterns have a sense of elegance.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the same way that a pattern captures and documents proven good practice, <i>antipatterns </i><a href="part38.htm#bookmark1126" class="a">capture practice that is demonstrably bad. It is sensible to do this. We should ensure not only that a software system embodies good practice but also that it avoids known pitfalls. Antipatterns are a way of documenting attempted solutions to recurring problems that proved unsuccessful. An antipattern can also include reworked solutions that proved effective (Brown et al., 1998). One example is â€˜mushroom managementâ€™, which relates to the domain </a><a href="part9.htm#bookmark102" class="a">of software development organizations. It describes the adoption of an explicit policy to isolate systems developers from users in an attempt to limit requirements drift. In such an organization, requirements are passed through an intermediary such as the project manager or a requirements analyst. The negative consequence of this pattern is that inadequacies in the analysis documentation are both inevitable and not resolved. Furthermore, design decisions are made without user involvement and the delivered system may not address usersâ€™ requirements. The reworked solution suggested by Brown et al. is to use a form of spiral process  development  model  (see  Chapter </a><a href="part31.htm#bookmark1041" class="a">3).  Other  reworked  solutions  include  the involvement of domain experts in the development team, as recommended by the Dynamic Systems Development Method (DSDM) (we introduce DSDM in </a>Chapter 21).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1138" class="a">Coad et al. </a><a href="part9.htm#bookmark102" class="a">(1997) distinguish a strategy, which they describe as a plan of action intended to achieve some defined purpose, from a pattern, which they describe as a template that embodies an example worth emulating. This is slightly different from the views of a pattern described earlier as it does not emphasize contextual aspects to the same extent. One example of a Coad et al. strategy is â€˜organize and prioritize featuresâ€™, which relates to the need to prioritize requirements (discussed in </a>Chapter 3).</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">8.5.3 <b>Analysis patterns</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An analysis pattern is essentially a structure of classes and associations that is found to occur over and over again in many different modelling situations. Each pattern can be used to communicate a general understanding about how to model a particular set of requirements, and therefore the model need not be invented from scratch every time a similar situation occurs. Since a pattern may consist of whole structures of classes, the abstraction takes place at a higher level than is normally possible using generalization alone. On the other hand, patterns stop a long way short of detailed specification, and so should not be confused with composition structures or components.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1138" class="a">A simple example of an analysis pattern from Coad et al. </a><a href="part18.htm#bookmark410" class="a">(1997) is the Transactionâ€“ Transaction Line Item pattern shown in </a>Fig. 8.14.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 61pt;text-indent: 0pt;text-align: left;"><span><img width="442" height="129" alt="image" src="Image_563.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark410">Figure 8.14 </a><a href="part38.htm#bookmark1138" class="s33">Transactionâ€“Transaction Line Item pattern (adapted from </a><span class="s21">Coad et al., 1997).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark411" class="a">Figure </a>8.15 shows the pattern as it might be applied to a sales order processing system. Here the Transaction suggests a SalesOrder class and the Transaction Line Item suggests a SalesOrderLine class. Note that we have modelled the association as a composition. This differs from the published pattern, but appears to be justified here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 61pt;text-indent: 0pt;text-align: left;"><span><img width="442" height="129" alt="image" src="Image_564.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark411">Figure 8.15 </a><span class="s21">Simple application of the Transactionâ€“Transaction Line Item pattern.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark681" class="a">V ery similar structures are used in a wide variety of circumstances (e.g. shipment and shipment line item, payment and payment line item). A novice software developer has to learn this structure, or to reinvent itâ€”but the latter is much less efficient. The act of describing it as a pattern highlights it as a useful piece of development expertise and makes it readily available to the novice. An example of a principle that makes this pattern advantageous is the desirability of low interaction coupling (see </a>Chapter 14).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1176" class="a">Fowler </a><a href="part18.htm#bookmark412" class="a">(1997) describes a number of patterns that recur in business modelling situations such as accounting, trading and organization structure. Figure </a><a href="part23.htm#bookmark738" class="a">8.16 shows Fowlerâ€™s Accountability pattern as an illustration of an analysis pattern in practice. For the sake of simplicity, we will discuss only the class structure, although patterns are normally documented in more detail than this (see Chapter </a>15). An accountability structure may be of many kinds, such as management or contract supervision. In the case of Agate, this pattern could apply to several different relationships: that between a manager and a member of staff they supervise, that between a client and a client contact, or that between a client and a campaign manager. Since the details of the relationship itself have been abstracted out as AccountabilityType, this one class structure is sufficiently general to be adapted to any of these relationships, given an appropriate set of attributes, operations and associations to other classes specific to the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">application model. The generalization of Person and Organization as Party similarly allows the pattern to represent relationships between individuals, organizations, or a mixture of the two.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span><img width="510" height="240" alt="image" src="Image_565.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark412">Figure 8.16 </a><a href="part38.htm#bookmark1176" class="s33">The Accountability analysis pattern (adapted from </a><span class="s21">Fowler, 1997).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark413" class="a">Figure </a>8.17 shows the pattern applied to the Staff-Contact relationship at Agate. In this context it seems unnecessary to model the generalization of the Commissioner and Responsible roles as Party. This illustrates that the structure suggested by a pattern can be adapted as appropriate to suit the circumstances.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 36pt;text-indent: 0pt;text-align: left;"><span><img width="508" height="326" alt="image" src="Image_566.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark413">Figure 8.17 </a><span class="s21">Accountability pattern applied to Agateâ€™s StaffContact relationship.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1182" class="a">Another pattern that might be useful in developing an analysis model for Agate is the Composite pattern (Gamma et al., </a><a href="part23.htm#bookmark738" class="a">1995). However, since this pattern is useful from both analysis and design perspectives, we will defer its introduction until Chapter 15. The further use of analysis patterns is an advanced approach that is principally of use to experienced analysts, and we leave the interested reader to follow this up through further reading. They are closely related to design patterns, which we cover in some detail in </a>Chapter 15.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="122" height="25" alt="image" src="Image_567.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">8.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark414">In this chapter, we have introduced the main approaches to refining the analysis model. The main reason for doing this is to maximize opportunities for reuse. There are three particular ways that this can be achieved. The abstraction mechanisms of the object-oriented approach (generalization, composition, encapsulation and information hiding) are the first of these. They are important in their own right and can help significantly in making it possible to reuse previous analysis work. They also contribute to the other two approaches to reuse, which are reusable components and software development patterns. Components can greatly reduce the effort involved at all stages of development, although careful analysis and specification remain important. Patterns act as a store of knowledge that embodies best known practice.</a><a name="bookmark415">&zwnj;</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Whatever form they take, opportunities for reuse occur in essentially only three ways. First, existing components or structures may be imported from sources outside the project boundaries. This requires careful evaluation of the degree of fit between the requirements of the current project and the features of the available components and structures. Second, new reusable components or structures may be developed for use on more than one part of the current project. This requires the analysis model to be at a high enough level of abstraction for common features between different aspects of the project to become evident. Finally, new reusable components or structures may be developed for export to other projects. Here, too, it is necessary for the requirements modelling to identify those aspects of the project that can be generalized for use in other contexts.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The explicit modelling of substitutable software components is a relatively new approach in software development and we expect that there will be more evolution in this area in the future. Patterns are now a more established approach to documenting, sharing and reusing useful insights into many aspects of the software development activity. This chapter has considered how components and patterns can be used in software development, in particular from an analysis perspective. Later chapters discuss in more detail the application of patterns and components to address issues of architecture and design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:439pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:213pt"><td style="width:439pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">8.1  <span class="s16">What are the advantages of components?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.2  <span class="s16">Why does the NIH syndrome occur?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.3  <span class="s16">Which features of object-orientation help in the creation of reusable components?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.4  <span class="s16">Distinguish composition from aggregation.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.5  <span class="s16">Why are operations sometimes redefined in a subclass?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.6  <span class="s16">What is the purpose of an abstract class?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.7  <span class="s16">Why is encapsulation important to creating reusable components?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.8  <span class="s16">Why is generalization important to creating reusable components?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.9  <span class="s16">When should you not use generalization in a model?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.10 <span class="s16">What does the term pattern mean in the context of software development?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.11 <span class="s16">How do patterns help the software developer?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">8.12 <span class="s16">What is an antipattern?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:68pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">8.A <span class="s16">Find out from your library about the coding system that is used for classifying books, videos, etc. Draw part of the structure in UML notation as a generalization hierarchy. Think up some attributes for â€˜classesâ€™ in your model to show how the lower levels are progressively more specialized.</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:216pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">8.B <span class="s16">Choose an area of commercial activity (business, industry, government agency, etc.) with which you are familiar. Identify some ways in which its products show the use of generalization, and some ways that components used as inputs show the use of generalization.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">8.C <span class="s16">In Section 8.3.4, we saw that generalization probably was an appropriate way of modelling the association between Advert and NewspaperAdvert. Identify the other possible subclasses for Advert from Section A1.3 and repeat the checks for each. Which of them pass (if any)? Do you think there are really only two levels to the hierarchy? Explain your reasoning. Redraw the Agate class diagram to include all the generalizations that you feel are justified.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">8.D <span class="s16">For each of your new Advert subclasses, suggest appropriate attributes, operations and aggregation or composition structures.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">8.E <span class="s16">Reread the case study material for FoodCo and identify possible generalizations or compositions. Add these to the class diagram you drew for Exercises 7.C and 7.D.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">8.F <span class="s16">Consider your class diagram for FoodCo. Try to identify possible applications of the Transactionâ€“Transaction Line Item pattern or of the Accountability pattern and redraw your diagram as appropriate.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_568.png"/></span></p><p class="s7" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1102" class="s6">Ambler </a><a href="part38.htm#bookmark1263" class="s6">(2004) discusses the role of generalization in the reuse of classes and use cases. However, this topic has received little detailed attention in recent books. Thus, Rumbaugh et al. </a>(1991) remains one of the clearest summaries. This book pre-dates UML, but Rumbaugh was later one of the three amigos (along with Jacobson and Booch) who devised UML.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="s6">Jacobson et al. </a>(1999) are very clear on the architectural and reuse issues related to composition, generalization and the identification of packages in requirements analysis.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1284" class="s6">There are now a number of books on developing reusable software components, such as Szyperski (2002) </a><a href="part38.htm#bookmark1197" class="s6">and </a><a href="part38.htm#bookmark1284" class="s6">Heineman and Councill </a><a href="part38.htm#bookmark1136" class="s6">(2001). </a><a href="part38.htm#bookmark1284" class="s6">Cheesman and Daniels (2001) give a very succinct </a>and thorough introduction to the use of UML for the specification of components, and remain the best on this topic. (This book predates UML 2.0, so the notation differs in some minor details from the adopted specification.)</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1182" class="s6">For a broad-ranging introduction to patterns, </a><a href="part38.htm#bookmark1129" class="s6">Gamma et al. (1995) and </a>Buschmann et al. (1996) are still essential reading.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1301" class="s6">Withal </a><a href="part38.htm#bookmark1176" class="s6">(2007) documents over 30 â€˜requirements patternsâ€™, many of which apply to analysis issues, while others focus on non-functional matters such as performance and security. Fowler </a><a href="http://martinfowler.com/" class="s6" target="_blank">(1997) describes a number of patterns that relate specifically to analysis and that are still highly relevant. In the book these were not presented in UML, but most have now been redrawn in UML format on Fowlerâ€™s website </a><a href="part38.htm#bookmark1138" class="s6">martinfowler.com, where there are also some further pattern examples. Coad et al. </a>(1997) also give a number of analysis and design patterns. Most are presented in Coadâ€™s own notation, but some are also shown in OMT notation and in Unified notation (an early version of UML).</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="http://hillside.net/patterns/" class="s6" target="_blank">The patterns home page can be found at </a><a href="http://www.c2.com/ppr" class="s6" target="_blank">http://hillside.net/patterns/. Further useful patterns are stored in the Portland Pattern Repository at </a>www.c2.com/ppr.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_569.png"/></span></p><p class="s1" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark416">1 The four authors of the book are known as the â€˜Gang of Fourâ€™ (GOF) so the book is familiarly known as â€˜the GOF bookâ€™.</a></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_570.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:345pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark417">LEARNING OBJECTIVES</a><a name="bookmark418">&zwnj;</a></p></td><td style="width:95pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_571.jpg"/></span></p></td></tr><tr style="height:108pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_572.jpg"/></span> <span class="s16">how to develop object interaction from use cases</span></p><p class="s16" style="padding-top: 1pt;padding-left: 34pt;padding-right: 56pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_573.jpg"/></span><span class="s17"> </span>how to model object interaction using an interaction sequence diagram <span><img width="20" height="13" alt="image" src="Image_574.jpg"/></span><span class="s38"> </span>how to model object interaction using a communication diagram</p><p class="s16" style="padding-left: 34pt;padding-right: 65pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_575.jpg"/></span><span class="s17"> </span>how to model object interaction using interaction overview diagrams <span><img width="20" height="13" alt="image" src="Image_576.jpg"/></span><span class="s38"> </span>how to model object interaction using timing diagrams</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_577.jpg"/></span> <span class="s16">how to cross-check between interaction diagrams and a class diagram.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="144" height="25" alt="image" src="Image_578.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark419">Communication and collaboration between objects is fundamental to the operation of an object-oriented systsm. An object-oriented application comprises a set of autonomous objects, each responsible for a small part of the systemâ€™s overall behaviour. These objects produce the required overall system behaviour through interaction: by exchanging messages that request information, that give information or that ask another object to perform some task. This mirrors the world in which we live, where most human endeavour involves communication, interaction and collaboration between individuals. For example, each employee in a manufacturing organization has specialized tasks. Different employees interact and work with each other in order to satisfy a customer request. This involves communicating to request information, to share information and to request help from each other.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a" name="bookmark420">We have already analysed use cases (in Chapter 7) to determine some aspects of the interaction and collaboration between objects leading to the identification of classes, their attributes and their associated responsibilities. As we move to design, these object interactions have to be specified more precisely. This involves deciding how to represent responsibilities as operations. CRC cards were suggested in Section 7.6 as a supporting technique to aid the analysis and the resulting identification and allocation of responsibilities. CRC cards can also be used effectively when designing object interaction in more detail to identify and allocate operations. UML 2.2 provides several diagram types and a rich syntax for modelling interaction between objects: interaction sequence diagrams, communication diagrams, interaction overview diagrams and timing diagrams. Communication diagrams were known as interaction collaboration diagrams in UML 1.X and have been introduced in </a>Chapter 7.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="336" height="24" alt="image" src="Image_579.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.2  </a><a href="part4.htm#bookmark4" class="s29">Object Interaction and Collaboration</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.2  </a><a href="part4.htm#bookmark4" class="s29">Object Interaction and Collaboration</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.2  </a><a href="part4.htm#bookmark4" class="s29">Object Interaction and Collaboration</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark421">When an object sends a message to an object, an operation is invoked in the receiving object. For example, in the Agate case study there is a requirement to be able to determine the</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">current cost of the advertisements for an advertising campaign. This responsibility is assigned to the Campaign class. For a particular campaign this might be achieved if the Campaign object sends a message to each of its Advert objects asking them for their current cost. In a programming language, sending the message getCost to an Advert object, might use the following syntax.</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">currentAdvertCost = anAdvert.getCost();</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Note that in this example the Advert object is identified by the variable name anAdvert and the response  to  the  message,  known  as  the  return  value,  is  stored  in  the  variable currentAdvertCost.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark373" class="a">The cost of each advert returned by the operation getCost is totalled up in the attribute currentActualCost in the sending object, :Campaign (see Fig. A3.14 in Chapter </a><a href="part18.htm#bookmark422" class="a">A3 to see the attributes so far identified for the class). This attribute could be local to the operation in Campaign that calculates advertisement costs in the campaign. In order to calculate the sum of the costs for all adverts in a campaign, the statement above that gets the cost for each advert must be executed repeatedly. However, rather than think in terms of operation invocation we use the metaphor of message passing to describe object interaction, as this emphasizes that objects are encapsulated and essentially autonomous. Message passing can be represented on a class diagram, as in Fig. </a>9.1 where the message is shown as an arrow between two objects. This notation is like that of the communication diagram (Section 9.4) demonstrating that it is a natural extension of the class diagram.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;"><span><img width="301" height="50" alt="image" src="Image_580.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark422">Figure 9.1 </a><span class="s21">Object messaging.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It can be difficult to determine what messages should be sent by each object. In this case, it is clear that the getCost operation should be located in the Advert class. This operation uses data that is stored in the advertCost attribute, and this has been placed in Advert. We can also readily see that an operation that calculates the cost of a Campaign must be able to find out the cost of each Advert involved. But this is a simple interaction and the allocation of these operations is largely dictated by the presence of particular attributes in the classes. More complex requirements may involve the performance of complex tasks where an object receiving one message must itself send messages that initiate further interactions with other objects, but it may not be straightforward as to how these other objects should be involved in the interaction.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark423" class="a">It is an aim of object-oriented analysis and design to distribute system functionality appropriately among its classes. This does not mean that all classes have equal levels of responsibility but rather that each class should have relevant responsibilities. Where responsibilities are evenly distributed, each class tends not to be unduly complex and, as a result, is easier to develop, to test and to maintain. An appropriate distribution of responsibility among classes has the important side-effect of producing a system that is more resilient to changes in its requirements. When the usersâ€™ requirements for a system change it is reasonable to expect that the application will need some modification, but ideally the change in the application should be of no greater magnitude than the change in the requirements. An application that is resilient in this sense costs less to maintain and to extend than one that is not. </a>Fig. 9.2 illustrates this.</p><p style="padding-left: 71pt;text-indent: 0pt;text-align: left;"><span><img width="413" height="438" alt="image" src="Image_581.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark423">Figure 9.2 </a><span class="s21">Resilience of a design.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a" name="bookmark424">The aim of modelling object interaction is to determine the most appropriate scheme of messaging between objects in order to support a particular user requirement. As we saw in </a><a href="part23.htm#bookmark777" class="a">Chapter 6, user requirements are first documented by use cases. Each use case can be seen as a dialogue between an actor and the system, that results in objects in the system performing tasks so that the system gives the required response. For this reason many interaction diagrams explicitly include objects to represent the user interface (boundary objects) and to manage the object interaction (control objects). When such objects are not shown explicitly, it can be assumed in most cases that they will need to be included at a later stage. The identification and specification of boundary objects is in part an analysis activity and in part a design activity. When we are analyzing requirements, our concern is to identify the nature of a dialogue in terms of the userâ€™s need for information and his or her access to the systemâ€™s functionality. Deciding how an interaction should be realized in software will involve the detailed design of boundary objects that manage the dialogue and the introduction of other objects to enable the effective execution of the interaction. This is discussed in detail in </a><a href="part23.htm#bookmark814" class="a">Chapters 16 and </a>17.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In order to illustrate the preparation of interaction diagrams we build on the CRC card</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a">analysis of the use case Add a new advert to a campaign that was discussed in Section 7.6. The use case description used in </a>Chapter 7 is repeated here:</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">The campaign manager selects the required campaign for the client concerned and adds a new advert to the existing list of adverts for that campaign. The details of the advert are completed by the campaign manager.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="297" height="25" alt="image" src="Image_582.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark425">9.3 </a><a href="part4.htm#bookmark4" class="s29">Interaction Seq uence Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark425">9.3 </a><a href="part4.htm#bookmark4" class="s29">Interaction Seq uence Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark425">9.3 </a><a href="part4.htm#bookmark4" class="s29">Interaction Seq uence Diagrams</a></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark353" class="a">The resulting CRC cards are shown in Fig. </a>7.31. These form the basis for the interaction sequence diagrams that are developed in the next two sections.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A sequence diagram shows an interaction between objects arranged in a time sequence. An <i>interaction sequence diagram </i>(or simply a <i>sequence diagram</i>) is one of several kinds of UML interaction diagram. The sequence diagram is semantically equivalent to a communication diagram for simple interactions. Commonly, during requirements analysis or interaction design, object instances are modelled in terms of the roles they play and communicate by message passing.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Sequence diagrams can be drawn at different levels of detail and to meet different purposes at several stages in the development lifecycle. The commonest application of a sequence diagram is to represent the detailed object interaction that occurs for one use case or for one operation. When a sequence diagram is used to model the dynamic behaviour of a use case it can be seen as a detailed specification of the use case. Those drawn during analysis differ from those drawn during design in two major respects: analysis sequence diagrams normally do not include design objects; nor do they usually specify message signatures in any detail.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">9.3.1 <b>Basic concepts and notation</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark482" class="a" name="bookmark426">Figure 9.3 shows a sequence diagram for the use case Add a new advert to a campaign. The vertical dimension represents time and all objects</a><span class="s41">1</span> involved in the interaction are spread horizontally across the diagram. (The horizontal ordering of objects is arbitrary and has no modelling significance, though it improves readability if the interaction tends to proceed from left to right.) Time normally proceeds down the page. Each object (or element) in a sequence diagram is represented by a <i>lifeline</i>. This is a vertical dashed line with an object symbol at the top. The names of lifelines are not underlined even if the lifeline refers to an object. A message is shown by a solid horizontal arrow from one lifeline to another and is labelled with the message name. The only exception is an object creation message which is shown by a dashed line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="536" height="446" alt="image" src="Image_583.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark427">Figure 9.3 </a><span class="s21">Sequence diagram for the use case Add a new advert to a campaign.</span></p><p class="s41" style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark483" class="a" name="bookmark428">When a message is sent to an object, it invokes an operation</a>2<a href="part18.htm#bookmark484" class="a"> in that object. The message name is usually the same as the operation that is being invoked. Each message name may optionally be preceded by a sequence number that represents the sequence in which the messages are sent, but this is not usually necessary on a sequence diagram since the message sequence is already conveyed by its relative position along the time axis.</a><a href="part18.htm#bookmark484" class="s32">3</a><a name="bookmark429">&zwnj;</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Once a message is received, the operation that has been invoked begins to execute. The period of time during which an operation executes is known as an activation or an execution occurrence and is shown on the sequence diagram by a rectangular block laid along the lifeline. The activation period of an operation includes any delay while the operation waits for a response from another operation that it has itself invoked as part of its execution.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark427" class="a">We have not included boundary or control objects on all the sequence diagrams in this chapter to simplify discussion. When preparing sequence diagrams during analysis, boundary and control objects are not considered in detail. Deciding how they should work and the number of these objects required for a use case is part of the detailed design process. </a><a href="part18.htm#bookmark427">Figure</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark427" class="a" name="bookmark430">9.3 shows a simple sequence diagram drawn without boundary or control objects. </a>The sequence diagram is drawn within a rectangle known as a <i>frame</i>. The sequence diagram has been given the same name as the use case whose interaction it models, namely Add a new advert to a campaign.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;">The general format for the heading of a frame is</p><p class="s13" style="padding-top: 7pt;padding-left: 5pt;text-indent: 14pt;line-height: 162%;text-align: left;">[ <span class="p">&lt;</span>kind<span class="p">&gt;</span>] <span class="p">&lt;</span>name<span class="p">&gt;</span>[ <span class="p">&lt;</span>parameter-list<span class="p">&gt;</span>] <span class="p">where</span></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">&lt;<i>parameter-list</i>&gt; <i>::</i>= &lt;<i>parameter</i>&gt; <i>[ â€˜ ,â€™</i>&lt;<i>parameter</i>&gt;<i>] *</i></p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Terms in square brackets [â€¦] are optional.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark485" class="a" name="bookmark431">In this example the kind of frame is a sequence diagram</a><span class="s41">4</span> and we are using the shortened form <b>sd</b>. The name field is the name of the use case that the interaction represents. There are no parameters for this sequence diagram.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The getName message is the first message received by the Client and is intended to correspond to the Campaign Manager requesting the name of the selected Client which is returned to the actor. The Client object then receives a listCampaigns message and a second period of operation activation begins. This is shown by the tall thin rectangle that begins at the message arrowhead. The Client object now sends a message getCampaignDetails to each Campaign object in turn in order to build up a list of campaigns. This repeated action is called an iteration. It is represented by enclosing the repeated messages inside a frame with the heading <i>loop</i>. The interaction in this type of frame is known as a <i>combined fragment</i>. The keyword loop is an example of an <i>interaction operator </i>that specifies the type of the combined fragment. We will introduce other interaction operators later. The conditions (known as guard conditions) for continuing or ending an iteration may be shown beside the frameâ€™s heading.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 162%;text-align: justify;">For the loop that retrieves all the campaign details for a client the guard condition is [For all clientâ€™s campaigns]</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is an example of an <i>interaction constraint</i>. A combined fragment with an interaction constraint will only execute if the constraint is evaluated as true.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The Campaign Manager next sends a message to a Campaign object asking it to list its advertisements. The Campaign object delegates responsibility for getting the advertisement title to each Advert object, although the Campaign object retains responsibility for the list as a whole (indicated by the continuation of the activation bar beyond the point where the message is sent).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark432">When an advertisement is added to a campaign an Advert object is created. This is shown by the Advert </a><i>object creation </i><a href="part18.htm#bookmark486" class="a">arrow (this invokes the constructor</a><span class="s41">5</span><a href="part18.htm#bookmark427" class="a"> operation) drawn with its arrowhead pointing directly to the object symbol at the top of the lifeline. Where an object already exists prior to the interaction the first message to that object points to the lifeline below the rectangle at the top of the lifeline. For example, this is the case for the Campaign object, which must exist before it can receive an addNewAdvert message. The sequence diagram in Fig. </a><a href="part16.htm#bookmark353" class="a">9.3 corresponds directly to the interaction suggested by the CRC cards in Fig. </a>7.31. In<a name="bookmark433">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">effect, the sequence diagram is a more formal representation of the same interaction, but with the messages and the sequence of interaction both made explicit.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark434" class="a">Figure </a>9.4 shows the basic notation for sequence diagrams. The messages that we have been considering so far are synchronous messages or blocking calls. This means that the sending operation is suspended while the operation invoked by the message is executing. This is essentially a nested flow of control where the whole nested sequence of operations is completed before the calling operation resumes execution. This may be because the invoking operation requires data to be returned from the destination object before it can proceed. Formally sending the message is an example of a <i>send message event </i>and receiving the message is a <i>receive message event</i>. The execution occurrence starts with an <i>execution occurrence start event </i>and ceases with an <i>execution occurrence end event</i>. A reply message (with a dashed line) representing a return of control after the execution occurrence has ended is shown in the diagram. The reply message is optional in sequence diagrams.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;text-align: left;"><span><img width="532" height="357" alt="image" src="Image_584.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark434">Figure 9.4 </a><span class="s21">Sequence diagram showing message and execution events and states.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark525" class="a">This diagram also shows that the state of a lifeline can be shown on the lifeline in a sequence diagram. This is used to represent the constraint that the lifeline must be in the Active state before the message msg a can be accepted. </a>Chapter 11 explains how states are used and represented in UML.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark436" class="a" name="bookmark435">Most use cases imply at least one boundary object that manages the dialogue between the actor and the system. Figure 9.5 shows an alternative sequence diagram for the use case Add a new advert to a campaign but drawn this time with boundary and control objects. The boundary object representing the user interface is :AddAdvertUI. We have used the suffix UI to mean user interface. The control object is :AddAdvert and this manages the object interaction. Although not shown in Fig. </a>9.5, the interaction is initiated by the creation of the control object</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">:AddAdvert. This then gets the client details before initiating the dialogue by creating the boundary class :AddAdvertUI.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="391" alt="image" src="Image_585.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark436">Figure 9.5 </a><span class="s21">Sequence diagram for the use case Add a new advert to a campaign with boundary and control classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark487" class="a" name="bookmark437">Objects may be created or destroyed at different stages during an interaction.</a>6<a href="part18.htm#bookmark438" class="a"> On a sequence diagram the destruction of an object is indicated by a large X on the lifeline at the point in the interaction when the object is destroyed. An object may either be destroyed when it receives a message or it may self-destruct at the end of an execution occurrence if this is required by the operation that is being executed. This is shown in Fig. </a><span class="p">9.6 where the lifeline representing the Advert class objects is named advert[i]:Advert to show explicitly that a set of Advert objects will be involved in the interaction one after the other.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="514" height="300" alt="image" src="Image_586.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark438">Figure 9.6 </a><span class="s21">Object destruction.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">An object can send a message to itself. This is known as a <i>reflexive message </i>and is shown by a message arrow that starts and finishes at the same object lifeline. The sequence diagram Check campaign budget includes an example of this. For ease of reference the use case description is repeated below.</p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">The campaign budget may be checked to ensure that it has not been exceeded. The current campaign cost is determined by the total cost of all the adverts and the campaign overheads.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part18.htm#bookmark439" class="a">The corresponding sequence diagram is shown in Fig. </a>9.7 and this includes a reflexive message getOverheads sent from a Campaign object to itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="516" height="361" alt="image" src="Image_587.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark439">Figure 9.7 </a><span class="s21">Sequence diagram for the use case Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark837" class="a" name="bookmark440">In this case the reflexive message invokes a different operation from the operation that sent the message and a new activation symbol is stacked on the original execution occurrence. (This is the shorter second rectangle shown offset against the first execution occurrence.) In certain circumstances an operation invokes itself on the same object; this is known as </a><a href="part23.htm#bookmark837" class="s40">recursion </a><a href="part23.htm#bookmark837" class="a">and can be similarly represented but is not illustrated </a><a href="part18.htm#bookmark488" class="a">here.</a>7<a href="part23.htm#bookmark837" class="a"> </a><a href="part23.htm#bookmark814" class="a">In </a><a href="part23.htm#bookmark837" class="a">Chapter 17, from </a><a href="part23.htm#bookmark837">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark837" class="a">17.15 onwards, we show a number of sequence diagrams that are revisions to the </a>sequence diagram Check campaign budget. These have been prepared from a design perspective and explicitly include boundary and control classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark441" class="a">Until this point our discussion has centred on simple use cases and correspondingly simple interactions. These are typical of many modelling situations, but more complex interactions also occur in many systems. It is sometimes also necessary to represent in more detail the synchronization of messages. </a>Figure 9.8 illustrates some variations in the UML notation, which are described as follows.</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="516" height="413" alt="image" src="Image_588.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark441">Figure 9.8 </a><span class="s21">Sequence diagram for Check campaign budget with focuses of control and explicit replies shown.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The <i>focus of control </i><a href="part18.htm#bookmark441" class="a">indicates times during an execution occurrence when processing is taking place within that object. Parts of an execution occurrence that are not within the focus of control represent periods when, for example, an operation is waiting for a return from another object. The focus of control may be shown by shading those parts of the activation rectangle that correspond to active processing by an operation. In Fig. </a><a href="part18.htm#bookmark439" class="a">9.8 the Check campaign budget sequence diagram of Fig. </a>9.7 is redrawn with foci of control shaded. The focus of control for the checkCampaignBudget operation is initially with the Campaign object, but is then transferred to the Advert object and the activation rectangle in the Campaign object is now unshaded while the Advert object has the focus of control. The checkCampaignBudget activation is also unshaded while the getOverheads operation is activated by the reflexive message getOverheads.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A <i>reply </i><a href="part18.htm#bookmark439" class="a">is a return of control to the object that originated the message that began the activation. This is not a new message, but is only the conclusion of the invocation of an operation. Replies are shown with a dashed arrow, but it is optional to show them at all since it can be assumed that control is returned to the originating object at the end of the activation in a destination object (asynchronous messagesâ€”see Section 9.3.5â€”are exceptions). Replies are often omitted, as in </a><a href="part18.htm#bookmark441" class="a">Fig. 9.7. </a>Figure 9.8 explicitly shows all replies for the same interaction.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A <i>return-value </i><a href="part18.htm#bookmark492" class="a">is the value that an operation returns to the object that invoked it. These are rarely shown on an analysis sequence diagram, and are discussed further in Chapter </a><a href="part18.htm#bookmark441" class="a">10. For example, in </a>Fig. 9.8 the operation invoked by the message getName would have return-value of clientName and no parameters. In order to show the return-value the message could be shown as</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">clientName = getName</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">where clientName is a variable of type Name. The formal message label syntax is as follows:</p><p class="s13" style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">[ <span class="p">&lt;</span>attribute<span class="p">&gt; </span>â€˜ <span class="p">=</span>â€™] <span class="p">&lt;</span>signal-or-operation-name<span class="p">&gt; </span>[ â€˜ (â€™<span class="p">&lt;</span>argument-list<span class="p">&gt;</span>â€˜ )â€™] [ <span class="p">&lt;</span>return-value<span class="p">&gt;</span>] | â€˜ * â€™</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">where return-value and attribute assignment are only used on reply messages. The alternative message label of â€˜*â€™ is used to represent a message of any type being sent.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark441" class="a">Lifelines in sequence diagrams may represent different types of UML element depending upon the scope and purpose of the sequence diagram; the choice of lifelines is very much up to the systems modeller. Although a lifeline may represent an object, the lifeline name is not underlined. In most of the examples used so far the lifeline name has represented an unnamed instance of a class, for example :Campaign in </a><a href="part18.htm#bookmark436" class="a">Fig. 9.8. In Fig. </a><a href="part18.htm#bookmark442" class="a">9.5 the lifeline representing the newly created advertisement is named newAd:Advert. This could have been named simply newAd if we felt that it was not necessary to show explicitly that this was an object of the class Advert. In Fig. </a><a href="part18.htm#bookmark448" class="a">9.9  the  lifeline  representing  the  Campaign  class  objects  is  named campaign[i]:Campaign to show explicitly that a set of Campaign objects will be involved in the interaction one after the other. In Fig. </a>9.14 the lifeline that is representing the subsystem ClientCampaignAds is named :ClientCampaigns ref ClientCampaignAds. Here the keyword ref is referring the reader to another sequence diagram ClientCampaignAds which describes what is happening within this lifeline.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="525" height="383" alt="image" src="Image_589.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark442">Figure 9.9 </a><span class="s21">Sequence diagram for Check campaign budget with object selector notation shown.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark439" class="a">Interaction constraints may be represented also in various formats. In </a>Fig. 9.7 the first loop combined fragment has its interaction constraint specified as</p><p style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">[For all clientâ€™s campaigns]</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark442" class="a">This is a straightforward statement of the condition that must be true for the combined fragment to execute. Alternatively, as in Fig. </a>9.9 the interaction constraint for the same combined fragment is more formally stated as</p><p style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">[i = 1;i &lt;= campaigns.count();i++]</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is stating that the loop will iterate from 1 to the value of campaigns.count(), which holds the number of campaigns associated with that particular client. This links in with the object selector naming for the lifeline campaigns[i]:Campaign, where the first iteration involves the first object and so on.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark443" class="a">In </a>Fig. 9.10 the loop interaction operator is shown with the parameters and to illustrate the notation we assume that :Client object will have at least one linked :Campaign object. The first parameter is the minimum number of iterations and the second is the maximum number of iterations. In this case the minimum number of interactions is 1. The â€˜*â€™ symbol indicates that a maximum is not set and is determined by the interaction constraint if present. The interaction constraint for the first combined fragment is stated as</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="525" height="383" alt="image" src="Image_590.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark443">Figure 9.10 </a><span class="s21">Sequence diagram for Check campaign budget with an interaction operator with parameters.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;">[i&lt;=campaigns.count]</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The loop operand will stop executing when the interaction constraint is not true and it has executed at least the minimum number of times. Of course, it is possible that the :Client object has no linked :Campaigns and consequently the loop operand should not execute even once and its parameters should be â€˜0â€™ and â€˜*â€™. These are the default values and are normally not shown as in the case of the second combined fragment on the diagram.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A <i>synchronous message </i>or <i>procedural call </i><a href="part18.htm#bookmark434" class="a">is shown with a full arrowhead (see Fig. </a><a href="part18.htm#bookmark441" class="a">9.4) and is one that causes the invoking operation to suspend execution until the focus of control has been returned to it. In Fig. </a>9.8 the Check campaign budget interaction is shown with procedural calls and explicit returns. Procedural calls are appropriate for the interaction since each operation that invokes another does so in order to obtain data and cannot continue until that data is supplied.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark444">9.3.2 </a><b>M anaging seq uence diagrams</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Sometimes it is necessary to represent complex or large interactions using two or more sequence diagrams. This may be justified for several reasons. A single interaction may be too complex to represent in a single sequence diagram. It is possible that there are interaction fragments common to several interactions and it is more effective to model these common interaction fragments only once. Also part of the interaction may involve complex messaging between members of a group of objects and this part of the interaction is best shown separately.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The first approach to modelling an interaction with more than one sequence diagram is to reference another interaction using an <i>interaction use </i><a href="part18.htm#bookmark445" class="a">as shown in Fig. </a><a href="part18.htm#bookmark446" class="a">9.11. Here there are two interactions, List client campaigns and Get campaign budget, being referenced. The keyword ref indicates that each is an interaction use and that they are referring to the sequence diagrams List client campaigns and Get campaign budget. These two sequence diagrams are shown in Figs </a><a href="part18.htm#bookmark447" class="a">9.12 and </a>9.13 respectively. Each of these is an example of an <i>interaction fragment</i><a href="part18.htm#bookmark446" class="a">. An interaction fragment is a piece of an interaction that can be used as part of one or more larger interactions. The interaction fragment List client campaigns in </a><a href="part18.htm#bookmark446">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark446" class="a">9.12 could clearly be reused in any interaction that requires a list of the campaigns for </a>a specific client.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="547" height="269" alt="image" src="Image_591.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark445">Figure 9.11 </a><span class="s21">Sequence diagram for the interaction Check campaign budget with interaction use.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="447" height="228" alt="image" src="Image_592.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark446">Figure 9.12 </a><span class="s21">Sequence diagram for the interaction fragment List client campaigns.</span></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;"><span><img width="405" height="285" alt="image" src="Image_593.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark447">Figure 9.13 </a><span class="s21">Sequence diagram for the interaction fragment Get campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark445" class="a">In Fig. </a><a href="part18.htm#bookmark446" class="a">9.11 the message listCampaigns is being sent to the interaction use List client campaigns. This same message enters the corresponding interaction fragment in </a>Fig. 9.12 and is shown coming from the edge of the frame.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The point where a message goes to an interaction use and from where a message enters an interaction fragment is known as a <i>gate</i>.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark445" class="a">The interaction use Get campaign budget in Fig. </a><a href="part18.htm#bookmark447" class="a">9.11 does not have any messages going to it so there are no gates shown on the interaction use or in the interaction fragment in </a><a href="part18.htm#bookmark447">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark447" class="a">9.13. This interaction fragment has been chosen for illustrative purposes and has one </a>clear disadvantage. It contains the actor <i>:CampaignManager </i>and consequently can only be used in interactions where the campaign manager is getting the campaign budget. If the interaction did not contain <i>:CampaignManager</i>, it could be used for interactions where, for example, the account manager wished to know the campaign budget.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark448" class="a">Complex interactions can also be split up using lifelines to represent groups of objects and their interaction or to represent subsystems. Figure </a>9.14 shows the interaction Add a new advert to a campaign where the messaging between the :Client, :Campaign and :Advert lifelines is hidden within the :ClientCampaigns lifeline.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part18.htm#bookmark449" class="a">The :ClientCampaigns lifeline references the sequence diagram ClientCampaignAds for the hidden detail. This is shown in </a>Fig. 9.15. Note that the messages that are received by the lifeline :ClientCampaigns enter the interaction fragment ClientCampaignAds through gates.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="493" height="351" alt="image" src="Image_594.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark448">Figure 9.14 </a><span class="s21">Sequence diagram with the detail of the interaction in ClientCampaignAds not showing.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span><img width="359" height="446" alt="image" src="Image_595.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark449">Figure 9.15 </a><span class="s21">Sequence diagram showing the interaction for ClientCampaignAds.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark450">9.3.3 </a><b>Branching</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark451" class="a">The interactions that we have considered so far have only one execution path, although some have iterations during their execution. Some interactions have two or more alternative execution pathways. Each reflects a branch in the possible sequence of events for the use case it represents. The notation for branching is illustrated in </a><a href="part16.htm#bookmark275" class="a">Fig. 9.16. This shows a sequence diagram for the use case Add a new advert to a campaign if within budget. The relationship between this use case and the use case Add a new advert to a campaign will result in a change to the use case diagram in Fig. </a>A2.2, where the use case Add a new advert to a campaign if within budget needs to be added and shown with an Â« includeÂ»  relationship with Check campaign budget. The use case description is as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="545" height="440" alt="image" src="Image_596.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark451">Figure 9.16 </a><span class="s21">Sequence diagram for Add a new advert to a campaign if within budget showing branching.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">A new advertisement is added to a campaign by the campaign manager only if the campaign budget is not exceeded by adding the new advert. If adding the advertisement would cause the budget to be exceeded then a campaign budget extension request is generated. This will be recorded for later reference. The budget extension request is printed and sent to the client at the end of the day.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark445" class="a">The first part of this sequence diagram uses the interaction use of two interaction fragments List client campaigns and Get campaign budget which have already be described in </a><a href="part18.htm#bookmark445">Figures</a></p><p class="s13" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark445" class="a">9.11 </a><a href="part18.htm#bookmark446" class="a">and </a><a href="part18.htm#bookmark445" class="a">9.12. The branching is shown in the combined fragment named with the keyword </a>alt <span class="p">which is a short form of </span>alternatives<span class="p">. The combined fragment has two (or more) compartments known as </span>interaction operands<span class="p">. Each operand corresponds to one of the alternatives in the combined fragment and each operand should have an interaction constraint to indicate under what conditions it executes. The sequence of the operands is not significant. In this example there are only two operands. The interaction constraint [else] can be used as the default in the last operand. The first operand deals with the case where the campaign is within budget and a new object of the class Advert is created by the message Advert. The second operand</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">represents the case when the budget is spent or exceeded and a request to add a new advert has to be created. This is shown by the message Request creating the newRequest instance.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The branching notation can be used at a generic level to create a sequence diagram that represents all possible sequences of interaction for a use case. Such a generic diagram will typically be showing communication between anonymous objects or roles rather than particular instances. In general, looping and branching constructs correspond respectively to iteration and decision points in the use case. When drawn at an instance level a sequence diagram shows a specific interaction between specific objects. The two kinds of sequence diagram (generic and instance level) are equivalent to one another if the interactions implied by the use case contain no looping or branching constructs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark452">9.3.4 </a><b>Continuations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Sequence diagrams can be linked using <i>continuations</i><a href="part18.htm#bookmark453" class="a">. Continuations can be specified within an alt combined fragment to allow a link back to a referring sequence diagram. In </a>Fig. 9.17 the continuations Within budget and Budget spent are used to link the two sequence diagrams. The sequence diagram Authorize expenditure includes the interaction use Calculate costs. At this point in Authorize expenditure the detail of the interaction is shown in Calculate costs. The interaction in Calculate costs proceeds with the two getCost messages. If the cost is within budget the interaction constraint in the first operand of the alt combined fragment is true and the interaction use Identify underspend is followed. (This interaction fragment is just illustrative and is not specified.) The flow of the interaction now comes to the continuation Within budget. The interaction now moves back to sequence diagram Authorize expenditure, continues from the point of the continuation with the same name and the message authorize is sent. In a similar way if the cost is not within budget the [else] operand within Calculate costs is satisfied and control is returned to Authorize expenditure at the Budget spent continuation. The dashed arrows between the two sequence diagrams are not part of UML and are only intended to illustrate the transfer of execution between the diagrams.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="312" alt="image" src="Image_597.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark453">Figure 9.17 </a><span class="s21">An example showing the use of continuations.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">9.3.5 <b>Asynchronous messages</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark454">So far we have been dealing only with synchronous messages. An </a><i>asynchronous message </i>or <i>signal</i><a href="part18.htm#bookmark455" class="a">, drawn with an open arrowhead as in </a>Fig. 9.18, does not cause the invoking operation to halt execution while it awaits a return. When an asynchronous message is sent, operations in both objects may carry out processing at the same time. Asynchronous messages are</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">frequently used in real-time systems where operations in different objects must execute concurrently, either for reasons of efficiency or because the system simulates real-world activities that also take place concurrently. It may be necessary for an operation that has been invoked asynchronously to notify the object that invoked it when it has terminated. This is done by explicitly sending a message (known as a <i>callback</i>) to the originating object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="433" alt="image" src="Image_598.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark455">Figure 9.18 </a><span class="s21">Sequence diagram showing different message types and time constraints.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">9.3.6 <b>Time constraints</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark455" class="a" name="bookmark456">A sequence diagram can be labelled in various ways. Labels may be included using the note notation in UML with, for example, descriptions or explanations of aspects of the diagram or model. If time constraints apply to the execution of operations or other elements of interaction diagrams these may be shown. In Fig. 9.18 each of the messages is simply named with signalE, signalF and so on. Time expressions may be associated with the name of the message so that duration constraints can be specified for the execution of an operation or the transmission of a message. Construction marks may also be used to show a time interval with a constraint. This is illustrated in Fig. </a>9.18 to show the interval between the sending signalE and receiving signalF. Time constraints are frequently used in modelling real-time systems where the application must respond within a certain time, typically for reasons of safety or efficiency. For most other information systems the sequence of the messages is the most important issue.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">So far we have only considered message arrows that have been drawn horizontally across</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">the sequence diagram and at right angles to the object lifelines. Drawing a message arrow in this fashion indicates that the time taken to send a message is not significant in comparison to the time taken for operation execution. There is consequently no need to model another activity during the period while a message is in transit. In some applications the length of time taken to send a message is itself significant. For example, in distributed systems messages are sent over a network from an object on one computer to another object on a different computer. If the transit time for a message is significant, the message arrow is slanted</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark455" class="a">downwards so that the arrowhead (the arrival of the message) is below (later than) the tail (the origination of the message). The asynchronous messages (e.g. signalE) shown in Fig. 9.18 illustrate this. The message signalE is constrained to take between 0 and 14 time units by the duration constraint shown in </a>Fig. 9.18. The duration of signalX is shown as taking d time units and a duration constraint has been specified for the interval from sending signalX and receiving signalY. This duration constraint states that the interval must be between d and d*3 time units.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">9.3.7 <b>M odelling real-time systems and concurrency</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Real-time systems are broadly characterized by the need to respond to external events within tight time constraints. Partly for this reason, they frequently exhibit concurrent behaviour in the form of simultaneous execution pathways or <i>threads of control</i>. An application that has concurrent execution always includes some objects that coordinate and initiate threads of control; these are <i>active objects</i>. In addition, real-time applications usually include many other objects that work only within a thread of control; these are known as <i>passive objects</i><a href="part18.htm#bookmark455" class="a">. Active objects or classes are shown with a double line at each side of the head of the lifeline in an interaction diagram. The lifeline :ClassA in Fig. </a><a href="part23.htm#bookmark814" class="a">9.18 is an example of an active object. Active objects can continue to operate without the invocation of operations from other objects. They have their own thread of control. Active objects are frequently composites with embedded parts (the interface or boundary class as a composite is discussed in </a>Chapter 17).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark457" class="a">It is important for a sequence diagram of a concurrent system to show clearly which threads of control are active at any time. Combined fragments to show parallel (keyword par), optional (keyword opt) and critical activity are useful when modelling real-time systems. Figure </a>9.19 shows a complete list of the interaction operators defined in UML with a short explanation of each. Timing diagrams provide a clear diagrammatic representation of the timing constraints, state changes and messaging between lifelines and are discussed later.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="519" alt="image" src="Image_599.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark457">Figure 9.19 </a><span class="s21">Interaction operators that may be used with combined fragments.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">9.3.8 <b>Guidelines for preparing seq uence diagrams</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1118" class="a">Modelling interaction is an important activity during the information systems development process. The following are some general guidelines for the preparation of sequence diagrams in particular and are adapted from </a>Bennett et al. (2005).</p><p class="s25" style="padding-top: 5pt;padding-left: 19pt;text-indent: -13pt;text-align: justify;">1. <span class="p">Decide at what level you are modelling the interaction. Is it describing an operation, a use case, the messaging between components or the interaction of subsystems or systems?</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;"><a name="bookmark458">2. </a><span class="p">Identify the main elements involved in the interaction. If the interaction is at use case level the collaborating objects may already have been identified through the use of CRC cards and their responsibilities partly allocated. Of course, CRC cards can be used at different levels of granularity to explore the behaviour of any group of lifelines.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">3. <span class="p">Consider the alternative scenarios that may be needed. Again a CRC card exercise may be helpful in exploring these.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">4. <span class="p">Identify any existing interactions that have already been modelled as sequence diagrams or that will be so that they can be included as interaction uses.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">5. <span class="p">Draw the outline structure of the diagram.</span></p><p class="s25" style="padding-left: 19pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">a. <span class="p">Create a frame with a suitable name.</span></p><p class="s25" style="padding-left: 32pt;text-indent: -13pt;text-align: justify;">b.  <span class="p">Add the appropriate lifelines starting with the lifeline that is first involved with the interaction and then placing the others from left to right. This can improve the layout of the sequence diagram. If an actor lifeline is being modelled, then this should be placed first followed by the boundary lifeline, if this being modelled.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a name="bookmark459">6. </a><span class="p">Add the detailed interaction.</span></p><p class="s25" style="padding-top: 3pt;padding-left: 32pt;text-indent: -13pt;text-align: justify;">a.  <span class="p">Starting from the top of the frame add the first message. Lay out the subsequent messages from top to bottom, showing the appropriate level of detail in the message labels.</span></p><p class="s25" style="padding-left: 32pt;text-indent: -13pt;text-align: justify;">b. <a href="part18.htm#bookmark457" class="a">Use combined fragments with appropriate interaction operators to describe, for example, looping, branching and optional paths. The full list of interaction operators is shown in </a><span class="p">Fig. 9.19. Add interaction constraints to these as necessary.</span></p><p class="s25" style="padding-left: 32pt;text-indent: -13pt;text-align: justify;">c. <span class="p">Identify any interaction fragments that are or will be used in other interactions and place these in separate sequence diagrams. Prepare the sequence diagrams for these interaction fragments so that they are as reusable as possible. Place the corresponding interaction uses in the diagram being drawn.</span></p><p class="s25" style="padding-left: 32pt;text-indent: -13pt;text-align: justify;">d. <span class="p">Annotate the diagram with comments where this is necessary, for example to include pre- and post-conditions or to improve readability.</span></p><p class="s25" style="padding-left: 19pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">e. <a href="part18.htm#bookmark434" class="a">Add state invariants to the diagram as required (as shown in </a><span class="p">Fig. 9.4).</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">7. <span class="p">Check for consistency with linked sequence diagrams and modify as necessary. Sequence diagrams may be linked in various ways that have been described in Section 9.3.3. If the interaction is at the level of a use case it is useful to consider any other use cases that are linked by extend or include dependencies.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">8. <span class="p">Check for consistency with other UML diagrams or models, in particular, with the relevant class diagrams (and state machine diagrams if they have been prepared at this point).</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Once a first-cut sequence diagram has been produced, it is important to work through these steps again from step 2 to refine the model. For complex interactions it takes several iterations to produce a model that describes the required behaviour unambiguously and clearly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="258" height="24" alt="image" src="Image_600.png"/></span></p><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s28">9.4</a></p><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s28">9.4</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s28">9.4</a></p><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s29">Communication Diagrams</a></p><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s29">Communication Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s29">Communication Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a" name="bookmark460">Communication diagrams are the second kind of interaction diagram in the UML notation set. They have already been introduced in </a>Chapter 7, where they have been used to represent the collaboration that realizes a use case. We will examine the notation for communication diagrams in more detail here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">9.4.1 <b>Basic concepts and notation</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a">Communication diagrams have many similarities to sequence diagrams. For straightforward interactions they express the same information in a different format and, like sequence diagrams, they can be drawn at various levels of detail and during different stages in the system development process. The most significant difference between the two types of interaction diagram is that a communication diagram explicitly shows the links between the lifelines that participate in a collaboration. (Collaborations have been discussed in Chapter </a><a href="part18.htm#bookmark461" class="a">7.) Unlike sequence diagrams, there is no explicit time dimension and lifelines are represented only by rectangles. </a>Figure 9.20 shows an example of a communication diagram.</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="546" height="357" alt="image" src="Image_601.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark461">Figure 9.20 </a><span class="s21">Communication diagram for the use case Add a new advert to a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark461" class="a">In a communication diagram the interaction is drawn on what is essentially a fragment of a class or object diagram, as can be seen in </a>Fig. 9.20. This example is drawn at quite a simple level of detail (but note that it includes a lifeline :AddAdvertUI representing a boundary object and the lifeline :AddAdvert representing a control object). This level of detail is often sufficient to capture the nature of an interaction. Since the diagram has no time dimension the order in which messages are sent is represented by sequence numbers. In this diagram the sequence numbers are written in a nested style (for example, 3.1 and 3.1.1) to indicate the nesting of control within the interaction that is being modelled. Thus the operation showCampaignAdverts passes control to the operation listAdverts, which has one deeper level of nesting. A similar style of numbering is used to indicate branching constructs.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The notation for iteration is different in communication diagrams and for message 3.1.1.1 is</p><p style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">*[For all clientâ€™s campaigns]</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">where the * indicates iteration. The message label syntax is discussed in more detail in the next section.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark461" class="a">Typically, there is more than one possible way of designing the interaction for a particular use case and each of the alternative interactions will have different strengths and weaknesses. The alternatives arise because of the different possible allocations of responsibility. For example, although feasible, the interaction in Fig. </a>9.20 may have some undesirable features. The message getCampaignDetails from :Client to :Campaign requires the :Client lifeline to return these details to the :AddAdvert lifeline. If the campaign details only include the campaign names, then a relatively small amount of data is being passed from :Campaign to</p><p class="s41" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark464" class="a" name="bookmark462">:Client and then on to :AddAdvert. This may be acceptable. On the other hand, if the campaign details also include the start and finish dates for each campaign and the campaign budget then much more data is being passed through :Client. In these circumstances :Client is now responsible for providing significant amounts of data about the campaigns; arguably this should be the responsibility of the :Campaign lifelines themselves. An alternative interaction can pass data about campaigns directly from :Campaign to :AddAdvert. This alternative interaction is shown in Fig. </a><a href="part18.htm#bookmark489" class="a">9.21, where :AddAdvert takes the responsibility for getting the campaign details directly from the :Campaign lifelines. In this interaction the :Client object is only responsible for providing :AddAdvert with a list of its campaigns.</a>8<span class="p"> This is an appropriate responsibility for :Client.</span><a name="bookmark463">&zwnj;</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="546" height="338" alt="image" src="Image_602.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark464">Figure 9.21 </a><span class="s21">Alternative communication diagram for the use case Add a new advert to a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">9.4.2 <b>M essage labels in communication diagrams</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Messages on a communication diagram are represented by a set of symbols that are the same as those used in a sequence diagram, but with some additional elements to show sequencing and recurrence as these cannot be inferred from the structure of the diagram. Each message label includes the message signature and also a sequence number that reflects call nesting iteration, branching and concurrency within the interaction. The formal message label syntax is as follows:</p><p style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">&lt;<i>sequence-expression</i>&gt; <i>[ </i>&lt;<i>attribute</i>&gt; <i>â€˜ </i>=<i>â€™] </i>&lt;<i>signal-or-operation-name</i>&gt;</p><p class="s13" style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">[ â€˜ (â€™<span class="p">&lt;</span>argument-list<span class="p">&gt;</span>â€˜ )â€™] [ <span class="p">&lt;</span>return-value<span class="p">&gt;</span>]</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark492" class="a" name="bookmark465">Guard conditions may be written in Object Constraint Language (OCL) (see </a>Chapter 10), and are only shown where the enabling of a message is subject to the defined condition.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A <a href="part18.htm#bookmark490" class="s40">sequence-expression</a><span class="s41">9</span> is a list of <i>sequence-terms </i>separated by dots (â€˜.â€™) and terminated by a colon:</p><p style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">&lt;<i>sequence-term</i>&gt; <i>â€˜ .â€™ [ </i>&lt;<i>sequence-term</i>&gt;<i>] * â€˜ :â€™</i></p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A <i>sequence-term </i>has the following syntax:</p><p style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">&lt;<i>integer</i>&gt; <i>[ </i>&lt;<i>name</i>&gt;<i>] [ </i>&lt;<i>recurrence</i>&gt;<i>]</i></p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this expression <i>integer </i><a href="part18.htm#bookmark464" class="a">represents the sequential order of the message. This may be nested within a loop or a branch construct, so that, for example, message 5.1.3 occurs after message 5.1.2 and both are contained within the activation of message 5.1. In Fig. </a>9.21 messages 4.1.1 and 4.1.2 are nested within the activation of message 4.1. The <i>name </i>of a sequence-expression is used to differentiate two concurrent messages since these are given the same sequence number. For example, messages 3.2.1a and 3.2.1b are concurrent within the activation of message 3.2. <i>Recurrence </i>reflects either iterative or conditional execution and its syntax is as follows:</p><p class="s13" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Branching<span class="p">: </span>â€˜ [ â€™guardâ€˜ ] â€™ Iteration<span class="p">: </span>â€˜ * â€™â€˜ [ â€™iteration-clauseâ€˜ ]                â€™</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark466" class="a">Some sample message labels are listed in </a>Fig. 9.22.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="167" alt="image" src="Image_603.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark466">Figure 9.22 </a><span class="s21">Examples of the syntax for various types of message label.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark467" class="a">Figure </a><a href="part18.htm#bookmark439" class="a">9.23 illustrates the use of a communication diagram to show the interaction for a single operation, in this case checkCampaignBudget, which is one of the operations shown in the sequence diagrams in </a>Fig. 9.7.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="525" height="293" alt="image" src="Image_604.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark467">Figure 9.23 </a><span class="s21">Communication diagram for the operation checkCampaignBudget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark468">Communication diagrams are preferred to sequence diagrams by some developers as they offer a view of object interaction that is easy to relate to the underlying collaboration because of the visibility of links between the lifelines. However, they do not provide the same level of syntax as sequence diagrams and are not suitable for complex interaction. Generally, communication diagrams are probably useful during analysis activities while sequence diagrams are better at representing design detail. Communication diagrams are used to describe analysis use case realizations because typically the messages are not fully specified at this stage. However, when there are many messages between two objects in one interaction then a collaboration diagram is more difficult to read than the equivalent sequence diagram. In particular, sequence diagrams also offer more explicit visual cues to the duration of each activation and show detailed design interactions more clearly. We believe that it is seldom useful to draw both kinds of interaction diagram for the same purpose. Some developers use sequence diagrams for the generic model of the interaction and collaboration diagrams for specific scenarios. The choice of which is the more appropriate usually depends on the nature of the interaction and the purpose of the diagram. Often neither offers a clear advantage and it should be a matter of organizational policy as to which is normally prepared.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="4" height="20" alt="image" src="Image_605.jpg"/></span></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark469">9.5  </a><a href="part4.htm#bookmark4" class="s29">Interaction Overview Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="292" height="2" alt="image" src="Image_606.png"/></span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a">Interaction overview diagrams are variants of activity diagrams (explained in Chapter </a>5) and incorporate interaction diagrams. An interaction overview diagram focuses on the overview of flow of control in an interaction where the nodes in the diagram are interactions or interaction uses. As a result the detailed messaging of the interaction is hidden in the diagram. The syntax for activity diagrams is used including decision and merge nodes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark451" class="a">In order to produce an interaction overview diagram the interaction needs to be broken down into its key elements. The interaction Add a new advert to a campaign if within budget (Fig. </a><a href="part18.htm#bookmark471" class="a">9.16) is already broken down to some extent by referring to two interaction fragments. However, the alt combined fragment could be broken down further to show the flow of control. Two more interaction fragments, Create advert and Create request are introduced (Figs </a><a href="part18.htm#bookmark472" class="a">9.25 and </a><a href="part18.htm#bookmark470" class="a">9.26 respectively) and each is shown as an interaction use in </a>Fig. 9.24.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="545" height="440" alt="image" src="Image_607.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark470">Figure 9.24 </a><span class="s21">Alternative version of the sequence diagram for the interaction Add a new advert to a campaign if within budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="348" height="182" alt="image" src="Image_608.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark471">Figure 9.25 </a><span class="s21">Sequence diagram for the interaction fragment Create advert.</span></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="348" height="182" alt="image" src="Image_609.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark472">Figure 9.26 </a><span class="s21">Sequence diagram for the interaction fragment Create request.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark474" class="a" name="bookmark473">The interaction overview diagram is shown in Fig. </a><a href="part18.htm#bookmark446" class="a">9.27. As it is a variant of an activity diagram, it starts with an initial node leading to the interaction fragment List Campaigns for Client. The next node is an interaction use (the interaction fragment referenced is shown in Fig. </a>9.12). This is followed by another in-line interaction fragment, Add Costed Advert. It is matter of judgement as to when it is best to have interaction fragments or interaction uses as nodes. It depends upon the level of detail that is most appropriate for the diagram. It is useful to reference interaction fragments where they have already been specified, but it does depend upon the purpose of the interaction overview diagram. In this case the interaction fragment could just as easily have been represented as an interaction use and the detail of the interaction fragment could be specified in a separate sequence diagram. The alt combined fragment in the original sequence diagram is represented in the interaction overview diagram as a decision node with two output paths, each with a guard condition, that lead to the appropriate interaction uses. The end of the interaction is indicated by the final node notation.</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="545" height="707" alt="image" src="Image_610.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark474">Figure 9.27 </a><span class="s21">Interaction overview diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="182" height="25" alt="image" src="Image_611.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark475">9.6  </a><a href="part4.htm#bookmark4" class="s29">Timing Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark475">9.6  </a><a href="part4.htm#bookmark4" class="s29">Timing Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark475">9.6  </a><a href="part4.htm#bookmark4" class="s29">Timing Diagrams</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An interaction overview diagram is useful when describing a complex interaction, particularly when it comprises a series of interaction fragments, some of which may be used in several interactions. In most circumstances it is not going to be helpful to produce both an interaction sequence diagram and an interaction overview diagram for the same interaction. Interaction overview diagrams also provide a useful notation to describe high-level system interactions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark525" class="a">Timing diagrams are of particular value when specifying how time constraints affect the interaction between lifelines. It is useful to build the state machines for the key lifelines at the same time. State machines are discussed in </a>Chapter 11.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Timing diagrams may be prepared at different levels of detail. They include the state changes for one or more lifelines; typically those with important time dependent behaviour are modelled. Where more than one lifeline is included in a timing diagram the messages between the lifelines may be shown.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure 9.28 shows an interaction fragment that describes part of the interaction that occurs when a car enters a car park. It shows the messages sent between active objects, but does not show any activations. Access to the car park is controlled by a barrier which is only raised after a ticket has been requested and taken by the driver. There is a weight sensor just before the barrier that activates the ticket machine when a car is detected. When the car moves to go under the barrier the ticket machine is deactivated. There is another weight sensor after the barrier that detects when the car has passed under the barrier so that it can be lowered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="327" alt="image" src="Image_612.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark476">Figure 9.28 </a><span class="s21">Sequence diagram for the interaction fragment Car enters car park.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part18.htm#bookmark478" class="a">The timing diagram containing the lifelines :TicketMachine and :Barrier is shown in </a><a href="part18.htm#bookmark478">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark478" class="a" name="bookmark477">9.29. The diagram is divided into two instances, one for each lifeline. The :Barrier lifeline </a>starts off in the Lowered state and moves to the Raised state after the lifeline has received the signal raiseBarrier. The time t is set at the time the raiseBarrier message is received by the lifeline</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">:Barrier and the timing constraint specifies that :Barrier should change state within 3 seconds of time t. The sloped line between the two states models the duration of the state change. The Blocked state represents the ticket machine being unable to complete its cycle and issue another ticket until the car has gone through the weight sensor after the barrier and the barrier is lowered.</p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="258" alt="image" src="Image_613.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark478">Figure 9.29 </a><span class="s21">Timing diagram for the interaction Car Enters Car Park.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark479">9.7 </a><a href="part4.htm#bookmark4" class="s29">M odel Consistency</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="185" height="2" alt="image" src="Image_614.png"/></span></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">All the UML diagrams and documentation should be consistent with each other. The preparation of sequence and communication diagrams involves the allocation of operations to classes. These operations should be listed against the correct classes in the class diagram and, if operation signatures have been specified in full, these must be consistent. The sequence and communication diagrams and the class diagrams should be mutually consistent. A good CASE tool enforces this consistency at a syntactic level, usually by prompting the developer with a list of operations currently allocated to a class when he or she adds a message that is sent to an object of that class. If a corresponding operation has not been defined in the destination class, the appropriate operation should be added automatically to the class definition.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">But to ensure full consistency between a class diagram and a set of related interaction diagrams requires more than the simple syntactic checking described above. Every sending object in an interaction diagram must have the ability to send its message to the destination object and this requires it to know the identity or <i>object reference </i><a href="part23.htm#bookmark681" class="a">of the destination object. There are only two ways that a sending object can know the reference of a destination object. It may already be known by the sending object via a direct link, which really means that an association exists between the respective classes to which the objects belong. Alternatively, a sending object may obtain the reference it needs indirectly from another object (usually of a different class) that has a link with the destination object. The representation and placement of the object references that represent associations is a design issue that we discuss in detail in Chapter </a>14. At this stage it is sufficient to ensure that there is some possible pathway via object links (deduced from associations on the class diagram) that connects a sending object to a destination object. Any inconsistency between an interaction diagram and the corresponding class diagram indicates a flaw in one or the other. There may be a necessary association missing from the class diagram, for instance. Note that the existence of an association does not by itself guarantee the existence of any particular link. Where the minimum multiplicity of an association is zero there may not be any object that has a link for that association. If the multiplicity is one (or more), then each object must have at least one link. All message pathways should be analysed carefully.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">When an interaction fragment is referenced within a more complex interaction (described in either a sequence diagram or an interaction overview diagram) it is important that this interaction use is consistent with the interaction fragment. Of course an interaction fragment may well be used in several other interactions.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark525" class="a">State machines (described in Chapter </a>11) document information about messages from the perspective of an object rather than an interaction, and it is also important to check for</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">consistency between the state machine diagram for a class and all interaction diagrams that involve objects of that class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="122" height="25" alt="image" src="Image_615.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">9.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a" name="bookmark480">Object interaction is a key feature of the object-oriented approach to systems development. When discussing object interaction we use the metaphor of message passing to describe the mode of collaboration between objects. Developing interaction diagrams requires a careful analysis of the use cases and may involve the use of CRC cards (see Chapter </a><a href="part23.htm#bookmark681" class="a">7). UML provides a range of modelling techniques to describe interactionsâ€”sequence, communication, interaction overview and timing diagramsâ€”which provide a rich notation. Communication diagrams are more commonly used when analysing use cases to prepare analysis use case realizations. Sequence and interaction overview diagrams may be used effectively to represent detailed design specifications of interactions. Timing diagrams are particularly useful for real- time systems. When working with complex interactions it may be necessary to use several linked diagrams. UML provides various notational alternatives for this. It is common to have more than one possible interaction for a use case and it is a pragmatic judgement as to which is most appropriate. The design considerations that inform such judgements are discussed in detail in Chapter </a>14. An integral part of the process of developing interaction diagrams is ensuring that they and the class diagrams for an application are mutually consistent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:321pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">9.1  <span class="s16">List two specific features of bad object-oriented modelling that are discouraged by the use of communication diagrams.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.2  <span class="s16">What are the benefits of keeping all classes reasonably small and self-contained?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;text-indent: -26pt;text-align: left;">9.3 <span class="s16">What are the main differences between sequence diagrams and communication diagrams?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 7pt;text-indent: -26pt;text-align: left;">9.4  <span class="s16">What are the essential parts of a message label (i) in a sequence diagram and (ii) in a communication diagram?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.5  <span class="s16">What is a lifeline?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.6  <span class="s16">What is meant by execution occurrence?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.7  <span class="s16">How are combined fragments used in sequence diagrams?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">9.8  <span class="s16">How do asynchronous messages differ from synchronous messages (i) in terms of the behaviour of the sending and receiving objects and (ii) in their notation?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">9.9  <span class="s16">In what circumstances are sequence numbers in a communication diagram written in nested style (e.g. 3.2.1)?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.10 <span class="s16">What consistency checks should be applied to interaction diagrams?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.11 <span class="s16">Describe three ways in which complex interactions may be represented using UML.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.12 <span class="s16">What is the difference between an interaction use and an interaction fragment?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.13 <span class="s16">What is the purpose of interaction overview diagrams?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.14 <span class="s16">What can be represented by the nodes in an interaction overview diagram?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">9.15 <span class="s16">How are timing diagrams used and when are they most useful?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark481">Case Study Work, Exercises and Projects</a></p></td></tr><tr style="height:45pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Exercises 9.Aâ€“9.C are based on the use cases listed in Exercise 7.A and the use case realizations developed in Exercise 7.B.</p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:132pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s35" style="padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">9.A <span class="s16">For each of the use cases prepare a sequence diagram.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">9.B <span class="s16">For the use case Start line run identify an alternative interaction and prepare a sequence diagram for this interaction.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 10pt;text-indent: -23pt;text-align: justify;">9.C <span class="s16">Critically compare the two interactions that you have identified for the use case Start line run and with suitable justification determine which is the more appropriate.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">9.D <span class="s16">Using a CASE tool with which you are familiar, enter several use case realizations including at least one communication and one sequence diagram (e.g. the FoodCo models).</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">9.E <span class="s16">Critically evaluate the extent to which the CASE tool supports UML and the consistency check that is necessary between the different diagrams.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_616.png"/></span></p><p class="s7" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1263" class="s6">Rumbaugh et al. </a><a href="part38.htm#bookmark1121" class="s6">(1991) and Booch </a><a href="part38.htm#bookmark1129" class="s6">(1994) discuss their variants of message modelling in detail. Buschmann et al. </a><a href="part38.htm#bookmark1163" class="s6">(1996) provide interesting examples of system sequence diagrams using a notation from which the UML notation for sequence diagrams has developed. Douglass </a>(2004) discusses the use of this notation for real-time systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_617.png"/></span></p><p class="s1" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark482">1 More generally an interaction may involve components, subsystems or other connectable elements.</a><a name="bookmark483">&zwnj;</a></p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark484">2 Though not explicitly specified in the UML specification, interaction sequence diagrams may be used to model interaction at the level of responsibilities as well.</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark485">3 The sequence of messages is partially ordered. Partially ordered means that the messages are placed in time sequence and two or more messages may be sent at the same time.</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark486">4 A frame may be used for all UML diagram types. If the diagram has a naturally implied boundary then the frame may be omitted. Frames are used for interaction diagrams to make it clearer how they are combined.</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark487">5 A constructor operation creates an object instance. In the executable system a constructor typically allocates memory for the new object and intializes attribute values. It is conventional in object-oriented programming languages to name constructors with the class name; hence the constructor operation name begins with a capital letter as does the class name.</a></p><p class="s1" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part23.htm#bookmark681" class="s3" name="bookmark488">6 Destructor operations are discussed in more detail in </a>Chapter 14.</p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark489">7 If a limit has been set to the depth of recursion this can be recorded in a note on the diagram.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark490">8 This will be a list of object identifiers that is then used by :AddAdvert to navigate to each Campaign object in turn.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;">9 <i>Sequence-expressions </i>are commonly omitted from interaction sequence diagrams as the sequence is normally implied by the relative position of the messages one after the other or by using combined fragments with interaction operators.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_618.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:345pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark491">LEARNING OBJECTIVES</a><a name="bookmark492">&zwnj;</a></p></td><td style="width:95pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_619.jpg"/></span></p></td></tr><tr style="height:81pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_620.jpg"/></span> <span class="s16">why operations need to be specified</span></p><p class="s16" style="padding-top: 1pt;padding-left: 34pt;padding-right: 73pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_621.jpg"/></span><span class="s17"> </span>the difference between algorithmic and non-algorithmic methods <span><img width="20" height="13" alt="image" src="Image_622.jpg"/></span><span class="s38"> </span>how to interpret different ways of specifying operations</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_623.jpg"/></span> <span class="s16">how to specify operations using one method.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_624.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a" name="bookmark493">Operation specifications describe the detailed behaviour of the system. They support the graphical models in UML by adding detail and precision so that users can confirm the correctness of the model, and designers can use them as a basis for software development. But they are potentially the most complex of all entries in the repository given their level of detail. Before operations can be specified, object interaction (see Chapter </a>9) should be modelled as it helps to determine the distribution of behaviour among the various classes and results in the allocation of operations to classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Operation specifications provide the precision that is necessary for software construction and can be written at varying levels of detail. The â€˜contractâ€™ style is a kind of black box specification. If the behaviour of an operation is simple, a contract that describes only its external interface detailing its inputs and outputs may be all that is required. If its behaviour is not yet described in any detail, a black box specification may be all that is possible. Often, though, there is also a need to describe an operationâ€™s logic, or internal behaviour.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a" name="bookmark494">The two general ways of doing this are respectively called â€˜algorithmicâ€™ (or â€˜proceduralâ€™) and â€˜non-algorithmicâ€™ (or â€˜declarativeâ€™). A non-algorithmic approach is generally preferred in object- oriented development, but in some situations only an algorithmic approach is sufficiently expressive. UML does not require any specific techniques or notations for specifying operations, but activity diagrams (first introduced in Chapter </a>5) can express the logic of an operation effectively in a graphical form. UML also has a formal language known as the Object Constraint Language (OCL), which was originally intended for specifying general constraints on a model. In its latest version (2.0), OCL also permits the writing of queries, business rules and other expressions that can apply to a model.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are established non-UML techniques, in particular decision tables, pre- and post- condition pairs and Structured English that can be used for operation specification. None of these are specific to an object-oriented approach, but all can be used to specify operations in a UML model. A full description is beyond the scope of this book, so we introduce them at an overview level.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="314" height="25" alt="image" src="Image_625.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.2  </a><a href="part4.htm#bookmark4" class="s29">Role of Operation Specifications</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.2  </a><a href="part4.htm#bookmark4" class="s29">Role of Operation Specifications</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.2  </a><a href="part4.htm#bookmark4" class="s29">Role of Operation Specifications</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark495">Each operation specification is a small but necessary step on a path that begins with a userâ€™s idea of a business activity and leads ultimately to a software system made up of collaborating objects with attributes and methods. From an analysis perspective, an operation specification is created at a point when the analystâ€™s understanding of some aspect of an application domain can be fed back to users, ensuring that the proposals meet usersâ€™ requirements. From a design perspective, an operation specification is a basis for a more detailed design specification, which later guides a programmer to a method that is an appropriate implementation of the operation in code. An operation specification can also be used to verify that the method does indeed meet its specification, which in turn describes what the users intended, thus checking that the requirements have been implemented.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Novice programmers often do not appreciate the need to design, still less specify, an operation before beginning to write it in program code. This is partly because beginners are given such simple tasks: e.g. to write a program that can calculate and display the area of a rectangle. More importantly, the student is shielded from the activity of requirements analysis. In effect, the teacher has already carried this out, and the student is presented with its results as a starting point: â€˜There is a need for a program to calculate the area of a rectangle.â€™ Why? An answer given to a student will be put in educational terms, such as: â€˜This will help you to develop important basic skills inâ€¦.â€™</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Of course, the situation just described is quite artificial, and most students know this perfectly well. But it is only once the complexity or scale of a software system reaches a certain threshold that the production of code too early becomes extremely inefficient, and very possibly disastrous. To code a relatively small subtask in a large system requires some understanding of the ways in which that subtask will interact with other subtasks. If this understanding has not yet been achieved, assumptions must be made, and these may later turn out to be inappropriate, even catastrophic, for the system as a whole. Object-oriented programming is generally more immune to this kind of problem than other programming approaches, but it is still important to describe the logical operation of the planned software as early as possible.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1041" class="a" name="bookmark496">There are differences of opinion on how much specification should be done. Many proponents of Extreme Programming (XP) argue that conversations among users and developers can effectively replace much of the documentation that has been traditionally created during systems development, including operation specifications (see Chapter </a><a href="part38.htm#bookmark1263" class="a">21 for more on XP). An alternative view is held by Rumbaugh et al. </a><a href="part38.htm#bookmark1099" class="a">(1991), who suggest that only operations that are â€˜computationally interestingâ€™ or â€˜non-trivialâ€™ need be specified. â€˜Trivialâ€™ operations (e.g. those that create or destroy an instance, and those that get or set the value of an attribute) need not be specified at all. Further, operation specifications should be kept simple in form and should consist only of the operation signature and a description of its â€˜transformationâ€™ (i.e. its logic). On the other hand, Allen and Frost </a>(1998), recommend the specification of all operations, although the level of detail may vary according to the anticipated needs of the designer. In practice the needs of a particular project and prevailing standards in the organization will determine the answer to this question.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Each operation has a number of characteristics, which should be specified at the analysis stage. Users must confirm the logic, or rules, of the behaviour. The designer and the programmer responsible for the class will be the main users of the specification, as they need to know what an operation is intended to do: does it perform a calculation, or transform data, or answer a query? Designers and programmers of other parts of the system also need to know about its effects on other classes. For example, if it provides a service to other classes, they need to know its signature. If it calls operations in other classes or updates the values of their attributes, this may establish dependencies that guide how these classes should be packaged during design or implementation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1099" class="a">Defining operations should be neither begun too early nor left too late. For Allen and Frost (1998), this task should be left until the class diagram has stabilized. In a project where </a>the development activity has been broken down at an early stage to correspond to separate subsystems, this may refer only to that part of the class diagram that relates to a particular</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">subsystem. But for any given part of the model, it is important to create all operation specifications before moving into the object design activity.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="133" height="25" alt="image" src="Image_626.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.3  </a><a href="part4.htm#bookmark4" class="s29">Contracts</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.3  </a><a href="part4.htm#bookmark4" class="s29">Contracts</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.3  </a><a href="part4.htm#bookmark4" class="s29">Contracts</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark497">The term â€˜contractâ€™ is a deliberate echo of legal or commercial contracts between people or organizations. Signing (or becoming a party to) a contract involves making a commitment to deliver a defined service to an agreed quality standard. For example, a small ground-care company has a contract to mow the grass on the lawn in front of the Agate headquarters building. The contract stipulates how often the grass must be cut (every two weeks from April to October), the maximum height of the grass immediately after it is cut (no more than 3 cm) and how much Agate will pay for the service (Â£80 per cut). The contract does </a><i>not </i>spell out how the work will be doneâ€”for example, what type of mower should be used (electric or petrol, cylinder or rotary), how many staff or mowers should be involved, or in which direction the lawn should be cut.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the language of system theory, a contract is an interface between two systems. In this example, Agate is a business system and the ground-care company is a system for mowing Agateâ€™s grass. The contract defines inputs and outputs, and treats the grass-mowing system to some extent as a black box, with its irrelevant details hidden. Which details are deemed irrelevant is always a matter of choice, and any contract can specify that some details of the implementation should be visible to other systems. For example, Agateâ€™s directors might not wish to permit the ground-care contractor to use toxic pesticides or weedkillers. This can be included as a constraint in the contract.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1237" class="a" name="bookmark498">Meyer (1988, </a><a href="part38.htm#bookmark1151" class="a">1991) was one of the first to draw an analogy between commercial contracts and service relationships between objects. The use of the term is now widespread in object- oriented development since it stresses the encapsulation of classes and subsystems in a model. Cook and Daniels </a><a href="part38.htm#bookmark1296" class="a">(1994) used the concept extensively in the Syntropy methodology; it is applied in the SELECT Perspective methodology (Allen and Frost, 1998; Apperly et al., 2003); and design by contract is an important part of the thinking behind OCL (Warmer </a><a href="part38.htm#bookmark1296">and Kleppe, 2003).</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One of Meyerâ€™s principal arguments for using the analogy of a contract is that design by contract helps to achieve a software design that is correct in terms of its requirements. During requirements analysis, we do not yet need the full technical rigour that is required of a design specification, but there is still a clear advantage in adopting an approach that can later be extended seamlessly through design into implementation. Specification by contract means that operations are defined primarily in terms of the services they deliver, and the input they receive (usually just the operation signature).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1223" class="a">Contracts can also be applied at a much higher level of abstraction than individual operations. Larman </a>(2005) describes the use of contracts to define services provided by a system as a whole. Whether written for a single operation, for the behaviour of the system as a whole or for some intermediate packaged component, the structure of a contract is very similar. A commercial contract usually identifies the parties, the scope (i.e. the context in which it applies), the agreed service, and any performance standards that apply. In just the same way, in object-oriented modelling we identify the nature of the service provided by the server object, and what must be provided by the client object in order to obtain the service. These various aspects can be summarized as follows:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_627.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the intent or purpose of the operation</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_628.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">the operation signature including the return type (probably established during interaction modelling)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_629.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">an appropriate description of the logic (the following sections present some alternative ways of describing the logic of an operation)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_630.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_631.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">other operations called, whether in the same object or in other objects events transmitted to other objects</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_632.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">attributes set during the operationâ€™s execution</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_633.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_634.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">the response to exceptions (e.g. what should happen if a parameter is invalid) any non-functional requirements that apply.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1223" class="a">This list of features is adapted from Larman </a><a href="part38.htm#bookmark1099" class="a">(2005) and Allen and Frost </a>(1998). Most of it is self-explanatory, but the critical part of an operation specification is the logic description, and it is to this that we turn in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="275" height="25" alt="image" src="Image_635.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.4  </a><a href="part4.htm#bookmark4" class="s29">Describing Operation Logic</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.4  </a><a href="part4.htm#bookmark4" class="s29">Describing Operation Logic</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.4  </a><a href="part4.htm#bookmark4" class="s29">Describing Operation Logic</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark499">Rumbaugh et al. (1991) suggest an informal classification of operations that is a useful starting point in considering the various ways of describing their logic. First, there are operations that have side-effects. Possible side-effects include the creation or destruction of object instances, setting attribute values, forming or breaking links with other objects, carrying out calculations, sending messages or events to other objects, or any combination of these. A complex operation may do several of these things, and, where the task is at all complex, an operation may also require the collaboration of several other objects. It is partly for this reason that we identify the pattern of object collaboration before specifying operations in detail. Second, there are operations that do not have side-effects. These are pure queries; they request data but do not change anything within the system.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark500">Like classes, operations may also have the property of being either {abstract} or {concrete} (although this decision is often the result of design considerations, and is therefore not always made when an operation is first specified). Abstract operations have a form that consists of at least a signature, sometimes a full specification, but they will not be given an implementation (i.e. they will not have a method). Typically, abstract operations are located in the abstract superclasses of an inheritance hierarchy. They are always overridden by concrete methods in concrete subclasses.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A specification may be restricted to defining only external and visible effects of an operation, and we may choose either an algorithmic or a non-algorithmic technique for this. A specification may also define internal details, but this is effectively a design activity.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">10.4.1 <b>Non-algorithmic approaches</b></p><p class="s41" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark520" class="a" name="bookmark501">A non-algorithmic approach concentrates on describing the logic of an operation as a black box. In an object-oriented system this is generally preferred for two reasons. First, the implementation of a class should be hidden</a>1<span class="p"> from the rest of the system and thus only the designers and programmers responsible for a particular class need concern themselves with internal implementation details. Collaboration between different parts of the system is based on public interfaces between classes and subsystems implemented as operation signatures (or message protocols). As long as the signatures are not changed, a change in the implementation of a class, including the way its operations work, has no effect on other parts of the system. Second, the relatively even distribution of effort among the classes of an object- oriented system generally results in operations that are small and single-minded. Since the processing carried out by any one operation is simple, it does not require a complex specification.</span></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Even in non object-oriented approaches, a declarative approach has long been recognized</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">as particularly useful where, for example, a structured decision is made, and the conditions that determine the outcome are readily identified, but the actual sequence of steps in reaching the decision is unimportant. For situations like this, structured methods make use of non- algorithmic techniques such as decision tables and pre- and post-condition pairs (described in the following sections).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Decision tables</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A decision table is a matrix that shows the <i>conditions </i>under which a decision is made, the <i>actions </i><a href="part18.htm#bookmark502" class="a">that may result and how the two are related. They cater best for situations where there are multiple outcomes, or actions, each depending on a particular combination of input conditions. One common form shows conditions in the form of questions that can be answered with a simple yes or no. Actions are listed, and check-marks are used to show how they correspond to the conditions. The following is an example of a possible application in the Agate case study. </a>Figure 10.1 shows a corresponding decision table.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="170" alt="image" src="Image_636.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark502">Figure 10.1 </a><span class="s21">A decision table with two conditions and three actions, yielding three distinct rules.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;"><a name="bookmark503">When a campaign budget is overspent, this normally requires prior approval from the client, otherwise Agate is unlikely to be able to recover the excess costs. A set of rules has been established to guide campaign managers when they identify a possible problem. If the budget is expected to be exceeded by up to 2%, a letter is sent notifying the client of this. If the budget is expected to be exceeded by more than 2%, a letter is sent and the staff contact also telephones the client to invite a representative to a budget review meeting. If the campaign is not thought likely to exceed its budget, no action is taken.</a></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The vertical columns with Y, N and X entries are known as <i>rules</i>. Each rule is read vertically downwards, and the arrangement of Ys and Ns indicates which conditions are true for that rule. An X indicates that an action should occur when the corresponding condition is true (i.e. has a Y answer). We can paraphrase the table into text as follows:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_637.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Rule 1<span class="p">. If the budget is not overspent (clearly in this case the scale of overspend is irrelevant, indicated by a dash against this condition), no action is required.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_638.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Rule 2<span class="p">. If the budget is overspent and the overspend is not likely to exceed 2%, a letter should be sent.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_639.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Rule 3<span class="p">. If the budget is overspent and the overspend is likely to exceed 2%, a letter should be sent and a meeting set up.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A single rule may have multiple outcomes that overlap with the outcomes of other rules. Decision tables are very useful for situations that require a non-algorithmic specification of logic, reflecting a range of alternative behaviours. But this is relatively unusual in an object- oriented system, where thorough analysis of object collaboration tends to minimize the complexity of single operations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Pre- and post-conditions</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">As its name suggests, this technique concentrates on providing answers to the following questions:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_640.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">What conditions must be satisfied before an operation can take place?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_641.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">What conditions should apply (i.e. what states may the system be in) after an operation is completed?</p><p class="s41" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part18.htm#bookmark521" class="a" name="bookmark504">Let us consider an example from Agate. The operation Advert.getCost()</a>2<span class="p"> was first discussed in Section 8.2. Let us suppose that it has the following signature.</span></p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Advert.getCost():Money</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This operation has no pre-condition. (We may note that the object sending the message must know the identity of the object that contains the operation, but this is not in itself a pre-condition for the operation to execute correctly when invoked.) The post-conditions should express the valid results of the operation upon completion. In this case, a money value is returned (for simplicity, we ignore the question of valid values for an advert cost, but we should note that in reality this attribute may be able to take only a limited range of values, depending on business constraints).</p><p class="s13" style="padding-top: 3pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Pre-condition: <span class="p">none</span></p><p class="s13" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Post-condition: <span class="p">a valid money value is returned</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">More complex examples can easily be constructed from the use case descriptions, or by consulting users if existing descriptions are not sufficiently detailed. Consider the use case Assign staff to work on a campaign. This involves calling the operation Campaign.assignStaff() for each member of staff assigned. Let us assume that the signature of this operation is as follows:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Campaign.assignStaff(creativeStaffObject)</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This example has one pre-condition: a calling message must supply a valid CreativeStaff object. There is one post-condition: a link must be created between the two objects:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Pre-condition:  <span class="p">creativeStaffObject is valid</span></p><p class="s13" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Post-condition: <span class="p">a link is created between campaignObject and creativeStaffObject</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Let us look at one more example from Agate, with more complex conditions. This is taken from the use case Change the grade for a member of staff (we assume that the use case is being invoked for a member of creative staff). This use case involves several operations including:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">CreativeStaff.changeGrade() StaffGrade.setFinishDate()</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">StaffGrade() <i>(the constructor operation that creates a new instance of this class)</i></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">We examine only one of these in detail, CreativeStaff.changeGrade(), but our specification must still recognize calls made to other operations during execution. Let us assume that the operation signature is as follows:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">CreativeStaff.changeGrade(gradeObject, gradeChangeDate)</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The  pre-conditions  are  straightforward,  consisting  only  of  a  valid  gradeObject  and gradeChangeDate. The post-conditions are more involved, as once the operation is completed we should expect several effects to have taken place. A new instance of StaffGrade is created, and this is linked to the appropriate creativeStaffObject and gradeObject (by a staffOnGrade link). The new staffGradeObject is also linked to the previous staffGradeObject (by a previousGrade link). Attribute values in the new staffGradeObject are set by its constructor operation  (including  gradeStartDate,  which  is  set  equal  to  the  supplied  parameter gradeChangeDate). The attribute StaffGrade.gradeFinishDate in the previous instance is also set, through a message to invoke the operation StaffGrade.setFinishDate. A full logic description is thus as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a name="bookmark505">pre-conditions:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">post-conditions:</p><p style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">creativeStaffObject is valid gradeObject is valid gradeChangeDate is a valid date</p><p style="padding-left: 10pt;text-indent: 0pt;line-height: 12pt;text-align: left;">gradeChangeDate is greater than or equal to todayâ€™s date</p><p style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;line-height: 12pt;text-align: left;">a new staffGradeObject exists</p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;">the new staffGradeObject is linked to the creativeStaffObject</p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;">the new staffGradeObject is linked to the previous one the value of the previous staffGradeObject.grade FinishDate is set equal to gradeChangeDate - 1 day</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">For many operations in an object-oriented model, such a specification would be sufficiently detailed.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In general, any operation specification must pass the following two tests.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_642.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">A user should be able to check that it correctly expresses the business logic.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_643.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">A class designer should be able to produce a detailed design of the operation for a programmer to code.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">However, while a declarative approach to operation specification usually meets all the needs of object-oriented development, there is still sometimes a case for using an algorithm. One example would be a requirement that involves carrying out a calculation where the sequence of steps is significant, and neither a designer nor a programmer could reasonably be expected to come up with a formula that produces the correct result.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">10.4.2 <b>Algorithmic approaches</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An <i>algorithm </i>describes the internal logic of a process or decision by breaking it down into small steps (the word derives from al-Kwarazmi, an Arab mathematician of the ninth century). The level of detail to which this is done varies greatly, depending on the information available at the time and on the reason for defining it. An algorithm also specifies the sequence in which the steps are performed. In the field of computing and information systems, algorithms are used either as a <i>description </i>of the way in which a programmable task is currently carried out (this is their purpose in operation specification), or as a <i>prescription </i>for a program to automate the task. This dual meaning again reflects the differing perspectives of analysis (understanding a problem and determining what must be done to achieve a solution) and design (the creative act of imagining a system to implement a solution). An algorithmic technique is almost always used during method design, because a designer is concerned with the efficient implementation of requirements, and must therefore select the best algorithm available for the purpose. But algorithms can also be used with an analysis intention. A major difference here is that there is no need for the analyst to worry about efficiency, since the algorithm need only illustrate accurately the results of the operation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C ontrol structures in algorithms</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark506">Algorithms are generally organized procedurally, which is to say that they use the fundamental programming control structures of sequence, selection and iteration. We can illustrate this in the Agate case study by considering the operation that calculates the total cost of a campaign. This operation is invoked during the use case Check campaign budget. For ease of reference, the use case description is repeated below:</a></p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">The campaign budget may be checked to ensure that it has not been exceeded. The current campaign cost is determined by the total cost of all the adverts and the campaign overhead costs.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Let us suppose that there is a precise (though simple) formula for this calculation, based on summing the individual total costs of each advert and adding the campaign overhead costs. For further simplicity, let us assume that the overhead cost part of the calculation simply involves multiplying the total of all other costs by an overhead rate (this approximates to normal accounting practice). To convey an understanding of the calculation, we can begin by representing it as a mathematical formula:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Total_campaign_cost = (sum of all advert_costs) * overhead_rate</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This does not explicitly identify all the steps, but a sequence can be deduced. In fact, several possible sequences can be deduced, but any sequence that always produces a correct result will do. One possible sequence, at a very coarse level of detail, would include the following three steps:</p><p class="s25" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1. <span class="p">Add up all the individual advert costs.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2. <span class="p">Multiply the total by the overhead rate.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">3. <span class="p">The resulting sum is the total campaign cost.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">For such a relatively simple calculation as this one, the formula itself would almost certainly serve better as a specification, but some are a lot more complex. When it is necessary to specify the sequence of calculation in more detail, we can use Structured English for this.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S tructured English</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is a â€˜dialectâ€™ of written English that is about halfway between everyday non-technical language and a formal programming language. When it is necessary to specify an operation procedurally, this is the most useful and versatile technique. Its advantages include the possibility, with a little care, of retaining much of the readability and understandability of everyday English. It also allows the construction of a formal logical structure that is easy to translate into program code. Structured English is very easy to write iteratively, at successively greater levels of detail, and it is easily dismantled into components that can be reassembled in different structures without a lot of reworking. The logical structure is made explicit through the use of keywords and indentation, while the vocabulary is kept as close as possible to everyday usage in the business context. Above all, expressions and keywords that are specific to a particular programming language are avoided. The result ideally is something that a non- technical user is able to understand, alter or approve, as necessary, while it should also be useful to the designer. This means it must be capable of further development into a detailed program design without undue difficulty.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The main principles of Structured English are as follows. A specification is made up of a</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">number of simple sentences, each consisting of a simple imperative statement or equation. Statements may only be combined in restricted ways that correspond to the sequence, selection and iteration control structures of structured programming. The very simplest specifications contain only sequences and differ little from everyday English except in that they use a more restricted vocabulary and style (many organizations have their own Structured English house style). Here are some statements that illustrate a typical style of Structured English:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">get client contact name</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">sale cost = item cost * ( 1 - discount rate ) calculate total bonus</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">description = new description</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Selection structures show alternative courses of action, the choice between them depending on conditions that prevail at the time the selection is made. For example, an <i>if-then-else </i>construct, which has only two possible outcomes, is shown in the following fragment:</p><p style="padding-top: 5pt;padding-left: 32pt;text-indent: -11pt;text-align: left;">if client contact is â€˜Sushilaâ€™ set discount rate to 5%</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">else</p><p style="padding-left: 20pt;text-indent: 11pt;text-align: left;">set discount rate to 2% end if</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">If the two alternatives are not really different actions, but are rather a choice between doing something and not doing it, the â€˜elseâ€™ branch can be omitted. The following fragment shows this simpler form:</p><p style="padding-top: 5pt;padding-left: 32pt;text-indent: -11pt;text-align: justify;">if client contact is â€˜Sushilaâ€™ set discount rate to 5%</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">end if</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Note that in each case the end of the structure is marked by end if. This important marker cannot be omitted. It allows the entire structure to be treated logically as an element, as if it were a single statement in a sequence.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Multiple outcomes are handled either by a <i>case </i>construct or by a <i>nested if</i>. This fragment illustrates the case structure:</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">begin case</p><p style="padding-left: 44pt;text-indent: -11pt;text-align: left;">case client contact is â€˜Sushilaâ€™ set discount rate to 5%</p><p style="padding-left: 44pt;text-indent: -11pt;text-align: left;">case client contact is â€˜Wuâ€™ set discount rate to 10%</p><p style="padding-left: 44pt;text-indent: -11pt;text-align: left;">case client contact is â€˜Luisâ€™ set discount rate to 15%</p><p style="padding-left: 32pt;text-indent: 0pt;line-height: 12pt;text-align: left;">otherwise</p><p style="padding-left: 44pt;text-indent: 0pt;line-height: 12pt;text-align: left;">set discount rate to 2%</p><p style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">end case</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The â€˜otherwiseâ€™ branch of a case construct can be omitted if it is not required, although it is generally good practice to include a catch-all to ensure completeness. The next fragment shows the same selection specified using a <i>nested-if </i>construct:</p><p style="padding-top: 6pt;padding-left: 32pt;text-indent: -11pt;text-align: left;">if client contact is â€˜Sushilaâ€™ set discount rate to 5%</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">else</p><p style="padding-left: 32pt;text-indent: 0pt;line-height: 12pt;text-align: left;">if client contact is â€˜Wuâ€™</p><p style="padding-left: 32pt;text-indent: 11pt;text-align: left;">set discount rate to 10% else</p><p style="padding-left: 44pt;text-indent: 0pt;line-height: 12pt;text-align: left;">if client contact is â€˜Luisâ€™</p><p style="padding-left: 44pt;text-indent: 11pt;text-align: left;">set discount rate to 15% else</p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">set discount rate to 2% end if</p><p style="padding-left: 20pt;text-indent: 11pt;text-align: left;">end if end if</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This also illustrates how indentation can help the readability of a specification. For each corresponding set of control statements (lines beginning with â€˜ifâ€™, â€˜elseâ€™ and â€˜end ifâ€™), the indentation from the left margin is the same. This helps to show which sequence statements (â€˜set discount rate to 10%â€™, etc.) belong to each structure.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The third type of control structure is iteration. This is used when a statement, or group of statements, needs to be repeated. Typically this is a way of applying a single operation to a set of objects. Logically, once something has begun to occur repeatedly, there must be a condition for stopping the repetition (unless the repetition is to continue indefinitely). There are two main forms of control of iteration. These differ in whether the condition for ending the repetition is tested before or after the first loop. The next two examples show typical applications of each kind of structure; in the first, the test is applied before the loop is entered, so that if the list is empty no bonus is calculated:</p><p style="padding-top: 6pt;padding-left: 32pt;text-indent: -11pt;text-align: justify;">do while there are more staff in the list calculate staff bonus</p><p style="padding-left: 20pt;text-indent: 11pt;text-align: justify;">store bonus amount end do</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In the second iteration example below, the test is applied after the loop is exited. This ensures that the action will be processed (or attempted) at least once. Note that the line at the end beginning until acts as an end-of-structure marker, just like the end do above:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">repeat</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;">allocate member of staff to campaign increment count of allocated staff</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">until count of allocated staff = 10</p><p class="s13" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Complex structures in Structured English<span class="p">. Different types of structure can be nested inside each other, as in the next fragment:</span></p><p style="padding-top: 5pt;padding-left: 32pt;text-indent: -11pt;text-align: left;">do while there are more staff in the list calculate bonus for this staff member begin case</p><p style="padding-left: 44pt;text-indent: 0pt;line-height: 12pt;text-align: left;">case bonus &gt; Â£250</p><p style="padding-left: 44pt;text-indent: 11pt;text-align: left;">add name to â€˜star of the monthâ€™ list case bonus &lt; Â£25</p><p style="padding-left: 32pt;text-indent: 23pt;text-align: left;">create warning letter end case</p><p style="padding-left: 20pt;text-indent: 11pt;text-align: left;">store bonus amount end do</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">format bonus list</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark507">The operation mentioned near the beginning of this section (Check campaign budget) also illustrates the use of all three control structures, although in this case there is no nesting:</a></p><p style="padding-top: 5pt;padding-left: 32pt;text-indent: -11pt;text-align: left;">do while there are more adverts for campaign get next advert</p><p style="padding-left: 32pt;text-indent: 0pt;line-height: 12pt;text-align: left;">get cost for this advert</p><p style="padding-left: 20pt;text-indent: 11pt;text-align: left;">add to cumulative cost for campaign end do</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;">set total advert cost = final cumulative cost set total campaign cost =</p><p style="padding-left: 20pt;text-indent: 35pt;text-align: left;">total advert cost + (total advert cost Ã— overhead rate) get campaign budget</p><p style="padding-left: 32pt;text-indent: -11pt;text-align: left;">if total campaign cost &gt; campaign budget generate warning</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;">end if</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A Structured English specification can be made as complex as it needs to be, and it can also be written in an iterative, top-down manner. For example, an initial version of an algorithm is defined at a high level of granularity. Then, provided the overall structure is sound, more detail is easily added progressively. In refining the level of detail, structures can be nested within each other to any degree of complexity, although in practice it is unlikely that even the most complex operation would need more than two to three levels of nesting at most. It is in any case sensible to limit the complexity. One often-quoted guideline is that a Structured English specification should not be longer than one page of typed A4, or one screen if it is likely to be read within a CASE tool environmentâ€”although in practice the acceptable length of a section of text depends on the context.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1302" class="a">The style in all the examples given above is based on that of Yourdon </a>(1989), but this should not be taken as necessarily prescriptive. What passes for acceptable style varies widely from one organization to another, and in practice an analyst should follow the house style, whatever that happens to be.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Pseudo-code</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Pseudo-code differs from Structured English in that it is closer to the vocabulary and syntax of a specific programming language. There are thus many different dialects of pseudo-code, each corresponding to a particular programming language. They differ from each other in vocabulary, in syntax and in style. Structured English avoids language specificity primarily to avoid reaching conclusions about design questions too early. Sometimes there seems no good reason to hold back, for example because the final implementation language has been decided early in the project. This can be misleading, as it may be desirable at a later stage to redevelop the system in a different programming language. If the operations have been specified in a language-specific pseudo-code, it would then be necessary to rewrite them.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">However language-specific it may be, pseudo-code remains only a skeleton of a program, intended only to illustrate its logical structure without including full design and implementation detail. In other words, it is not so much a fully developed program as an outline that can later be developed into program code. The following pseudo-code for Check campaign budget can be compared with the Structured English version above:</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><a name="bookmark508">{</a></p><p style="padding-left: 44pt;text-indent: -11pt;text-align: left;">{ while more adverts: next advert;</p><p style="padding-left: 44pt;text-indent: 0pt;line-height: 12pt;text-align: left;">get advertcost;</p><p style="padding-left: 32pt;text-indent: 11pt;text-align: left;">cumulativecost = cumulativecost + advertcost; endwhile;</p><p style="padding-left: 32pt;text-indent: 0pt;line-height: 12pt;text-align: left;">}</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;">{ campaigncost = cumulativecost + (cumulativecost Ã— ohrate) get campaignbudget;</p><p style="padding-left: 44pt;text-indent: -11pt;text-align: left;">case campaigncost &gt; campaignbudget return warningflag;</p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;">endcase</p><p style="padding-top: 3pt;padding-left: 32pt;text-indent: 0pt;line-height: 12pt;text-align: left;">}</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Note that, while this pseudo-code resembles C in its syntax, it is not actually written in C. Pseudo-code requires further work to turn it into program code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Activity diagrams</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a">Activity diagrams can be used to specify the logic of procedurally complex operations. The notation of activity diagrams was introduced in </a>Chapter 5; in this section we illustrate their role in operation specification. When used for this purpose, actions in the diagram usually represent steps in the logic of the operation. This can be done at any level of abstraction, so that, if appropriate, an initial high-level view of the operation can later be decomposed to a lower level of detail.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark509" class="a">Activity diagrams are inherently very flexible in their use, and therefore a little care should be exercised when they are employed in operation specification. An activity diagram can be drawn to represent a single operation on an object, but this is less common than using an activity diagram to represent a collaboration between several objects (for example, one that realizes a use case). Figure </a><a href="part18.htm#bookmark517" class="a">10.2 illustrates this for the use case Check campaign budget (compare with the corresponding sequence diagram later in </a>Fig. 10.4).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="459" height="286" alt="image" src="Image_644.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark509">Figure 10.2 </a><span class="s21">Activity diagram for the use case Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An activity diagram can also be drawn for a more abstract collaboration between larger components of a system, or between entire systems. A single diagram does not necessarily translate into a single operation; whether or not it does is essentially a design decision.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="280" height="24" alt="image" src="Image_645.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.5  </a><a href="part4.htm#bookmark4" class="s29">Object Constraint Language</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.5  </a><a href="part4.htm#bookmark4" class="s29">Object Constraint Language</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.5  </a><a href="part4.htm#bookmark4" class="s29">Object Constraint Language</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark510">In drawing any class diagram, much of the time and effort is spent in working out what constraints apply. For example, the multiplicity of an association represents a constraint on how many objects of one class can be linked to any object of the other class. This particular example can be adequately expressed in the graphical language of the class diagram, but this is not equally so for all constraints. Among those for which it is not true are many of the constraints within operation specifications. For example, many pre- and post-conditions in a contract are constraints on the behaviour of objects that are party to the contract. Sometimes the definition of such constraints can be written in a relatively informal manner (as in the examples in Section 10.4), but where greater precision is required, OCL provides a formal language.</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1242" class="a">OCL expressions are constructed from a collection of pre-defined elements and types, and the language has a precise grammar that enables the construction of unambiguous statements about the properties of model components and their relationships to each other. The latest version of OCL (2.0) (OMG, </a><a href="part38.htm#bookmark1296" class="a">2006) has been extended so that it can also be used to define queries, to reference values and to state business rules (Warmer and Kleppe, </a>2003). It is beyond the scope of this book to give a detailed treatment, and this section is intended only to illustrate some of the ways that OCL can be used to support a model, in particular for operation specification.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Most OCL statements consist of the following structural elements.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_646.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">A <i>context </i>that defines a domain within which the expression is valid. This is often an instance of a specific type, for example an object in a class diagram. A link (i.e. an instance of an association) may also be the context for an OCL expression.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_647.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">A <i>property </i>of that instance which is the context for the expression. Properties may include attributes, association roles and query operations.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_648.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">An OCL <i>operation </i>that is applied to the property. Operations include (but are not restricted to) the arithmetical operators *, +, â€“ and /, set operators such as size, isEmpty and select and type operators such as oclIsTypeOf.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">OCL statements can also include <i>keywords</i>, such as the logical operators <b>and</b>, <b>or</b>, <b>implies</b>, <b>if</b>, <b>then</b>, <b>else </b>and <b>not </b>and the set operator <b>in</b>, printed in bold to distinguish them from other OCL terms and operations. Together with the nonkeyword operations mentioned above, these can be used to define quite complex pre- and post-conditions for an operation. OCL expressions can specify both initial and derived values of attributes, and can be used to check various operation results, such as whether an object has been created or a message sent during the execution of the operation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1242" class="a">Figure 10.3 gives some examples of expressions in OCL, some of which are adapted from the OCL 2.0 Specification (</a>OMG, 2006). All have an object of some class as their context.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="341" alt="image" src="Image_649.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark511">Figure 10.3 </a><span class="s21">Examples of some expressions in OCL.</span><a name="bookmark512">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Since OCL can specify constraints that cannot be expressed directly in diagrammatic notation, it is useful as a precise language for pre- and post-conditions of operations. An OCL expression can also specify the result of a query operation. This differs from a post-condition, which specifies a side-effect of an operation. However, queries have no side-effectsâ€”that is,</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">they do not change anything in the model or the system. The general syntax for operation specification is as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">context <i>Type::operation(parameter1:type,parameter2:type): return type</i></p><p class="s18" style="padding-top: 2pt;padding-left: 69pt;text-indent: -46pt;line-height: 124%;text-align: left;">pre:   <i>parameter1 operation parameter2 operation</i></p><p class="s18" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">body:  <i>-- an OCL expression that defines the query output</i></p><p class="s18" style="padding-top: 2pt;padding-left: 69pt;text-indent: 0pt;text-align: left;">result <span class="p">= </span><i>/* some OCL expression that defines the effect of the operation, for</i></p><p class="s18" style="padding-left: 23pt;text-indent: 0pt;line-height: 12pt;text-align: left;">post</p><p class="s13" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">example in terms of attribute values, objects created or destroyed, and so on * /</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Note that the contextual type is the type (for our purposes, normally a class) that owns the operation as a feature. The <b>pre: </b>expressions are functions of operation parameters, while the <b>body: </b>and <b>post: </b>expressions are functions of self, of operation parameters, or of both. OCL expressions must be written with an explicit <b>context </b>declaration.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note also the different styles of comment in the preceding example. A single-line comment is introduced with a double hyphen, thus: --, while a comment that spans more than one line is opened and closed thus: /* comment text */.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">The following example illustrates the use of an <b>inv: </b>label to denote an invariant:</p><p class="s18" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">context <span class="p">Person</span></p><p class="s18" style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">inv: <span class="p">self.age&gt;=0</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The invariant here is merely that a personâ€™s age must always be greater than or equal to zero</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1242" class="a">â€”arguably, this should not need specification, but poorly specified computer systems often get the really obvious things wrong! For a complete list of keywords, see Section 8 of the OCL Specification (</a>OMG, 2006).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This example shows an OCL expression that defines the initial value of an attribute in the Agate case study:</p><p class="s18" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">context <span class="p">Advert::actualAdvertCost</span></p><p class="s18" style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">init: <span class="p">0</span></p><p class="s41" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark502" class="a" name="bookmark513">Another useful feature of OCL is that you can define two values for a single property using the postfix @pre. As you might expect, this refers to the previous value of a property, and is only permitted in post-condition clauses. Thus it is possible to constrain the relationship between the values of an attribute before and after an operation has taken place. For example, the decision specified in </a><a href="part18.htm#bookmark522" class="a">Fig. 10.1 defines different actions depending on changes in the estimated cost of a campaign in comparison with its budget. If the new estimated cost is greater than the old estimated cost, but exceeds the budget by no more than 2%, the value of this attribute is set to true, flagging a need to generate a warning letter to the client.</a>4<span class="p"> We could model this in a very simple way by adding an attribute Campaign.clientLetterRequired. We could then write part of the logic in OCL as follows:</span></p><p class="s18" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">context <span class="p">Campaign</span></p><p class="s18" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">post: <span class="p">self.clientLetterRequired = â€˜falseâ€™</span></p><p class="s18" style="padding-top: 2pt;padding-left: 68pt;text-indent: -15pt;line-height: 124%;text-align: left;">if <span class="p">self.estimatedCost &gt; estimatedCost@pre </span>and <span class="p">self.estimatedCost &gt; budget </span>and <span class="p">self.estimatedCost &lt;= budget * 1.02 </span>then <span class="p">self.clientLetterRequired = â€˜trueâ€™</span></p><p class="s18" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">endif</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">This expression will help to define tests that check if the system displays the correct behaviour when a campaign budget has changed. (However, note that this example is intended only to illustrate the notation. In practice, it is unlikely that this is really how we would model this requirement.)</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Operation specifications frequently include invariants. An invariant that is associated with an operation specification describes a condition that always remains true for an object, and which must therefore not be altered by an operation side-effect. Formal definition of invariants is valuable because they provide rigorous tests for execution of the software.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark523" class="a" name="bookmark514">For example, the value of Campaign.estimatedCost should always equal the sum of all associated Advert.estimatedCost values multiplied by the current overhead rate. In OCL, this might be written as follows:</a><a href="part18.htm#bookmark523" class="s32">5</a><a name="bookmark515">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">context <span class="p">Campaign</span></p><p class="s18" style="padding-top: 2pt;padding-left: 69pt;text-indent: -46pt;line-height: 124%;text-align: left;">inv:   <span class="p">self.estimatedCost = self.adverts.estimatedCost-&gt; sum() + (self.adverts.estimatedCost-&gt;sum() * ohRate)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">In this example, the context is the Campaign class. To use an invariant within an operation specification, it can be written simply as an additional <b>inv: </b>clause:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">context <span class="p">Class::operation(parameter1: type, parameter2: type):return type</span></p><p class="s18" style="padding-top: 2pt;padding-left: 69pt;text-indent: -46pt;line-height: 124%;text-align: left;">pre:   <span class="p">parameter1â€¦ parameter2â€¦</span></p><p class="s18" style="padding-left: 69pt;text-indent: -46pt;line-height: 124%;text-align: left;">post:  <span class="p">result1â€¦ result2â€¦</span></p><p class="s18" style="padding-left: 69pt;text-indent: -46pt;line-height: 124%;text-align: left;">inv:   <span class="p">invariant1â€¦ invariant2â€¦</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark373" class="a">For  an  example  from  the  Agate  case  study,  we  revisit  the  operation  Creative Staff.changeGrade(), for which we specified the logic in Section 10.4.1. To help make sense of this specification, it is also worth referring back to the analysis class diagram in Fig. </a><a href="part18.htm#bookmark378" class="a">A3.14. In particular, note the recursive association from StaffGrade to itself. However, remember also that, as we saw in </a><a href="part23.htm#bookmark578" class="a">Chapter 8, CreativeStaff is a subclass of StaffMember and therefore inherits the same associations and roles (Chapter </a>A4 includes a revised analysis class diagram that shows this specialization). Here is the main part of the operation specification rewritten in OCL:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">context <span class="p">CreativeStaff::changeGrade(grade:Grade, gradeChangeDate:Date)</span></p><p class="s18" style="padding-top: 2pt;padding-left: 69pt;text-indent: -46pt;line-height: 124%;text-align: left;">pre:   <span class="p">grade oclIsTypeOf(Grade) gradeChangeDate &gt;= today</span></p><p class="s18" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">post:  <span class="p">self.staffGrade-&gt;exists() </span>and</p><p style="padding-top: 2pt;padding-left: 69pt;text-indent: 0pt;line-height: 124%;text-align: left;">self.staffGrade[previous]-&gt;notEmpty() <b>and </b>self.staffGrade.gradeStartDate = gradeChangeDate <b>and </b>self.staffGrade.previous.gradeFinishDate = gradeChangeDate - 1 day</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="340" height="25" alt="image" src="Image_650.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.6  </a><a href="part4.htm#bookmark4" class="s29">Creating an Operation Specification</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.6  </a><a href="part4.htm#bookmark4" class="s29">Creating an Operation Specification</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.6  </a><a href="part4.htm#bookmark4" class="s29">Creating an Operation Specification</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark517" class="a" name="bookmark516">Figure </a><a href="part18.htm#bookmark418" class="a">10.4 shows the sequence diagram for the use case Check campaign budget first introduced in </a><a href="part18.htm#bookmark509" class="a">Chapter 9 (the use case description is repeated above in Section 10.4.2 and an activity  diagram  is  shown  in  Fig.  </a>10.2).  In  this  particular  example  the  message checkCampaignBudget invokes the operation Campaign.checkCampaignBudget().</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="526" height="383" alt="image" src="Image_651.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark517">Figure 10.4 </a><span class="s21">Sequence diagram for the use case Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A specification for Campaign.checkCampaignBudget() is given below. We have used different fonts to signpost the specification as follows. <span class="s85">This font (Arial) labels the specification structure, </span>while this (Courier) highlights its content. <span class="s61">Comments on the reasoning behind the specification are formatted like this (in Comic Sans).</span></p><p class="s21" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Operation specification: <span class="s86">checkCampaignBudget</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Operation intent: <span class="s86">return difference between campaign budget and actual costs.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s61" style="padding-left: 5pt;text-indent: 0pt;line-height: 111%;text-align: justify;">The invocation appears not to req uire any parameters, but does have a return type that we can expect to contain a numerical value. Let us assume that there is a M oney type available. The signature is shown below, followed by the pre- and post-conditions:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation signature: <span class="s86">Campaign::checkCampaignBudget()</span></p><p style="padding-top: 3pt;padding-left: 116pt;text-indent: 0pt;text-align: left;">budgetCostDifference:Money</p><p class="s21" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Logic description (pre- and post-conditions):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">context <span class="p">Campaign</span></p><p class="s18" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">pre:  <span class="p">self-&gt;exists()</span></p><p class="s18" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">post:  <span class="p">result = self.originalBudget - self.estimatedCost </span>and</p><p style="padding-top: 2pt;padding-left: 63pt;text-indent: 0pt;text-align: left;">self.estimatedCost = self.adverts.estimated Cost-&gt;sum()</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s61" style="padding-left: 5pt;text-indent: 0pt;line-height: 111%;text-align: justify;">As can be seen from the seq uence diagram, this operation calls two other operations and these must be listed. In a full specification, full signatures would be recorded, but we omit this detail here.</p><p class="s21" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Other operations called: <span class="s86">Advert.getCost(), self.getOverheads()</span></p><p class="s21" style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">Events transmitted to other objects: <span class="s86">none</span></p><p class="s61" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 111%;text-align: justify;"><a href="part18.htm#bookmark525" class="s87">The only messages are those req uired to call the operations just mentioned, whose return values are req uired by this operation. An â€˜ eventâ€™ is a message that starts another distinct thread of processing (see Chapter </a>11).</p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Attributes set: <span class="s86">none</span></p><p class="s61" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 111%;text-align: justify;">This is a q uery operation whose only purpose is to return data already stored within the system.</p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Response to exceptions: <span class="s86">none defined</span></p><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">H ere we could define how the operation should respond to error conditions, e.g. what kind of error message will be returned if a calling message uses an invalid signature.</p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Non-functional requirements: <span class="s86">none defined</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Several non-functional requirements may be associated with the operation, but these need to be determined through discussion with users. They may include, for instance, response time under live conditions (enquiries that are made frequently typically require a faster response) or the format of the output (e.g. if there is a house standard that overspent budgets are displayed in red). However, these are really design issues, and would be noted at this stage only if the information happens to be available at the time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="24" alt="image" src="Image_652.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">10.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark518">Operation specifications are the most detailed description of the behaviour of a system model. As such, they are also one of the more significant elements in the project repository. They provide an important link between the systemâ€™s users, who typically possess a detailed understanding of the required system behaviour, and the designers and programmers who must implement this in software. Accurate specification of operations is essential if the software is to be coded correctly.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: right;">In this chapter we introduced the â€˜contractâ€™ as a framework for specifying operations, in terms of the service relationship between classes. Contracts are a particularly useful element of operation specification since they concentrate on the correctness of each objectâ€™s behaviour. We also described several techniques for describing operation logic. Non-algorithmic techniques, such as decision tables and pre- and post-condition pairs, take a black box approach and concentrate on specifying only the inputs to an operation (its pre-conditions) and the intended results of an operation (its post-conditions). In many cases, particularly where the operations themselves are simple, this is all the specification that a programmer needs to code</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">the operation correctly.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Algorithmic techniques, such as Structured English, pseudo-code and activity diagrams, take a white box approach, and this means that they concentrate on defining the internal logic of operations. These techniques are particularly useful when an operation is computationally complex. They are also useful when we need to model some larger element of system behaviour, such as a use case, that has not yet been decomposed to the level of individual operations that can be assigned to specific classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Many elements of an operation specification can be written in OCL (UMLâ€™s Object Constraint Language). OCL is intended for use as a formal language for specifying constraints and queries on an object model, and this includes operation pre- and post-conditions and invariants.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark519">Review Questions</a></p></td></tr><tr style="height:72pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">10.1  <span class="s16">What are the two main purposes of an operation specification?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">10.2  <span class="s16">To what kinds of situation are decision tables particularly suited?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">10.3  <span class="s16">Why is it important to specify both pre- and post-conditions for an operation?</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:143pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s35" style="padding-left: 41pt;padding-right: 12pt;text-indent: -31pt;text-align: left;">10.4  <span class="s16">What are the main differences between algorithmic and non-algorithmic approaches to operation specification?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: -31pt;text-align: left;">10.5 <span class="s16">Why are non-algorithmic (or declarative) approaches generally preferred in object- oriented development?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">10.6  <span class="s16">Why are operation specifications in an object-oriented project likely to be small?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">10.7  <span class="s16">What are the three kinds of control structure in Structured English?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">10.8  <span class="s16">What is a sensible limit on the size of a Structured English specification?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">10.9  <span class="s16">What are the three components of most OCL expressions?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">10.10 <span class="s16">What is an invariant?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:276pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 38pt;padding-right: 9pt;text-indent: -28pt;text-align: justify;">10.A <span class="s16">Consider the first sequence diagram you drew for the use case Start line run from the FoodCo case study (in Exercise 9.A). Choose an operation in one of the classes involved in this ISD and write a contract for it. Make reasonable assumptions where necessary, and use a pre- and post-conditions approach for describing its logic.</span></p><p class="s35" style="padding-left: 38pt;padding-right: 9pt;text-indent: -28pt;text-align: justify;">10.B <a href="part18.htm#bookmark502" class="s36">Consider the decision table in </a><span class="s16">Fig. 10.1. Suppose you have learned that an extra condition must be taken into account: the rules in the current table actually apply only to campaigns with a total budget of Â£5000 or over, but for smaller campaigns the thresholds for each action are different. Thresholds for smaller campaigns are as follows. For an expected overspend of less than 10%, no action is taken. For expected overspends of 10â€“19%, a letter is sent. For an expected overspend of 20% or more a letter is sent and a meeting is arranged. Draw a new version of the table that caters for small campaigns.</span></p><p class="s35" style="padding-left: 38pt;padding-right: 9pt;text-indent: -28pt;text-align: justify;">10.C <a href="part18.htm#bookmark502" class="s36">Redraw the original decision table in Fig. </a><span class="s16">10.1 as an activity diagram. Do the same for your new decision table from Exercise 10.B.</span></p><p class="s35" style="padding-left: 38pt;padding-right: 9pt;text-indent: -28pt;text-align: justify;">10.D <a href="part18.htm#bookmark502" class="s36">Consider the decision table in </a><span class="s16">Fig. 10.1. Which of the three control structures are required to convert this into a Structured English specification? Rewrite the decision table in Structured English format.</span></p><p class="s35" style="padding-left: 38pt;padding-right: 9pt;text-indent: -28pt;text-align: justify;">10.E <a href="part18.htm#bookmark502" class="s36">Find out how a decision tree differs from a decision table (e.g. from one of the books listed in Further Reading). Produce a decision tree that corresponds to the decision table in </a><span class="s16">Fig. 10.1. What are the relative advantages and disadvantages of decision trees, decision tables and Structured English?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_653.png"/></span></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1218" class="s6">Decision tables and decision trees are both covered well in </a><a href="part38.htm#bookmark1107" class="s6">Kendall and Kendall (2005), while Avison </a><a href="part38.htm#bookmark1199" class="s6">and Fitzgerald (2006) and </a><a href="part38.htm#bookmark1107" class="s6">Hoffer et al. (2005) are both good sources on Structured English.</a></p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1223" class="s6">Larman </a>(2005) describes a contract-based approach to object-oriented analysis and design, with examples taken through to Java code.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1238" class="s6">Meyer </a>(1997) is perhaps the definitive text on design-by-contract in object-oriented software engineering. This book is very comprehensive, and quite technical in tone.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1296" class="s6">For a thorough introduction to OCL, Warmer and Kleppe </a>(2003) have at the time of writing no real rivals.</p><p style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1215" class="s6">For a statement of the school of thought (expressed chiefly by proponents of XP and other Agile Methods) that documentation, including operation specifications, is often unnecessary, see Jeffries (2001).</a></p><p class="s7" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark578" class="s6">Further examples of operation specifications for Agate can be found in Case Study </a>Chapter A4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_654.png"/></span></p><p class="s1" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1248" class="s3" name="bookmark520">1 Applying the principles of information hiding (</a><a href="part9.htm#bookmark138" class="s3">Parnas, 1972) to class design as discussed in </a>Chapter 4.</p><p class="s1" style="padding-top: 4pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a name="bookmark521">2 We have suffixed brackets to the names of operations to distinguish them from attributes. This does not mean that they are operations with no parameters, only that the parameters are not shown.</a></p><p class="s1" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">3 An invariant is something that cannot be changed.</p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a name="bookmark522">4 If the budget is exceeded but the estimated cost has not increased, then we assume that a letter has already been sent and so the flag does not need to be set.</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a name="bookmark523">5 Note that this makes some assumptions about the way that the classes are designed and is really intended only to illustrate the style of this kind of statement when written in OCL.</a></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="206" alt="image" src="Image_655.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:350pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark524">LEARNING OBJECTIVES</a><a name="bookmark525">&zwnj;</a></p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_656.jpg"/></span></p></td></tr><tr style="height:87pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;padding-right: 110pt;text-indent: 0pt;text-align: left;">how to identify requirements for control in an application how to model object lifecycles using state machines</p><p class="s16" style="padding-left: 54pt;padding-right: 65pt;text-indent: 0pt;text-align: left;">how to develop state machine diagrams from interaction diagrams how to model concurrent behaviour in an object</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">how to ensure consistency with other UML models.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="152" height="25" alt="image" src="Image_657.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="77" alt="image" src="Image_658.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark526">Specifying the control aspects of a system deals with how the system should respond to events. For some systems this can be complex as the response to events can vary depending upon the passage of time and the events that have occurred already.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For a real-time system it is easy to understand that its response to an event depends upon its state. For example, an aircraft flight control system should respond differently to events (for example, engine failure) when the aircraft is in flight and when it is taxiing along a runway. A more mundane example is that of a vending machine, which does not normally dispense goods until an appropriate amount of money has been inserted. The state of the vending machine depends on whether or not sufficient money has been inserted to pay for the item selected and this determines its behaviour. In reality, of course, the situation is more complicated than this. For example, even when the correct amount of money has been inserted, the machine cannot dispense an item that is not in stock. It is important to model state-dependent variations in behaviour such as these since they represent constraints on the way that a system should act.</p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark570" class="a" name="bookmark527">Objects in all kinds of systemsâ€”not only real-time onesâ€”can have similar variations in their behaviour dependent upon their state. UML uses state machines to model states and state dependent behaviour for objects</a>1<a href="part38.htm#bookmark1189" class="a"> and for interactions. The notation used in UML is based upon work by </a><a href="part38.htm#bookmark1263" class="a">Harel (1987) and was adopted by OMT (Rumbaugh et al., </a><a href="part38.htm#bookmark1121" class="a">1991) and also in the second version of the Booch approach (Booch, </a><span class="p">1994). UML 2.2 draws a distinction between behavioural state machines and protocol state machines. Behavioural state machines may be used to specify the behaviour of individual entities, for example class instances. Protocol state machines may be used to describe usage protocols for classes, interfaces and ports.</span><a name="bookmark528">&zwnj;</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There is an important link between interaction diagrams and state machines. A model of state behaviour in a state machine captures all the possible responses of a single object to all the use cases in which it is involved. By contrast, a sequence or a communication diagram captures the responses of all the objects that are involved in a single use case or other interaction. A state machine can be seen as a description of all the possible lifecycles that an object of a class may follow. It can also be seen as a more detailed view of a class.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark814" class="a">The state machine is a versatile model and can be used within an object-oriented approach to describe the behaviour of other model entities. In Chapter </a>17 we show how to use state machines to build models of humanâ€“computer dialogues.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="198" height="25" alt="image" src="Image_659.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.2  </a><a href="part4.htm#bookmark4" class="s29">States and Events</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.2  </a><a href="part4.htm#bookmark4" class="s29">States and Events</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.2  </a><a href="part4.htm#bookmark4" class="s29">States and Events</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark529">All objects have a </a><i>state</i><a href="part9.htm#bookmark138" class="a">. We introduced the concept of state in Chapter </a><a href="part16.htm#bookmark291" class="a">4 (Section 4.2.7) and discussed how state relates to attributes in Chapter </a>7 (Section 7.3.3). The current state of an object is a result of the events that have occurred to the object and is determined by the current value of the objectâ€™s attributes and the links that it has with other objects. Some attributes and links of an object are related to its state while others are not. For example, in the Agate case study the values of the staffName and staffNo attributes of a StaffMember object have no impact upon its state, whereas the date that a staff member started his or her employment at Agate determines when the probationary period of employment ends (after six months, say). A StaffMember object is in the Probationary state for the first six months of employment. While in this state, a staff member has different employment rights and is not eligible for redundancy pay in the event that they are dismissed by the company.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark530">A state describes a particular condition that a modelled element (e.g. object) may occupy for a period of time while it awaits some event or </a><i>trigger</i>. The possible states that an object can occupy are limited by its class. Objects of some classes have only one possible state. For example, in the Agate case study a Grade object either exists or it does not. If it exists it is available to be used, and if it does not exist it is not available. Objects of this class have only one state, which we might name Available. Objects of other classes have more than one possible state. For example, an object of the class GradeRate may be in one of several states. It may be Pending, if the current date is earlier than its start date, Active, if the current date is equal to or later than the start date but earlier than the finish date (we assume that the finish date is later than the start date), or Lapsed, if the current date is later than the finish date for the grade. If the current date is at least a year later than the finish date then the object is removed from the system. The current state of a GradeRate object can be determined by examining the values of its two date attributes. Alternatively, the GradeRate class might have a single attribute (an enumerated typeâ€”that has an integer value for each possible state) with values that indicate the current state of an object. An attribute that holds the value of the current state of an object is sometimes known as a <i>state variable</i><a href="part18.htm#bookmark531" class="a">. It is important to note that movement from one state to another for a GradeRate object is dependent upon events that occur with the passage of time. </a><a href="part18.htm#bookmark571" class="a">Figure 11.1 shows a state machine for GradeRate. This state machine is presented in a frame of the kind state machine (sm could be used as shortened form). UML 2.2 is quite flexible about the use of frames, and states that they need not be used when the diagram boundary is clear.</a><a href="part18.htm#bookmark571" class="s32">2</a></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"><span><img width="369" height="411" alt="image" src="Image_660.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark531">Figure 11.1 </a><span class="s21">State machine for the class </span><span class="s89">GradeRate.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Movement from one state to another is called a <i>transition</i>, and is initiated by a <i>trigger</i>. A trigger is an event that can cause a state change and that is relevant to the object (or to the modelled element). When its triggering event occurs a transition is said to <i>fire</i>. A transition is shown as an open arrow from the source state to the target state. For example, the cancellation of an advert at Agate is a trigger that will change the state of the Advert object being cancelled. Just as a set of objects is defined by the class of which they are all instances, events are defined by an <i>event type </i>of which each event is an instance. For example, the cancellation of an advert in the CheapClothes jeans campaign is one instance of an event, and the cancellation of an advert in the Soong Motor Co Helion campaign is another instance. Both are defined by the event type cancellationOfAdvert. This event is a trigger as it causes a state change.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="171" height="25" alt="image" src="Image_661.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.3  </a><a href="part4.htm#bookmark4" class="s29">Basic Notation</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.3  </a><a href="part4.htm#bookmark4" class="s29">Basic Notation</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.3  </a><a href="part4.htm#bookmark4" class="s29">Basic Notation</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark532">All state machines need to have some starting state (at least notionally). The </a><i>initial pseudostate </i><a href="part18.htm#bookmark531" class="a">(in other words the starting point) of a state machine is indicated by a small solid filled circle. This is really only a notational convenience. An object cannot remain in its initial pseudostate, but must immediately move into another named state. In </a>Fig. 11.1 the GradeRate object enters the Pending state immediately on its creation. A transition from the initial state can optionally be labelled with the trigger that creates the object. The end point of a state machine (in other words its final state) is shown by a bullâ€™s-eye symbol. This too is a notational convenience and an object cannot leave its final state once it has been entered. All other states are shown as rectangles with rounded corners and should be labelled with meaningful names. Each node in a state machine diagram is known as a vertex.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark531" class="a">In Fig. </a>11.1 all transitions except the first and the last transitions have <i>change triggers</i>. Triggers can be grouped into several general types and can have parameters and a return value.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">A <i>change trigger </i>occurs when a condition becomes true. This is usually described as a Boolean expression, which means that it can take only one of two values: true or false. This form of conditional event is different from a guard condition, which is normally evaluated at the moment that its associated event fires.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A <i>call trigger </i>occurs when an object receives a call for one of its operations, either from another object or from itself. Call triggers correspond to the receipt of a call message and are annotated by the signature of the operation as the trigger for the transition.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark533">A </a><i>signal trigger </i><a href="part18.htm#bookmark572" class="a">occurs when an object receives a signal.</a><span class="s41">3</span> As with call triggers the event is annotated with the signature of the operation invoked. There is no syntactic difference between call triggers and signal triggers. It is assumed that a naming convention is used to distinguish between them.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A <i>relative time trigger </i>is caused by the passage of a designated period of time after a specified event (frequently the entry to the current state). Relative time triggers are shown by time expressions near the transitions. The time expression is placed in parentheses and should evaluate to a period of time. It is preceded by the keyword <i>after </i><a href="part18.htm#bookmark531" class="a">and if no starting time is indicated it reflects the passage of time since the most recent entry to the current state. In </a><a href="part18.htm#bookmark531">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="#bookmark531">11.1 the transition from the state Lapsed to the final state is a relative time trigger.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The state machine for a GradeRate object is very simple, since it enters each state only once. Some classes have much more complex lifecycles than this. For example, a BookCopy object in a library system may move many times between the states OnLoan and Available.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark534" class="a">Figure </a><a href="part18.htm#bookmark535" class="a">11.2 shows an alternative notation for a state, which may be used for composite states. Figure </a>11.3 illustrates the basic notation for a state machine with two states for the class Campaign and one transition between them. A transition should be annotated with a <i>transition string </i>to indicate the event that triggers it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 169pt;text-indent: 0pt;text-align: left;"><span><img width="152" height="94" alt="image" src="Image_662.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark534">Figure 11.2 </a><span class="s21">Alternative notation for a state.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="347" height="161" alt="image" src="Image_663.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark535">Figure 11.3 </a><span class="s21">Fragment of the state machine for the class </span><span class="s89">Campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;">For call and signal events the format of the transition string is as follows:</p><p class="s13" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">trigger-signature â€˜ [ â€™ constraint â€˜ ] â€™ â€˜ /â€™ activity-expression</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The trigger signature takes the following form:</p><p class="s13" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">event-name â€˜ (â€™ parameter-list â€˜ )â€™</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">where the event-name may be the call or signal name and the parameter-list contains parameters of the form:</p><p class="s13" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">parameter-name â€˜ :â€™ type-expression</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: right;">separated by commas. (Characters in single quotes, such as â€˜(<i>â€™</i>, are <i>literals </i>that appear as part of the event.) Note that empty brackets â€˜()â€™ have not been used when no parameters are listed. A constraint is a Boolean expression that is evaluated at the time the trigger fires. It is known as <i>guard condition </i>or just a <i>guard </i>(â€˜it guards the transitionâ€™). The transition only takes place if the guard condition evaluates to true. A guard condition is a constraint that may involve parameters of the trigger, attributes or links of the object that owns the state machine. A guard</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">is shown in square bracketsâ€”â€˜[â€˜â€¦â€™]â€™.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;"><a href="part18.htm#bookmark535" class="a">In Fig. </a>11.3 the guard condition is a test on the contractSigned attribute in the class Campaign and since the attribute is Boolean it may be written as follows:</p><p class="s13" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">[ contractSigned]</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">This expression evaluates to true only if contractSigned is true. A guard condition can also be used to test concurrent states of the current object or the state of some other reachable object. Concurrent states are explained later in Section 11.4.2.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An <i>activity-expression </i><a href="part18.htm#bookmark535" class="a">is executed when a trigger causes the transition to fire. Like a guard condition, it may involve parameters of the trigger and may also involve operations, attributes and links of the owning object or modelling element. In </a>Fig. 11.3 the activity-expression begins with the â€˜/â€™ delimiter character and is the execution of the Campaign objectâ€™s operation setCampaignActive.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An activity-expression may comprise a sequence of actions and include actions that may generate events such as sending signals or invoking operations. Each action in an action string is separated from its preceding action by a semi-colon.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An example of an activity-expression with multiple actions is shown in the transition string below:</p><p class="s13" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">left-mouse-down(location) [ validItemSelected] / menuChoice = pickMenuItem(location); menuChoice.highlight</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The sequence of actions in an activity-expression is significant since it determines the order in which they are executed. In the example above, if the actions were in the reverse order, the value of menuChoice would be likely to be different when the highlight message is sent and the effect of the event would be different. Actions are considered to be atomic (that is, they cannot be subdivided) and cannot be interrupted once they have been started. Once initiated this action must execute fully before any other action is considered. This is known as <i>â€˜ run-to- completionâ€™ </i>semantics. An action will actually take time to execute in a live application but this is dependent only upon internal factors such as the complexity of the program code and the speed of the processor. The duration of a state is normally dependent upon external events in the application environment.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The effect of a trigger can be deferred to another state. This <i>deferred event </i>is shown by listing the trigger in the state symbol with postfix /defer. For example, if a person going through a semi-automatic door presses the close door button, it should not close until the person is no longer obstructing the doorway. This means that the door would only respond to the event, closeDoorButtonPressed, after it had moved from the state OpenObstructed to the state OpenClear. Its response to the event is deferred from the OpenObstructed state to the OpenClear state where it causes a transition to the state Closed.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark536" class="a">So far we have considered only action-expressions that are associated with a transition. It can also be useful to model internal activities associated with a state. These activities may be triggered by events that do not change the state, by an event that causes the state to be entered or by an event that results in exiting the state. A state vertex may be subdivided into separate compartments: name compartment, internal activities compartment and internal transitions compartment. In </a><a href="part18.htm#bookmark537" class="a">Fig. 11.4 a state symbol is shown with two compartments, a name compartment and an internal activities compartment, and in </a>Fig. 11.5 one is shown with three compartments.</p><p style="padding-left: 130pt;text-indent: 0pt;text-align: left;"><span><img width="257" height="185" alt="image" src="Image_664.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark536">Figure 11.4 </a><span class="s21">Internal activities for a state.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;"><span><img width="430" height="134" alt="image" src="Image_665.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark537"><span class="s51">Figure 11.5 </span></a>Menu V isible <span class="s90">state for a </span>DropDownMenu <span class="s90">object.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The <i>name compartment </i>holds the name of the state. States may be unnamed and anonymous. Normally a state is only represented on a state machine diagram once (except for the final state).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The <i>internal activities compartment </i>lists the <i>internal activities </i>or <i>state activities </i>that are executed in that state. Each internal activity has a label stipulating under which circumstances the activity expression will be invoked. Three kinds of internal event have a special notation. Two of these are the <i>entry activities </i>and the <i>exit activities</i>, respectively indicated by the keywords <i>entry </i>and <i>exit</i>. These cannot have guard conditions as they are invoked implicitly on entry to the state and exit from the state respectively.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Entry or exit <i>activity-expressions </i>may also involve parameters of incoming transitions (provided that these appear on all incoming transitions) and attributes and links of the owning object. It is important to emphasize that any transition into a state causes the entry activity to fire and all transitions out of a state cause the exit activity to fire.</p><p class="s13" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">â€˜ entryâ€™ â€˜ /â€™ activity-name â€˜ (â€™ parameter-list â€˜ )â€™ â€˜ exitâ€™ â€˜ /â€™ activity-name â€˜ (â€™ parameter-list â€˜ )â€™</p><p class="s13" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">State activities <span class="p">are preceded by the keyword </span>do <span class="p">and have the following syntax:</span></p><p class="s13" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">â€˜ doâ€™ â€˜ /â€™ activity-name â€˜ (â€™ parameter-list â€˜ )â€™</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark537" class="a">State activities may â€˜persistâ€™ for a period of time, perhaps the duration of the state. For example in </a>Fig. 11.5 the state activity playSoundClip will last as long as the sound clip or as long as the object remains in the state Menu V isible, whichever is the shorter.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The <i>internal transitions compartment </i>lists internal transitions. Each of these transitions is described in the same way as a trigger. Internal transitions do not cause a state change and do not invoke the exit or entry activities.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark537" class="a">Figure </a>11.5 shows the Menu V isible state for a DropDownMenu object with three compartments. On occasions the internal transitions and the internal activities are placed in a single compartment within a state. This is a matter of notational style. In this example, the entry activity causes the menu to be displayed. The entry activity runs to completion before the state do activity is invoked. While the object remains in the Menu V isible state, the state do activity causes a sound clip to be played and, if the event itemSelected occurs, the action</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">highlightItem is invoked. It is important to note that, when the event itemSelected occurs, the Menu V isible state is not exited and entered and as a result the exit and entry activities are not invoked. When the state is actually exited the menu is hidden.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><span><img width="445" height="420" alt="image" src="Image_666.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark538">Figure 11.6 </a><span class="s21">State machine for the class </span><span class="s89">Campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark538" class="a" name="bookmark539">Figure </a><a href="part18.htm#bookmark573" class="a">11.6 shows a state machine for the class Campaign. The transition from the initial pseudostate to the Commissioned state has been labelled only with an activity-expression that comprises the operations assignManager and assignStaff. Execution of these operations ensures that when a campaign is created a manager and at least one member of staff are assigned to it.</a>4<span class="p"> The operations are triggered by the event that creates a Campaign object. The transition from the Completed state to the Paid state has a guard condition that only allows the transition to fire if total amount due (paymentDue) for the Campaign has been completely paid (note that this guard condition allows a Campaign to enter the Paid state when the client overpays).</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The reflexive transition from the Completed state models any payment event that does not reduce the amount due to zero or less. Only one of the two transitions from the Completed state (one of which is recursive) can be triggered by the paymentReceived event since the guard conditions are mutually exclusive. It would be bad practice to construct a state machine where one event can trigger two different transitions from the same state. A state machine is only unambiguous when all the transitions from each state are mutually exclusive.</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="501" height="408" alt="image" src="Image_667.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark540">Figure 11.7 </a><span class="s21">A revised state machine for the class </span><span class="s89">Campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark540" class="a">If the user requirements were to change, so that an overpayment is now to result in the automatic generation of a refund, the state machine could be changed. Since the action that results from an overpayment is different from the action that results from a payment that reduces paymentDue to zero, a new transition is needed from the Completed state to the Paid state. The guard conditions from the Completed state must also be modified. Figure </a><a href="part18.htm#bookmark538" class="a">11.7 shows a state machine that captures this requirement. It is important to appreciate that the state machines in Figs </a><a href="part18.htm#bookmark540" class="a">11.6 and </a>11.7 are not equivalent to each other, but capture different versions of the usersâ€™ requirements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="185" height="25" alt="image" src="Image_668.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.4  </a><a href="part4.htm#bookmark4" class="s29">Further Notation</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.4  </a><a href="part4.htm#bookmark4" class="s29">Further Notation</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.4  </a><a href="part4.htm#bookmark4" class="s29">Further Notation</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark541">The state machine notation can be used to describe highly complex time-dependent behaviour. If a single state machine diagram becomes too complex to understand or to draw, state hierarchies can be nested, thus modelling different levels of detail on separate diagrams. The notation can also be used to represent concurrent behaviour.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">11.4.1 <b>Composite states</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">When the state behaviour for an object or an interaction is complex, it may be appropriate to represent it at different levels of detail and to reflect any hierarchy of states that is present in the application. For example, in the state machine for Campaign the state Active encompasses several <i>substates</i><a href="part18.htm#bookmark543" class="a">. These are shown in Fig. </a>11.8 where the Active state is seen to comprise three disjoint substates: Advert Preparation, Scheduling and Running Adverts, which are placed in the <i>decomposition compartment </i>of the state. This decomposition compartment has one region. This diagram now shows a single state that contains a nested state diagram within it known as <i>submachine</i>. In the nested state machine within the Active state, there is an initial pseudostate with a transition to the first substate that a Campaign object enters when it becomes active. The transition from the initial pseudostate to the first substate (Advert</p><p class="s41" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark574" class="a" name="bookmark542">Preparation) should not be labelled with an event but it may be labelled with an action, though this is not required in this example. It is implicitly fired by any transition to the Active state.</a>5<a href="part18.htm#bookmark548" class="a"> A final pseudostate symbol may also be shown on a nested state diagram. A transition to the final pseudostate symbol represents the completion of the activity in the enclosing state (i.e. Active) and a transition out of this state triggered by the completion event unless overridden by a specific trigger. This transition may be unlabelled (as long as this does not cause any ambiguity) since the event that triggers it is implied by the completion event (see </a><span class="p">Fig. 11.11).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="452" height="305" alt="image" src="Image_669.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark543"><span class="s31">Figure 11.8 </span></a>The <span class="s89">Active </span>state of <span class="s89">Campaign </span>showing nested substates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark543" class="a">When a campaign enters the Active state in Fig. </a><a href="part18.htm#bookmark540" class="a">11.8 it first enters the Advert Preparation substate, then if the adverts are approved it enters the Scheduling substate and finally enters the Running Adverts substate when the schedule is approved. If the campaign is deemed completed, the object leaves the Running Adverts substate and also leaves the Active enclosing state, moving now to the Completed state (see Fig. </a><a href="part18.htm#bookmark543" class="a">11.7). If the campaign is extended while in the Running Adverts substate, the Advert Preparation substate is re-entered (</a><a href="part18.htm#bookmark544" class="a">Fig. 11.8). A high-level state machine for the class Campaign can be drawn to show within the main diagram the detail of the nested state machine for the Active state. If the detail of the submachine is not required on the higher-level state machine or is just too much to show on one diagram, the higher-level state machine can be annotated with the hidden decomposition indicator icon (two small state symbols linked together) as shown in </a>Fig. 11.9. The submachine Running is referenced in the state name compartment using the syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><span><img width="206" height="99" alt="image" src="Image_670.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark544"><span class="s31">Figure 11.9 </span></a>The <span class="s89">Active </span>submachine state of <span class="s89">Campaign </span>with detail hidden.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">state name â€˜ :â€™ reference-state-machineâ€“diagram-name</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The state Active is known as a <i>submachine state </i>because it contains a submachine.</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">11.4.2 <b>Concurrent states</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Objects can have <i>concurrent </i><a href="part18.htm#bookmark545" class="a">states. This means that the behaviour of the object can best be explained by regarding it as a product of two (or more) distinct sets of substates, each state of which can be entered and exited independently of substates in the other set. Figure </a>11.10 illustrates this form with two submachines, Running and Monitoring of the state Active.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;"><span><img width="469" height="330" alt="image" src="Image_671.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark545"><span class="s31">Figure 11.10 </span></a>The <span class="s89">Active </span>state with concurrent substates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark545" class="a" name="bookmark546">Suppose that further investigation reveals that at Agate a campaign is surveyed and evaluated while it is also active. A campaign may occupy either the Survey substate or the Evaluation substate when it is in the Active state. Transitions between these two states are not affected by the campaignâ€™s current state in relation to the preparing and running of adverts. We model this by splitting the Active state into two concurrent nested submachines, Running and Monitoring, each in a separate region of the Active state machine decomposition compartment. This is shown in </a><a href="part18.htm#bookmark575" class="a">Fig. 11.10 by dividing the decomposition compartment with a dashed line. The concurrent states are described as orthogonal,</a>6<span class="p"> meaning that they are independent of each other.</span><a name="bookmark547">&zwnj;</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark540" class="a">A transition to a complex state such as this one is equivalent to a simultaneous transition to the initial states of each concurrent submachine. An initial state must be specified in both nested submachines in order to avoid ambiguity about which substate should first be entered in each concurrent region. A transition to the Active state means that the Campaign object simultaneously enters the Advert Preparation and Survey substates after any entry activities defined for the Active state itself have been invoked. A transition may now occur within either concurrent region without having any effect on the substate in the other concurrent region. However, a transition out of the Active state applies to all its substates (no matter how deeply nested). In a sense, we can say that the substates inherit the campaignCompleted transition from the Active state (shown in </a><a href="part18.htm#bookmark545" class="a">Fig. 11.7) since the transition applies implicitly to them all. This is equivalent to saying that an event that triggers a transition out of the Active state also triggers a transition out of any substates that are currently occupied. The submachine Monitoring does not have a final state. When the Active state is exited, whichever of the two states Survey or Evaluation is currently occupied at that time will also be exited. Inherited transitions can be masked if a transition with the same trigger is present in one of the nested state machines (as is the case for the campaignCompleted transition from the Running Adverts state in </a>Fig. 11.10).</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark548" class="a">In general, composite states may exit in several ways. </a>Figure 11.11 illustrates two of these. State 1 will exit when the trigger someTrigger occurs irrespective of which substate the submachine occupies. Alternatively State 1 will exit when its submachine is completed, generating a completion event. The unlabelled transition from State 1 to State 2 represents the transition caused by this completion event.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;"><span><img width="455" height="302" alt="image" src="Image_672.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark548">Figure 11.11 </a><span class="s21">Completion event.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;"><span><img width="523" height="147" alt="image" src="Image_673.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark549">Figure 11.12 </a><span class="s21">Parallel states using fork and join.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark549" class="a">Figure </a>11.12 shows the use of a <i>fork pseudostate </i>splitting the transition into two paths, each leading to a specific concurrent substate. It also shows that the containing state is not exited until both parallel nested submachines are exited with transitions that merge at the <i>join pseudostate</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">11.4.3 <b>Entry and exit pseudostates</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark550">On occasions it is useful to model exceptional entry to and exit from a submachine state. This is achieved using an </a><i>entry pseudostate </i>and an <i>exit pseudostate</i><a href="part18.htm#bookmark551" class="a">. Figure </a>11.13 shows an example of this notation in use. The state machine Advert has three states StoryBoard, AdvertPrep and AdvertRunning. AdvertPrep is a submachine state with entry and exit pseudostates defined. The state machine AdvertPrepSM also has the same entry and exit pseudostates defined (they have the same namesâ€”Advert Reworked and Advert Aborted respectively). In AdvertPrepSM these pseudostates are shown on the frame boundary. Alternatively they could have been placed inside the frame. The trigger abort causes the state machine AdvertPrepSM to exit via Advert Aborted and this then follows the transition to the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">final state in the state machine Advert. The transition from AdvertRunning to Advert Reworked causes the submachine to start from the state linked to that entry pseudostate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="541" height="506" alt="image" src="Image_674.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark551">Figure 11.13 </a><span class="s21">Entry and exit pseudostates.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">11.4.4 <b>Junction and choice pseudostates</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark552" class="a">UML offers notation to show decision points on state machine diagrams. Junction and choice pseudostates may both be used for this purpose, although they have subtly different semantics. </a>Figure 11.14 illustrates the notation. The diagram shows transitions from StateA to StateB and from StateA to StateC, which illustrate a compound transition. In general a compound transition may have more than one source state and more than one target state and will use junction, choice, fork or join pseudostates.</p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span><img width="510" height="218" alt="image" src="Image_675.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark552">Figure 11.14 </a><span class="s21">Junction and choice pseudostates.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark553">A </a><i>junction pseudodate </i>(the notation is the same as that for the initial pseudostate) has one or more entry transitions and will have one or more exit transitions. When there are many entry transitions and one exit transition this is known as a <i>merge</i>. When there are several exit transitions and only one entry transition this is known as a <i>static conditional branch</i>. Each exit transition will have a guard condition and the one whose guard condition evaluates as true fires. These guards are evaluated before the compound transition fires. If several guard conditions evaluate as true the transition that fires will be one of these.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Choice pseudostates <a href="part18.htm#bookmark552" class="a">allow the splitting of transitions into multiple exit transitions. Each exit transition will have a guard condition and, as can be seen in Fig. </a><span class="p">11.14, if they all share a common argument it may be placed in the diamond-shaped choice symbol. The difference between choice and junction pseudostates is that for choice pseudostates the guard conditions are evaluated at the time the choice point is reached. Any actions associated with the first transitions in the compound transition (before the choice state) will have been executed and may affect which of the guard conditions evaluates to true.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">11.4.5 <b>H istory pseudostates</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Composite states can be entered in various ways. We have already discussed the use of an entry pseudostate, which allows the submachine of composite state to be entered at a pre- determined substate. If a composite state has been entered and then exited prematurely before its submachine has completed, it may be useful to resume the composite state at the substate that was last active. The <i>shallow history pseudostate </i>and <i>deep history pseudostate </i><a href="part18.htm#bookmark554" class="a">in </a>Figure 11.15 are used to represent this.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 136pt;text-indent: 0pt;text-align: left;"><span><img width="241" height="96" alt="image" src="Image_676.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark554">Figure 11.15 </a><span class="s21">History pseudostates.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark555" class="a">For example, in Figure </a>11.16, a Campaign in the Active state may be suspended by the suspendCampaign trigger and move into the Suspended state. At some point the issue that resulted in the suspension is resolved and the campaign resumes where it left off. In this example the state Active has two parallel submachines, both of which need to be resumed from their last active substate. This is shown by the transition resumeCampaign from Suspended. This goes to the fork pseudostate and splits into two pathways, one going to the shallow history pseudostate in Running and the other going to the shallow history pseudostate in Monitoring. (A region may have no more than one history pseudostate.) Each of these</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">history pseudostates then activates the last substate that was active in its region. The unlabelled transition from the shallow history pseudostate indicates the default shallow history substate. This state is activated if the last active substate was the final state or if the composite state had not been previously active. For Running the default shallow history substate is <i>Advert Preparation </i>and for <i>Monitoring </i>it is <i>Survey</i>.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark555" class="a">Composite states may have substates that are in turn composite and so on. Thus, there may be an arbitrarily deep nesting of substates. The deep history pseudostate works in a similar way to the shallow history pseudostate but causes the composite state to resume at the last active state in each of the nested submachines within that region, no matter how deeply nested they are. In Fig. </a>11.16 shallow history and deep history pseudostates would have the same effect as there is only one level of nesting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="547" height="339" alt="image" src="Image_677.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark555"><span class="s31">Figure 11.16 </span></a>The <span class="s89">Active </span>state with history pseudostates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">11.4.6 <b>State machine specialization</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">State machines model the behaviour of objects of a class. Classes can be extended to produce specialized sub-classes and consequently state machines can also be extended. States can be specified as {<i>final</i>} meaning that they cannot be extended in specializations. Transitions can be extended too, but the source state and the trigger must not be changed. For example, a new class International Campaign might be identified for Agate. The state machine for objects of this new class would be a specialization of the Campaign state machine and may add new states and transitions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="264" height="25" alt="image" src="Image_678.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.5 </a><a href="part4.htm#bookmark4" class="s29">Preparing a State M achine</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.5 </a><a href="part4.htm#bookmark4" class="s29">Preparing a State M achine</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.5 </a><a href="part4.htm#bookmark4" class="s29">Preparing a State M achine</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark556">State machines can be prepared from various perspectives. The state machine for a class can be seen as a description of the ways that use cases can affect objects of that class. Use cases give rise to interaction diagrams (sequence diagrams or communication diagrams) and these can be used as a starting point for the preparation of a state machine.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Interaction diagrams show the messages that an object receives during the execution of a use case. The receipt of a message by an object does not necessarily correspond to an event that causes a state change. For example, simple â€˜getâ€™ messages (e.g. getTitle) and query messages (e.g. listAdverts) are not events in this sense. This is because they do not change</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the values of any of the objectâ€™s attributes, nor do they alter any of its links with other objects. Some messages change attribute values without changing the state of an object. For example, a message receivePayment to a Campaign object will only cause a change of state to Paid if it represents payment of at least the full amount due.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="406" alt="image" src="Image_679.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark557">Figure 11.17 </a><span class="s21">Sequence diagram for use case </span><span class="s89">Record completion of a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">11.5.1 <b>A behavioural approach</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark557" class="a">Figure </a><a href="part38.htm#bookmark1099" class="a">11.17 shows a sequence diagram for the use case Record completion of a campaign. The receipt of the message campaignCompleted by a Campaign object is an event from the perspective of the Campaign object. In this example this event is a call trigger and causes the campaignCompleted() operation to be invoked, triggering a transition from the Active state to the Completed state. Incoming messages to an object generally correspond to a trigger causing a transition to fire. Allen and Frost </a>(1998) describe the use of interaction diagrams to develop a state machine as a behavioural approach.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The preparation of a state machine from a set of interaction diagrams using this behavioural approach has the following sequence of steps:</p><p class="s25" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1. <span class="p">Examine all interaction diagrams that involve each class that has heavy messaging.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2. <span class="p">For each class for which a state machine is being built follow steps 3 to 9.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: left;">3. <span class="p">On each interaction diagram identify the incoming messages that may correspond to events for the class being considered. Also identify the possible resulting states.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">4. <span class="p">Document these events and states on a state machine.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: left;">5.  <span class="p">Elaborate the state machine as necessary to cater for additional interactions as these become evident, and add any exceptions.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">6. <span class="p">Develop any nested state machines (unless this has already been done in an earlier step).</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: left;"><a name="bookmark558">7. </a><span class="p">Review the state machine to ensure consistency with use cases. In particular, check that any constraints that are implied by the state machine are appropriate.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">8. <span class="p">Iterate steps 4, 5 and 6 until the state machine captures the necessary level of detail.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: left;"><a name="bookmark559">9.  </a><a href="part18.htm#bookmark576" class="a">Check the consistency of the state machine with the class diagram, with interaction diagrams and with any other state machines.</a><a href="part18.htm#bookmark576" class="s32">7</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark557" class="a">The sequence diagram in </a>Fig. 11.17 has been annotated to indicate the state change that is triggered by the event campaignCompleted. In order to identify all incoming messages that may trigger a state change for an object, all interaction diagrams that affect the object should be examined (sequence diagrams are probably easier to use for this purpose than communication diagrams, but this is a matter of personal preference). Analysis of the interaction diagrams produces a first-cut list of all events (caused by incoming messages) that trigger state changes, and also a first-cut list of states that the object may enter as a result of these events. If only major interactions have been modelled then the lists will not be complete, but they can still provide an effective starting point.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark560" class="a">The next step is to prepare a draft state machine for the class. Figure 11.18 illustrates the level of detail that might be shown in a first-cut state machine for the Campaign class. This would need to be expanded in order to reflect any events that have not been identified from the interaction diagrams, and also to include any exceptions. Complex nested states can be refined at this stage. A review of the state machine in Fig. </a><a href="part18.htm#bookmark561" class="a">11.18 results in the addition of the Active state to encompass the states Advert Preparation, Scheduling and Running Adverts (shown in the revised state machine in </a>Fig. 11.19).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="535" height="588" alt="image" src="Image_680.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark560"><span class="s31">Figure 11.18 </span></a>Initial state machine for the <span class="s89">Campaign </span>classâ€”a behavioural approach.</p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><span><img width="534" height="679" alt="image" src="Image_681.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark561"><span class="s31">Figure 11.19 </span></a>Revised state machine for the <span class="s89">Campaign </span>class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The state machine is then compared to use cases in order to check that the constraints on class behaviour shown in the state machine satisfy the requirements documented in the use case. In this example the states Surveying and Evaluating have not yet been included. These might be identified in a final sweep-up to check that the state machine is complete, and could then be added as concurrent states within the Active state.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark562" class="a">Let us suppose that further investigation of behaviour that can affect a campaign reveals that in some circumstances a campaign can be cancelled. This is not permitted after a campaign has been completed but a campaign can be cancelled while it is in the Commissioned state or in the Active state. In either case cancellation costs are calculated for billing to the client. If the campaign is active then advertisement schedules are also cancelled. A final state machine that includes this additional requirement is shown in Fig. </a>11.20. In this version the transition campaignCompleted is shown explicitly from the nested concurrent</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">substate Running Adverts to the state Completed. When a transition like this fires, any exit activities for the other concurrent substates that are occupied are performed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">11.5.2 <b>A lifecycle approach</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An alternative approach to the preparation of state machines is based on the consideration of lifecycles for objects of each class. This approach does not use interaction diagrams as an initial source of possible events and states. Instead, they are identified directly from use cases and from any other requirements documentation that happens to be available. First, the main system events are listed (at Agate â€˜<i>A client commissions a new campaign</i>â€™ might be one of the first to consider). Each event is then examined in order to determine which objects are likely to have a state dependent response to it.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The steps involved in the lifecycle approach to state modelling are as follows.</p><p class="s25" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">1. <span class="p">Identify major system events.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">2. <span class="p">Identify each class that is likely to have a state dependent response to these events.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: left;">3.  <span class="p">For each of these classes produce a first-cut state machine by considering the typical lifecycle of an instance of the class.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">4. <span class="p">Examine the state machine and elaborate to encompass more detailed event behaviour.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">5. <span class="p">Enhance the state machine to include alternative scenarios.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: left;">6. <span class="p">Review the state machine to ensure that it is consistent with the use cases. In particular, check that the constraints that the state machine implies are appropriate.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: left;">7. <span class="p">Iterate through steps 4, 5 and 6 until the state machine captures the necessary level of detail.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">8. <span class="p">Ensure consistency with class diagram and interaction diagrams and other state machines.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark538" class="a">The lifecycle approach is less formal than the behavioural approach in its initial identification of events and relevant classes. It is often helpful to use a combination of the two, since each provides checks on the other. A lifecycle approach might produce </a><a href="part18.htm#bookmark562" class="a">Fig. 11.6 as an initial first-cut state machine for the Campaign class, but further elaboration should still result in the state machine shown in </a>Fig. 11.20.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="520" alt="image" src="Image_682.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark562"><span class="s31">Figure 11.20 </span></a>Final version of the <span class="s89">Campaign </span>state machine.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="384" height="25" alt="image" src="Image_683.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.6  </a><a href="part4.htm#bookmark4" class="s29">Protocol and Behavioural State M achines</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.6  </a><a href="part4.htm#bookmark4" class="s29">Protocol and Behavioural State M achines</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.6  </a><a href="part4.htm#bookmark4" class="s29">Protocol and Behavioural State M achines</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark563">So far in this chapter we have been developing behavioural state machines. Protocol state machines differ in that they only show all the legal transitions with their pre- and post- conditions. The states of a protocol state machine cannot have entry, exit or do activity sections, they cannot have deep or shallow history states and all transitions must be protocol transitions.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The syntax for a protocol transition label is as follows:</p><p class="s13" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">â€˜ [ â€˜ pre-condition â€˜ ] â€™ trigger â€˜ /â€™ â€˜ [ â€˜ post-condition â€˜ ] â€™</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Unlike behavioural transitions protocol transitions do not have activity expressions.</p><p style="padding-left: 85pt;text-indent: 0pt;text-align: left;"><span><img width="378" height="402" alt="image" src="Image_684.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark564">Figure 11.21 </a><span class="s21">Protocol state machine for </span><span class="s89">Barrier.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part18.htm#bookmark476" class="a">Figure </a><a href="part18.htm#bookmark478" class="a">9.28 shows the sequence diagram for the use case Car enters car park and </a><a href="part18.htm#bookmark478">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark478" class="a">9.29 shows the interaction timing diagram for the :Barrier and :TicketMachine lifelines. </a><a href="part18.htm#bookmark564" class="a">The corresponding protocol state machine for the class Barrier is shown in Fig. </a>11.21. This provides a description of all the transitions that are permitted for the Barrier class and the circumstances under which they are valid. For example, the barrier can be lowered only if the pre-condition</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">[barrierState = Raised and barrierRaisedTime &gt; 20s]</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">is true. This states that before the barrier can be lowered it must be raised and that it has been raised for at least 20 seconds.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="234" height="24" alt="image" src="Image_685.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.7  </a><a href="part4.htm#bookmark4" class="s29">Consistency Checking</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.7  </a><a href="part4.htm#bookmark4" class="s29">Consistency Checking</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.7  </a><a href="part4.htm#bookmark4" class="s29">Consistency Checking</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part18.htm#bookmark418" class="a" name="bookmark565">The need for consistency between different models was discussed in Chapter </a>9 in relation to interaction diagrams. State machines must also be consistent with other models:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_686.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Every trigger should appear as an incoming message for the appropriate object on an interaction diagram.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_687.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a name="bookmark566">Every trigger should correspond to an operation on the appropriate class (but note that not all operations correspond to triggers).</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_688.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Every action should correspond to the execution of an operation on the appropriate class, and perhaps also to the dispatch of a message to another object.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_689.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Every outgoing message sent from a state machine must correspond to an operation on another class.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Consistency checks are an important task in the preparation of a complete set of models. This process highlights omissions and errors, and encourages the clarification of any ambiguity or incompleteness in the requirements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="201" height="25" alt="image" src="Image_690.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.8  </a><a href="part4.htm#bookmark4" class="s29">Quality Guidelines</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.8  </a><a href="part4.htm#bookmark4" class="s29">Quality Guidelines</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.8  </a><a href="part4.htm#bookmark4" class="s29">Quality Guidelines</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark567">Preparing state machines is an iterative process that involves refining the model until it captures the semantics of the object or model element behaviour. A series of general guidelines that aid the production of good quality state machines is listed below:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_691.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Name each state uniquely to reflect what is happening for the duration of the state or what the state is waiting for.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_692.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Do not use composite states unless the state behaviour is genuinely complex.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_693.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_694.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="part18.htm#bookmark562" class="a">Do not show too much complexity on a single state machine. If there are more than seven states consider using substates. Even with a small number of states, a state machine may be too complex if there are a large number of transitions between them. Arguably the state machine in </a>Fig. 11.20 would be better represented on three diagrams: one for the high-level state machine with the detail of the Active state hidden and one diagram for each of the two submachines, Running and Monitoring. Use guard conditions carefully to ensure that the state machine describes possible behaviour unambiguously.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">State machines should not be used to model procedural behavior. Activity diagrams (see </a><a href="part18.htm#bookmark492" class="a">Chapters 6 and </a>10) are used for this. Typical symptoms of a state machine that is procedural include the following:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_695.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Most transitions are fired by state completion.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_696.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Many messages are sent to â€˜selfâ€™, reflecting code reuse rather than actions triggered by events.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_697.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">States do not capture state dependent behaviour associated with the class.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Of course, a model that was intended to be a state machine but turns out to be an activity diagram describing procedural flow may be a valuable model; it just is not a state machine.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="130" height="25" alt="image" src="Image_698.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">11.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark568">The specification of the dynamic and behavioural aspects of an application is an important aspect of both analysis and design. They are described in part by interaction diagrams but these focus only on a use case or an operation. In order to capture fully the behavioural constraints for each class it is necessary to model the impact of events on that class and to model the resulting state changes with their attendant limitations on behaviour. It is only necessary to prepare state machines for classes that have state dependent variations in behaviour. UMLâ€™s state machine notation permits the construction of detailed models that may include the nesting of states and the use of concurrent states to capture complex behaviour.</a><a name="bookmark569">&zwnj;</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">State machines must be checked for consistency with their associated class and interaction diagrams and this may highlight the need to make modifications to these other models.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The notations provided by UML are very detailed and should be used with some care. There is no advantage in producing a state machine that utilizes every UML feature unless this is really necessary for the application that is being modelled. Ideally, state models should be kept as simple as possible but should have sufficient detail to make them unambiguous and informative. The use of multiple nested states does not aid clarity unless the behaviour being described is itself complex.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:75pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">11.1 <span class="s16">Define event, state and transition.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.2 <span class="s16">What is the effect of a guard condition?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.3  <span class="s16">Why should all the guard conditions from a state be mutually exclusive?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.4 <span class="s16">What is a composite state?</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:177pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s35" style="padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">11.5  <span class="s16">What does it mean to say that an object can be in concurrent states?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.6 <span class="s16">How do nested states differ from concurrent states?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.7 <span class="s16">When are entry and exit pseudostates used?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.8  <span class="s16">What is the difference between shallow history and deep history pseudostates?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;text-indent: -29pt;text-align: left;">11.9 <span class="s16">Which UML modelling elements can have their behaviour described by a state machine?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.10 <span class="s16">What is a trigger?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">11.11 <span class="s16">What indications would suggest that a state machine has not been drawn to model state changes?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.12 <span class="s16">Describe the difference between behavioural and protocol state machines.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.13 <span class="s16">Against which other UML diagrams should a state machine be cross-checked?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">11.14 <span class="s16">What cross-checks should be carried out?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:100pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">11.A <span class="s16">Using the interaction sequence diagrams that you prepared for Exercises 9.Aâ€“ 9.C, list events that affect a ProductionLine object and identify appropriate states for this class.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">11.B <span class="s16">Prepare a state machine for the class ProductionLine.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">11.C <span class="s16">List any changes that may have to be made to the class diagram for the FoodCo case study in the light of preparing this state machine.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_699.png"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1294" class="s6">State machines have been used widely to model complex control behaviour. V arious non-object-oriented approaches have used state machines very effectively. In particular, the texts by Ward and Mellor </a><a href="part38.htm#bookmark1295" class="s6">(1985, </a><a href="part38.htm#bookmark1194" class="s6">1986) and Hatley and Pirbhai </a><a href="part38.htm#bookmark1263" class="s6">(1987) provide detailed descriptions of their application in real-time applications. From an object-oriented perspective both Rumbaugh et al. </a><a href="part38.htm#bookmark1121" class="s6">(1991) and Booch </a><a href="part38.htm#bookmark1189" class="s6">(1994) provide useful descriptions of the Harel </a><a href="part38.htm#bookmark1163" class="s6">(1987) notation used in UML. Object-oriented real-time development approaches are well discussed by Douglass </a><a href="part38.htm#bookmark1269" class="s6">(2004) and also by Selic et al. </a><a href="part38.htm#bookmark1151" class="s6">(1994). The latter text is based on the ROOM (Real-time Object-Oriented Modelling) approach. Cook and Daniels </a><a href="part38.htm#bookmark1206" class="s6">(1994) give an interesting alternative perspective on the modelling of events and states. Useful advice on preparing state machines can also be found in the IBM-Rational Unified Process (IBM, </a><a href="part38.htm#bookmark1190" class="s6">2009). For a more recent view of state machines from Harel, see Harel and Politi </a>(1998), which presents the STATEMATE approach.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_700.png"/></span></p><p class="s1" style="padding-top: 8pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a name="bookmark570">1 State machines, previously known as statecharts, may be used to show state changes for various UML elements including systems, subsystems, interfaces and ports.</a><a name="bookmark571">&zwnj;</a></p><p class="s1" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark572">2 Except for interaction diagrams, where frames must be used.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark573">3 An asynchronous message.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark574">4 Unless the specifications for these operations permit a null option.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark575">5 Except transitions to entry or history pseudostates. These are explained in Sections 11.4.3 and 11.4.5 respectively.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark576">6 Orthogonal literally means at right angles.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;">7 This step should also include checking for consistency with any class diagram or operation specification constraints. Operation specification constraints are typically defined in pre- and post-conditions and invariants.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="244" alt="image" src="Image_701.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part17.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part19.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>

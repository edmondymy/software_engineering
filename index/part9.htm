<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>B1. FoodCo Ltd Case Study—Introduction</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part8.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part10.htm">Next &gt;</a></p><h1 style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 8pt;text-indent: 0pt;text-align: left;"><a name="bookmark21">FoodCo Ltd</a><a name="bookmark22">&zwnj;</a></h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark23">FoodCo produces a range of perishable foods for supermarkets and is based in the flat agricultural lands of the East Anglia region of the UK. John Evans, the present Chairman, started the company when he left the Royal Air Force. He borrowed money to buy 200 acres (81 hectares) of arable farmland, but his ambition was to be more than a farmer. As soon as Home Farm was running he opened a factory in a converted barn.</a></p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">The first product was a pickle made to a traditional family recipe. It sold well, and success financed expansion. Soon John was able to acquire derelict land next to the farm and the company moved into a larger, purpose-built factory. The product range extended to pre-packed vegetables and salads, and later a wide range of sauces, pickles and sandwich toppings, in fact almost anything made of vegetables that can be sold in jars. FoodCo’s traditional customers are major UK supermarket chains. Some lines (e.g. washed salads) sell to all customers, while others (most of the cooked products) are produced for a specific supermarket chain. Most are packaged under the supermarket’s ‘own brand’ label.</p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">The pickle started a company tradition that, as far as possible, ingredients are grown on the company’s own farm. This now covers 1500 acres (607 hectares) and includes a market garden growing tomatoes, peppers, courgettes, chillies and other exotic vegetables under glass, and an extensive herb garden. Ingredients that do not grow well in the UK climate are sourced from carefully selected farms abroad, in Mediterranean Europe, East Africa, the USA and the Far East.</p><p style="padding-bottom: 3pt;padding-left: 18pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part9.htm#bookmark24" class="a">The company’s annual turnover and employee numbers are summarized in </a>Fig. B1.1.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="84" alt="image" src="Image_046.jpg"/></span></p><p class="s20" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark24">Figure B1.1 </a><span class="s21">FoodCo’s staff complement and annual turnover.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;"><a href="part9.htm#bookmark25" class="a">There are now three factories on the site. Beechfield is the oldest, and this is where raw vegetables are prepared. This work is relatively unskilled. The newer Coppice and Watermead factories concentrate on the more complex cooking processes involved in making sauces, pickles and the like. These need more skilled and experienced staff. A bottling plant is also located in Watermead, and there are two warehouses in separate buildings. One is refrigerated and stores fresh vegetable and salad packs, while the other stores dry and bottled products. </a>Figure B1.2 shows a recent organization structure chart.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="599" alt="image" src="Image_047.jpg"/></span></p><p class="s20" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark25">Figure B1.2 </a><span class="s21">FoodCo’s current organization structure, showing the distribution of staff.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="132" alt="image" src="Image_048.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark27">‘Fellow directors, we all know the company faces great difficulties. This year’s profits will be the lowest ever. If we don’t do something drastic, we’ll be bankrupt in another year. But if we are to turn</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark27">‘Fellow directors, we all know the company faces great difficulties. This year’s profits will be the lowest ever. If we don’t do something drastic, we’ll be bankrupt in another year. But if we are to turn</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark27">‘Fellow directors, we all know the company faces great difficulties. This year’s profits will be the lowest ever. If we don’t do something drastic, we’ll be bankrupt in another year. But if we are to turn</a></p><p class="s23" style="padding-top: 10pt;padding-left: 10pt;text-indent: 0pt;line-height: 106%;text-align: left;">Box B1.1 Scene: the Board Room. John Evans speaks to the Directors about FoodCo’ s problems and a possible solution</p><p class="s23" style="padding-top: 10pt;padding-left: 10pt;text-indent: 0pt;line-height: 106%;text-align: left;">Box B1.1 Scene: the Board Room. John Evans speaks to the Directors about FoodCo’ s problems and a possible solution</p><p style="text-indent: 0pt;text-align: left;"/><p class="s23" style="padding-top: 10pt;padding-left: 10pt;text-indent: 0pt;line-height: 106%;text-align: left;">Box B1.1 Scene: the Board Room. John Evans speaks to the Directors about FoodCo’ s problems and a possible solution</p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;"><a href="part9.htm#bookmark27" class="a" name="bookmark26">The company is still privately owned and managed, with John’s elder son Harold now the Managing Director and John keeping more in the background. When Harold took over, it was generally agreed by the Board that the company must improve profitability but there was no consensus on how to achieve this. John persuaded the Board that FoodCo must bypass its traditional supermarket customers and market directly to consumers. As a result of his analysis (Box </a>B1.1 gives an edited version of his last speech to the Board as Managing Director), the ‘World Tradition’ range was launched. This now sells successfully at the quality end of the UK market. Helped by the growing respect for British food and cooking, the range has also begun to penetrate continental European and North American markets.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="616" alt="image" src="Image_049.png"/></span></p><p class="s7" style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">the situation round, we must understand why things are so difficult for us now.</p><p class="s7" style="padding-top: 1pt;padding-left: 18pt;text-indent: 14pt;text-align: justify;">‘I believe the reason goes right back to our beginnings. Those of you who were with me in 1967, when I started this company, will remember having a degree of control that seems incredible now. Everything ran the way we wanted: farm, production, sales, distribution. We made consistently high quality goods, and by 1972 the new supermarkets were clamouring to buy. That was all a long time ago, but I think that early success is a direct cause of our present predicament. Let me explain.</p><p class="s7" style="padding-top: 1pt;padding-left: 18pt;text-indent: 14pt;text-align: justify;">‘But remember 1978? When we borrowed heavily to finance expansion to meet the demand? Those loan repayments squeezed our profits hard. And then in 1984? When the TrustMart chain emerged as our dominant customer, and began driving down prices? We simply hadn’t the financial muscle to fight them. We were still paying off a huge loan! Ever since then, TrustMart has dictated prices so low they have crippled us. We’ve been unable to do a thing about it, because we’ve simply been scared they’ll go to our competitors for their supplies. Last year TrustMart bought 65% of our total production—altogether over £5m in sales—and we’ll be lucky to clear £200,000 profit on it!</p><p class="s7" style="padding-top: 1pt;padding-left: 18pt;text-indent: 14pt;text-align: justify;">‘That’s also why TrustMart calls all the shots on new products. We don’t have the cash to develop products for other customers. Now, I know we’ve grown in spite of that. It’s not all been bad, but let’s not kid ourselves it’s been good. We haven’t really run the game since 1990. We all know it! We’ve been towed along behind TrustMart—and the supermarket sector—like a child dragged along by its father. We’ve only survived this long because TrustMart had no other suppliers big enough to meet their needs. But now that’s changing. We have serious new rivals for the supermarket supply business, and TrustMart has driven our prices still lower, to the point where we may make no profit at all this year.</p><p class="s7" style="padding-top: 1pt;padding-left: 18pt;text-indent: 14pt;text-align: justify;">‘We can beat off this attack, but only if we develop new products and sell in a wider market. There is no argument about that, but there is a problem. Our <i>real </i>customers are not the supermarkets, but <i>their </i>shoppers. And they don’t know we exist, because our name is hidden behind all the TrustMart own-brand labels on all our packs and jars. The answer is to reach the consumers directly. Our market can only expand if they know our name, if they ask for our products. So here’s what we will do. We’re going to launch our own brand name, and promote it so well that everyone knows about us. Customers will begin to insist on our brand, and TrustMart will have to pay <i>our </i>price, for a change.</p><p class="s7" style="padding-top: 1pt;padding-left: 18pt;text-indent: 14pt;text-align: left;">‘It won’t be cheap. We’ll need serious market research. We’ll need more staff in the Product Development team, and we’ll need time. We’ll need a new corporate image. We’ll need TV advertising. But it will be worth it. There’s a vast market out there, and I’m not just thinking of the UK.</p><p class="s7" style="padding-top: 1pt;padding-left: 18pt;text-indent: 14pt;text-align: justify;">‘So can we finance it? Certainly! It means more heavy borrowing, but our profits on increased sales will repay the loan. It’s a big risk, but we’ll sink if we don’t take it. There are many details to work out, but this plan can succeed. It <i>will </i>succeed! When I started out, we were the best in the business. I believe we can be the best again.</p><p class="s7" style="padding-top: 1pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">‘Thank you. Are there any questions?’</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="187" height="25" alt="image" src="Image_050.png"/></span></p><p style="text-indent: 0pt;line-height: 15pt;text-align: left;"><a href="part4.htm#bookmark4" class="s19">B1.2  </a><a href="part4.htm#bookmark4" class="h3">FoodCo </a><h3 href="#bookmark4">Today</h3></p><p style="text-indent: 0pt;line-height: 15pt;text-align: left;"><a href="part4.htm#bookmark4" class="s19">B1.2  </a><a href="part4.htm#bookmark4" class="h3">FoodCo </a><h3 href="#bookmark4">Today</h3></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 15pt;text-align: left;"><a href="part4.htm#bookmark4" class="s19">B1.2  </a><a href="part4.htm#bookmark4" class="h3">FoodCo </a><h3 href="#bookmark4">Today</h3></p><p class="s24" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark28">B1.2.1 </a><b>Current thinking</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">John Evans still believes that the company’s major difficulty was over-reliance on one customer, and that this will be solved over time as the ‘World Tradition’ market expands. His son, Harold, feels that management procedures have become the main problem, particularly management information. He sees the systems as hopelessly inadequate and thinks the company has simply outgrown them. For him, this is an extremely serious issue since it will inevitably worsen as the company grows. But father and son are each as stubborn as the other, so they have never settled their differences on this vital point.</p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">The company’s Finance Director, Clare Smythe, is a relative newcomer. Less than a year after her appointment, she achieved a compromise that averted open war in the family. First, she championed the ‘World Tradition’ brand that successfully fulfilled John’s vision. This is a range of international condiments and cook-in sauces, prepared to traditional recipes from many cultures and using only the finest ingredients. Growing numbers of people in the affluent world want to be able to prepare authentic dishes from world cuisine, ranging from aloo brinjal (Indian potato and eggplant curry) to Yucatan-style cod (Mexican fish cooked in orange, lime</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">and coriander). The new range allowed the company to reposition itself in a new international market, where growth has been highly profitable. It also helps FoodCo to free itself from dependence on TrustMart, still by far their largest customer.</p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">Second, Clare recently helped Harold to persuade the Board that the introduction of a new product range compelled the company to manage its information more effectively and efficiently. The Board agreed to undertake a major review and updating of all information systems, and a national firm of consultants was commissioned to recommend a strategy.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">B1.2.2 <b>Information systems</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The current systems are a mixed set of applications, some dating back to the late 1960s, that run on diverse hardware platforms. An ageing mini-computer runs an inflexible suite of accounting programmes, a stock control system and a sales order processing system that is linked to Trustmart by electronic data interchange (this still uses a leased line connection, as the EDI software has not yet been adapted to connect over the web). The stock control system also generates product barcodes for the jar and bottle labels. The mini-computer is accessible from V T100 character-only terminals dotted throughout the factories and offices. Payroll is run off-site on a local computer bureau’s server.</p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">Managers and most administrative staff have networked PCs with standard office software, email and Internet access. A handful of proprietary packages includes the computer aided design program used to design production line layouts. The PC network is not linked to the mini-computer.</p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">Some production is automated, including the washing and chopping operations in the Beechfield factory. The automated machines are of the numerical control type and are now obsolescent. Although they still do a reasonable job, by modern standards they are awkward to re-program, and maintaining them requires particular specialist skills.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">The consultants’ report</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: right;">After some months of investigation the consultants submitted their report early in 2008. This identified serious weaknesses in a number of areas and recommended a phased approach to change. The top priority was to develop new product costing and production planning systems that would interface to a new in-house payroll package. The improved product costing and production information would give tighter control of production costs. Price negotiations with customers could be conducted on a more realistic basis, and better management information would help managers respond to the volatile international market for ‘World Tradition’ products. The second main recommendation in the report was for a substantial investment in upgraded hardware. Many more PCs are to be installed, networked to each other and to the mini-computer. These need to be in place prior to phase 2 of the information systems plan, which calls for a rapid spread of automation through the production and distribution departments. Finally, all new software development was to fit in with a medium-term plan to make the most of new technology opportunities. For this reason, a move to an object-oriented development method was seen as a critical aspect. This would help later with building an integrated set of systems, ultimately to include factory automation, management information, more electronic links with suppliers and customers and an exploration of online Internet marketing. The Board accepted all the recommendations, and a detailed investigation into the requirements for the first systems was begun by FoodCo’s in-house IS team, who had recently been trained in object-oriented development methods. Two staff were seconded from the</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">consultants to act as mentors to the first two or three projects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Product costing: current operations</p><p class="s13" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This section describes the way that product costing activities are currently carried out at FoodCo. It concentrates particularly on the Beechfield factory, as this was an area identified by the consultants’ report as a priority for action. Further information is given within chapters, where necessary, as part of case study exercises or review questions. Some information that is not strictly necessary for the completion of the exercises in this book has been included, in order to give a broader view of the overall operations.</p><p class="s13" style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">Line operations<span class="p">. The nature of production control varies between the various factory and farm departments, depending on the operations undertaken and the nature of the product. At</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Beechfield, the main products are packs of washed salads and prepared raw vegetables, and some uncooked products such as coleslaw and Waldorf salad. There are three production lines. Each can be adapted to produce different products as the need arises, but only one at a time. Operatives’ pay and the overall production costs for these lines are based on the entire batch produced during a single run, which often, although not always, equates to a single eight-hour shift. The line is switched on at the beginning of the run and temporarily halted for coffee breaks and lunch, or when a problem occurs. When a line is switched to a different product, this is treated as a separate run. If operatives are required to wait while the line is changed over to another product, or while a problem with the line is sorted out, they are paid a standing rate to compensate them for lost earnings.</p><p class="s13" style="padding-bottom: 3pt;padding-left: 5pt;text-indent: 12pt;text-align: justify;">Payroll and costing<span class="p">. For workers on the older lines at Beechfield, earnings are calculated using an algorithm that has as its input the following variables: the piecework rate for each item, the quantity of that item produced, the number of productive hours spent on the line by each employee and the employee’s grade. For each run, the line supervisor completes a </span>daily production record sheet <a href="part9.htm#bookmark29" class="a">(see Fig. </a><span class="p">B1.3). These are sent to the costing section for analysis before being passed on to the payroll section.</span></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"><span><img width="500" height="301" alt="image" src="Image_051.jpg"/></span></p><p class="s20" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark29">Figure B1.3 </a><span class="s21">Daily production record sheet for Beechfield factory.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">The supervisors also complete a <i>weekly timesheet </i><a href="part9.htm#bookmark30" class="a">(see Fig. </a>B1.4) for each employee. These are passed direct to the payroll section. Each Tuesday, the entire week’s production record sheets and timesheets are batched up and sent to the computer bureau. Data from the production sheets and timesheets is input to a piecework system at the bureau to produce a weekly earnings figure for the payroll calculation. After the payroll has been run, all paperwork is returned to FoodCo’s costing section for analysis. In practice, however, only a limited amount of analysis is carried out.</p><p style="padding-left: 61pt;text-indent: 0pt;text-align: left;"><span><img width="441" height="557" alt="image" src="Image_052.jpg"/></span></p><p class="s20" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark30">Figure B1.4 </a><span class="s21">The timesheet used in Beechfield factory (the employee’s name and payroll number have been blacked out for reasons of confidentiality).</span></p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 12pt;text-align: justify;">Some parts of the overall product costing function are outside the scope of this initial project and will be included either in a later increment or possibly in phase 2 of the plan. These are the Coppice and Watermead factories, where the problems with product costing are not as significant as at Beechfield, and Home Farm, where the operations are very different in nature.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Problems in product costing</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The mini-computer accounting system includes a product costing module. This meets only some of the information needs of the Finance Director and very few of the requests of any other managers, least of all the factory and farm managers who have direct control of most operations. Since the existing product costing system cannot answer most of the queries that are put to it, the costing clerks attempt to provide additional reports by using a spreadsheet application. But the sheer volume of data available for input each week is impossible to process accurately for all products. As a result of ongoing staff shortages in the office, it has only usually been possible to produce actual costs for one production line each week. Making the best of a bad job, each line is costed accurately every fifth week and estimates produced for the other four weeks in between. As a result, the ‘actual’ costs quoted in management reports are often really no more than estimates derived from samples of the data available.</p><p style="padding-left: 5pt;text-indent: 12pt;text-align: justify;">Both Harold Evans and Clare Smythe are convinced that their inability to get accurate costs is a major contributory factor in the company’s decline in profitability. In effect, it means that</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">senior management cannot say with confidence which operations are profitable and which are not. Until they have better information, they cannot even tell where their real problems are.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="177" height="26" alt="image" src="Image_053.png"/></span></p><p style="text-indent: 0pt;line-height: 15pt;text-align: left;"><a href="part4.htm#bookmark4" class="s19">B1.3  </a><a href="part4.htm#bookmark4" class="h3">The </a><h3 href="#bookmark4">Proposal</h3></p><p style="text-indent: 0pt;line-height: 15pt;text-align: left;"><a href="part4.htm#bookmark4" class="s19">B1.3  </a><a href="part4.htm#bookmark4" class="h3">The </a><h3 href="#bookmark4">Proposal</h3></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 15pt;text-align: left;"><a href="part4.htm#bookmark4" class="s19">B1.3  </a><a href="part4.htm#bookmark4" class="h3">The </a><h3 href="#bookmark4">Proposal</h3></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark32" class="a" name="bookmark31">The first system proposed for development is one to automate product costing. In Box </a>B1.2, some staff from FoodCo’s IS team are heard during a meeting early in the project. Louise Lee is the project manager, Ken Ong and Rosanne Martel are both analyst/developers on the team and Chris Pelagrini is a consultant in object-oriented development (he works for the consultancy firm that produced the IS report).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="661" alt="image" src="Image_054.png"/></span></p><p class="s23" style="padding-left: 18pt;text-indent: 0pt;text-align: justify;"><a name="bookmark32">Box B1.2 Scene: FoodCo’ s IS Team M eeting Room</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 18pt;text-indent: 0pt;text-align: justify;">Louise Lee<span class="s7">: I’ll begin by welcoming Chris Pelagrini. Chris is a consultant on objectoriented development, and he will be working closely with us on this project.</span></p><p class="s27" style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">Chris Pelagrini<span class="s7">: Thank you, Louise. Yes, that’s right, I’ve been seconded to you for the duration. Provided, that is, we complete in six months (laughs).</span></p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">LL<span class="s7">: Don’t worry, we can hit that deadline. OK, let’s get started. Today I mainly want to set the scope for the project. Rosanne, you had a meeting with the Beechfield factory manager, Hari Patel. What did you find out?</span></p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">Rosanne M artel<span class="s7">: Yes, I met Hari on Thursday. He’s the principal client for this system, and he’ll be a user too. He confirmed the reasons why we picked this as our first object-oriented project. It’s strategically important, but not so critical that the whole company will fold if we mess up. It’s tightly scoped, and only really affects operations in Beechfield and the costing office. But it does need access to a lot of data currently on the mini-computer and it’s a feeder system for payroll and production planning. If we develop a system that integrates with these, we’ll have a sound basis for re-engineering the entire IS provision.</span></p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">LL<span class="s7">: Good. This confirms the consultants’ report too. Did you get any idea of the main functionality of the system? We’ll need this to estimate timescales with any confidence.</span></p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;line-height: 108%;text-align: left;">RM <span class="s7">: Ken, you’ve done some work on this. How far did you get?                 </span>K en Ong<span class="s7">: Well, it’s too early to be precise, but I’ve sketched out some use cases and a rough class diagram. Users include Hari, his line supervisors, the sales team, production control and the costing office. The main system inputs are staff timesheets and production record sheets, and data we can</span></p><p class="s7" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">import from payroll records and the existing costing system. The main system outputs will be</p><p class="s7" style="padding-left: 18pt;text-indent: 0pt;text-align: justify;">production run costs. One obvious problem is that we don’t hold any payroll data electronically, so we’ll need access to the bureau’s files at some point. I would say that as a whole it is not highly complex. My first class diagram has about a dozen classes. There are a few interactions that involve most classes—for example, producing the final cost for a production line run—but most are simpler.</p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">LL<span class="s7">: So this is a fairly small system with relatively few users, but lots of interfaces to other systems. Can you show us some of this on the whiteboard?</span></p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">K O<span class="s7">: Yes, of course. Just give me a few minutes (goes to whiteboard and starts to draw).</span></p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">LL<span class="s7">: (while Ken draws) What do you think so far, Chris? Perhaps you could say a little about how you see your role.</span></p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">CP<span class="s7">: My task is to help you apply to this project the object-oriented techniques that you have all learned on the training courses. You all know there is a big difference between knowing the techniques and understanding how they fit together. I’m here to help when you’re unsure about anything. Rosanne’s summary suggests this project is an ideal start and I’m confident we will make it a complete success.</span></p><p class="s27" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">LL<span class="s7">: That’s great, Chris, coming from the expert. OK Ken, now let’s see your diagrams.</span></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="244" alt="image" src="Image_055.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:346pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark33">LEARNING OBJECTIVES</a><a name="bookmark34">&zwnj;</a></p></td><td style="width:94pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_056.jpg"/></span></p></td></tr><tr style="height:95pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_057.jpg"/></span> <span class="s16">how to define an information system</span></p><p class="s17" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_058.jpg"/></span> <span class="s16">some examples and types of information system</span></p><p class="s17" style="padding-top: 1pt;padding-left: 54pt;padding-right: 12pt;text-indent: -20pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_059.jpg"/></span> <span class="s16">how to use the concepts of systems theory to explain the parts and the behaviour of an information system</span></p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_060.jpg"/></span> <span class="s16">how information systems can be useful in managing organizations.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="144" height="25" alt="image" src="Image_061.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark35">An information system is something that people create in order to capture, store, organize and display information. Information systems play a very important part in human affairs. They are used in all kinds of organization, whether a business, a government department or a private club. They help managers to manage their businesses. They enable customers to find out what they can buy, to place an order and to make a purchase. They help citizens to elect representatives and to pay their taxes. They help the police to detect criminals and to trace the owners of stolen cars. They enable search engines to find websites that match our interests. They make it possible for users of a social networking site to keep in touch with their online friends. They enable our emails to be delivered to the correct person’s inbox. It is hard to think of any part of our social lives that could work at all without some use of information systems.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark36">Any information system must have certain elements, without which it cannot fulfil a useful purpose. There must be a way of selecting relevant data, recording it on a reasonably permanent storage medium and retrieving it when it is needed. There must also be a method of processing the data to produce information that is useful for a task that the system’s users wish to perform. At its simplest, the process may simply be a matter of retrieving a particular piece of data. More complex processes may involve a great deal of computation, such as the sophisticated mathematical modelling that produces a weather forecast. Most information systems today make use of information technology (IT), and especially of computers. But this is a recent innovation, and modern IT is not at all necessary to the existence of an information system.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This book as a whole shows you how to analyse and design information systems following an object-oriented approach. All of these terms will be explained in detail, but first we will focus on some examples from the history of information systems. This is so that we can identify more clearly the common features and concerns of all information systems. These are essentially the same whether or not the system uses IT for its operation. Then, since an information system is just one kind of system, it will be useful to examine what all systems</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">have in common. Finally, we will apply this understanding to an analysis of businesses as systems. This will help you to appreciate the role of information systems in an organization.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="294" height="25" alt="image" src="Image_062.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.2  </a><a href="part4.htm#bookmark4" class="s29">Information Systems in H istory</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.2  </a><a href="part4.htm#bookmark4" class="s29">Information Systems in H istory</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.2  </a><a href="part4.htm#bookmark4" class="s29">Information Systems in H istory</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark37">Information systems have probably existed in some form since our most distant ancestors first became capable of organized collective action. Palaeolithic cave paintings in Spain and France of hunters and animals from 30 000 years or more ago might even have been a simple sort of information system. Perhaps the aim of the cave artists was to record for future generations which animals they had seen and hunted near their homes, or the best techniques to use in hunting them, or even the prowess of individual hunters. We can never know this for sure, but certainly their paintings served some important purpose in stone-age society, and they show at least some signs of being an information system: the artists made some selection of what to paint, and they recorded information in an enduring form.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We do know that one of the earliest forms of writing—Sumerian cuneiform—was used in ancient Mesopotamia around 3500 <span class="s30">BCE </span>to keep accounts of agricultural commodities, such as grain brought by farmers to be placed in city storehouses. The storage medium for these records consisted of marks made in wet clay tablets, which were then dried hard to make a permanent record. Selection and processing of the data were carried out in the minds of the people who used these tablets, although it is possible that they also used an early form of abacus to help them with simple calculations. Certainly by the time of the Middle Kingdom in ancient Egypt (this began about 2000 <span class="s30">BCE</span>) record keeping was an important function in society, and this spread into Europe mainly through the Roman Empire. One impetus for this was because rulers wanted to know what their subjects owned so that they could tax them. But also citizens, especially producers—farmers, for example—and merchants, wanted to keep track of their land, other possessions and earnings.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">A 19th-century railway signalman may seem to us just a manual worker of the early</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1297" class="a">industrial age. But he was really an information worker, differing from many modern computer users only in that the technology available to him was much less sophisticated. The sociologist Frank Webster </a>(1995) describes a signalman as someone who needs to know about track layouts, train timetables, safety rules and signalling procedures. He must keep in contact with other signalmen up and down the line, personnel at nearby stations and on trains, and he must carefully record all the trains that pass through the network. In other words, he operates an information system that comprises his ledgers, the levers, signals and lamps and what he knows in his mind. On modern railways, the signalling systems are largely automated. However, the tasks are much the same, regardless of whether the work is done by networked computers linked electronically to electric motors that switch points and operate signal lights, or by a traditional signalman who pulls levers connected by steel cables to the points and signals and keeps careful records in a handwritten ledger. The technology may have changed, but the system is essentially similar.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In the 1940 Battle of Britain, the Royal Air Force (RAF) was responsible for defending</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1134" class="a">Britain against bomber raids by Hitler’s Luftwaffe. A complex information system at Fighter Command headquarters at Bentley Priory co-ordinated the defence. Checkland and Holwell (1998) describe it aptly as ‘the information system that won the war’. This vital </a>communications and control system monitored and controlled Spitfire and Hurricane fighter squadrons as they flew during the Battle of Britain. Almost exactly contemporary with the birth of the electronic digital computer, it contained nothing we would recognize today as information technology. The main ‘hardware’ was a large map the size of an enormous dining table. Coloured counters marked the position of various aircraft formations, and these were pushed around the map by hand as the situation changed. News about Luftwaffe raids was collected by radar and by observer posts throughout the country and sent in by telephone, teleprinter and radio. Information about RAF deployment was sent from a network of control rooms. A special filter room correlated and checked all reports before passing them through to the main control room for display. Other displays included a blackboard that showed at a glance the status of all current Luftwaffe raids, and a row of coloured lights flagged the readiness of RAF fighter squadrons. Carefully co-ordinated duplicates of these displays were based at other control</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">rooms, where controllers spoke directly by radio to the tense young pilots. Using this basic, but effective, technology, human operators performed communication, filtering, processing and display tasks that would today be carried out by computers. Historians still argue about what contributed most to winning the Battle of Britain. Radar technology, the aircraft and the bravery of the pilots all clearly played an important role. But it was only through Fighter Command’s information system that human and technical resources were organized so effectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><span><img width="363" height="409" alt="image" src="Image_063.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark38">Figure 1.1 </a><span class="s21">Railway signal box.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Despite the great age of some of its subject material, the academic study of information systems is young, even by the standards of the computer age, and owes its importance today mainly to the appearance of the digital computer. The earliest computer systems were developed with very little thought given to the analysis and design issues with which this book is primarily concerned. At first, computing was little more than a branch of mathematics. It received a great impetus during the Second World War, when emerging electronics technology was applied to military problems such as coding, code-breaking, naval gunnery calculations and similar mathematical tasks. The Colossus Computer allowed British code-breakers to decode German military signals, and some historians think it may have shortened the war by as much as two years. (You can see the rebuilt Colossus Computer working today at the National Museum of Computing at Bletchley Park.) The main focus of the engineers who built machines like the Colossus was on the technical difficulties of building the hardware, which used ideas from the cutting edge of research in electronics and control logic. But it was also necessary to invent efficient techniques for controlling the new machines, and in due course these evolved into today’s computer programming.</p><p style="padding-left: 85pt;text-indent: 0pt;text-align: left;"><span><img width="378" height="374" alt="image" src="Image_064.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark39">Figure 1.2 </a><span class="s21">Simplified drawing of the Fighter Command system.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1173" class="a" name="bookmark40">As computer hardware became more powerful it also became more versatile. Once the world was again at peace, businesses began to be aware of the commercial potential that computers offered. The world’s first business computer, LEO 1, was built for J. Lyons and Co. by a team at Cambridge University (</a>Ferry, 2004). It was installed in 1951, and initially used for calculating the production requirements from daily orders. Later, its use was extended to payroll and inventory, which today are still bread-and-butter tasks for the computing departments of most organizations.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Computer technology quickly grew more sophisticated, and the tasks to which it was applied grew more complex. Computer scientists turned their attention to wider questions, such as the following.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_065.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">How do we establish the business requirements for a new system (often much subtler and more complex than the role of the earliest machines)?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_066.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">What effects will the new system have on the organization?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_067.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">How do we ensure that the system we build will meet its requirements?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">From these concerns, the discipline of information systems emerged. These questions remain some of the main concerns of the field of information systems today, and they are also the principal subjects of this book.</p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark73" class="a" name="bookmark41">Within the relatively new field of information systems, object-oriented analysis and design are even newer. They are derived from object-oriented programming, which dates from the 1970s, but object-oriented analysis and design were first conceived of only around 1990. Today the object-oriented approach is still by no means universal. However, we believe that, for most applications—although not quite all</a>1<span class="p">—object-orientation is simply the best way yet found of carrying out the analysis, design and implementation of a computer-based information system.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="265" height="24" alt="image" src="Image_068.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.3  </a><a href="part4.htm#bookmark4" class="s29">Information Systems Today</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.3  </a><a href="part4.htm#bookmark4" class="s29">Information Systems Today</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.3  </a><a href="part4.htm#bookmark4" class="s29">Information Systems Today</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark42">The information systems we have described so far predated the digital electronic computer, and therefore naturally made no use of IT. To see how IT has changed—perhaps even</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">revolutionized—the field of information systems, let us consider an online retailer. McGregor plc is an imaginary chain of retail stores that sells kitchen appliances, mobile phones and electronic home entertainment equipment. The company has an online shopping centre on its website. After registering with the site, shoppers can browse through products, select items and place them in a virtual trolley. At the end of the trip, shoppers can buy what is in their trolley, remove items or quit without making a purchase. Payment is made by submitting credit card details online, or by entering part of the card details and phoning to give the rest. Delivery times are usually within three working days for small items such as mobile phones, but up to three weeks for larger items such as cookers. Goods are dispatched direct to the customer’s home. Credit cards are debited on the day of dispatch and, prior to delivery, customers can use the website to check on the progress of their order.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This is how an online shopper interacts with the system, but beneath the surface a great deal more is going on. A whole network of hardware connects the shopper’s home PC and broadband modem, through a phone line to a telephone exchange, and then through a fibre- optic cable to a computer that acts as a web server. This is connected to other networks at McGregor’s head office and shops. Many software applications are also busy processing information captured through the web pages, and feeding various support activities. Some of these are computerized and others are carried out by people.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_069.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Marketing staff keep prices and product details up to date on the electronic product catalogue system. This can also be accessed by touch-screen PCs in the shops.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_070.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Credit card details are stored electronically for relay to the card processing centre when the goods are dispatched.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_071.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Robot forklift trucks in the warehouse fetch items to the loading bay when they are due for dispatch, and warehouse staff load them onto delivery trucks.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_072.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Delivery drivers follow a schedule linked to an electronic map in the vehicle cab. This is updated by radio every few minutes, helping to avoid traffic jams.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_073.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Out-of-stock items are re-ordered from the supplier by electronic data interchange (EDI). When the goods arrive at the warehouse, arrangements for onward delivery and charging to the customer begin quite automatically.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_074.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">At each significant point in the sequence, a database entry is automatically updated, and this is displayed on the web page, allowing shoppers to discover what stage their order has reached.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are many users besides the shopper, each with a different view of the overall system. A network manager monitors the number of hits on the web server and network traffic within McGregor, checking for hardware or software failure and breaches of network security (e.g. if hackers try to break in). Her concern is the efficient and secure flow of information; she is not interested in its content. A financial controller uses a linked accounting system to monitor sales transactions and cash flow. A dispatch clerk regularly checks forklift schedules on her PC, and compares them to delivery truck schedules faxed daily from the courier company. She smoothes the flow of goods through the loading bay, and spends long hours on the phone sorting out delays. A market researcher uses a specialized statistical package on a portable PC to analyse online sales, assessing the success of the web pages’ presentation styles. Registration allows individual customers to be tracked as they browse the site; using information about their preferences, the design can be finely tuned to attract high-spending customers.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The use of modern IT has brought immense changes to the scope and nature of</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1116" class="a">information systems. Some people even believe that we are living through an information revolution, on a scale that is comparable to the industrial revolution. This idea has been popular since the sociologist Daniel </a>Bell coined the term ‘post-industrial society’ (1973) and it was an implicit undercurrent in Shoshana Z uboff’s classic <i>In The Age Of The Smart Machine </i><a href="part38.htm#bookmark1297" class="a">(1988). But not everyone agrees that a direct comparison with the industrial revolution is valid. Another sociologist we mentioned earlier, </a>Webster (1995), argues that contemporary changes in society, while significant, do not represent the radical break with the past implied by a ‘revolution’. Information about transactions and operations has, as we saw in the previous section, been vital to governments and businesses for thousands of years. In any case, the picture is complicated by the fact that, in many countries, the introduction of modern IT is</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">happening right alongside the process of industrialization. Still, it is clear that computers have had a dramatic and pervasive effect on our lives.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="194" height="25" alt="image" src="Image_075.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.4  </a><a href="part4.htm#bookmark4" class="s29">What is a System?</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.4  </a><a href="part4.htm#bookmark4" class="s29">What is a System?</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.4  </a><a href="part4.htm#bookmark4" class="s29">What is a System?</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark43">In everyday speech, </a><i>system </i>can mean just about anything complex that shows some kind of organization. People refer to the legal system, a tropical storm system, the system of parliamentary democracy, an eco-system, a system for winning at roulette, a computer system in someone’s office, a system for shelving books in a library, a system-built house, a hi-fi system and many more.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">When information systems scholars refer to a system, they mean something more specific. This conception of a system traces its origins to a theoretical model called General Systems Theory (GST). GST defines a system as a complex set of interacting parts that act as if they were a single unified thing. Living organisms are good examples of this view of a system, and so are information systems. Systems, for GST, have the following characteristics.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_076.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">A system exists in an environment. This is everything relevant to the system that is outside it.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_077.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">A system is separated from its environment by some kind of boundary.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_078.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">A system receives inputs from its environment and sends outputs into its environment.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_079.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">A shared boundary between two systems (or subsystems), or between a system and its environment, used to pass information or physical flows from one system to the other, is known as an interface. Each flow is an output of one system and an input to the other.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_080.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">A system transforms its inputs in some way to produce its outputs. Typically, it combines simple ingredients to create a more complex product. Some systems, including information systems, have an explicit purpose, and this is achieved by the way that inputs are transformed into outputs.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_081.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">A system that exists for any prolonged period has a control mechanism. This alters the way that the system operates, in response to conditions in the environment or within the system itself.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_082.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Control of a system relies on feedback (and sometimes feed-forward). Feedback means to sample the outputs of a system and literally feed them back to the control unit so that it can be used to make a decision about system operation. Feed-forward information samples the inputs rather than the outputs.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_083.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">A system has emergent properties. In other words, it is more than just the sum of its parts. As a whole, it has some property or characteristic that is more than the sum of the operations of its parts.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_084.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">A system may be made up of subsystems. Each subsystem can be considered as a system in its own right, and may even have further subsystems of its own.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Figure 1.3 illustrates the most important of these concepts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">1.4.1 <b>Systems thinking</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The activity of relating something to systems concepts is known as <i>systems thinking</i>. We can illustrate this by considering how each of these characteristics applies to McGregor plc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Environment</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">McGregor’s environment is made up of all the people, organizations, physical structures, etc. with which the business interacts. Customers, suppliers, sub-contractors, employment agencies and certain government departments all have some interaction with McGregor, and so would be considered as part of the company’s environment. Employees would be regarded as part of the McGregor system, not part of its environment. The road and rail network used for deliveries and the public telephone network would be considered as part of its environment. The dedicated computer and phone network that connects together shops, offices and</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">warehouses is part of the system, not of its environment. It can help to consider whether a system controls something or not; if it directly controls that thing (or person) then it (or they) are within the system. If the system does not have direct control, then that thing (or person) is outside the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;"><span><img width="399" height="264" alt="image" src="Image_085.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark44">Figure 1.3 </a><span class="s21">Main parts of a system and their relationships.</span><a name="bookmark45">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">B oundary</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In some systems (such as a living organism) the boundary is clear because it is physical. Your skin is the boundary between your body and its environment. McGregor’s boundary is more conceptual than this. The easiest way to define it is just to say that it separates what is inside the system from what is outside. The boundary here is an imaginary line around McGregor’s staff, buildings, equipment, stock, IT systems, transport, and so on. It excludes everything in McGregor’s environment. It is quite easy to draw in a diagram, but you could not actually see it in reality.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Inputs and outputs</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark46" class="a">McGregor receives many physical inputs, but the best example is deliveries of goods from suppliers. It also receives many informational inputs. Customers provide inputs to the website by placing orders, and to the shop by presenting their purchases to the checkout operator. Suppliers send inputs in the form of invoices and delivery notes. Market research companies provide inputs on sales trends and customer preferences. McGregor also produces both physical and informational outputs. A customer’s trolley load of purchases is a physical output, while the till receipt is only physical in a trivial sense (because it is printed on paper), but more importantly it consists of information about the items purchased, their price, the date, etc. (see Fig. </a>1.4—it is instructive to consider all the systems involved in producing and using the information on something as simple as a commonplace till receipt).</p><p style="padding-left: 128pt;text-indent: 0pt;text-align: left;"><span><img width="261" height="459" alt="image" src="Image_086.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark46">Figure 1.4 </a><span class="s21">A typical till receipt.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Interfaces</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark47">McGregor uses a variety of interfaces to communicate with other entities in its environment. It communicates with customers via TV  advertising, in-store display panels, signs on the side of delivery vans and via the website. The customer service desk in each store is an interface with customers; so is every checkout operator. V arious employees of the company use the phone, email, fax, letters and forms such as invoices to communicate with suppliers, the bank, government departments, and so on. Each point of communication with each external person or organization is an example of an interface. The web page used by a customer to order a new refrigerator is her interface with the McGregor system. The data content and structure of the web page define and limit her interaction with the online shopping system. If there is no field on the web page where she can enter her address, it may not be possible for her new refrigerator to be delivered to her house. We shall see later in the book that the identification and understanding of interfaces is important in the development of information systems.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Transformation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark48">McGregor does not physically manufacture any products. A retailer’s main process is to sell things that are made by other businesses. It transforms its physical inputs (the products that it buys to sell in its stores) mainly by moving them, packaging them and presenting them to customers. This would be a fair description of McGregor’s main process as a system. However, choosing what to sell and how to price, present and advertise it, and controlling the movement and display of products is also a very complex process. For this to run smoothly, many decisions must be made that rely on collecting, analysing and assessing a great deal of information. This is mainly the responsibility of McGregor’s managers, or, in systems terms, its control unit.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C ontrol</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark49" class="a">A Board of Directors under the overall leadership of the Managing Director has overall control of McGregor plc. Together, they make all the important decisions about the business as a whole, such as investment in new stores or product ranges and whether or not to try to take over a rival business. Each also has overall responsibility for running a division of the business, such as retail, marketing, IT, purchasing, finance, and so on. Below the directors are layers of other managers, each responsible for a department, activity or team within the company. The layers of management in an organization are often modelled as a pyramid, as shown in </a>Fig. 1.5. According to this view a few strategic managers at the top make a relatively small number of major, long-term decisions for the business as a whole. An example of a strategic decision might be whether to build a new factory to produce a completely new product range. A larger number of tactical managers in the middle layer make medium-term decisions, usually for a smaller unit of the organization. For example, a department manager might decide to re-allocate some of his staffing budget to buy new equipment that he thinks will make the production process more efficient. At the ‘lowest’ level of the organization, an even larger number of operational managers or supervisors make short-term, routine decisions about day-to-day activities. Operational decisions include things like ordering more stock or asking an employee to work overtime. We could consider all managers together as McGregor’s control unit, but it makes more sense to see different managers as controlling different subsystems. Together, when everything is working as intended, the various subsystems co-operate to achieve the overall aims of the company.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;"><span><img width="530" height="170" alt="image" src="Image_087.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark49">Figure 1.5 </a><span class="s21">The pyramid model of management and decision-making in an organization.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">F eedback and feed-forward</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark50">McGregor’s managers rely on a constant flow of information about the business and its environment to guide their decisions. Information from the environment is simply an input; for example, updates about the company’s share price provide an input because they come from the stock exchange or from a news service, both of which are beyond McGregor’s system boundary. Information from within the system is described as either feedback or feed-forward, depending on where it originates. Senior managers typically want to know how the business is performing as a whole, for example, by regular updates on sales and costs, productivity of the different departments or progress of major projects such as redeveloping the website or opening a new store. Most of this information is feedback, which reports on system outputs. Some may be feed-forward, which reports on system inputs. Sales information is feedback because it relates to an output. Information on deliveries from suppliers is feed-forward because it relates to an input.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S ubsystems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The McGregor system is made up of many subsystems. Each separate department can itself be considered as a system and subjected to the same kind of analysis that we have applied here to the whole company. For example, consider the online retail division described earlier in this chapter. If we regard this as a system in its own right, then the rest of the company—its other subsystems—represent part of its environment. We can expect communication (and therefore interfaces) between the online retail division and the purchasing division, the finance division, senior management and many other parts of the company.</p><p class="s26" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Emergent properties</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">McGregor has one obvious emergent property: as a commercial business it is capable of making a profit (at least, when times are good). This will only happen if all the parts of McGregor interact successfully with each other to achieve the goals of the business as a whole. Of course, this is a deliberate aim of the people who created McGregor, but it is emergent in the sense that only the organization as a whole can achieve the goal. While some departments may contribute more to the company profit than others do, that does not necessarily mean that departments that contribute less are actually contributing nothing. The various parts of an organization are designed to work together to fulfil the aims of the organization, but this is such a complex task that it is very difficult to get it right all the time. So managers may try to change a struggling department in some way to make it more successful. This is an example of control in systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">1.4.2 <b>The usefulness of systems thinking</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1135" class="a">Systems thinking helps us to understand how the world works. It does this by representing selected aspects of the world in an abstract way, as a system. For this to be helpful, it is not always necessary for the system to correspond exactly to the thing it represents. </a><a href="part38.htm#bookmark1135">Checkland and Scholes (1990) explain:</a></p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">… it is perfectly legitimate for an investigator to say ‘I will treat education provision <i>as if it were </i>a system’, but that is very different from saying that it <i>is </i>a system … Choosing to think about the world as if it were a system can be helpful. But this is a very different stance from arguing that the world <i>is </i>a system, a position that pretends to knowledge that no human being can have.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Figure 1.6 illustrates this point.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This does not mean that systems are never real. Many systems are made of real components. For example, all the parts of a central heating system are physical. But we choose, based on our interest at a given moment, whether to <i>think </i>about it as a system. Any system that we think about exists only in our thoughts and not in the world, however closely it may correspond to the real system that it represents. Such a system located in our mind is a subjective view of reality, not the reality itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 94pt;text-indent: 0pt;text-align: left;"><span><img width="352" height="303" alt="image" src="Image_088.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark51">Figure 1.6 </a><a href="part38.htm#bookmark1135" class="s33">The relationship between system and reality (loosely adapted from </a><span class="s21">Checkland and Scholes, 1990).</span><a name="bookmark52">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">B oundary, environment and hierarchy in systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The first step in analysing a system is to choose which system you wish to understand, and this largely means choosing its boundary. We can make different choices, depending on our</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">interest. For example, a cell biologist may be interested in a single human cell as a system because she is trying to understand how a healthy skin cell becomes cancerous. Her system is bounded by a cell membrane. A specialist physician attempting to treat a skin cancer may consider a patient’s whole skin as a system (although in everyday life we may think of our skin as a boundary, doctors see the skin as our body’s largest organ, and quite a complex one, too). The boundary of this doctor’s system might coincide with the skin itself, or it may be wider still, depending on how far the disease has spread. For a doctor in general practice, a person’s whole body may be considered as a system bounded by its skin (but where the skin is also a component).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Each medical specialism has its own view of what is interesting or important, and these often overlap with other views. A neurologist may focus on the nervous system, consisting of brain, spinal cord and the network of nerves that spreads through the body to just beneath the surface of the skin. Its physical boundary is almost identical to that of the whole body, but the nervous system contains only specialized nerve cells. A haematologist focusing on the circulatory system, which consists of blood cells, blood vessels and the heart, has a similar physical boundary. Both these systems penetrate the other organs in the body, each of which may in turn be regarded as a system by another specialist.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="493" height="230" alt="image" src="Image_089.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark53">Figure 1.7 </a><span class="s21">Systems at different scales.</span><a name="bookmark54">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark53" class="a">A person can also be considered as a variety of non-physical systems. A psychologist may study an individual’s cognitive system or emotional system, or may consider a child’s intellect as a learning system. A social psychologist may think of a family as many overlapping systems: a child-rearing system, an economic system, a house-maintenance system, etc. These views of the family as a system have purely conceptual boundaries, since family members remain part of their system no matter how distant they are in space. We could continue zooming out in this way, perhaps until we reach a cosmologist (whose system of interest is bounded by the physical universe) or a theologian (whose interests arguably are even wider). Some of these different possible systems with their boundaries are illustrated in </a>Fig. 1.7.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The existence of subsystems is a natural consequence of several aspects of systems discussed above. First, a system is a complex whole made of interacting parts. Second, our <i>idea </i>of a system is a matter of choice, so we can choose the scale at which we wish to apply systems ideas. The writer Arthur Koestler coined the term <i>holon </i><a href="part9.htm#bookmark55" class="a">to describe something which is simultaneously both a complex whole, made of subordinate parts, and also a part of something still more complex. This clearly applies to any business organization, but Koestler thought that it is impossible to think of anything that is not also part of something else. It all depends on your focus. Subsystems are at once part of a larger system, and also coherent systems in their own right. Communication between subsystems is, by definition, through interfaces. Figure </a><a href="part8.htm#bookmark14" class="a">1.8 shows some of the subsystems that can be found in the description of the Agate case study in Case Study Chapter </a>A1. This kind of diagram is sometimes called a system map.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part8.htm#bookmark16" class="a">Another way of arranging systems and subsystems is as a hierarchy (this is how the Agate subsystems were shown earlier in Fig. </a><a href="part9.htm#bookmark138" class="a">A1.1). Hierarchies are a very important aspect of systems theory, and in Chapter </a>4 we shall also see the importance of hierarchy to understanding object-orientation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Inputs, outputs, feedback and control</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark57" class="a">Most systems have interactions with their environment. They consume inputs and transform them to produce outputs. Human cells take in nutrients and oxygen and transform them into protein, energy, carbon dioxide and other waste. </a>Figure 1.9 shows some inputs and outputs for three different systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;"><span><img width="286" height="255" alt="image" src="Image_090.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark55">Figure 1.8 </a><span class="s21">Subsystems of Agate.</span><a name="bookmark56">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="193" alt="image" src="Image_091.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark57">Figure 1.9 </a><span class="s21">System inputs and outputs (note that a single input does not necessarily correspond to a single output).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The transformation of inputs into outputs is an important characteristic of a system. It gives meaning to a purposeful system such as a business.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In any purposive system, it is possible to identify a specialist subsystem that controls the operation of the system as a whole. In fact, GST originates partly from the science of cybernetics, which studies control in natural and artificial systems. A common type of cybernetic control is the thermostatic device that controls a central heating, hot water or air conditioning system. These work on a simple feedback loop. Another familiar control unit, but a much more complex one, is the human brain.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Feedback control in very simple systems typically just compares two input values. For example, current temperature in a freezer is compared with the temperature set on the control dial. A logic mechanism of some kind (mechanical, electronic, digital or organic, depending on</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark58" class="a">the type of system) is needed to do this. Depending on the similarity or difference of the input values, the control unit is responsible for deciding what action, if any, should be taken. This is illustrated in </a>Fig. 1.10.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span><img width="432" height="318" alt="image" src="Image_092.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark58">Figure 1.10 </a><span class="s21">Thermostatic control in a freezer—a simple negative feedback loop.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Possible actions here are turning the cooling motor on and turning it off. Both are initiated by a signal from the motor by the control unit, thus closing the feedback loop. This is <i>negative </i>feedback, which aims to maintain equilibrium by opposing any deviations from some norm. It is used widely in physical systems, such as electronic devices and manufacturing systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">By contrast, <i>positive </i>feedback reinforces deviations instead of opposing them. It therefore tends to increase movements away from equilibrium. Systems governed by positive feedback are inherently unstable, but that is not necessarily a bad thing. It is undesirable only when the deviation that is reinforced is itself undesirable. For example, the ear-splitting howl sometimes heard from public address systems is caused by a positive feedback loop. Sound output from a loudspeaker is caught by a microphone and re-input to the amplifier. The signal cycles repeatedly round the loop, growing quickly louder until the amplifier reaches its limit. However, positive feedback is beneficial when a steady state is undesirable. For example, in a competitive sport like football constant equilibrium would always result in a goal-less draw. It is the nature of competition that a team should exploit any legitimate edge that they can gain over their opponents. But since both teams continually strive to get the upper hand, it is rare to see the feedback cycle build to an extreme. Instead, the system (or game) usually continues in a state of dynamic disequilibrium. Negative feedback also plays a role in competition, as teams try to maintain any equilibrium that acts in their favour.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A complex mix of positive and negative feedback is seen in businesses such as McGregor. Competitive firms try to capitalize on any advantage they can gain over their rivals (positive feedback, aimed at disrupting an unhelpful equilibrium), while also trying to prevent their rivals from gaining an edge (negative feedback, aimed at maintaining a beneficial equilibrium). An example of negative feedback in business occurs when a firm adjusts its manufacturing output to maintain a constant inventory. When sales rise, so stock falls, and the rate of production needs to be increased. When sales fall, stock rises, and the rate of production needs to be reduced. Here the stock level is acting as a <i>buffer </i>between production and sales subsystems. (A buffer is a kind of interface that works to even out the flow of information or products by absorbing any irregularities.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Positive feedback does not necessarily mean that every deviation from the norm is reinforced. Some may be allowed to die away through lack of encouragement. In audio amplifiers all frequencies are amplified, but only resonant frequencies are disastrously</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">reinforced by the feedback cycle, while others fade naturally without ill effects. Often a sound engineer need only adjust the amplifier’s tone control, reducing slightly the volume in the troublesome frequency band, to cure a feedback problem. A similar type of control can be discerned in businesses that directly link productive output to sales, perhaps because there is a very short-term seasonal market (say, toys at Christmas). In this case, when sales rise, production is increased as far as possible. But when sales fall below a critical level, a product may be dropped altogether.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The Christmas toy business may find that the use of feedback from sales (a measure of output) does not allow them to react quickly enough to changing market conditions. This would leave them with unsold stock, bought from manufacturers before they realized that demand had slumped. Ideally, they should adjust their manufacturing to suit the level of demand, and they may be able to use market research to forecast which toys will be popular among children this year. This would allow the firm to avoid buying products for which there is no market. Another way to use feed-forward would be to find out which toys are being manufactured in large numbers, and then advertise these aggressively in order to stimulate demand.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Effective feedback is an essential part of all learning. No one can develop a new skill without receiving appropriate feedback that highlights which aspects of their performance are satisfactory and which parts need improvement. On the other hand, feed-forward information about the changing job market may help you decide what to learn. This applies equally to the activity of software development. Most professionals continue to learn how to do the job throughout their careers. This is partly because techniques and technologies evolve continuously. But also, every project is unique, poses a new set of challenges and demands new approaches from the developers. Feedback on what worked in the past, and what did not, helps to guide the developer’s choices in future. Feed-forward information about emerging technologies and techniques may help a software developer to be proactive in anticipating the future needs of her clients.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">While feed-forward control information can help a system to be more responsive to environmental fluctuations, it is not always easy to implement or manage in a business organization. Difficulties still arise if the rate at which conditions change in the environment is faster than the rate at which the business can adapt. The effects of this are apparent to anyone who visits the kind of specialist book shop where remaindered titles are sold cheaply.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part8.htm#bookmark14" class="a">In the Agate case study used later in this book (see Case Study Chapter </a>A1), the agency must employ and train sufficient staff to cope with the anticipated workload. If there is a serious slump in orders for new work, it may not be possible to reduce the number of staff quickly enough to avoid bankruptcy, because of the need to give staff a period of notice before they can be laid off. The company may also not be able to respond quickly enough to a sudden surge of orders, because of the lead time for recruiting and training new staff. Forecasting the level of demand for a service such as Agate’s is an important role of information systems in business.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark59">Emergent properties and the holistic view</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An emergent property is a characteristic of a system that distinguishes it from being simply the sum of its parts. For example, a car is only a form of transport if there is enough of it to drive. It then has the property of being a vehicle, but the wheels, windscreen, motor, etc. do not have this property until they are correctly assembled. Of course, a car is meant to be a form of transport. There is nothing very mysterious about how it does this. Still, only a whole car is useful for the purpose. Many music and sports fans will be familiar with a stronger form of emergent property; a soccer team or a music group may have an outstanding star player, but winning a match or playing brilliant music often depends on a special magic that only happens when everyone in the team or group plays well together. If a key member of staff at McGregor were to leave, this could conceivably cause the business to fail, but that does not mean this person was doing all the work on their own. It is more likely that they just supplied some vital ingredient for the whole business to work together effectively.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: left;">For this reason, the systems approach is often described as <i>holistic</i>. In other words, we</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">think about each system as a whole, not just as an assembly of components. Important aspects will be overlooked if we think only about its parts in isolation from each other.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;">The opposite approach is called <i>reductionism</i>. This begins with the assumption that complex phenomena can be fully explained by reducing them to their component parts.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Reductionism is the basis of the technique of analysis, and has an important place in the methods of physical sciences such as physics and chemistry (although there are some dissenters even in those disciplines). It is also important in information systems development, but it cannot supply all of the answers when the object of analysis is a complicated human situation, such as a business organization.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">1.4.3 <b>Systems that are involved in information systems development</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Any information system is meant to serve a useful purpose for an organization, or for a group of people such as the supporters of a cricket team or the citizens of a city. This business, or group of people, can also usefully be regarded as a system: a <i>human activity system </i><a href="part38.htm#bookmark1132" class="a">(Checkland, </a><a href="part9.htm#bookmark60" class="a">1981). It is this that gives meaning to the construction or operation of an information system. Unless the purpose and operation of the human activity system is understood it is not possible to specify, still less to build, an information system that supports it. This means that the human activity system is important to developers, no less so than the information system that they are developing. One of the vital workflows in a development project is to capture and understand the requirements. Unless this is done thoroughly and correctly, the information system will not perform as intended. A further difficulty is that participants in a human activity system often disagree widely about its purpose. This can be a significant problem for the analysis of information system requirements, and makes it even more important to understand the wider system in detail. Figure </a>1.11 shows how some of the people who work at Agate see the purpose of the business.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="192" alt="image" src="Image_093.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark60">Figure 1.11 </a><span class="s21">A human activity system with multiple purposes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark61">Developers are likely to belong to a project team, or an IT department or both, and these can also usefully be viewed as systems. This system transforms various inputs (money, skill, staff time, information from users about how they want the software to work, etc.) and aims to produce an effective software solution to a business problem. Its environment is typically the organization in which the developers work, including users of the software and their managers. We could regard it as being made up of subsystems that include different groups within the project team and the methodology they follow. The various analysis and design models that describe the software can be seen as information used in the operation of the system. A team leader or project manager exercises control, using regular feedback on progress and problems. Suitable feed-forward will help to alert the manager to anticipated problems, as well as those that have already happened.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Thus systems developers have to pay attention to a wide variety of systems. If their task is to develop an information system that supports online voting, they may need to take a professional interest in the system of parliamentary democracy. If it is to develop a system for a website that sells mp3 music downloads, they should take an interest in the system that comprises the music industry and its interactions with music fans. One advantage of taking a systems view of any activity is that it encourages those involved to think about the sorts of feedback and control that are needed for everything to run smoothly. This applies just as much to software development as to anything else.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="343" height="25" alt="image" src="Image_094.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.5  </a><a href="part4.htm#bookmark4" class="s29">Information and Information Systems</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.5  </a><a href="part4.htm#bookmark4" class="s29">Information and Information Systems</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.5  </a><a href="part4.htm#bookmark4" class="s29">Information and Information Systems</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark62">In order to design and build an information system, we must find out what information will be useful to the human actors who will use the system, and how they will use it. In the following sections, we will explain the relationship between information, information systems and the human activity systems they are intended to assist.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">1.5.1 <b>Information</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1134" class="a">Information is conveyed by messages and has a meaning that depends on the perspective of the person who receives it. We are always surrounded by a vast mass of potential information. Only some of it ever comes to our attention, and only some of that is actually meaningful in our present context. Finally, only some of what is meaningful is also useful. Many authors distinguish data from information by describing data as ‘raw facts’ while information is data that has been selected and given meaning. </a>Checkland and Holwell (1998) show that the process of creating information from raw facts is actually a bit more complex than this. They describe a sequence of four stages by which raw facts become useful.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark63">Consider four people watching the evening sky. A plume of smoke is rising in the middle distance. For Alex, the smoke is just part of the view, and she does not even consciously notice it. Ben sees it, and it evokes a memory of a camping trip long ago. But he is aware that the only connection between past and present smoke is a coincidence of shape and colour, so he moves on to look at something else. Chetan is thrown into consternation, because he sees that the smoke is rising from his house, which is on fire. Dipti runs to phone the fire service before doing whatever else she can to help Chetan save his house.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The sight of the smoke is, on the face of it, a single message available to be received by all, yet its meaning is different in each case. Alex does not even notice it. Checkland and Holwell call this <i>data </i>(from the Latin for ‘given’), meaning a fact that has not been selected for any special attention. Ben notices the smoke but does not relate it to any present context. Checkland and Holwell call this <i>capta </i>(from the Latin for ‘taken’), meaning a fact that has been selected but has no particular importance or meaning. Chetan gives the smoke a meaning derived from the context in which he sees it (recognizing his house, understanding the implications of the smoke, etc.). This is <i>information </i>because it has a meaning within Chetan’s current context. The meaning of a fact is always dependent on its relevance to the observer.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There is a final step where information becomes <i>knowledge</i>, by being structured into more complex meanings related by a context. Dipti integrates information from several sources: the link between smoke and fire, the effect of fire on houses, the existence and purpose of a fire service and the location of nearby phones. She also links it to the context, and uses it to make a decision about appropriate actions. In a word, she <i>knows </i>what to do.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Most information systems are useful only when they select appropriate capta from the mass of background data and use it to create information that is useful to specific people in a specific context. Some information systems go further than this and aim to create knowledge.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">1.5.2 <b>What information systems do in organizations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark49" class="a">Information systems today are often much more complex and more closely integrated with each other than they once were. As a result, the boundaries between categories of information system have become blurred. However, it is still helpful to give a brief overview of some of the general types of application in organizations. But note that this more often describes roles that an information system can play, rather than actual distinct types of system. Some authors identify clear relationships between different types of information system and the levels of management shown in </a>Fig. 1.5. In practice, things are seldom clear-cut, and it is not unusual to find strategic managers who use operational or office systems while operational level workers may make use of management support systems. People naturally tend to use whatever systems are available to them if they find them to be useful.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Operational systems</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark64">Operational systems automate the routine, day-to-day record-keeping tasks in an organization. The earliest commercial information systems were operational ones, because routine, repetitive tasks involve little judgement in their execution, and are thus the easiest to automate. Accounting systems are a good example. All organizations need to keep track of money—the amount coming in, the amount going out, the cash available to be spent and the credit that is currently available. Few modern organizations could survive long without a computerized accounting system. Sensible organizations protect their ability to operate by having a ‘disaster recovery plan’ that details how they intend to cope with an emergency that destroys data or renders computer systems inoperable.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The flow of information through an accounting system is based on thousands, or even millions, of similar <i>transactions</i><a href="part38.htm#bookmark1137" class="a">, each of which represents an exchange of a quantity of something, usually a money value (this is why they are often called transaction processing systems). For example, when you buy a carton of milk in a supermarket, two separate records are made. One records that a carton of milk was sold, and the other records the money you paid in exchange for it. As this repeats day after day for each item, customer, checkout and branch, an overall picture is built up that allows the company’s accountants to compare total income with total costs and to determine whether a profit has been made. Of course, many real accounting systems are more complicated than this, often with subsystems to handle wages, taxation, transport, budget planning and major investments. It should also be kept in mind that, important though numbers may be for the decision-making processes in an organization, the ways that staff interpret those numbers can be equally important, if not even more so (Claret, </a><a href="part9.htm#bookmark75" class="a">1990). For instance, as we shall see in Chapter </a>2, the introduction of a new system that is intended to save money by improving the efficiency of an operation may also, if it is inappropriately designed, cause some disgruntled employees to quit their jobs. The costs arising from this (lost experience and knowledge, recruitment costs, the need to train replacement staff, and so on) are often very hard to attribute with any confidence to a single cause. For this reason, they are almost impossible to measure and are usually called <i>intangible</i>. The official accounts of a business seldom give a clear picture of intangible factors like these.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Other operational systems record orders received from customers, the number of items in stock, orders placed with suppliers, the number of hours worked by employees, time and cost of mobile telephone calls made by subscribers, and so on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M anagement support systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Management support systems (MSS) are information systems designed to support the work of managers. As the name suggests, these usually work at a higher level of the organization than operational systems. The information they present to their users is often more complex. This is principally because it involves information that has been combined from different sources. In addition, a manager is likely to be interested in more highly summarized information, such as the total quantity of milk sold last month, rather than an individual transaction, such as a sale to one customer. However, much of the information used by management to make decisions is derived directly from information stored at the operational level. In practice many management support systems are built on top of operational systems. In other words, the management support system works by retrieving and processing information that has already been stored by the operational system. In fact, the very first MSS (including some of those that ran on LEO 1, the first business computer) consisted simply of programs that extracted data from the files of an existing operational system. This was then analysed or combined to give managers information about their part of the organization. At the time, most business IT effort was spent on operational systems. These new systems were known as management information systems (MIS), and in many organizations this triggered a name change for the section that worked on information systems: from DP (for ‘data processing’) to MIS department.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><a name="bookmark65">We can easily see how the relationship between operational and management support</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">systems would work for an accounting system. Once all routine sales transactions are stored on a computer it is a short step to a program that can analyse them, so that managers could tell at a glance which products were not selling well, which checkout operators took too long dealing with a customer, which store had the lowest volume of trade, and so on. This information is useful to a manager because she has responsibility for maximizing the performance of an organizational subsystem. An important part of this is identifying and</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark44" class="a">resolving problems as they occur. Thus, one crucial aspect of a management support system is the feedback or feed-forward that it provides, alerting managers to problems and opportunities, and assisting them in the process of tuning the organization’s performance. Operational and management support systems, then, fit into different parts of the diagram in Fig. </a>1.3. Operational systems are either located in the central box (labelled ‘what the system does’), or they assist its work by supporting the flow of inputs or outputs. Management support systems are either located in the box in the lower part of the diagram (labelled ‘how the system is controlled’), or they assist its work by supporting the flow of feedback to, or control information from, the control unit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Office systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Office systems automate or assist in the work of office workers, such as clerks, secretaries, typists and receptionists. They also support some aspects of the work of managers, for example, communication (word-processing, email, etc.), planning (personal information management, such as the diary facilities included in IBM Lotus Notes or Microsoft Outlook) and decision support (for example, using the built-in functions of any spreadsheet). This might suggest that they are a kind of MSS, and they can be seen as such, but they are used today by almost every kind of employee, not just by managers. This underlines the way in which the boundaries between different types of system have become blurred. It also highlights the way that the introduction of information systems has changed the way that people work—middle- ranking and senior staff often type their own letters and reports now using a word processor, when they might once have expected a secretary or typist to do this for them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Real-time control systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Real-time systems are concerned with the direct control of a system’s operations, and have to respond quickly to external events. Typical examples are physical in nature, and include lift control systems, aircraft guidance systems and the robot forklifts at McGregor plc. They are best considered as a control subsystem of a physical processing system. Their role is thus very different from both business operational and management support systems. There are also control systems that do not need to react in real-time, for example the systems that control traffic lights. Real-time systems usually have human operators (to date, few are completely independent of human supervision, though this may become more common in the future), but they are generally insulated from the surrounding human activity system. In fact, many authors would not agree that real-time systems are information systems at all. We do not regard this as an important issue. The techniques used for the analysis, design and implementation of real-time systems are broadly similar to those used for other computer systems. However, when there is a safety-critical element to the system (for example, aircraft guidance), a more mathematical approach will be used for the analysis and design to ensure that the system is accurately specified to perform correctly under all operating conditions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark66">1.5.3 </a><b>Information technology</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Information technology (IT) is the machinery that makes an information system work. Today, this usually involves digital computers, but that is not necessarily the case. In many businesses, the department that looks after information systems is called the IT department, which is sometimes misleading. As we saw earlier in this chapter, information systems have been used throughout history, using whatever technology was available at the time. The decision of which IT to use for an information system should ideally be left until last in the cycle of development. Only when the human activity system has been understood, the need for an information system has been identified, the system’s requirements have been defined, and a workable system has been designed—only then should the emphasis turn to the information technology that will implement it. This is not how things always happen in the real world. Indeed, it is partly for this reason that so many systems in the past have been unsuccessful. But it is how they <i>should </i>happen, wherever possible.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Information technology covers all the kinds of hardware familiarly known as, based upon, or</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">that include within them, a computer or its peripheral devices. This includes obvious things like desktop PCs, pocket electronic organizers, modems, network cabling, file servers, printers and computer-controlled machinery in factories and airliners, and also less obvious things like</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">digital mobile phones, the electronic circuits that calculate fuel consumption in some cars, the microchips in some cameras that set the aperture and shutter speed—in other words, everything inaccurately described in marketing literature as ‘intelligent’.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The list of devices that can be described as IT increases almost daily, and the boundaries between them blur. As digital devices continue to advance in speed and processing power, manufacturers exploit these advances to develop and market new products. For example, many mobile phones combine a digital still and video camera, modem, email software, web browser, diary software, alarm clock, calculator and online gaming. Some have global positioning system (GPS) chips and even motion sensors. Interface technologies such as voice-activation may soon make it easy to interact with a computer with no need to press keys or click mouse buttons, while in many situations wireless networking makes cables unnecessary. Mobile commerce using handheld PDA devices or mobile phones is beginning to change the way that many people access information and communicate. For many, it has already removed the physical restriction that requires users to be in the same place as a bulky PC when they want to access the Internet. On the whole, it appears likely that computers will progressively disappear from view, while their effects will paradoxically be felt in more and more areas of everyday life.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark67">All these examples of information technology are really just tools that, like any tool, can be used for many different tasks—and not only those for which they were intended. There is a saying that, if your only tool is a hammer, the whole world looks like a nail. The corollary is also true: if you can see only nails, you will use any tool that comes to hand as a hammer, whether it is actually a wrench, a book or a can of beans. It is how a tool will be </a><i>used </i>that matters, not so much how it is <i>meant </i>to be used. A modern word-processing package provides a skilled user with the facilities to automate many complex tasks by using macro programs, mailing lists and embedded objects like spreadsheets, sound clips and hyperlinks to the Web. Yet many users have no need of all this and would be happy with an electronic typewriter. The question is, then, if an electronic typewriter is all that is required, why install a powerful PC running all the latest software? There is no point in installing IT unless it is needed by the information systems that will run on it. Nor is there any point in installing an information system that does not meet a defined need for its users.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="227" height="25" alt="image" src="Image_095.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.6  </a><a href="part4.htm#bookmark4" class="s29">Strategies for Success</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.6  </a><a href="part4.htm#bookmark4" class="s29">Strategies for Success</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.6  </a><a href="part4.htm#bookmark4" class="s29">Strategies for Success</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark68">In this section, we consider some ways that business needs can be identified, suggesting possible application areas for information systems and information technology.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">1.6.1 <b>Identifying a business strategy</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It is important for a business to be clear about its goals. Unless these are known and agreed, it is not possible to decide which information systems the organization will need, or what exactly they should do. Once the goals are clear, it is usual to define the strategies that the business will use to achieve them. The development of a business strategy essentially begins with the question: ‘Where would we like our organization to be in (say) ten years’ time?’ Logically, the next question is: ‘How do we get from where we are now to where we want to be?’ Answers to this question will consist of practical steps that can be taken towards achieving the strategic goals.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part8.htm#bookmark14" class="a">The contents of a strategy (i.e. the actual goals and steps it contains) depend on the characteristics of the organization, its environment, the skills of its workforce and many other factors. In the Agate case study (see Case Study </a>Chapter A1), we see that the strategy is ‘to continue to grow slowly and to develop an international market’. These are the goals. The directors also have a view about how to achieve them: they want to get more business from multinationals, and they hope to do this through the quality of their work and by developing ‘campaigns that have a global theme but are localized for different markets around the world’. These are some of the steps in the business strategy. These elements have been included in the strategy because the directors are confident, for example, that the technical quality of Agate’s work and the creativity of their staff are both strengths of the company, and will meet</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the demands placed on them. They probably also believe that their current client base and contact list is extensive enough for them to win the kind of work they are seeking.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">1.6.2 <b>The contribution of information systems</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1251" class="a">Information systems can contribute to the achievement of business goals in so many different ways that it can be difficult to decide which systems really matter. Many techniques can be used   to   help   arrive   at   useful   answers.   One   is   the   well-known strengths/weaknesses/opportunities/threats (SWOT) analysis. Usually created during a group brainstorming session, a SWOT analysis identifies and categorizes everything important about the organization’s current circumstances. The resulting strategy is based on finding ways of exploiting the strengths and opportunities, while counteracting the weaknesses and threats. Another useful technique is V alue Chain Analysis (V CA) (Porter, </a><a href="part9.htm#bookmark69" class="a">1985). This presents a systemic view of an organization that is very useful for structuring a discussion about strategy and information systems. The metaphor of a chain in V CA is meant to reinforce the idea that any weak link in the series of activities undermines the value of the work done at other stages. For example, if a business is good at selling its products, but the products themselves are of poor quality, it is unlikely to be successful. Alternatively, a business that makes excellent products but has poor arrangements for obtaining its raw materials is also unlikely to be successful. In a successful organization, each primary activity (for simplicity the Agate example in Fig. </a>1.12 shows only primary activities) adds value to the products (i.e. it benefits the company more than it costs). Secondary activities (not shown in the Agate example) provide services, but do not directly add value to products. They are only worth doing at all if they make a contribution to the efficiency or effectiveness of primary activities. Their role must therefore be tuned to support the primary activities.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="70" alt="image" src="Image_096.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark69">Figure 1.12 </a><span class="s21">V alue Chain Analysis adapted to the Agate case study.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">V CA is useful in information systems planning because it focuses attention on activities that are critical to a business, either because they are currently a problem, or because they represent a major source of profit or competitive edge. Development projects can then be targeted at assisting those operations that can make a difference to the success of the organization as a whole.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark69" class="a">Porter’s original model was based on analysis of typical manufacturing companies, and it does not apply well to a service sector business such as Agate. Many analysts have adapted the model to fit better with the activities of a particular organization. </a>Figure 1.12 shows a value chain for Agate that takes account of its service nature. This analysis shows all the activities that contribute to the client’s perception of the overall quality of service.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">1.6.3 <b>Information systems and information technology strategies</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark70" class="a">Many organizations explicitly separate their strategic plans into the three layers illustrated in </a>Fig. 1.13. The idea is that development of a new information system should only be considered in the context of a well-thought-out business strategy, while the purchase of IT hardware should be specified on the basis of particular information systems that are planned for development. The business strategy drives the information system strategy, which in turn drives the IT strategy.</p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="476" height="223" alt="image" src="Image_097.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark70">Figure 1.13 </a><span class="s21">The relationship between business, IS and IT strategies.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Information flows in the diagram go in both directions. When formulating a business strategy, managers need to know which business goals could be assisted by information systems. In the same way, those responsible for developing new information systems need to know the IT capabilities of the business. The planning cycle is iterative.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark70" class="a">The relationships in Fig. </a>1.13 are important. For example, one objective of McGregor plc’s current business strategy is to capture a share of the lucrative online market. Perhaps this is a business imperative because other online retailers have taken a growing share of the market and threaten McGregor’s survival. In order to fulfil this business objective, McGregor’s managers had to identify, define and then develop an appropriate set of software systems. This includes the online customer order system, the robot warehouse system, the stock control system, the purchase order system, and so on.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is the main purpose of the IS strategy correctly to identify which of many possible systems should be chosen for development, and also how these need to interface with other systems. Those chosen for development will then become projects. Selection of the wrong systems for development wastes time and resources, and can also distract attention from business priorities. In this context, ‘wrong’ may mean systems that are unimportant, but it can also mean systems that are not compatible with other vital systems. In this case, it could cause major business problems for McGregor if the online customer order system cannot correctly transfer details of the items ordered to the warehouse system, resulting in the wrong goods being delivered to the customer. This kind of difficulty could occur simply because a project team is not sufficiently aware that the software they are developing needs to interface with another system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Another critical issue might be poor design of the online catalogue, resulting in frustrated customers leaving the McGregor website and buying instead from a competitor. While specific details of the website design would not be included in the IS strategy document, it is not unusual to spell out major business concerns, such as the need for clear navigation and interaction on a customer website.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The IT strategy is responsible for identifying the hardware components and configurations that will allow the software to operate effectively. In McGregor’s case, this would include specifying the web servers to ensure that the response time is always fast enough to satisfy customers. Slow response times could frustrate customers and result in lost sales for the company. Here, too, the detailed specification of the servers (operating system, number of incoming phone lines, processors, RAM, etc.) will not be worked out until later, but the strategy will identify this as a business concern, and will also explicitly relate the various hardware components to the software systems they must run.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For many businesses, success depends on finding the best fit between overall business goals, the information systems that help to fulfil those goals and the IT on which the information systems run. This question of strategy alignment has even greater importance when the business is engaged in e-commerce, whether this is business-to-customer (B2C) or business-to-business (B2B). In either case, for customers, suppliers, partners, collaborators— indeed for any interaction that occurs electronically—the information systems <i>are </i>the company,</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">since the website is really all that can be seen. Moreover, an Internet presence can be seen— and judged—by the whole world. An inappropriate strategy, at any of the three levels, or a poor implementation can bring swift business failure.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark75" class="a">In </a>Chapter 2, we will explore in more detail the problems that can occur during information systems development, and even <i>because of </i><a href="part9.htm#bookmark102" class="a">information systems, while in Chapter </a>3 we introduce some ways that these problems can be resolved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="122" height="25" alt="image" src="Image_098.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">1.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark71">In this chapter we have introduced the key concepts of all information systems. These include: control, feedback, input, output and processing of information, communication via interfaces, the hierarchic organization of systems and their subsystems and the emergent properties of a system. We have also explained the relationship between information, meaning and context. For systems analysts and designers, an important part of the context is the human activity system of an organization within which the information system must work. This leads to a necessary set of relationships between the goals of an organization, the strategy it undertakes to fulfil them, the information that its staff need to do their work, the information systems that provide the information, and finally the IT that runs the information systems.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Information systems have been present throughout history. However, modern IT has increased their scope and changed the way they work almost beyond recognition. There are undoubtedly more changes to come, but however much information systems may change, valuable lessons may still be learned from historical information systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:249pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">1.1  <span class="s16">What is the difference between an information system and information technology?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">1.2  <span class="s16">Identify some things that a computerized information system can do, which are difficult or impossible for a non-computerized equivalent.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">1.3  <span class="s16">Why does it not matter whether a system is real, or exists only in someone’s mind?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">1.4  <span class="s16">Why are boundary and environment important for understanding a system?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">1.5  <span class="s16">What is the difference between feedback and feed-forward?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">1.6  <span class="s16">Why has a human activity system more than one purpose?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">1.7  <span class="s16">What is the purpose of a management support system?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">1.8  <span class="s16">What is meant by disaster recovery? Why is it important for a business organization?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">1.9  <span class="s16">What are the relationships between business goals, information systems strategy and information technology strategy?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">1.10 <span class="s16">Define information. How does it differ from data?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">1.11 <span class="s16">Describe how knowledge differs from information.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">1.12 <span class="s16">Give an example of some knowledge that you possess. What is its purpose?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark72">Case Study Work, Exercises and Projects</a></p></td></tr><tr style="height:92pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">1.A <span class="s16">Think of three or four information systems that are not computerized (either historical or contemporary). Identify (or imagine) a computerized equivalent. For each pair, write a brief description of the boundary and the main inputs and outputs. What are the main differences between the computerized and non-computerized versions?</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">1.B <span class="s16">Reread the description of the McGregor online shopping system, and assume that everything described (computer software, hardware, human activities, etc.) is a</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:204pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s16" style="padding-left: 32pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">single system. Identify its main subsystems and control mechanisms. What feedback and feed-forward information do you think they would use? Don’t be constrained by the description given in this chapter—use your imagination too. And remember that some control may not be computerized.</p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">1.C <a href="part9.htm#bookmark22" class="s36">Read the first part of the FoodCo case study in </a><span class="s16">Chapter B1, up to and including Section B1.2.1. What do you think are FoodCo’s business goals for the next ten years? Make any assumptions that you feel are justified.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">1.D <a href="part9.htm#bookmark22" class="s36">Using your imagination as well as the information in </a><span class="s16">Chapter B1, compile a SWOT analysis for FoodCo. Does your analysis suggest any information systems solutions to business problems?</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">1.E <span class="s16">Carry out a V alue Chain Analysis for FoodCo by working out a sequence of main activities the company must carry out in order to be successful. What flows through your value chain? Identify some of the people, activities, systems, etc. that fit in each compartment.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">1.F <span class="s16">Identify the value that you think is added by each activity to FoodCo’s products. Which do you think are the weak links?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_099.png"/></span></p><p class="s7" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Checkland and Holwell (1998) is a very accessible account of the relationships between the subjects of systems, information and information systems.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1292" class="s6">V idgen et al. </a>(2002) describe approaches to the development of web-based information systems, like some of those described in the McGregor plc example. They also link business strategy with object- oriented analysis and UML (although not the current version).</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1267" class="s6">Schneider </a>(2009) is a useful source on e-business and e-commerce (although both are beyond the scope of this book).</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1297" class="s6">Webster </a>(1995) is a scholarly debunking of many of the more exaggerated claims about how the ‘information revolution’ is changing social relationships.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1290" class="s6">Turban, Aronson and Liang </a>(2005) give an up-to-date and broad-ranging review of modern software technology for the support of managers at all levels.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1219" class="s6">Koestler </a>(1967) is a classic text that applies systems concepts to many aspects of life. This book ranges widely over human history and society, and presents some early speculations on the systemic role of evolution in modern social behaviour.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_100.png"/></span></p><p class="s1" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part9.htm#bookmark138" class="s3" name="bookmark73">1 We return to this question in </a>Chapter 4.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="244" alt="image" src="Image_101.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:346pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark74">LEARNING OBJECTIVES</a><a name="bookmark75">&zwnj;</a></p></td><td style="width:94pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_102.jpg"/></span></p></td></tr><tr style="height:108pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 34pt;padding-right: 110pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_103.jpg"/></span><span class="s17"> </span>who the main players are in an information systems project <span><img width="20" height="13" alt="image" src="Image_104.jpg"/></span><span class="s38"> </span>the challenges in information systems development</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_105.jpg"/></span> <span class="s16">the underlying causes of these problems</span></p><p class="s17" style="padding-top: 1pt;padding-left: 54pt;text-indent: -20pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_106.jpg"/></span> <span class="s16">how the concept of a stakeholder helps identify ethical issues in information systems development</span></p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_107.jpg"/></span> <span class="s16">the costs of problems and ethical issues.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="144" height="25" alt="image" src="Image_108.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark76">Many information systems are very successful, and failure is the exception rather than the rule. But the consequences of failure can sometimes be severe, ranging from unnecessary cost, through serious risk to the survival of an organization, to—in extreme cases—a threat to someone’s personal safety. The types of failure are also various. In some cases, a project team has failed to deliver any working software at all. This usually means that a great deal of money is spent to no good purpose. Some systems are successfully installed but do not meet their users’ requirements. Other systems appear to meet the stated requirements, but prove to be inefficient or difficult to use. These may not produce benefits that outweigh the costs of their development.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1149" class="a" name="bookmark77">We can use the metaphor of a journey to describe the process of information systems development (</a><a href="part9.htm#bookmark78" class="a">Connor, 1985), as illustrated in </a>Figure 2.1. This highlights the fact that there are many choices to make along the way, and we must try not to take the wrong turns. Some routes lead to the planned destination; in other words, the intended system is delivered to its clients. Other routes may reach a satisfactory conclusion by an unexpected route. There are also routes that arrive at the wrong destination, while some are dead ends that lead nowhere. We must recognize and avoid these. Professional systems developers are naturally concerned to avoid the problems and to achieve a good result. They can do this only by understanding what goes wrong.</p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span><img width="361" height="236" alt="image" src="Image_109.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark78">Figure 2.1 </a><span class="s21">A possible map of the systems development ‘journey’.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We will look at the question of project failure first from the perspective of each of the main players. Several different groups of people are associated with the project, and each has their own particular view on the things that can go wrong. The main groups we shall consider are the users, clients and the developers themselves. In the following section we will consider each in turn.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="254" height="25" alt="image" src="Image_110.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.2  </a><a href="part4.htm#bookmark4" class="s29">What Are the Challenges?</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.2  </a><a href="part4.htm#bookmark4" class="s29">What Are the Challenges?</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.2  </a><a href="part4.htm#bookmark4" class="s29">What Are the Challenges?</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1217" class="a" name="bookmark79">According to a survey of managers in 102 of the UK’s top companies, almost half had recently encountered an IT project failure (</a><a href="part38.htm#bookmark1291" class="a">Kelly, 2007). Poor specification was the most frequently cited cause, while poor understanding between business and IT departments was also a major factor. Another survey carried out by the Economist Intelligence Unit found that more than half of the IT projects in a majority of UK companies failed to meet expectations (V </a>eitch, 2007).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1279" class="a">This picture is not unique to the UK. For many years, the CHAOS reports have surveyed IS projects in the USA. The latest CHAOS report found a worsening situation, with only one-third of projects judged as successful, while one in four were either cancelled before completion or, if the software was delivered, it was never used (</a>Standish Group, 2009).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1164" class="a" name="bookmark80">Nor is there anything new about the scale of this problem. The bill for the London Stock Exchange Taurus system project (abandoned shortly before installation in 1993) was estimated at around £480m (Drummond, </a><a href="part38.htm#bookmark1241" class="a">1996). During the 1990s and early 2000s many UK public sector contracts for new information systems were cancelled or failed to deliver their intended benefits, but the true costs are often not known with any certainty. Significant problems occurred with systems for the UK Passport Agency, the National Probation Service, the Immigration and Nationality Directorate, the Child Support Agency and the National Air Traffic Control Service. Poor project management and lack of financial control are blamed for many of the disasters (</a>OGC, 2005).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">All potential causes of failure are at least to some extent under the control of the developers. A professional must take the possibility of failure seriously and work hard to avoid it, even if this sometimes is limited to an awareness of the risks, followed by a damage- reduction exercise. But one difficulty is that the answer to the question ‘What can go wrong?’ depends partly on who gives it. Information systems development is a complex activity that always involves people. In any organization, people have varying perspectives that influence their view of a situation, and what, if anything, is to be done about it. It is useful to distinguish three categories of people with important relationships to a project. First, there is the group of employees who will become end-users of the information system when it is completed. Second, there are managers, here called ‘clients’, who have control (or at least influence) over the initiation, direction or progress of a project. Finally, there are the professionals responsible for the development of the information system, whom we refer to as the ‘developers’ here. For simplicity, we will ignore differences within each group.</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">2.2.1 <b>An end-user’ s perspective</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">End-users come in many varieties, and can have varying relationships to an information system. The examples that follow concentrate on the experiences and frustrations of those who either consume the products of an information system (i.e. they use its outputs to help achieve a task, such as dispatching an ambulance to an emergency) or are responsible for entering raw data into an information system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘What system? I haven’t seen a new system’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">One problem that can be experienced by an end-user is vividly expressed by a term that gained widespread usage in the 1980s. <i>Vapourware </i>describes a software product that is much talked about, but never released to its intended users. In other words, instead of arriving, it evaporates. Many businesses are naturally reluctant to talk about information system project failures in public, but vapourware may be common. In the commercial software field, it is very common indeed; the online magazine Wired gives an annual award for software and hardware products that are promised to the public but not delivered.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1279" class="a">Some surveys have found that an astounding proportion of information systems development projects fail to deliver any product at the end. We mentioned above the CHAOS report finding that 24% of projects are never delivered or never used (Standish Group, </a>2009). In the UK, the total cost of a single system for the Wessex Regional Health Authority reached</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1145" class="a">£63m, yet no system was ever delivered (Collins, </a>1998b). This indirectly affected patients, since the aim of the system was to help manage hospital resources more effectively, and thus to deliver a better, more responsive service. When a project is not completed, none of the expected benefits to users and other beneficiaries are achieved.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘It might work, but it’s dreadful to use!’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark81" class="a">This relates to systems that are unpleasant or difficult to use. Systems may fail to meet the criterion of usability in a number of ways, including: poor interface design, inappropriate or illogical sequence of data entry, incomprehensible error messages, unhelpful ‘help’, poor response times and unreliability in operation. Figure </a>2.2 gives some examples (what these mean, and how to avoid them, is explained more in later chapters).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="344" alt="image" src="Image_111.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark81">Figure 2.2 </a><span class="s21">Aspects of poor system usability with examples.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">When one of the authors bought a pair of shoes, shop staff struggled to register the sale correctly. There was a new cash register system and their difficulty arose because it was a promotional offer. A customer buying this style of shoe was also entitled to a free pair of socks. Since the socks were a normal stock item, correct records of stock had to be maintained. This meant that the socks had to be ‘sold’ through the till, even though they were actually being given away for free. A simple way to handle this would have been for the assistant to over-ride the price with zero at the time of sale. The assistant tried this, but the software specifically prevented the ‘sale’ of a stock item at a zero price. The assistant called the manager. After some experimentation, it appeared that the only way to deal with this transaction was to reduce the price of the shoes by 1p, and to sell the socks at a cost of 1p, thus giving the correct total for the sale. Now that the staff understand how to do this, it will not cause them difficulty in future. But it will always be an unnecessarily awkward way of handling a routine task. There are many examples of this sort of poor design, and they cause a great deal of frustration and lost time for users.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘It’s very pretty—but does it do anything useful?’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark82">A system may appear well designed and easy to use, but still not do the ‘right’ things. This may be a question of the tasks that should be carried out by the system. For example, a library catalogue enquiry system would be of limited use if it could only retrieve shelving information about a book when provided with the title and the author’s name, in full and spelt correctly. Readers often do not know the title of the book for which they are searching. Even if the author’s name is known, it may be spelt incorrectly. Another way that a system may fail to meet its users’ needs is through poor performance (this overlaps with the question of usability, discussed in the previous subsection).</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A system may also be of doubtful value to its users because it requires them to work in a way that seems nonsensical. One example of this is now quite old, but still valuable because the author describes it so clearly. A warehouse management system was designed partly to increase managers’ control over the use of scarce storage space in the warehouse. The workers found that the new system removed their discretion in the best ways to maximize the use of space:</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">… because they could see how improvements in these areas would save money for the company they found ways of working around the system.</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">…They were reproved by management for their bad attitude, and yet, it was their commitment to the company as a major employer in their local community which led to their frustration with what they regarded as unnecessarily wasteful rules and procedures.</p><p class="s7" style="text-indent: 0pt;line-height: 11pt;text-align: right;"><a href="part38.htm#bookmark1283" class="s6">(</a>Symons, 1990)</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is particularly worrying when software errors and failures present a hazard to life. An extreme example was the London Ambulance Service Computer Aided Dispatch (LASCAD) system, abandoned shortly after delivery in 1992. The total development cost was estimated at</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1109" class="a">£43m. Designed to speed the process of sending an ambulance to an emergency, the system actually slowed response times down. The system was cancelled after several claims that it had caused patients to die while they waited for attention. Although these claims were never proven, the risk of continuing to operate the system was unacceptable (</a>Barker, 1998).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Controversy continues to this day about whether software errors may have caused the Mull of Kintyre crash of a Royal Air Force Chinook helicopter in 1994. All 29 people on board were killed, including a number of high-ranking police and military intelligence officers. The official verdict, still accepted by the Government, was that the pilots were grossly negligent. However, an earlier Board of Enquiry had concluded that the crew might have been distracted by a major technical (i.e. software) malfunction. A series of reports in <i>Computer Weekly </i><a href="part38.htm#bookmark1146" class="a">and an item on British TV ’s Channel 4 News claimed that internal Ministry of Defence reports had raised concerns about the reliability under certain conditions of the engine control software in this type of helicopter. A House of Lords select committee report recommended that the Ministry of Defence view should be set aside (Collins, </a><a href="part38.htm#bookmark1147" class="a">2001). As recently as June 2007, there were claims that new evidence might change the official verdict (Collins, </a><a href="part38.htm#bookmark1219" class="a">2007), but to date the Government has refused to reopen the enquiry and continues to blame the pilots (Knapton, </a>2008).</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">2.2.2 <b>A client’ s perspective</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">By <i>client </i>we mean that person, or group of people, responsible for paying for the development of a new information system. A client usually has influence over whether or not approval is given to a project before it starts. Some clients (but not all) also have the power to stop a project once it is under way. A client may also be a user. If so, we can assume that they share the user’s perspective on the kind of things that can be a problem. They may make only indirect use of the system’s outputs, which insulates them from the immediate experience of a badly designed interface, for example. While the concerns of a client may overlap with those of an end-user, they also include distinct matters relating to payment, ownership and value-for- money.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘If I’d known the real price, I’d never have agreed’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1291" class="a">It is almost routine in many organizations for information systems projects to exceed their budget. We mentioned earlier a survey which found that half of all UK projects fail to meet expectations (V eitch, </a>2007). In many cases, this means running over budget or behind schedule (or both). Some projects reach a point where total costs already outweigh all the benefits that can be expected on completion. This point is not always recognized when it is reached, which may result in the expensive completion of a system that would have been better cancelled. Alternatively, a project may be cancelled because its managers do believe that its costs are escalating out of control, or because they can see that the benefits will not be as great as originally promised. The decision is summed up in the familiar saying: ‘Don’t throw good money after bad.’ The London Stock Exchange Taurus system, also mentioned earlier in the chapter, was one of the most striking cases.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1111" class="a">The rise of e-commerce has brought new ways for information systems to cost an organization money in unexpected ways, sometimes as a result of routine modifications to the software in use. Barclays Bank suffered some serious embarrassment in August 2000 when customers logged on to the online banking service and found that they could view other customers’ accounts (</a>BBC, 2000).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘It’s no use delivering it now—we needed it last April!’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A project that is completed late may no longer be of any use. For example, a bricksand-mortar retailer, threatened by rivals who sell at a lower price on the Internet, may have little use for an e-commerce site if it is not operational until all the customers have defected and the company has been declared bankrupt.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Many other kinds of project are time-critical. This can be due to new legislation that affects the organization’s environment. An example of this was the deregulation of the UK electricity supply market in April 1998. This required electricity companies to make extensive modifications to their computer systems so that they would be able to handle customers’ new freedom to switch between suppliers. A few years earlier, all local authorities in the UK faced a similar challenge twice in three years, when central government changed the basis for local tax calculations. Each change required hundreds of councils to specify, develop (or purchase) and successfully install new computer systems that allowed them to produce accurate invoices and record income collected from local tax-payers. Failure to implement the new systems in time risked a massive cashflow problem at the beginning of the new tax year.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="http://amazon.com/" class="a" target="_blank">Commercial pressures can also have an effect. This sometimes translates into whether a business succeeds in being the first to market a new product or service, although the advantage is not always permanent. For some time the continuing success of the Internet bookstore </a><a href="part38.htm#bookmark1280" class="a">Amazon.com derived, at least in part, from the considerable competitive advantage of being the first of its kind. Some competitors (notably the established US bookseller Barnes and Noble) felt obliged to follow Amazon’s lead. For the followers, there is not the same need to take risks with new technology. But attracting customers away from a leader may mean differentiating yourself in some way, perhaps offering new services, or perhaps by being even better at what the leader already does well. At the time of writing (summer 2009), Amazon seems to be doing well while some rival online booksellers struggle to survive the global recession. Recent profit announcements suggest that Amazon continues to grow strongly, with net profits for the first quarter of 2009 up 24% compared with the first quarter of 2008 </a><a href="part38.htm#bookmark1280">(Stone, 2009).</a></p><p class="s26" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘OK, so it works—but the installation was such a mess my staff will never trust it’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Once a new system gets a bad press it can be very difficult to overcome the resistance of the people who are expected to use it, particularly if there is an existing alternative available to them. The following scenario is based on a real situation, observed at first hand by one of the authors. While the technology involved is now a little dated and the system involved is IT rather than IS, the lesson still applies.</p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">A small company introduced a local area network (LAN) to connect the PCs in its office. Staff were encouraged to store files on the network disk drive, where other staff could also access them (previously, all data was stored on local hard drives, accessible only from one PC). Most saw the mutual benefit and complied. Management claimed that the routine daily back-up of the network drive was a further benefit, since there was no need to keep personal back-ups of data. Then a mechanical fault occurred. This erased all data on the network drive, and when the engineer tried to restore it from the tape, it emerged that the tape drive had not worked correctly for weeks. All tapes recorded over the previous six weeks were useless. Staff learned that all data stored in that time was permanently lost. Re-entering it took many person-days. The faulty disk and tape drives were replaced, and tapes are now checked after every back-up, but many staff reverted to keeping all important data on their local hard drives. Most keep personal back-ups too. Perhaps nothing will persuade them to trust the LAN again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘I didn’t want it in the first place’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Organizations are complex and political by nature. The politics with which we are concerned here are to do with conflicting ideals and ambitions, and the play of power within the organization. There can be disagreement between management and workers, as in the case of the warehouse management system mentioned earlier in this section. There can also be contention between individual managers, and between groups of managers. One result can be that a manager is sometimes an unwilling client in relation to a project. The following scenario is based on another real-life situation observed by one of the authors.</p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">The head office of a multinational company decided to standardize on a single sales order processing system in all its subsidiaries throughout the world. But the Hong Kong office already had information systems that linked electronically with customers in Singapore, Taiwan and other places in South East Asia. It became apparent that the existing links would not work with the new system. For the Hong Kong management, this meant extra costs to make the new system work, and disruption to established relationships which, in their view, already worked smoothly and did not need to be changed. They therefore had little desire to see the project succeed in their region, but felt they had no other choice. Had they been less scrupulous, they might have tried to find ways of sabotaging its progress, either in the hope that it would be abandoned altogether, or at least that they might be exempted from the global rule.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark83">‘Everything’s changed now—we need a completely different system’</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It is almost inevitable for any information system project that, by the time the system is completed, the requirements are no longer the same as they were thought to be at the beginning. Requirements can change for many reasons.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_112.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Project timescales are sometimes very long (the Taurus project ran for three years) and business needs may change in the meantime.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_113.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_114.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Users naturally tend to ask for more, as they learn more about what is available. External events can have a dramatic impact—for example, the global recession of 2008/2009 forced many organizations to cut their spending and IT projects have been scaled down to save money.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This does not apply only to new systems currently under development. Systems that have been in operation for some time may also be affected. This is part of the natural, ongoing process of maintenance, modification, upgrading and eventual replacement that all information systems undergo. From a client’s perspective, the motivation is usually to make an information system fit better with the business, and thus to provide better support for business activities.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">2.2.3 <b>A developer’ s perspective</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The perspective of the developer is quite different both from that of an end-user and from that of a client. This is because the developer adopts the role of ‘supplier’ to the ‘customer’ (i.e. client or end-user). For this reason, when problems occur the developer may feel forced into a defensive position of justifying the approach taken during the project. Since at this stage we are discussing only problems, many of the problems identified by a developer tend to centre on blame and its avoidance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘We built what they <span class="s39">said </span>they wanted’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Changes to the requirements for a system, based on sound business reasons, always seem perfectly reasonable from a client’s point of view. However, for a developer, given the responsibility for building a system to meet those requirements, they can be a real headache. If we were able to distil the essence of how many developers feel about this, it would read something like the following.</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">No matter how skilled you are, you can’t achieve anything until the users, clients, etc. tell you what they want, and at the start they don’t even agree with each other. Eventually, with skill and perseverance, you produce a specification with which everyone is reasonably happy. You work for months to produce a system that meets the specification, and you install it. In no time at all, users complain that it doesn’t do what they need it to do. You check the software against the specification, and you find that it does exactly what it was supposed to do. The problem is that the users have changed their minds. They just don’t realize that it’s not possible to change your mind late in a project. By then, everything you have done depends on everything else, and to change anything you would almost have to start all over again. Or it turns out that they didn’t understand the specification when they accepted it. Or there is some ambiguity about what it meant, and you’ve interpreted it differently from them. Whatever the reason, it’s always your fault, even though all you ever tried to do was to give them what they wanted.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In reality, of course, analysts, programmers, etc. often do understand why users and clients change their minds during a project, or after delivery. But this doesn’t always make it less frustrating when it happens.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘There wasn’t enough time (or money) to do it any better’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In every project, there are pressures from outside that limit the ability of the development team to achieve excellence. In the first place, projects almost invariably have a finite budget, which translates into a finite amount of time to do the work to a certain quality. There may also be an externally imposed deadline (for example, a project to develop a student enrolment system that must be ready by the start of the academic year). Another external pressure results from the impatience of users and clients to see tangible results. This, too, is often understandable, since they are not so much concerned with the information system itself, as with the benefits it can bring them—an easier way to do a tedious job, a quicker way to get vital information, and so on. But it can be very counter-productive if it becomes a pressure within the project team to cut short the analysis and get on with building something (anything!) quickly to keep the users happy. The result of haste in these circumstances is usually a poor product that meets few of the needs of its users. Developers know this, but they don’t always have the power to resist the pressure when it is applied.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘Don’t blame me—I’ve never done Linux networking before!’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In a successful information system development team, the members must possess a harmonious blend of skills that are appropriate to the needs of the project. These may include the use of techniques (such as object-oriented analysis), knowledge of methodologies (such as the Unified Software Development Process), skill in programming languages (such as V B.Net or Java), experience with the modelling software used to create analysis and design models or detailed knowledge of hardware performance (such as networking devices). There must be a complementary set of skills within the team for a project to succeed. Problems occur when the available staff do not have enough expertise in the skills required for a project.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1288" class="a">In 2005, Birmingham City Council abandoned a project to migrate 1500 users from Windows XP to the open-source Linux operating system. The manager of the project said that one of his main problems was a skills shortage in the area of open-source networking. The total cost of the project was a little over £0.5m (</a>Thurston, 2006).</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The skills problem is not trivial. Even today, some highly skilled and experienced analyst/programmers in industry have little or no experience of object-oriented analysis and design. Some projects with highly skilled staff are still carried out rather poorly, because the staff are inexperienced with the particular techniques they must use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘How can I fix it?—I don’t know how it’s supposed to work’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark84">This complaint is often heard from programmers who have been asked to modify an existing program, and who have then discovered that there is no explanation of what it does or how it works. To modify or repair any artefact, whether a computer system or a bicycle, it is usually necessary to understand how it was intended to work, and thus what the consequences are of changing this or that feature. Anyone who has ever tried to repair anything electronic or mechanical, such as a motor vehicle, washing machine or mobile phone, will know that much of the time is spent trying to understand what the various parts do, and how they interact with each other. This is true even when a maintenance manual is to hand. The situation is no different for computer software. While software may be more intangible in form than a mobile phone, it is no less mechanistic in its operation.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘We said it was impossible, but no-one listened’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Just  like  client  managers,  systems  developers  can  sometimes  be  overwhelmed  by organizational politics. At times this means that a project is forced on an unwilling team, who do not believe that it is technically feasible to achieve the project’s goals. Alternatively, the team may not believe the project can be completed within the time made available. But if opposing views prevail, the team may find itself committed to trying to achieve what it said could not be done. In these circumstances, it can be very hard for team members to become enthusiastic about the project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘The system’s fine—the users are the problem’</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A few information systems professionals, especially those who understand least about the business or the organization, are prone to blame ‘the stupid user’ for everything. They believe that problems that occur in the use of software chiefly result from the fact that most users are too ignorant or too poorly trained to make proper use of the system. They generally believe that the design and execution of the software is not open to serious question. Many of these technocrats are undoubtedly very talented, but this view is patently absurd since it assumes that the answer to a problem is known before the situation has even been investigated. In a word, it is a prejudice. We will simply comment that anyone who hopes to learn the truth about a situation must also be prepared to examine critically their own preconceptions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="226" height="25" alt="image" src="Image_115.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.3  </a><a href="part4.htm#bookmark4" class="s29">Why Things Go Wrong</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.3  </a><a href="part4.htm#bookmark4" class="s29">Why Things Go Wrong</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.3  </a><a href="part4.htm#bookmark4" class="s29">Why Things Go Wrong</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part9.htm#bookmark86" class="a" name="bookmark85">Flynn (1998) proposed an analytical framework to categorize project failures, and this is widely accepted as valid. A summary of the framework is shown in </a>Figure 2.3.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="270" alt="image" src="Image_116.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark86">Figure 2.3 </a><a href="part38.htm#bookmark1175" class="s33">Causes of IS project failure (adapted from </a><span class="s21">Flynn, 1998).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Complete failure is the most extreme manifestation of a problem, but Flynn’s framework can also be applied to less catastrophic problems. In Flynn’s view, projects generally fail on grounds of either unacceptable quality or poor productivity. In either case, the proposed system may never be delivered, it may be rejected by its users or it may be accepted yet still fail to meet its requirements.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">These categories are really what are known as ‘ideal types’. In other words, they are meant to explain what is found in reality, but that does not imply that any real example will precisely, in all its details, match any one category. Real projects are complex, and their problems can seldom be reduced to one single cause. Many examples in the following sections show some characteristics of more than one cause.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">2.3.1 <b>Quality problems</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1181" class="a">One of the most widespread definitions of the quality of a product is in terms of its ‘fitness for purpose’ (see any standard text on software quality assurance, e.g. Galin, </a>2003). In order to apply this to the quality of a computer system, clearly it is necessary to know first for what purpose the system is intended and second, how to measure its fitness. Both parts of this can be problematic.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark87">The wrong problem</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">If an information system does not help to fulfil the aims of the organization, then it is a waste of resources. It may also be a distraction from the things that really matter. It may even do real harm if it works against the organization’s business strategy. But it can be difficult to choose the right viewpoint when defining the aims of a project. The aims of the organization as a whole may be unclear, or those responsible for planning information system projects may not be aware of them. Then the developers and users of a system may regard it as a success, yet it appears a failure when seen in a wider frame of reference.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Sometimes projects are started with no clear idea of the nature or goals of the client organization. Then failure, or at least lack of success, is almost inevitable. If an organization itself is not understood, then it is very hard to identify, specify and develop information systems that support it in fulfilling its aims.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Neglect of the context</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This emphasizes the fitness of an information system to fulfil its purpose. This can take the form of a system that is too difficult to use, since the designers have taken insufficient account of the environment in which its users work, or the way that they like to work. Some examples given earlier in this chapter can be interpreted in this way, depending on assumptions about the situation. For example, in one case cited earlier (Section 2.2.1) workers and managers</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">held different views about the purpose of the warehouse management system. Managers believed they needed to control the activities of workers more closely. Yet the system designed to do this had also the side effect of obstructing the workers from carrying out their work in an efficient way, to the detriment of the whole company.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark88">Incorrect requirements analysis</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">We believe this category should include design and implementation, as well as analysis. The focus is still on a system’s fitness to fulfil its purpose. Even if the aims are clear at the outset, the development team may not have the right skills, the right resources or enough time to do a good job. However, even when none of these present a difficulty, the project can still fail if the team members apply inappropriate techniques to the project.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This category of failure usually causes the most visible systems problems, because the user can see the results. These may include defects in the external design of the system (for example, the content or layout of its screens), or the selection of tasks that the system performs (for example, an essential function may not be included), or the operation of the software (the system may not be coded to work in the way that its analysts and designers intended).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Project carried out for the wrong reason</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Here, the emphasis is once more on the intended purpose of the system. To give an example, during the late 1990s many organizations rushed into some sort of e-commerce activity. With the benefit of hindsight, this was clearly a great success for some, but others derived little or no benefit. At one point there were so many ‘dot.com’ crashes that the <i>Guardian </i>newspaper’s website ran a column called ‘Dot.com deathwatch’, which featured stories about troubled and failing Internet companies.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1230" class="a">The reasons for the crash were complex, but for many businesses they boil down to a simple failure to think carefully enough about some key questions posed by </a>McBride (1997).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_117.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">What does the business aim to achieve by a presence on the Internet?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_118.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">How must the business reorganize to exploit the opportunities offered by the Internet?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_119.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">How can the business ensure that its presence on the Internet is effective?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It remains true today that any organization moving from offline to online operations should first be clear about their answers to these questions. There is a great deal more to successful trading on the Internet than just creating a website with a catalogue and payment facility and hoping it will work. Yet some organizations that moved to e-commerce were just following a trend. They did not understand what it could do for their business, but they feared the consequences of being left behind.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Two possible underlying reasons explain why this happens for established companies. First, there may be a political push within the organization. For example, a powerful group of managers may feel instinctively that the business must look more modern, even though no clear benefits have been identified. Major business decisions are often based on instinct rather than reason, so this scenario is not uncommon. Second, there is the pull of new technology. Managers who have little understanding of information technology can be very vulnerable to this. They have no rational basis for evaluating the exaggerated claims that some vendors make about their newest products. In practice these two reasons often combine into a single force that can be irresistible.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark89">Some people who launched online businesses, typically Internet start-ups with no history of trading in the physical world, simply believed that the Internet was a ‘new economy’ where established business rules no longer applied. It is now generally accepted that some aspects of business on the Internet are clearly different—in particular, the speed at which things happen, including business failures. But few would now argue that the business fundamentals have really changed. It is still just as important as ever to plan and design with care, to pay attention to costs and income and to ensure that projects are properly controlled.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">While much of the naï ve, sloppy thinking that led to the dot.com crashes is no longer in evidence, the central point applies just as much now as it ever did in the past.</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">2.3.2 <b>Productivity problems</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Productivity problems relate to the rate of progress of a project, and the resources (including time and money) that it consumes along the way. If quality is the first concern of users and clients, then productivity is their other vital concern. The questions that are likely to be asked about productivity are as follows.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_120.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Will the product be delivered?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_121.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_122.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Will it be delivered in time to be useful? Will it be affordable?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A number of things can happen during the course of the project to affect adversely its rate of progress, its costs and ultimately whether a satisfactory system will be delivered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Requirements drift</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Requirements often change over time, typically because users ask for more, or they ask for different things, as they learn more about the proposed system. When this process of change is not managed, it is called <i>requirements drift</i>. This can cause the whole project to get out of control, affecting both the progress and the costs. In extreme cases a project team may completely lose sight of the original reason for the system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It would be unreasonable to prevent all change requests, because many will be made for good reasons. For example, staff at an insurance office may request the facility to store video clips in a system for recording details of vehicle accident claims. V ideo records made by the claims assessor at the scene of an accident could be helpful in assessing claims, but this might not have been thought of when staff were first asked about their requirements for the system. However, change requests can bedevil a project and even prevent its completion. The longer a project proceeds, the more complex both its products and its documentation become. To compound this, each part of the final system probably depends on many others, and the interdependencies grow more numerous and complex. Thus it becomes progressively more difficult to make changes to a system under development, because a change to one part requires changes to many other parts so that they will continue to work together. The limit is reached when a project is stalled by an escalating workload of making all the changes required as a consequence of <i>other </i>changes requested by the users. At this point, management have only two choices. They can cancel the project and write off the money spent so far. This is what managers decided to do at the London Stock Exchange in 1993, and at Birmingham City Council in 2005 (although in those cases the causes of the cost escalation were different). Alternatively, an effort can be made to bring the project back on track. This is almost always both difficult and expensive, and requires highly skilled management, because by now there are many people who have unrealistic expectations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">External events</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark90">This cause of failure is normally beyond the control of both project team and higher management. Depending on the environment in which the organization operates, decisive external events can be impossible to anticipate. Still, it is prudent at least to assess the vulnerability of the project to external events, since some are more at risk than others. For example, a project to build a distributed information system for a business in a developing country that will operate on new, state-of-the-art computers communicating over public telephone circuits may be sensitive to external factors such as the reliability of the telephone network and call pricing. By contrast, a project to build an information system that will operate on existing, tried and tested hardware within one building can safely ignore such factors.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Poor project management</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The manager of a project is ultimately responsible for its successful completion, and it could therefore be argued that any project failure is also a failure of the project management. To some extent this is true, but there are also some cases where the only identifiable cause of failure overall is a failure of management. This is usually due to poor planning at the start, or to a lack of care in monitoring progress. As a result, the manager allows the project to falter, or permits its costs to grow in an uncontrolled way.</p><p class="s26" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Implementation not feasible</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Some projects are over-ambitious in their technical aims, and this may not become evident until an attempt is made to implement the system. This is particularly the case when a system is intended to work together with other systems, whether or not these are already in use. The problems of testing and debugging a new system can grow steadily more complex as attention is focused on larger and larger subsystems. Sometimes the task of interfacing several large, complex software systems, written in different programming languages, installed at different sites and running on different makes of computer hardware, can turn out to be impossible to achieve.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1109" class="a">Technical problems with the implementation do not always become evident until after the system is implemented. One example was the LASCAD ambulance dispatch system. Emergency operators who used this system found difficulties with the deliberately high-tech design that relied on an on-screen map display. This was a very early use of a digital map interface, and users found it difficult to pinpoint an ambulance with sufficient accuracy. They regarded it therefore as dangerous (</a>Barker, 1998). This was one factor that led to the system’s overall failure to send ambulances quickly to emergencies. A new technology had been applied to a critical task that was not sufficiently understood.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="http://boo.com/" class="a" target="_blank">An implementation problem led to the crash of the online sportswear retailer </a><a href="part38.htm#bookmark1204" class="a">Boo.com in May 2000. The software for their website was much delayed in development, but proved a disaster even when delivered. It turned out that very few home PCs were sufficiently advanced to run the sophisticated 3D visualizations without crashing. Even when the software ran without crashing, most images were very slow to download, adding to the users’ frustration. As a result, too few customers bought from the website. The company called in the liquidators after reportedly spending £80m over six months, with no realistic prospect of sales increasing to the point where the business would become viable (</a>Hyde, 2000). Problems of this kind can usually be avoided by sound design practices.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="226" height="25" alt="image" src="Image_123.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.4  </a><a href="part4.htm#bookmark4" class="s29">The Ethical Dimension</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.4  </a><a href="part4.htm#bookmark4" class="s29">The Ethical Dimension</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.4  </a><a href="part4.htm#bookmark4" class="s29">The Ethical Dimension</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark91">Ethics is loosely defined as the branch of philosophy that is concerned with the rightness or wrongness of human behaviour, and the establishment of moral rules or principles to guide our behaviour. Thinking about ethics normally means that we are trying to work out how to judge the effects that one person’s actions have on other people.</a><a name="bookmark92">&zwnj;</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Given that all computer-based information systems have a direct effect on someone’s life, it is hard to think of one that does not have a significant ethical dimension to its design, construction or use. A system meant to automate some activities of a business may result in job losses among the staff. A social networking site that aims to help people share personal information with their friends can become a means for bullying and harassment. A system with a poorly designed user interface may discriminate against disabled people by making it impossible for them to do their work. In a system designed to extract car registration numbers automatically from speed camera data, the algorithm that renders the car registrations into characters must be accurate and reliable, or else innocent drivers might be pursued by the authorities.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1240" class="a">Any failure to consider the ethical consequences of an information system project may cause a problem for someone. Sometimes these problems are noticeable at the time and must be handled within the project; they can otherwise lead to a failure of the project overall. At other times there is hidden damage to a project, an organization, the information systems profession as a whole or even in extreme cases to society at large. However, this is often a contentious issue; there may be disagreement about what is harmful and what is not. A recent example is the debate about the images of city centre and ordinary residential streets posted on Google Street V iew. Some believe they constitute an infringement of personal privacy, while others can’t understand what the fuss is all about. Residents in one UK village blocked access to a camera car because they thought that filming their homes would encourage crime (Moore, 2009). The Hellenic Data Protection Authority banned the filming of Greek streets for </a><a href="part38.htm#bookmark1240">Street</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1112" class="a">V iew until the privacy issues are clarified (BBC, </a>2009). Google agreed to reshoot its Tokyo images from a lower camera height after complaints from Japanese academics and lawyers</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1253" class="a">(Reuters, </a><a href="part38.htm#bookmark1186" class="a">2009). Google believes that the privacy safeguards built into Street V iew—blurring of faces and removal of contentious images—are already sufficient (Google, </a><a href="part38.htm#bookmark1207" class="a">2009). The UK’s Information Commissioner appears to agree, ruling that Street V iew causes only a relatively limited intrusion into people’s privacy, and that it does not contravene any laws (ICO, </a>2009).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One of the difficulties in assessing the ethical issues in a project is that the person who may have a problem is not necessarily the developer of the system, its user, its client—or indeed anyone at all who is obviously connected with the project. In fact, one of the first problems that must be faced in this area is the identification of all the people who may be affected by the system. These are often called <i>stakeholders</i>, since, in their different ways, each has a stake in the outcome of the project.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark93" class="a">To illustrate the diversity of stakeholders who may be associated with a project, consider the introduction of a network of bank ATM machines in the branches of a supermarket chain. </a>Figure 2.4 shows a preliminary tracing out of the possible effects of this system, together with the groups of people affected.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="285" alt="image" src="Image_124.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark93">Figure 2.4 </a><span class="s21">Possible stakeholders in a bank ATM network.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1257" class="a">Not every group identified in this analysis is equally affected by the project, and in some cases the effect is quite minor. However, until such an analysis has been carried out, it is not possible to speak with any confidence about the nature or the extent of impact that a new information system will have. One way of making a comprehensive identification of the ethical dimensions of a software project is to follow the Software Development Impact Statement process (SoDIS). This process is supported by the SoDIS Project Auditor software tool (</a>Rogerson and Gotterbarn, 1998).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark94">2.4.1 </a><b>Ethical issues within a project</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The issue of professionalism is at the forefront of any discussion of ethics within information systems development. By their very nature, information systems projects have deep consequences for the lives and work of many people who either will use the software or will be affected in some way by its use. There are several reasons for this. First, information systems projects are often major investments for the client organization, and money spent on these is necessarily money that now cannot be spent on other worthwhile projects. Second, information systems projects are often concerned with the way that important business activities are carried out, and they can therefore have a direct effect on the overall success or failure of the organization. Third, the introduction or modification of information systems often causes radical changes in the way that employees carry out their work and how they relate to their managers, colleagues and customers. Given these responsibilities, it is important that project team</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">members behave in a professional manner. To some extent this is just a matter of being aware of the rules for behaving in a professional way, and then following them.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Behaving ethically is usually not just a matter of applying a straightforward rule in a mechanical way. We often find ourselves confronting ethical dilemmas, where no single course of action seems entirely right, yet we must find some basis for making a decision. This is compounded when our actions affect different stakeholders in different ways.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1264" class="a" name="bookmark95">Some ethical effects arise from aspects of a project that are not under the direct control of an individual developer. For example, Sachs </a>(1995) describes a ‘Trouble Ticketing System’ that was intended to improve the work efficiency of testers (telephone repair staff) by tracking the progress of repairs and allocating the next step in a job to any tester that was available at the time. In practice, the system disrupted informal communication between employees, thus damaging their efficiency instead of improving it. According to Sachs, the fault lay in a failure to develop an adequate understanding of the testers’ working practices, in particular the way that their informal communications helped in troubleshooting difficult problems. But individual developers are rarely free to choose which aspects of a situation should be analysed.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Legislation adds a further ethical dimension for the members of an information system project team. In the UK the relevant legislation includes the Data Protection Act 1998, the Computer Misuse Act 1990 and the Health and Safety (Display Screen) Regulations 1992. The increasing use of the Internet as a medium for information and exchange also brings cross- border complications. One example was the widely reported ‘Internet adoption’ case, which involved a British couple who adopted twin baby girls advertised on a website based in the USA. A British court later declared the adoption to be invalid and the twins were returned to the care of their natural father in the USA. In many cases it is far from clear which laws apply when information and services are provided via the Internet to residents of one country, but either the service provider or the information content are hosted within a different country.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">2.4.2 <b>Wider ethical issues</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1255" class="a">One of the longest-running debates associated with IT and IS focuses on the effect they may have on levels of unemployment throughout the world. Some authors have claimed that the spread of IT will cause a rise in global unemployment that will leave countless millions idle and impoverished (Rifkin, </a>1995). Others argue that, while IT has certainly destroyed some jobs (tens of thousands of jobs lost in the UK banking sector over the last decade), it has also created many new jobs to replace them, often bringing new opportunities to neglected backwaters in the world economy. There is no clear-cut evidence either way.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For many years, an ethical debate has raged between the proponents of freedom (some would say anarchy) on the Internet and the big business interests, who already own its infrastructure and may soon dominate most of its content. In its brief history, the Internet has been at the centre of many debates revolving around freedom of access, including the widespread concerns that have been expressed about the ready availability of pornography, political materials and other contentious content. Yet for many others, this chaotic situation has brought unprecedented opportunities to meet (in a virtual sense) and communicate with similarly minded people all over the world.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1144" class="a">One issue that is likely to receive more attention in the next few years is the way that some companies use new applications of IT to gather and exploit unprecedented quantities of detailed personal information. For example, shortly before the first edition of this book was prepared, a South African bank had begun to issue its customers with mobile phones that displayed their current account balance each morning. The phones also enabled the bank to monitor all phone numbers dialled, and this added to the bank’s profile of data about individual customers. Customers are categorized, and those that the bank feels are least profitable are ‘encouraged’ to leave the bank, e.g. by higher service charges. The bank was said to be considering plans to add a geographic information system capability, which would also allow customers’ daily movements to be tracked, and a link with Internet providers, which would allow the bank to ascertain which websites are visited by their customers (</a>Collins, 1998a).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark96">Q uestions of access to computers and computerized information have wide implications. There have been arguments over the years about whether the use or the availability of computers has tended to favour men over women, the middle class over the working class, and those in the affluent north over those from the poor south of the globe. Some suggest that</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">IT and the Internet have created a new ‘digital divide’ in the world’s population, splitting people into the information-rich and the information-poor.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">So many things are changing so fast at present that it is difficult to be sure how these questions will seem in a few years’ time. It is clear that future generations will look back on our time as one of great change. Such an era inevitably raises profound ethical questions about the effects on our fellow citizens of the way that we design and apply technology.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="173" height="25" alt="image" src="Image_125.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.5  </a><a href="part4.htm#bookmark4" class="s29">Costs of Failure</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.5  </a><a href="part4.htm#bookmark4" class="s29">Costs of Failure</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.5  </a><a href="part4.htm#bookmark4" class="s29">Costs of Failure</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="http://boo.com/" class="a" target="_blank" name="bookmark97">Many projects discussed in this chapter, particularly the more famous ones (Taurus, the LASCAD system and </a>Boo.com), had very large price tags attached. Private companies are widely thought to be reluctant to admit their failures, since this can reflect badly on the business as a whole, perhaps damaging customers’ or investors’ confidence. For this reason, it is thought that the known, high-profile failures represent only the visible tip of a much larger iceberg. But project failures are not the only costs associated with project problems. Projects that do not fail outright, but for a variety of reasons do not fully meet their requirements, may cost a great deal of money in other ways.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A system that is poorly designed or functionally limited has many consequences for its users. If we take interface design as an example, a screen layout that compels users to switch back and forth between two screens as they enter data could have effects that range from mild irritation to increased error rates, absence due to sickness, and greater staff turnover. Each has an associated cost, but it may be hard to measure this accurately. It may not be recognized at all. An employee who leaves for another job because of his or her frustration with a poorly designed computer system may not tell anyone their reason for leaving. Now that many businesses sell online, their customers are also users. Customers who dislike the interface of a web ordering or purchasing system may simply defect to another online retailer. A customer lost for this reason has probably been lost for good, but it is very unlikely the company will ever be able to calculate the cost.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark81" class="a">System reliability can be important in determining overall costs. Recall the insurance company mentioned above in Figure </a><a href="http://boo.com/" class="a" target="_blank">2.2, where customers were asked to resubmit personal details, as a computer system crash had caused most customer data to be lost. This is not a reassuring picture for any insurance company to give its customers, and it is a safe assumption that many switched to another insurer as a result. Some will also have told friends and colleagues, who in turn will be less likely to use this company in the future. It is very unlikely that anyone could accurately determine the full cost to this business in terms of lost customers. In the case of </a>Boo.com, a technically inappropriate implementation resulted in the complete failure of the business.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark98" class="a">Some of the more routine effects that can occur are summarized in Figure </a>2.5. This list is by no means exhaustive. But it underlines the importance of getting things right before problems have a chance to appear. This is true even if we ignore the ethical consequences of some information systems applications under development or already in use today. The full social cost of some ethical issues outlined in Section 2.4 is probably incalculable.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="219" alt="image" src="Image_126.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark98">Figure 2.5 </a><span class="s21">Some hidden costs of poor design.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">However, after so much concentrated attention on the many dead ends that our unluckier (or more careless) predecessors have encountered, it seems appropriate to end the chapter on a final upbeat note. Two of the failures discussed earlier have since become success stories.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1249" class="a">The London Stock Exchange went on to successfully install an online share trading system. The new system is much simpler than Taurus—and not all users are entirely happy with its functionality—but it does meet its basic requirements. It was introduced in April 1997, on time and within budget (</a>Philips, 1997).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1109" class="a">The London Ambulance Service successfully introduced its new ambulance dispatch system in 1997, too, five years after its disastrous predecessor was scrapped. This time, the project was so successful that it attracted attention from emergency services around the world, and it even won a coveted award (the Elite Group Information Systems Management Award) from the British Computing Society (</a>Barker, 1998).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We can also remind ourselves of the many positive contributions that modern information systems make to our lives, enabling so many things that were not possible for earlier generations. It is difficult to imagine an aspect of life in modern society that is not facilitated in some way by a computerized information system. Our goal, then, should be to ensure that tomorrow’s systems build on the successes of the past, while avoiding the problems and failures, as far as it is in our power so to do.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="122" height="25" alt="image" src="Image_127.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">2.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark99">In this chapter we have looked at the issue of project failure from many different perspectives, including those of the people who use information systems, the people who purchase them and the people who build them. We have also outlined some of the deeper causes of project and system failure, and considered the costs and wider ethical issues.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The failures in information systems development can teach valuable lessons and, moreover, ignoring a difficulty does not make it go away. Rather, it increases the likelihood of repeating past mistakes. So it is important to understand as much as possible about what can go wrong with an information system development project, the better to be able to avoid it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark100">Review Questions</a></p></td></tr><tr style="height:85pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;text-indent: -26pt;text-align: left;">2.1  <span class="s16">Why do users, clients and developers disagree on the nature and causes of the problems in information systems development?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">2.2  <span class="s16">What are the main underlying causes of problems in information systems development?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">2.3  <span class="s16">Define quality.</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:123pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s35" style="padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">2.4  <span class="s16">What are the main differences between quality problems and productivity problems?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">2.5  <span class="s16">Why do the requirements drift once a project is under way?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">2.6  <span class="s16">What can be the results of ignoring the organizational context of an information system?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">2.7  <span class="s16">Define stakeholder.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">2.8  <span class="s16">What ethical issues might be involved in setting up an online shopping system that has links to an organization’s management information systems?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:373pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">2.A <a href="part9.htm#bookmark86" class="s36">Do some research in computing trade journals, and find examples of recent projects that failed or ran into difficulties. Draw up a table with four separate columns. Give these titles like: ‘Nature of problem’, ‘Who sees it as a problem?’, ‘Probable cause’ and ‘Flynn category’. Enter the projects into your table, using your own intuition to complete column 3. Then complete the 4th column using Flynn’s categories (summarized in </a><span class="s16">Figure 2.3). How do your causes compare with Flynn’s categories?</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">2.B <a href="part38.htm#bookmark1113" class="s36">The British Computer Society (BCS) publishes a Code of Conduct for its members, who include thousands of computing and information systems professionals in the UK. In the USA, similar codes are published by the Association for Computing Machinery (ACM) and the Institute of Electrical and Electronic Engineers (IEEE). In many other countries around the world, including India, Z imbabwe and Singapore, there is a national professional society with an equivalent code of professional ethics. Write down some ethical problems associated with the development of an information system to support staff who dispatch ambulances to medical emergencies, and use this to identify a list of issues you would expect to be covered in a professional code of conduct for information systems developers. Then obtain a copy of the BCS Code (</a><span class="s16">BCS, 2009—or, if you are a reader in another country, your nearest local equivalent). Compare it to your list of issues. What are the main differences?</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">2.C <span class="s16">Write down all the stakeholders who you think are associated with an emergency ambulance dispatch system. How are they affected?</span></p><p class="s35" style="padding-left: 32pt;padding-right: 10pt;text-indent: -23pt;text-align: justify;">2.D <span class="s16">Review the ethical issues you identified in Exercise 2.B, and identify one or more issues that appear as a problem from the perspective of one stakeholder, but do not appear as a problem from the perspective of another stakeholder.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">2.E <span class="s16">Find out what legislation applies to information systems development activity in your country, and what implications it has for developers. Would the South African bank customer profiling system described in Section 2.4.2 be fully legal under these laws? Which particular aspects of the system make it ethically questionable, and from whose perspective?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_128.png"/></span></p><p class="s7" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Trade magazines such as <i>Computing </i>and <i>Computer Weekly </i>regularly publish articles that report on problems in current projects as they occur.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1265" class="s6">Sauer </a>(1993) discusses reasons for project failures in terms of the project’s organizational environment, and includes several practical case studies that illustrate the problems in practice.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1181" class="s6">Galin </a>(2003) is one of many books that deal with software quality assurance (SQ A), a discipline that endeavours to ensure that software systems fully meet their defined requirements. The latest edition of Pressman’s standard software engineering text (2009) also has a good chapter on SQ A.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;">De Montfort University’s Centre for Computing and Social Responsibility runs a website that focuses on ethical issues in information systems development. This has many links to other sites, and also carries</p><p class="s7" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="http://www.ccsr.cse.dmu.ac.uk/" class="s6" target="_blank">the full text of a number of academic papers in this field. It can be found at </a>www.ccsr.cse.dmu.ac.uk.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_129.png"/></span></p><p class="s1" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">1 One of the authors was a customer at the time.</p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;">2 To this category, we would add design and implementation. Even when analysis is carried out correctly, this is still no guarantee that the software will be well designed, or that it will be correctly programmed.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_130.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:345pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark101">LEARNING OBJECTIVES</a><a name="bookmark102">&zwnj;</a></p></td><td style="width:95pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_131.jpg"/></span></p></td></tr><tr style="height:95pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 34pt;padding-right: 56pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_132.jpg"/></span><span class="s17"> </span><a href="part9.htm#bookmark75" class="s36">about indicative responses to the challenges discussed in Chapter </a>2 <span><img width="20" height="13" alt="image" src="Image_133.jpg"/></span><span class="s38"> </span>about prototyping and incremental lifecycles</p><p class="s16" style="padding-left: 34pt;padding-right: 197pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_134.jpg"/></span><span class="s17"> </span>the importance of project management <span><img width="20" height="13" alt="image" src="Image_135.jpg"/></span><span class="s38"> </span>how users may be involved in a project</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_136.jpg"/></span> <span class="s16">the role of software development tools in systems development.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="144" height="25" alt="image" src="Image_137.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark75" class="a" name="bookmark103">For successful information systems development we need to adopt strategies and procedures that will address the challenges described in Chapter </a><a href="part9.htm#bookmark104" class="a">2. The problems that give rise to these challenges can be categorized in various ways. We have chosen to divide them into: those that are concerned with productivity; those that relate to poor quality; and those concerned with installation and operation. These categories are not necessarily mutually exclusive and other broader categorizations could be adopted. For example, Poor Response Times could result from a quality problem in the design or construction of the software or it could be a consequence of poor installation. </a>Figure 3.1 lists the problems and identifies some of the ways that they can be ameliorated. Some of the solutions are necessarily complex and involve the combination of several strategies or procedures. A common feature in many of the solutions discussed in this chapter is effective analysis and design.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a">The successful development and use of an information system is contingent upon many factors and these factors may vary between different types of development project. We believe that the object-oriented approach increases the chance of success in most information systems development projects. One major source of difficulty is the inherent complexity of software development. In an object-oriented approach, using object-oriented languages for implementation, complexity is managed in such a way as to help address this problem. This is not discussed in this chapter which considers more general issues but is considered from </a>Chapter 4 onwards.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="701" alt="image" src="Image_138.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark104">Figure 3.1 </a><span class="s21">Causes of IS project failure and indicative solutions.</span><a name="bookmark105">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="274" height="25" alt="image" src="Image_139.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.2  </a><a href="part4.htm#bookmark4" class="s29">Responding to the Problems</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.2  </a><a href="part4.htm#bookmark4" class="s29">Responding to the Problems</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.2  </a><a href="part4.htm#bookmark4" class="s29">Responding to the Problems</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark75" class="a" name="bookmark106">The indicative solutions to the problems identified in Chapter </a>2 are introduced below. Where different problems share similar solutions they are discussed together. Later in the chapter the main themes that underpin these solutions are discussed in more detail.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">3.2.1 Quality problems</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Q uality problems can mostly be managed by adopting a systematic approach to systems development. This is typically divided into a series of separate phases and activities to make it</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1206" class="a">easier to manage. The waterfall lifecycle model is an example of a systematic approach that continues to be used after nearly 40 years, but it has various deficiencies that are discussed later in the chapter and organizations are moving to other approaches. Approaches have been developed to address the difficulties inherent in the waterfall lifecycle by involving users more and  by  making  the  development  process  more  responsive  to  potential  changes  in requirements. Nowadays many of these approaches develop software using object-orientation. Examples of modern approaches to software development include the IBM Rational Unified Process (RUP) (IBM, </a><a href="part38.htm#bookmark1103" class="a">2009), the Agile Unified Process (AUP) (Ambler, </a><a href="part38.htm#bookmark1104" class="a">2009) and the Enterprise Unified Process (EUP) (Ambler et al., </a>2005). These approaches differ in the emphasis and scope. For example, EUP considers the retirement or decommissioning of an information system. AUP has a reduced number of activities. This makes it more responsive to changes in user requirements and working software can be delivered early in the development process. The different systematic approaches may be suited to different types of information systems development project. However, the appropriateness of particular approaches is hotly debated. Each of the problems is discussed in turn below.</p><p class="s13" style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Wrong problem. <span class="p">This sort of issue typically arises because the information system does not</span></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">align with the organizational strategy or goals. One way to understand the organizational goals is to embark upon a s<i>trategic information systems planning </i><a href="part9.htm#bookmark34" class="a">exercise as a precursor to information systems development. As discussed in </a>Chapter 1 the Business Strategy drives the IS Strategy which in turn drives the IT Strategy. Information systems work within the context of an organization and must satisfy its current requirements as well as provide a basis from which future needs can be addressed. This helps to ensure that wider influences, including the impact of organizational influences and culture, are not neglected. As a general example, in the Agate case study a strategic decision may be made to target multinational companies for international advertising campaigns. This has consequences for campaign management and its supporting information systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Strategic information systems planning does not address all the issues. Some form of <i>business modelling </i>needs to be undertaken to determine how an information system can support a particular business activity. It is important to understand how the activity is performed and how it contributes to the objectives of the organization. Campaign management is an important business function for Agate and it should be modelled in order to determine how it is carried out, thus providing some of the parameters for subsequent information systems development. To avoid addressing the wrong problem the objectives that the information system needs to meet must be carefully understood and analyzed. This can be achieved by ensuring requirements are captured effectively. These should be analyzed in the context of the organizational goals.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark107">Project undertaken for the wrong reason. </a><span class="p">Organizational goals and strategy have to be understood and followed to ensure that the information systems development project is focused so that it will benefit the organization. Sometimes it is not obvious to potential users how a system is likely to operate and this can be addressed by adopting a prototyping approach. In software development a prototype is a system or a partially complete system that is built quickly to explore some aspect of the user requirements. A prototype will give the users the opportunity to experience how some aspects of the system operate earlier during the development so that they can determine if the original objectives are being addressed. A key feature of successful prototyping is user involvement in the evaluation of the prototype.</span></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Wider influence neglected. <span class="p">The context within which an information system is going to operate should be considered during the requirements capture. However it is not always easy to anticipate how a system will operate in a particular work culture or environment and, as discussed earlier, a prototyping approach enables the users to experience and influence the development of the system.</span></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Incorrect requirements analysis. <span class="p">This will produce incorrect or incomplete interpretation of the requirements leading to inappropriate design decisions resulting in a delivered system that does not satisfy the user needs. Requirements analysis is not the only activity in systems development that can have an adverse effect if performed incorrectly. Incorrect requirements capture, design, implementation and test should also be considered under this heading. A systematic approach that incorporates guidance on how these activities should be performed reduces the risk of them being performed incorrectly. (RUP or AUP are examples.)</span></p><p class="s13" style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Users change their minds. External events change in the environment. <span class="p">Users only change their minds because they have to—either external events have changed the requirements or the users have understood their needs more clearly and hence have to modify the requirements. It is not possible to avoid this happening but it is possible to minimize any adverse impact on the project. A key aspect is continuing user involvement throughout the project and this should include some early prototyping at least in terms of the way the system will operate. Although this might just be at the level of the non-functioning interface mock-ups it gives the users more insight into what will be offered by the completed system. Using an approach like RUP or AUP also gives the development team a better chance of responding to changing requirements effectively.</span></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Poor interface design. <span class="p">This includes producing a system with </span>inappropriate data entry, incomprehensible error messages, unhelpful ‘ help’ <span class="p">and </span>inappropriate ways of working. <a href="part23.htm#bookmark777" class="a">The importance of an appropriate human–computer interface cannot be overstated. If the interface does not support the users and the way they work, the success of the information system will be reduced significantly. Poor interface design can be addressed by adopting accepted good practice (discussed in Chapter </a><span class="p">16) and ensuring that the users are involved in reviewing the proposed interface early on in the development cycle. This can be achieved by adopting a prototyping or an incremental development approach or both. An incremental approach aims to deliver the working system in parts (increments) thus giving the user part of the functioning system early in the development cycle.</span></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark108">Requirements changed before project delivery. </a><a href="part9.htm#bookmark114" class="a">Poor or incomplete requirements capture is one possible cause of this problem. As described earlier this can be remedied by adopting a systematic approach, the possible use of prototyping and incremental development, and effective user involvement. This particular problem has also been cited as a possible consequence of using the waterfall lifecycle model (Figure </a><span class="p">3.3). In the waterfall lifecycle each particular stage has to be completed and agreed by the client before the next stage can begin. This tends to increase the time between requirements capture and system delivery, thus increasing the likelihood that requirements will have changed. This difficulty can be overcome by adopting a development approach that involves the users to a greater extent and delivers increments of the system early during the development. Agile development approaches like AUP help address this problem by focusing on producing working software as early as possible.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.2.2 Installation and operation problems</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The problems associated with <i>installation and operation </i>may be a consequence of quality problems during the development process. Many happen because installation or operational issues are not considered sufficiently (or at all). It may be that non-functional requirements such as response times or reliability targets are not captured, or the system that is constructed does not satisfy them.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Poor installation. Operational issues. <span class="p">Inefficient or incorrect installation results in poor system performance such as poor response time or other operational problems that can make the system completely unusable. Planning for the installation is an integral part of the systems development and should consider the hardware and operating system platform for deployment. A key factor for a successful installation is testing whether the system operating on the planned hardware and software platform can cope with the peaks of user activity and the maximum transaction throughput. This is known as stress testing and may be achieved by constructing a prototype installation so that the best installation parameters can be determined. A systematic approach to development will include a focus on deploying the new system and the transition from development to operation.</span></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Poor response times. Unreliability in operation. <a href="part9.htm#bookmark222" class="a">These problems can be dealt with by ensuring that the system undergoes a thorough testing regime both during development and before full operation. It is important to test the system against all the requirements that have been elicited from the users. The approach to requirements capture and recording discussed in </a><span class="p">Chapter 6 helps in this respect.</span></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Poor documentation inhibits maintenance. <span class="p">Many computer information systems need to be modified after they have been implemented (this is known as maintenance), either to correct problems or to add new functionality. If the system is not documented then modifying the</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">system can be unnecessarily time consuming. If the system is appropriately documented it is much quicker to identify those parts of the system that need to be modified. An effective way of producing useful documentation is to follow a systematic approach (e.g. RUP) using a software development toolset. This makes it much easier to produce suitable documentation and to keep it up to date as the project progresses.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Local resistance to new information system. <span class="p">This can occur when a particular information system solution is being imposed by management without the agreement or support of the users. It can also occur when the information system is not seen as appropriate or relevant by the users. In all cases it is important to work with local management to reduce local hostility and this is likely to require user involvement in the project. This may allow alternative, more acceptable or more appropriate solutions to be found or at least a better demonstration of the value of the proposed information system.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark109">3.2.3 Productivity problems</a></p><p style="padding-top: 5pt;text-indent: 0pt;text-align: right;">The problems associated with productivity are typically addressed by using a systematic approach to systems development. The reuse of existing software or other artefacts of development, in the form of components, is a feature of many approaches to systems development. This together with a move to service-oriented architectures where software components provides services for the application can help to reduce the time to development and cost. Productivity problems may also be addressed by applying project management techniques. Project management techniques are described in Chapter 22 on the book website. <i>Implementation is not feasible</i>. On some projects it may become apparent that the implementation is not feasible only after a significant amount of time and money has been expended. Potential areas of difficulty should be identified early on in the project and prototypes constructed to determine the feasibility of implementation. Decisions can then be taken either to change the scope of the project so that it can be implemented or to cancel the</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">project.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Impossible targets. Time constraints. <a href="part31.htm#bookmark1041" class="a">The worst possible response to impossible targets is to continue with the project as if the targets do not matter. This will result in late delivery and user dissatisfaction. It is much better to have an open dialogue with the users and project sponsor about the difficulty of delivering the project within the time constraints given the objective of either increasing the time and resource available or reducing the requirements so that they can be delivered using the available resource and within the original time constraints. Frequently increasing the time or resource available is not a viable option because of increased cost or because the resource is not available or because the delivery deadline for the system is fixed by external factors. Omitting the least important requirements from a project needs careful negotiation with users and project sponsors. This should be done so that a useful product can be delivered on time. The management of the requirements to be delivered is a feature of several approaches and is very clearly described in the Dynamic Systems Development Method (DSDM) which is discussed in </a><span class="p">Chapter 21.</span></p><p class="s13" style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Requirements drift <span class="p">(</span>scope creep<span class="p">). It is quite common for potential users to identify new</span></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">requirements during systems development. If all additional requirements are included in the project it is quite likely that the delivery of the system will be delayed or even completely stalled. The addition of new requirements has to be controlled. The users and project sponsors need to understand when a new requirement is going to put the project back or cause an increase in cost or both. Agile approaches like DSDM or AUP offer greater flexibility in adding new requirements but the potential problems remain the same. A change control procedure should be put in place to manage changing requirements.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark110">Poor project control. Late delivery. Failure to deliver any system. Cost overrun. </a><span class="p">These four issues are features of poor project control. The late delivery of computerized information systems can be attributed to various factors: possible poor requirements capture causing reworking of the system late in the project; poor project management or time control; a failure to identify over-ambitious delivery dates; encountering unanticipated technical problems and many others. Cost overruns can be caused by late delivery (developers have to be paid for longer), using additional developers on the project to address late running or to overcome a particular technical problem or perhaps most mundanely, underestimating the cost of software and hardware resources for the development of the information system or its operation. Poor</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">project control is addressed by using appropriate project management techniques including risk identification and management. Alongside good project management an appropriate systematic approach to the development needs to be followed.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Developers not familiar with OO. <span class="p">Object-oriented methodologies and techniques are increasingly being used for software development. Many of the programming languages that are now used are object-oriented. However, there is still a significant proportion of development that uses non-object-oriented techniques and some developers may not be familiar with object-orientation. It is crucial that these developers are given the appropriate training before embarking upon a software development project that uses object-orientation. Failure to do this causes major problems as these developers inevitably will attempt to use O- O development environments and languages in a non-O-O manner which will not only negate any of the benefits of using an O-O approach but significantly reduce the likelihood of project success.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="188" height="25" alt="image" src="Image_140.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.3  </a><a href="part4.htm#bookmark4" class="s29">Project Lifecycles</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.3  </a><a href="part4.htm#bookmark4" class="s29">Project Lifecycles</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.3  </a><a href="part4.htm#bookmark4" class="s29">Project Lifecycles</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark112" class="a" name="bookmark111">A common theme in the indicative solutions discussed earlier is the need to use a systematic approach when developing information systems. There are many different approaches but most utilize, in some form or other, a general problem-solving approach. Figure </a><a href="part38.htm#bookmark1198" class="a">3.2 shows a general problem-solving model adapted from </a>Hicks (1991) that has six phases or stages. The phases <i>Data gathering </i>and <i>Problem redefinition </i>are concerned with understanding what the problem is about; the <i>Finding ideas </i>phase attempts to identify ideas that help us to understand more about the nature of the problem and possible solutions. <i>Finding solutions </i>is concerned with providing a solution to the problem and <i>Implementation </i>puts the solution into practice. This approach to problem solving divides a task into subtasks, each with a particular focus and objective.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="426" height="231" alt="image" src="Image_141.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark112">Figure 3.2 </a><a href="part38.htm#bookmark1198" class="s33">General problem-solving model (adapted from </a><span class="s21">Hicks, 1991).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark113">The information systems development process may be subdivided simply into three main tasks: understanding the problem, choosing and designing a solution, and finally building the solution. There are many other ways of subdividing an information systems project but they all include an analysis activity that identifies what the system should do, a design activity that determines how best to do it and some construction activity that builds the system according to the design. The phases that contain these activities are given various names but the core activities remain the same.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Subdividing the development process produces smaller tasks that can be managed more easily. This helps achieve the appropriate quality standards and makes project management and budgetary control easier. We have already alluded to the benefits to be gained from managing the software development process effectively and have explicitly identified poor project management as a source of many of the problems. Building a software system is very</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">different from building almost any other human artefact. Software is intangible, it cannot be weighed, its strength cannot be measured, its durability cannot be assessed, and its resistance to physical stress cannot be gauged. Of course we try to find (with some success) measures of a software system that enable us to make judgements about its size, its complexity, the resource required to build it, and so on. But these measures are much less well understood than their counterparts in the design and construction of tangible artefacts such as buildings.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.3.1 <b>Waterfall lifecycle model</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Just as an animal goes through a series of developmental stages from its conception to its demise so, it is argued, does a computerized information system. V arious lifecycle models can be applied to computerized information systems development. We will discuss some of the most commonly used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure 3.3 shows one version of the waterfall lifecycle. Strictly speaking this does not cover the complete lifecycle as there is no stage concerned with the retirement or decommissioning of the information system. Some lifecycle models are more comprehensive than others. Earlier in Section 3.2 we identified strategic information systems planning and business modelling as important precursors to information systems development, and these could be viewed as two preliminary stages. The successful completion of these activities should ensure that the information system that is developed is appropriate to the organization. It can be argued that these are part of the information systems development lifecycle. However, their focus is not on computerization, per se, but rather the identification of organizational requirements. Their importance is almost universally accepted for commercially oriented computer systems development. There is a distinction to be made between systems development, where a system may incorporate human, software and hardware elements, and software development that focuses primarily on software construction, although it involves the human users and the hardware upon which it executes. It is perhaps a matter of perspective. Thus a software development project is, by definition, focused solely on producing a software system that will satisfy the user requirements, whereas strictly speaking a systems development project has a wider scope and may not even include software as part of the solution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="349" alt="image" src="Image_142.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark114">Figure 3.3 </a><span class="s21">Waterfall lifecycle model.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1275" class="a">There are many variations of the waterfall lifecycle </a><a href="part38.htm#bookmark1252" class="a">(e.g. Pressman, </a><a href="part38.htm#bookmark1275" class="a">2009; Sommerville, 2007), differing chiefly in the number and names of phases, and the activities allocated </a><a href="part38.htm#bookmark1275">to</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">them. One of the benefits of using lifecycle models is that their phases have explicitly defined products or deliverables<a href="part38.htm#bookmark1276" class="s40">. </a><a href="part38.htm#bookmark1276" class="a">Sommerville </a><a href="part9.htm#bookmark115" class="a">(1992) suggests a series of deliverables produced by different phases of development, shown in </a>Fig. 3.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="337" alt="image" src="Image_143.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark115">Figure 3.4 </a><a href="part38.htm#bookmark1276" class="s33">Lifecycle deliverables (adapted from </a><span class="s21">Sommerville, 1992).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark116">These products can be used to monitor productivity and the quality of the activity performed. Several phases have more than one deliverable. If we need to show a finer level of detail to assist in the monitoring and control of the project, phases can be split so that each sub-phase has only one deliverable. Alternatively, a phase may be viewed as comprising a series of activities, each of which has a single deliverable and can be managed individually. Different types of project and different styles of organization may suit different styles of project lifecycle. When an organization embarks upon a systems development project it should specify the stages in the systems development process, their associated deliverables and the type of lifecycle to be used in a way that is applicable to its organizational context and the nature of the systems being developed.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As mentioned earlier the waterfall lifecycle has been used for many years and is the subject of several criticisms.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_144.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Real projects rarely follow such a simple sequential lifecycle. Project phases overlap and activities may have to be repeated.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_145.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">It is almost inevitable that some tasks will have to be repeated. For example inadequacies in the requirements analysis may become evident during design, construction or testing necessitating further requirements analysis, some potential reworking of design and further software construction and test. The cyclical repetition of tasks is termed iteration.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_146.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">A great deal of time may elapse between the initial systems engineering and the final installation. Requirements will almost inevitably have changed in the meantime and users find little use in a system that satisfies yesterday’s requirements but hampers current operations.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_147.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">It tends to be unresponsive to changes in client requirements or technology during the project. For example, if architectural decisions have been made during systems engineering they can be difficult to change. A technological innovation that may make it feasible to automate different parts of the whole system may become available after the project has been running for some time. It may not be possible to</p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;"><a name="bookmark117">incorporate the new technology without redoing much of the analysis and design work already completed.</a></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark75" class="a">The waterfall lifecycle, as an example of a systematic approach, does provide a structure for a systems development project which ameliorates some, but by no means all, of the problems discussed in Chapter </a>2. The effectiveness of an approach is dependent upon the type of project and the suitability of the techniques (e.g. analysis techniques such as data flow modelling which is briefly described on the book website). The waterfall approach is more suited to projects where requirements are stable and not likely to change during the development process, where there is less need for user involvement and where it is not necessary to see some parts of the information system (e.g. increments or prototypes) delivered during the development process. However, increasingly, these features are essential to successful development and consequently many development projects have moved away from the waterfall lifecycle. They are now adopting approaches that encourage greater user involvement, incremental delivery, iteration and possibly prototyping.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.3.2 <b>Prototyping</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Users may find it difficult to imagine how their requirements will be translated into a working system. When the waterfall model is used, the final working system is produced at the end of the project. This approach has a significant difficulty, in that the user only actually experiences how the system operates once it is delivered. The prototyping approach overcomes many of the potential misunderstandings and ambiguities that may exist in the requirements.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In software development a prototype is a system or a partially complete system that is built quickly to explore some aspect of the system requirements and that is not intended as the final working system. A prototype system is differentiated from the final production system by incompleteness and perhaps by a less-resilient construction. If the prototype is to be discarded once it has fulfilled its objectives, the effort required to build a resilient prototype would be wasted. A prototype will typically lack full functionality. It may have limited data processing capacity, it may exhibit poor performance characteristics or it may have been developed with limited quality assurance. Prototype development commonly uses rapid development tools, though such tools are also used for the development of production systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a">Prototypes may be constructed with various objectives in mind. A prototype may be used to investigate user requirements as described in Chapter </a><a href="part9.htm#bookmark117" class="a">5. For example, a prototype may be focused on the human–computer interface in order to determine what data should be presented to the user and what data should be captured from the user. A prototype might also be used to investigate the most suitable form of interface. A prototype may be constructed to determine whether a particular implementation platform can support certain processing requirements. A prototype might be concerned with determining the efficacy of a particular language or a database management system or the appropriateness of a technological choice (e.g. using hand-held devices for data capture in a factory). A lifecycle for prototyping is shown in </a>Fig. 3.5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;"><span><img width="435" height="234" alt="image" src="Image_148.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Figure 3.5 <span class="s21">A prototyping lifecycle.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;">The main stages required to prepare a prototype are as follows.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_149.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_150.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_151.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Perform an initial analysis. Define prototype objectives. Specify prototype.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_152.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Construct prototype.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_153.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Evaluate prototype and recommend changes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_154.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">If the prototype is not completed, repeat the process from the specify prototype stage.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">These are described in more detail below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Perform an initial analysis</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">All software development activity utilizes valuable resources. A prototyping exercise that lacks some initial analysis is likely to be an ill-focused and unstructured activity that produces poorly designed software. The initial analysis should determine the general requirements of the information system so that the particular aspects that should be prototyped can be identified.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Define prototype objectives</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Prototyping should have clearly stated objectives. A prototyping exercise may involve many iterations, each iteration resulting in some improvement to the prototype. This may make it difficult for the participants in a prototyping exercise to determine if there is sufficient value to continue the prototyping. However, with clearly defined objectives it should be possible to decide if they have been achieved. In most cases the objectives of the prototyping activity should be agreed with the users so that there is no misunderstanding as to what will be achieved. For example, if the prototype is only intended to explore the human–computer interface requirements, the users should not be led to expect the delivery of a working part of the application. If a prototype is only built to test whether some technical aspect of the system will work, it may not be appropriate to involve the users at all.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S pecify prototype</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark777" class="a">Although the prototype is not intended for extended operation it is important that it embodies the requisite behaviour. It is almost certainly the case that the prototype will be subject to modification and this will be easier if the software is built according to sound design principles. The approach to specification needs to be appropriate for the type of prototype. The techniques used to specify a prototype that focuses on testing the user interface (see </a><a href="part31.htm#bookmark964" class="a">Chapter 16) will be different from those to specify a prototype that aims to test some technical aspect of the system architecture and implementation (see </a>Chapter 19).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C onstruct prototype</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Since it is important that prototype development is rapid, the use of a rapid development environment is appropriate. For example, if an interactive system is being prototyped, environments such as Delphi or V isual Basic can be most effective.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Evaluate prototype and recommend changes</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The purpose of the prototype is to test or explore some aspect of the proposed system. The prototype should be evaluated with respect to the objectives identified at the beginning of the exercise. If the objectives have not been met, then the evaluation should specify modifications to the prototype so that it may achieve its objectives. The last three stages are repeated until the prototyping objectives are achieved.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Prototyping has the following advantages:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_155.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Early demonstrations of system functionality help identify any misunderstandings between developer and client.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_156.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_157.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Client requirements that have been missed are identified. Difficulties in the interface can be identified.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_158.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">The feasibility and usefulness of the system can be tested, even though, by its very nature, the prototype is incomplete.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Prototyping also has several problems and their impact on a particular project should be estimated before engaging in prototyping:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_159.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;"><a name="bookmark118">The client may perceive the prototype as part of the final system, may not understand the effort that will be required to produce a working production system and may expect delivery soon.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_160.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_161.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_162.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">The prototype may divert attention from functional to solely interface issues. Prototyping requires significant user involvement, which may not be available. Managing the prototyping lifecycle requires careful decision making.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark75" class="a">Prototyping may be used as a part of the larger development lifecycle to avoid some of the problems identified in </a>Chapter 2. For some projects it may be appropriate to use prototyping as the overall lifecycle approach. For example, if the requirements for the project are not clearly understood then repeated refinement of a prototype may be an effective way of producing the final system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.3.3 <b>Iterative and incremental development</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1184" class="a">A common thread in many current approaches to software development is an iterative lifecycle. In an iterative approach the project is made up of a series of development activities that are repeated. Each of these repetitions is an iteration and each can be viewed as a mini- project in its own right producing new artifacts or successively better or more complete artifacts. Gilb </a><a href="part38.htm#bookmark1120" class="a">(1988) suggests that successful large systems start out as successful small systems that grow incrementally. An incremental approach performs some initial analysis to scope the problem and identify major requirements. Those requirements that will deliver most benefit to the client are selected to be the focus of a first increment of development and delivery. The installation of each increment provides feedback to the development team and informs the development of subsequent increments. Boehm’s </a>(1988) spiral model can be viewed as supporting incremental delivery.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark119" class="a">Figure </a>3.6 shows how Boehm’s spiral model can be adapted to suit incremental delivery. Note that prototyping may be used either during the risk analysis or during the software development part of the development cycle.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="513" height="281" alt="image" src="Image_163.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark119">Figure 3.6 </a><a href="part38.htm#bookmark1120" class="s33">Spiral model for incremental delivery (adapted from </a><span class="s21">Boehm, 1988).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark120">Iterative development may result in incremental delivery, though some approaches produce the increments only for internal release to the development team and not for external release</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">to the client. An increment is part of the final delivered system and could include any development artifacts (e.g. requirements documentation, some working software). Many current approaches are categorized as iterative and incremental to reflect the iterative nature of the development process and the incremental nature of the system delivery.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="270" height="25" alt="image" src="Image_164.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.4 </a><a href="part4.htm#bookmark4" class="s29">M ethodological Approaches</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.4 </a><a href="part4.htm#bookmark4" class="s29">M ethodological Approaches</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.4 </a><a href="part4.htm#bookmark4" class="s29">M ethodological Approaches</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark75" class="a" name="bookmark121">A methodology comprises an approach to software development, a set of techniques and notations that support the approach, a lifecycle model to structure the development process and a unifying set of procedures and philosophy. For example, RUP is an object-oriented methodology  that  uses  UML  and  follows  an  iterative  and  incremental  lifecycle.  A methodological approach is a coherent and consistent systematic approach to development. Adopting an appropriate methodology for an information systems development project is one of the most important factors in minimizing the problems that we discussed in </a><a href="part31.htm#bookmark1041" class="a">Chapter 2. In this text we do not espouse a particular named methodology but apply object-oriented techniques in a co-ordinated and methodical fashion using UML. Methodologies are discussed in more detail in Chapter </a><a href="part9.htm#bookmark75" class="a">21 but we introduce some important examples here to illustrate how they address the problems from </a>Chapter 2.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One of the major influences on the quality of the systems developed is the approach adopted. If the approach used is not appropriate for a particular type of application then it may limit the quality of the system being produced. We believe that the methodological approach adopted should be based upon object-orientation. Object-orientation provides a way of describing real-world problems in terms of abstractions from which software can be developed effectively. The increasing complexity of information systems makes the use of an object- oriented approach more important. Object-orientation provides conceptual structures that help to deal with the development of complex information systems by splitting the system into smaller, less complex parts that interact. It also aims to provide ways to support the reuse of program code, design and analysis models helping to improve quality and productivity.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.4.1 <b>U nified Software Development Process</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="a">The Unified Software Development Process (USDP) (Jacobson et al., </a><a href="part9.htm#bookmark138" class="a">1999) arose from a desire to produce a single common methodological approach for object-oriented software development by bringing together best practice in the 1990s. The movement to produce a unified process resulted in the definition of the Unified Modelling Language (UML) which is considered in detail from Chapter </a><a href="part38.htm#bookmark1211" class="a">4 onwards. USDP reflected the emphasis in the 1990s on iterative and incremental lifecycles. It built upon previous approaches by Jacobson et </a><a href="part38.htm#bookmark1121" class="a">al. (1992), </a><a href="part38.htm#bookmark1211" class="a">Booch (1994) </a><a href="part38.htm#bookmark1263" class="a">and </a><a href="part38.htm#bookmark1211" class="a">Rumbaugh et al. (1991). USDP incorporates UML and </a><a href="part31.htm#bookmark1041" class="a">comprises much good advice on software development. USDP will be discussed in more detail later (Chapter </a>21). The IBM Rational Unified Process (RUP) incorporates much of the practice embodied in USPD and has been developed significantly beyond the specification of USDP by Jacobson et al. in 1999.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><a href="part9.htm#bookmark122" class="a">A development cycle for the USDP is illustrated in </a>Fig. 3.7 and comprises four phases.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_165.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_166.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Inception <span class="p">is concerned with determining the scope and purpose of the project. </span>Elaboration <span class="p">focuses on requirements capture and determining the structure of the system.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_167.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Construction<span class="p">’s main aim is to build the software system.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_168.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Transition <span class="p">deals with product installation and rollout.</span></p><p style="padding-left: 49pt;text-indent: 0pt;text-align: left;"><span><img width="474" height="468" alt="image" src="Image_169.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark122">Figure 3.7 </a><a href="part38.htm#bookmark1210" class="s33">The Unified Software Development Process (adapted from </a><span class="s21">Jacobson et al., 1999).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark122" class="a">A development cycle may be made up of many iterations. In </a>Fig. 3.7 there are two iterations in the inception phase and three in the construction phase. The actual number of iterations in each phase varies from project to project. At the end of each iteration an increment is delivered and its composition may range from elements of a requirements model to working program code for a portion of the system. In the USDP an increment is not necessarily additive; it may be a reworked version of a previous increment.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark123">The diagram also illustrates that a phase may involve a series of different activities or workflows. This is different from the waterfall lifecycle, in which each phase largely comprises a single activity. The inception phase may include elements of all of the workflows, though it is likely that design, implementation (i.e. constructing the software) and test would be focused on any necessary exploratory prototyping. However, most commonly, inception would involve primarily the requirements and analysis workflows.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">RUP has the same phases as USDP but has a more extensive series of workflows or activities (they are called disciplines in RUP). They are:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_170.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Business modelling <span class="p">focuses on understanding the business, its current problems and areas for possible improvement.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_171.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Requirements <span class="p">describes how to identify and document user requirements.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_172.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Analysis and design <span class="p">is concerned with building analysis and design models from which the system can be constructed.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_173.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Implementation <span class="p">deals with the coding and construction of the system.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_174.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_175.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Test <span class="p">verifies that the products developed satisfy the requirements identified. </span>Deployment <span class="p">deals with product releases and the delivery of the software to the end users.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark104" class="a">These disciplines embody the procedures and techniques (using UML) that address many of the problems listed in Figure </a>3.1. For example, <i>business modelling </i>along with <i>strategic information systems plannin</i>g helps to ensure that the correct problem is addressed for the correct reasons<i>. Requirements </i>and <i>analysis and design </i>provide the detailed guidance needed to ensure that requirements capture is performed effectively, and that this is followed by detailed and thorough analysis and design.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The <i>test </i>discipline includes testing for reliability, functionality, application performance and system performance. All of these aspects contribute to the effective operation of a system. The <i>deployment </i>discipline provides guidance and techniques so that the software installation and the operation of the working system satisfy user requirements.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There  are  also  three  supporting  disciplines:  <i>configuration  management</i>,  <i>project management </i>and <i>environment</i>. These activities provide guidance and advice on controlling and managing the development project and are discussed in Section 3.5.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1104" class="a">One extension to the RUP is the Enterprise Unified Process (EUP) (Ambler et al., </a>2005). This includes two additional phases after <i>transition</i>: <i>production </i>and <i>retirement</i>. <i>Production </i>is concerned with the operation of the information system during its working life. <i>Retirement </i>deals with decommissioning the system when it is no longer seen as useful.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.4.2 <b>Agile approaches</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A group of software developers and methodology authors met in February 2001 and produced a manifesto for <i>Agile </i><a href="part9.htm#bookmark124" class="a">software development. Their objective was to introduce approaches to software development that are less bureaucratic, less focused on documentation and more focused on user interaction and the early delivery of working software than current heavyweight methodologies. Their manifesto is shown in its entirety in </a>Fig. 3.8. The preference for customer collaboration over contract negotiation in the manifesto suggests the need to adopt new forms of customer relationship that acknowledge that requirements change during software development. This in turn emphasizes the key importance of strong customer or user involvement.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="182" alt="image" src="Image_176.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark124">Figure 3.8 </a><span class="s21">The Manifesto for Agile Software Development.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1114" class="a" name="bookmark125">Problems with some of the methodologies in the 1980s and 1990s that incorporated the waterfall lifecycle included unresponsiveness to change and a highly bureaucratic approach to analysis and design that was also heavy on documentation. USDP and RUP were also considered by some developers to be processes that required too much documentation and were too bureaucratic. In order to overcome some of these problems, iterative lightweight approaches emerged that were typically used for small to medium business information systems where there was appreciable requirements change during the life of the project. XP (Extreme Programming) is an early example of such an approach (Beck, </a>2004). XP does not emphasize early analysis and design documentation and is an iterative and incremental approach. It is an example of a group of lightweight methodologies that are now termed ‘Agile’. A fundamental feature of Agile approaches is the acceptance that user requirements will change during development and that this must be accommodated by the development process. DSDM (Dynamic System Development Method) is viewed by some as another</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1178" class="a">example of an Agile approach (Fowler, </a><a href="part31.htm#bookmark1041" class="a">2004). Both XP and DSDM are described further in </a>Chapter 21.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1250" class="a">RUP can also be used in an Agile manner (</a><a href="part38.htm#bookmark1103" class="a">Pollice, 2001). The Agile Unified Process (AUP) (</a>Ambler, 2009) is one cut-down version of RUP and, as its name suggests, is considered to be an Agile approach. AUP has the same phases as RUP (and USDP) but incorporates business modelling, requirements, and analysis and design into a single discipline called <i>model</i><a href="part9.htm#bookmark104" class="a">. The Essential Unified Process (EssUP) simplifies AUP even further. These Agile approaches aim to address the quality problems listed in </a>Figure 3.1 and also many of the productivity problems by using a lightweight approach.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1122" class="a">In many ways Agile approaches are the antithesis of methodologies based on the waterfall lifecycle model, which assume a belief that requirements are fixed. The degree to which requirements are subject to change during software development varies from project to project. The approach that is being used should be capable of coping with change in requirements. Nonetheless, the importance of effective requirements capture, documentation, analysis and design should not be underestimated irrespective of the size of project. </a>Boehm (2002) draws a distinction between plan-based and Agile methods and suggests that both have their place. (As one might expect, the emphasis on planning early in the project varies from one Agile methodology to another.) The need for systems that dependably deliver agreed requirements suggests that planning and effective analysis and design with appropriate documentation have an important role in software development. One possible criticism of Agile approaches is that they rely heavily upon the experience and ability of the development team. Approaches like RUP (and possibly AUP) overcome this by providing much more detailed guidance on what artifacts to produce, what process to follow and what project roles are needed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="405" height="25" alt="image" src="Image_177.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.5 </a><a href="part4.htm#bookmark4" class="s29">M anaging Information Systems Development</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.5 </a><a href="part4.htm#bookmark4" class="s29">M anaging Information Systems Development</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.5 </a><a href="part4.htm#bookmark4" class="s29">M anaging Information Systems Development</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark126">Good management of an information systems development project can reduce the likelihood of many problems. These include requirements drift, late delivery and cost overrun. For example, the three supporting disciplines of RUP help to manage a development project:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_178.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Configuration management <span class="p">is concerned with version control of the documents and artifacts produced and also with the management of change requests.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_179.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Project management <span class="p">deals with project planning and control at the phase level describing the overall project and at more detailed level for each of the iterations.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_180.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Environment <span class="p">is concerned with tailoring the development process, ensuring that it and its support tools are appropriate for the project.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Configuration management helps address the issues of requirement drift by including a process to manage and control change requests. This can ensure that potential changes to requirements during the development are examined to determine their impact on the delivery schedule and the project cost. It is then a matter of discussion with the project sponsors whether the benefits gained from the change outweigh any delay or cost overrun.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Effective project management is essential to ensure that the project runs to schedule and that costs are controlled. In RUP the project management discipline focuses on planning both at the phase level for the project as a whole and at iteration level within the phases. It also includes project monitoring to determine how the project is progressing and risk management to identify and take action to ameliorate any risks. This is a narrow view of project management. In addition it is necessary to manage the human resources in terms of employment and allocation to tasks, the budget in terms of resources allocated to different tasks and activities, and perhaps the contracts for the hardware and software to support the development. It is also important to manage the relationship with the customer. Some approaches include these aspects as part of the project management activity. No matter how they are categorized, human resource management, budget management and contract management are important to the success of a project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">3.5.1 <b>Iterative lifecycle</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The iterative lifecycle is fundamental to many of the modern approaches to systems development (e.g. RUP) and offers the following:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_181.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_182.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_183.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_184.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">risk mitigation change management team learning improved quality.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Risk mitigation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An iterative process enables the identification of potential risks and problems earlier in the life of a project. The early emphasis on architecture and the fact that construction, test and deployment activities are begun early on make it possible to identify technological problems and to take action to reduce their impact. Integration of subsystems is begun earlier and is less likely to throw up unpleasant surprises at the last minute.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark127">C hange management</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Users’ requirements do change during the course of a project, often because of the time that projects take, and often because until they see some results they may not be sure what they want. This last point is sometimes referred to as IKIWISI—‘I’ll Know It When I See It’. In a waterfall lifecycle changing requirements are a problem; in an iterative lifecycle there is an expectation that some requirements activities will still be going on late in the project and it is easier to cope with changes. It is also possible to revise decisions about technology during the project, as the hardware and software available to do the job will almost certainly change during the project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Team learning</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Members of the team, including those responsible for testing and deployment, are involved in the project from the start, and this makes it easier for them to learn about and understand the requirements and the solution. They are not suddenly presented with a new and unfamiliar system. It is also possible to identify training needs and provide the training while developers are still working on an aspect of the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Improved quality</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Testing of deliverables begins early and continues throughout the project. This helps to prevent the situation where all testing is done in a final ‘big bang’ and there is little time to resolve bugs that are found.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">The successful management of a software development project is important for its success.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="186" height="25" alt="image" src="Image_185.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.6 </a><a href="part4.htm#bookmark4" class="s29">U ser Involvement</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.6 </a><a href="part4.htm#bookmark4" class="s29">U ser Involvement</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.6 </a><a href="part4.htm#bookmark4" class="s29">U ser Involvement</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark128">Continued and effective user involvement throughout the project is an important factor in maximizing the chance of success. The traditional waterfall lifecycle is less amenable to user involvement during the whole project and hence is less likely to stay in line with the changing user requirements. A prototyping approach is normally dependent upon continuing user involvement and by its very nature encourages it. However, care has to be taken to ensure that the users have sufficient time to perform their roles effectively. In prototyping, the evaluation of the prototype requires significant time from the users.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Users can be involved in projects at various levels and can play many different roles. Some approaches to software development (e.g. DSDM) directly involve users in the development team, so that they then have a significant opportunity to influence the way the project proceeds, perhaps by identifying difficulties and suggesting more acceptable alternatives. It is important that users who have such a significant influence on the direction of the project should understand the organizational requirements and the needs of fellow users. Direct involvement of users is more likely to be successful if they are considered as full members of the project team and if they are genuinely empowered to represent the organization and make decisions within clearly defined operating parameters. There is always a danger that users</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark129">who become members of a project team cease over time to represent the user perspective effectively, as they begin to view themselves more as a team member and less as a user representative. One way of overcoming this tendency is to rotate membership of the development team among a group of users. However, this can result in a loss of continuity. A more satisfactory approach is to scope each activity so that a user team member can see it through to completion in a reasonably short time, say within three months.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">User involvement as participants only in fact gathering is at the other end of the spectrum. Such users may provide information about current working practice but they have little or no influence on the design of the new system. In this situation users are likely to be concerned about the project and may fear the effect it will have on their jobs. As a result, they may be less co-operative and will be less willing to take ownership of the new system when it is installed.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Even when users are not invited to join the project team, effective participation can still be encouraged through a consultative approach. Procedures are set up so that users are able to review certain aspects of the systems development, provide feedback, give their views of the system and then are able to see the response of the project team to their feedback. In some circumstances a large part of the task of requirements capture may be delegated to users. They are likely to feel a strong affinity to the delivered system, provided that it satisfies the requirements they specified.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Whatever form of involvement users have with the project, it is important that their role is carefully explained and that training is given as required. Some large organizations have gone to the trouble of training users so that they understand the terminology and models used by the systems developers. Users must also be given the time to participate. It is no good expecting users to review requirements documents effectively if the only time they have available is during their lunch break.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Users who participate in a systems development project can be selected in various ways. They can be designated by management as being the most appropriate representatives or they can be selected by their peers. In either circumstance they must be genuine representatives of the user perspective.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark130" class="a">A responsibility assignment matrix (RAM) is a useful way of delineating roles and responsibilities for a project. The matrix normally has tasks or deliverables listed in the left- hand column and roles listed along the top row. Roles should be distinguished from individuals in the project team. A particular role can be performed by several people and one individual may occupy several roles. One form of RAM is a RACI matrix. RACI is an acronym for responsible, accountable, consulted and informed. A simple example of a RACI matrix is shown in Figure 3.9. The responsibilities that are normally assigned in the matrix are listed below with examples from </a>Figure 3.9.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_186.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Responsible <span class="p">– the role that does the work to perform the task or produce the deliverable. For example, the applications development role builds the software increments.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_187.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Accountable <span class="p">– the role that is accountable for the completion of the task or production of the deliverable; only one </span>accountable <span class="p">role is assigned to each task or deliverable. For example, the project sponsor is accountable for the Project Initiation Document and must ensure that it is produced by the project manager.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_188.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Consulted <span class="p">– the role whose opinions are sought. For example, the user representative is consulted about the Use Case Model.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_189.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Informed <span class="p">– the role that is kept up to date on progress. For example, the user representative is informed about the development of the software increments.</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="283" alt="image" src="Image_190.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark130">Figure 3.9 </a><span class="s21">RACI matrix.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="275" height="25" alt="image" src="Image_191.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.7  </a><a href="part4.htm#bookmark4" class="s29">Software Development Tools</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.7  </a><a href="part4.htm#bookmark4" class="s29">Software Development Tools</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.7  </a><a href="part4.htm#bookmark4" class="s29">Software Development Tools</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark131">Computer Aided Software Engineering (CASE) tools have been widely available since the mid- 1980s and now provide support for many of the tasks the software developer must undertake. The broadest definition of CASE includes the use of software tools for any technical, administrative or managerial aspects of software development. These software development tools range from modelling tools for the development of analysis and design models (frequently in the form of diagrams) and development environments for writing program code to project management tools. Modern software development tools provide an increasingly wide range of facilities and cover most lifecycle activities. Key features are discussed in turn below.</a><a name="bookmark132">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.7.1 <b>M odel and techniq ue support</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Software development tools for modelling provide facilities to draw diagrams and prepare other models. Many tools provide specific support for standard notations like UML. These tools typically offer a range of features including:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_192.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_193.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">checks for syntactic correctness repository support</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_194.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_195.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_196.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">checks for consistency and completeness navigation to linked diagrams or models layering</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_197.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_198.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">traceability report generation</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_199.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_200.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">system simulation performance analysis.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">These features are described in turn below:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S yntactic correctness</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The software development tool checks that the correct symbols are being used on the diagrams and that they are being linked in permissible ways but does not ensure that it is meaningful or relevant to client requirements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Repository</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A repository may contain diagrams, descriptions of diagrams and specifications of all the elements in the system. Some tool vendors use the term ‘encyclopaedia’ instead of repository.</p><p class="s26" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">C onsistency and completeness</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Most software development tools support various models that capture different aspects of the system. As all relate to the same system, it is important that any one element that appears on several diagrams or models (perhaps viewed from different perspectives) should be presented consistently. Most approaches to analysis and design stipulate that certain diagrams must be completed and that the elements referred to in those diagrams must all be documented in the repository. To manually check the consistency and completeness of a system of any significant size is a task that is very onerous, time-consuming and error-prone. A good software development tool may check the consistency and completeness of a large model in seconds and provide the developer with a comprehensive report on any inconsistencies found or omissions identified.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Navigation to linked diagrams</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A complex system is likely to require many models to describe its requirements and its design. For a software development tool to be usable, easy navigation between linked diagrams is essential. For example, double-clicking on a component at one level of abstraction may automatically open up a diagram that describes it at a more detailed level. It is also helpful to be able to move directly from one view that contains a particular element to another view that contains the same element.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Layering</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An information system of any significant size is by its nature complex and it is unlikely that all relationships between its components can be shown on a single diagram. Just as maps are drawn at different scales with different levels of detail, system models are produced at various levels of abstraction. A high-level diagram may represent the relationships between large components such as subsystems. A diagram drawn at a lower level of abstraction may describe the elements within a particular component in detail. In order to cope with complexity, we divide the system into manageable chunks and link them in layers. A good software development tool provides a capability to layer the models of the system at different levels of abstraction. The consistency and completeness checking discussed earlier should also check that the representations of one element at different levels of abstraction are consistent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Traceability</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark133">Most of the elements created during the development of an information system are derived from other elements, and the connections between them should be maintained. It must be possible to trace through from the repository entries that describe a particular requirement to the program code that provides the functionality that satisfies the requirement. If a requirement changes, the maintenance activity is easier if all the code that implements that requirement can be readily identified. It should be possible to trace all requirements from the analysis documentation, through the design documentation to the implemented code. This feature is known as requirements traceability.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Report generation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Complex systems involve modelling many elements. Comprehensive reporting capabilities improve the usability of a software development tool by ensuring that the developer can easily obtain information about the models for a system in suitable formats. In fact, a software development tool would be of little use if the information it held about a project were not readily available, no matter how effective it was in other respects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S ystem simulation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">When a software development tool has been populated with models of an application it should be possible to simulate some aspects of system behaviour. For example, how does the system respond to a particular event? Some software development tools provide capabilities that enable a software developer to examine the consequences of a design decision without the need to actually build the software.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Performance analysis</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The performance of a system is an important ingredient in its success. For example, a system that supports staff who deal directly with customer enquiries should be able to respond quickly to a query about the availability of a certain product. If customers are kept waiting for too long, this will probably result in lost sales. The analysis of performance is particularly difficult for an application  that  runs  on  multiple  processors  and  uses  a  complex  communications infrastructure. Some software development tools provide the capability to perform a ‘What if’ analysis to examine the implications of alternative implementation architectures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.7.2 <b>Software construction</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Software development tools can offer a range of features to support software construction and maintenance. These include code generation and maintenance tools.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C ode generators</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The capability to generate code directly from a design model is a major benefit to the developer for several reasons. First, a working software system is likely to be produced more quickly. Second, one source of error is largely removed when the code is produced automatically and consistent with the design. Third, when requirements change, a consequent change to the design documentation can be followed by automatic code generation. If the application logic is defined completely and precisely in the design model, full code generation is possible. If a design model contains detailed operation specifications (these define how the system will function), then it is likely that a code framework can be generated to which further code can be added. In order to reduce the level of detail required for the design model, code generators may make certain assumptions concerning the implementation. Code generators are available for many different languages and development environments and are likely to include the capability to generate database schemas for the major proprietary database management systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark134">M aintenance tools</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Software maintenance is a major issue. All systems are subject to change as the enterprise changes, perhaps in response to legislative change. V arious tools are available to help with systems maintenance. For some programming languages, reverse engineering tools are available that can generate design documentation directly from program code (although if the program code is poorly structured the resulting design documentation may be of little use). Tools are also available that can analyse program code and identify those parts that are most likely to be subject to change.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">3.7.3 <b>Benefits and difficulties of using software development tools</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Software development tools can bring many benefits to the development activity. They help to standardize the notation and diagramming standards used within a project, and this aids communication among the team members. They can perform automatic checks on many aspects of the quality of the models produced by analysts and designers. The report generation capabilities of a software development tool reduce the time and effort that needs to be spent by analysts and designers in retrieving data about the system upon which they are working. Where a software development tool can carry out automatic code generation, this further reduces the time and effort that is required to produce a final system. Finally, the electronic storage of models is essential to the reuse of models, or components of them, on other projects that address similar analysis or design problems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Like any other technology, software development tools also have their disadvantages. These include limitations in the flexibility of the documentation that they can provide. However, some software development tools include the capability to specify and tailor documentation templates to suit particular reporting requirements. The development approach may also be limited by the need to work in a particular way in order to fit in with the capabilities of the software development tool. The ability of a software development tool to check all models for their consistency, completeness and syntactic correctness can in itself give rise to a danger. Developers may make the erroneous assumption that, because their models are correct in those specific senses, they are therefore also necessarily relevant to user requirements. There</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">are also certain costs attached to the installation of a software development tool. Aside from the cost of the software and manuals, there is also likely to be a significant cost in additional training for developers who will be expected to use the software development tools.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">On balance software development tools can provide useful and effective support for the software development activity, but it requires appropriate management for this to be achieved without any adverse side-effects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="122" height="25" alt="image" src="Image_201.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">3.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark135">We have considered how to avoid the problems that typically arise during information systems development. Several strategies have been discussed. Lifecycle models are used to provide structure and management leverage for the development process itself. User involvement is crucial to ensure relevance and fitness for purpose of the delivered system. Furthermore, many of the difficulties that may occur during installation are reduced if ownership of the proposed system has been fostered by effective participation during development. An evolving range of methodological approaches to information systems development is available and a key factor for success is matching the most appropriate approach to project and organizational requirements. Finally, we discussed the importance of software development tool support for the software developer.</a><a name="bookmark136">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:242pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;text-indent: -26pt;text-align: left;">3.1  <span class="s16">What are the key approaches that may be used to overcome quality problems in software systems development?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">3.2  <span class="s16">What are the disadvantages of the waterfall lifecycle model?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">3.3  <span class="s16">How are some of the disadvantages listed in your answer to Q uestion 3.2 overcome?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">3.4  <span class="s16">What is prototyping?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">3.5  <span class="s16">How does prototyping differ from incremental development?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;text-indent: -26pt;text-align: left;">3.6  <span class="s16">What are the different ways of involving users in the systems development activity? What are potential problems with each of these?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">3.7 <span class="s16">How do ‘syntactic correctness’, ‘consistency’ and ‘completeness’ differ from each other?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">3.8  <span class="s16">What does requirements traceability mean?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;text-indent: -26pt;text-align: left;">3.9  <span class="s16">Why is it not enough for a diagram to be syntactically correct, consistent and complete?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">3.10 <span class="s16">What is the purpose of a repository?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:136pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 32pt;padding-right: 12pt;text-indent: -23pt;text-align: left;">3.A <a href="part9.htm#bookmark22" class="s36">Read the Case Study </a><span class="s16">Chapter B1. What lifecycle model would you recommend for the development of the production control system for FoodCo? Justify your decision.</span></p><p class="s35" style="padding-left: 32pt;text-indent: -23pt;text-align: left;">3.B <span class="s16">For a CASE tool with which you are familiar, explore and critically assess the consistency and completeness checking facilities available.</span></p><p class="s35" style="padding-left: 32pt;text-indent: -23pt;text-align: left;">3.C <span class="s16">For a CASE tool with which you are familiar, explore and critically assess its system generation capabilities.</span></p><p class="s35" style="padding-left: 32pt;text-indent: -23pt;text-align: left;">3.D <span class="s16">In your library find references for three lifecycle models not discussed in this chapter. Briefly review each of these lifecycle models.</span></p><p class="s35" style="padding-left: 32pt;text-indent: -23pt;text-align: left;">3.E <span class="s16">Research at least one Agile methodology and explore its capability for large-scale information systems development.</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:12pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_202.png"/></span></p><p class="s7" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1198" class="s6">Hicks </a><a href="part38.htm#bookmark1252" class="s6">(1991) provides a comprehensive introduction to problem-solving skills that are valuable to the software developer. Sommerville (2007) and Pressman </a><a href="part38.htm#bookmark1184" class="s6">(2009) provide good discussions of lifecycle issues. Gilb </a><a href="part38.htm#bookmark1286" class="s6">(1988) contains much good advice concerning software development and is well worth reading. Texel and Williams </a>(1997) suggest a detailed object-oriented lifecycle model that includes 17 stages. A lifecycle with such a large number of delineated stages is probably more suited to large projects. If used for small projects the management overhead is likely to be excessive.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1123" class="s6">Jacobson, Booch and Rumbaugh </a><a href="http://www-306.ibm.com/software/rational/index.html" class="s6" target="_blank">(1999) provide a description of the USDP and further information on the   IBM-Rational   variant   of   the   USDP   can   be   found   at   </a><a href="part38.htm#bookmark1178" class="s6">http://www- </a><a href="http://www-306.ibm.com/software/rational/index.html" class="s6" target="_blank">306.ibm.com/software/rational/index.html. Beck (2004) offers the seminal description of XP and </a><a href="part38.htm#bookmark1178" class="s6">Fowler (2004)   provides   a   very   readable   review   of   Agile   approaches   </a><a href="http://www.martinfowler.com/articles/newMethodology.html" class="s6" target="_blank">at </a><a href="part38.htm#bookmark1221" class="s6">http://www.martinfowler.com/articles/newMethodology.html. Larman </a><a href="part38.htm#bookmark1122" class="s6">(2003) discusses Agile and iterative and development approaches. DeMarco and Boehm </a><a href="http://agilemanifesto.org/" class="s6" target="_blank">(2002) conduct an interesting dialogue about Agile approaches. More information regarding the Agile manifesto can be found at </a><a href="http://www.ambysoft.com/unifiedprocess/agileUP.html" class="s6" target="_blank">http://agilemanifesto.org/. A useful discussion concerning AUP can be found at </a><a href="part38.htm#bookmark1104" class="s6">http://www.ambysoft.com/unifiedprocess/agileUP.html and EUP is described in detail in Ambler et al. </a>(2005).</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;">Many software development tools are in widespread use and increasingly are providing support for the UML standard, though the styles of implementation do vary.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_203.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:344pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark137">LEARNING OBJECTIVES</a><a name="bookmark138">&zwnj;</a></p></td><td style="width:96pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_204.jpg"/></span></p></td></tr><tr style="height:68pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 34pt;padding-right: 155pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_205.jpg"/></span><span class="s17"> </span>the fundamental concepts of object-orientation <span><img width="20" height="13" alt="image" src="Image_206.jpg"/></span><span class="s38"> </span>the justifications for an object-oriented approach <span><img width="20" height="13" alt="image" src="Image_207.jpg"/></span><span class="s38"> </span>how object-orientation is used in practice.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="144" height="25" alt="image" src="Image_208.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark139">Object-orientation is an approach to systems development that helps to avoid many of the problems and pitfalls described in earlier chapters. In this chapter, we lay the foundations for understanding this approach by presenting an explanation of the main concepts. As the name suggests, the most important of these is the object. Using objects is a particular way of organizing a computer program. In an object-oriented program, data is encapsulated (or bundled together) with the functions that act upon it. This is fundamentally different from most of the earlier approaches to program organization. These typically stressed the separation of data and functions. An object is also a conceptual unit of both analysis and design. Thus the same conceptual unit links analysis to design and implementation. This, more than anything else, is what makes it possible for object-oriented projects to follow an iterative lifecycle.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark140">Apart from the object itself, the most important concepts are class, instance, generalization and specialization, encapsulation, information hiding, message passing and polymorphism. In this chapter, we will explain what the parts of an object-oriented system are and how they use message passing to isolate one part of a system from the effects of changes to another. Mostly this boils down to controlling the complexity of the system as a whole by keeping the interfaces between subsystems as simple as they can be. Practical examples and analogies are used to illustrate the theoretical points wherever this is appropriate. Even experienced developers who are new to object-orientation sometimes find the transition difficult. You will need a sound grasp of the basic concepts before you can apply the techniques of object-orientation in an effective way.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="172" height="24" alt="image" src="Image_209.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.2  </a><a href="part4.htm#bookmark4" class="s29">Basic Concepts</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.2  </a><a href="part4.htm#bookmark4" class="s29">Basic Concepts</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.2  </a><a href="part4.htm#bookmark4" class="s29">Basic Concepts</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark141">The most important concept is the </a><i>object </i>itself, and it is to this that we first pay attention. The other concepts explained in this section are strongly dependent on each other, and all contribute to an adequate understanding of the way that objects interact, and thus to their significance for information systems.</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">4.2.1 <b>Objects</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1139" class="a">In one of the very earliest books on object-oriented analysis and design, Coad and Yourdon (1990) define </a><a href="part38.htm#bookmark1139" class="s40">object </a><a href="part38.htm#bookmark1139">as follows:</a></p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">An <i>abstraction </i>of something in a problem domain, reflecting the capabilities of the system to keep information about it, interact with it, or both.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Abstraction in this context means a form of representation that includes only what is important or interesting from a particular viewpoint. A map is a familiar example of an abstract representation. No map shows every detail of the territory it covers (impossible, in any case, unless it were as large as the territory, and made from similar materials!). The purpose of the map guides the choice of which details to show, and which to suppress. Road maps concentrate on roads and places, and often omit landscape features unless they help with navigation. Geological maps show rocks and other subsurface strata, but usually ignore towns and roads. Different projections and scales emphasize parts of the territory or features that have greater significance. Each map is an abstraction, partly because of the relevant features it reveals (or emphasizes), and also because of the irrelevant features it hides (or de- emphasizes). Objects are abstractions in much the same way. An object represents only those features of a thing that are deemed relevant to the purpose for which it is being analysed, and hides those features that are not relevant.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The system to which Coad and Yourdon refer is the proposed object-oriented software</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">system, whose development is under consideration. However, we should note that other systems are also involved, in particular the human activity system. We must understand this before we can specify an appropriate software system. Objects are used in the requirements and analysis workflows to model an understanding of the application domain (essentially part of a human activity system). Objects are also understood in the design and implementation workflows to be models of, and indeed parts of, the resulting software system. These are distinct purposes and there will be some occasions when we need to be clear about which meaning is intended.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Rumbaugh et al. (1991) explicitly recognize this dual purpose.</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">We define an <i>object </i>as a concept, abstraction, or thing with crisp boundaries and meaning for the problem at hand. Objects serve two purposes: They promote understanding of the real world and provide a practical basis for computer implementation.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In the Agate case study, one concept is the ‘campaign’. Campaigns are clearly important, but they are intangible and difficult to define with precision. They really exist only as a relationship between a client (say Yellow Partridge, a jewellery company), the account manager, some other staff, some advertisements and various tasks and components that go into creating advertisements.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is often necessary to model relationships between people, organizations and things such as contracts, sales or agreements. While intangible, some of these relationships are long lasting and can have a complex influence on how people and other things in the application domain are able to act.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Let us take a simple example. Imagine buying a tube of toothpaste in your local supermarket. On one level, this is just a sale, an exchange of money for goods. On a deeper level you may be entering into a complicated relationship with the shop and the manufacturer. This depends on other factors: e.g. the warranty may vary depending on the country that you are in at the time of the purchase, and perhaps the sale will earn points for you on a loyalty card. Perhaps the packaging includes a money-off coupon for your next purchase, or a contest entry form that must be accompanied by a valid proof of purchase. Now suppose you find something wrong with the toothpaste—you may be able to claim a refund or replacement. Maybe you can even sue the shop for damages. We cannot understand the business without understanding these possible consequences of the sale in some appropriate way. In this case, the real-world ‘sale’ will almost certainly be modelled as an object in the system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">At a fairly abstract level, when choosing the objects we wish to model—in fact, at the level that corresponds to a mapmaker—we need to ask: ‘What sort of map is this, what details should it show, and what should it suppress?’ All objects in a model of an information system have certain similarities to all other objects, summarized by Booch in the statement that an</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1121" class="a">object ‘has state, behaviour and identity’ (Booch, </a>1994). Here, ‘identity’ means simply that every object is unique, while ‘state’ and ‘behaviour’ are closely related to each other. ‘State’ represents the condition that an object is in at a given moment, in the sense that an object’s state determines which behaviours, or actions, an object can carry out in response to a given event. For a software object, ‘state’ is the sum total of the values of the object’s data (interpreted broadly to include its links with other objects), while ‘behaviour’ stands for the ways that an object can act in response to events. The available actions are determined by an object’s state, but generally speaking an object can ‘act’ only by changing its data or by sending a message to another object. Many ‘behaviours’ of a software object, but not all, will result in a change of its state.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark142" class="a">Figure </a>4.1 lists some characteristics of a person, a shirt, a sale and a bottle of ketchup. Supposing that we wished to model these as objects, we can identify some possible identities, behaviours and states (these are for illustration only, and do not assume any particular system perspective).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="122" alt="image" src="Image_210.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark142">Figure 4.1 </a><span class="s21">Characteristics of some objects.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark143">The similarity between domain objects and software objects can be overstated. Although software objects are sometimes described as simulating the behaviour of objects in the real world domain that they represent, domain objects often do not behave in exactly the way that they are modelled. For example, a bottle of ketchup does not really ‘store’ data about its contents or its condition, nor does it ‘update’ this data when it is spilled. However, this is a useful way to model a domain when the goal is to understand it and, perhaps, develop an information system that will help people who work in that domain.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1300" class="a">In some texts (e.g. Wirfs-Brock et al., </a>1990), objects are deliberately characterized as if they were people, each one with a role in the system that is based on its answers to three questions.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_211.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_212.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Who am I? What can I do?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_213.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">What do I know?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a">This view of an object’s responsibilities and its knowledge is the basis of the Class- Responsibility-Collaboration (CRC) technique, which we will describe in </a>Chapter 7.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">4.2.2 <b>Class and object</b></p><p class="s13" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Class <span class="p">is a concept that describes a set of objects that are specified in the same way. Here, we mean objects as abstractions within an information system—either a model or the resulting software—not the real-world objects that they represent.</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">All objects of a given class share a common specification for their features, their semantics and the constraints upon them. (In general use, <i>semantics </i>relates to the meaning of words or signs, but for computer scientists it usually means a formal mathematical description of the operations that can be carried out in a programming language. Here, it can be taken to mean very roughly the behaviour of the objects. Or to put it another way, the meaning that is assigned to the things they represent by people who work within the application domain.) This does not quite mean that all objects of a class are identical in every way, but it does mean that their specification is identical. Objects that are sufficiently similar to each other are said to belong to the same class. The class is an abstract descriptor for the specified logical similarities between those objects.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The idea of a class has its origins in object-oriented programming. For example, in a Java program a class acts as a kind of template from which individual objects are constructed when they are needed. (This is not the whole story, as software classes can also do other things that need not concern us here.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A single object is also known as an <i>instance</i>. This carries a connotation of the class to which the object belongs. Every object is an instance of some class.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark144" class="a">Figure </a><a href="part16.htm#bookmark291" class="a">4.2 </a><a href="part16.htm#bookmark291">shows some classes that might be identified from the Agate case study (Chapter 7 describes a practical approach to identifying classes).</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><span><img width="383" height="115" alt="image" src="Image_214.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark144">Figure 4.2 </a><span class="s21">Some possible object classes in the Agate case study.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark145">A class and its instances are related in the following manner. For staff at Agate, the idea of ‘a campaign’ is an abstraction that can represent any one of several specific campaigns. In an object-oriented software system, the class Campaign represents the relevant features that all campaigns have in common. For each real-world campaign, there is one instance of the class that represents it. Some examples of campaigns are: a series of adverts for various Yellow Partridge jewellery products broadcast on various satellite and cable TV  channels during Spring 2010; a national series of TV , cinema, magazine and Internet adverts for the launch of the Soong Motor Co’s Helion hybrid-fuel car in August 2010.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Each instance of a class is unique, just as every living person is unique, however closely they resemble someone else. Instances are unique even when they share identical characteristics with another instance. For example, there could be two members of staff at Agate with the same name—say, ‘Ashok Patel’. It is even possible (though unlikely) that both joined the company on the same date and work in the same section. Yet each remains a separate individual, and would therefore be represented by a separate instance of the class StaffMember.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">4.2.3 <b>Class membership</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Membership of a class is based on logical similarity between the states and behaviour that the objects can exhibit. We have already noted that an object’s state is defined by the data that describes it. More generally, all objects in a class share a common set of <i>properties. </i>A property is a descriptive characteristic; we will see shortly that for a class these include <i>attributes </i>that contain its data and <i>operations </i>that specify its behaviour.</p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark169" class="a" name="bookmark146">When staff at Agate record a new client, they note the company name, address, telephone number, fax number, email address and so on. Each item in the list is useful in some way to the users of the system,</a>1<span class="p"> and the full list gives a complete description of a client. The value of each item (e.g. the actual company name) will vary from one client to another, but the information structure is the same for every client.</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">To take another example, some users of the Agate system need to know about the member of staff assigned as staff contact to a client. A staff member might be described by a name, staff number and start date. Again, the full list gives a complete description of a staff member (for the purpose at hand). Here, too, the value of each item (e.g. the staff name) will normally vary from one person to another, but again the structure is the same for all staff members.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part9.htm#bookmark147" class="a">Now compare the two descriptions, summarized in </a>Figure 4.3.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="104" alt="image" src="Image_215.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark147">Figure 4.3 </a><span class="s21">Information structures for two classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Both staff members and clients have a name, but otherwise there is little in common. The information structure used to describe a client would not be capable of describing a member of staff, and vice versa. It is reasonable to consider all clients as members of one class, and all staff as members of one class, but it would not be justified to consider them as members of the <i>same </i>class. When two objects cannot be described by a single set of features, they cannot belong to the same class.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">All objects of a class also share a common set of valid behaviours. For example, clients may initiate a campaign, may be assigned a staff contact, may pay for a campaign, may terminate a current campaign, and so on. Perhaps no single client will actually do all this in reality, but that does not matter. Any client could do any of these things, and the information system must reflect this.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Staff members have a different set of valid behaviours. Staff can be assigned to work on a campaign, can be assigned to a campaign as staff contact, can change grade and maybe do other things we do not yet know about. It may be more likely for staff members than for clients that they will actually go through the same sequence of behaviours, but here this, too, does not matter. The point again is that a member of staff could do these things.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">All clients, then, have a similar set of possible behaviours, and so do all staff members. But clients can do some things that a member of staff cannot do, and vice versa. Again, we can consider clients as a class, and staff as a class, but there is no case for considering clients and members of staff as instances of the same class. To summarize: Client is a valid class, and StaffMember is a valid class. This can also be expressed more informally, as described in Section 4.2.1, where we saw that all members of a class give the same answers to the questions: ‘What do I know?’ and ‘What can I do?’</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Sometimes the terminology for objects and classes is not completely clear. Some authors use ‘object’ and ‘class’ interchangeably to mean a group of similar objects. But, strictly speaking, ‘object’ means a single individual object, with ‘class’ reserved for the definition of a group of similar objects. Both object and class can refer to application domain things and concepts, as well as their representation in an object-oriented model. We should remember that the map is not the territory, even when the same words are used for both. Another possible confusion can occur when attention moves between the analysis and design activities. Then an analysis model of the application domain is transformed into a design model of software components.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark148">A further distinction should be made between a class and its </a><i>type</i><a href="part38.htm#bookmark1151" class="a">. A type is similar to a class, but more abstract in the sense that it can contain neither physical implementations nor physical specifications of the operations. A type can be implemented by more than one class: for example in two different programming languages with different syntax and features. Some authors have suggested that an analysis model can contain only types and not classes (for example, Cook and Daniels, </a><a href="part38.htm#bookmark1226" class="a">1994). However, it has become standard usage for the term ‘class’ to have all of the following meanings: a collection of similar real-world objects; a collection of similarly specified objects in an analysis or design model; and a software construct in an object-oriented programming language (see, for example, Maciaszek, </a>2005). Meanwhile, ‘object’ is synonymous with ‘instance,’ although the latter term is more generally used in the context of discussing the class to which an object belongs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">4.2.4 <b>Generalization and specialization</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Generalization and specialization are complementary concepts that are familiar to everyone through hierarchical classification schemes such as those we apply to plants and animals. For</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a">example, a cat is a kind of mammal and a mammal is a kind of animal. In this example, ‘cat’ is more specific while ‘mammal’ is more general and ‘animal’ is more general still. Generalization and specialization are very important to object-orientation. They help programmers, designers and analysts to reuse previous work instead of repeating it (there will be much more on the importance of reuse later, especially in Chapters </a><a href="part31.htm#bookmark1004" class="a">8 and </a>20). They also help to organize complex models and systems in a way that makes them more understandable.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the UML Specification, the definition of generalization is written in such a way that it can apply to any <i>classifier</i><a href="part38.htm#bookmark1244" class="a">—a general concept that includes other modelling concepts such as interfaces, datatypes and components, as well as classes. For the moment, we will concentrate on classes. Generalization occurs where there is a taxonomic relationship between two classes. This means that the specification of one class is more general and applies also to the second class, while the specification of the second class is more specific and includes some details that do not apply to the first. Another way to put this is that any instance of the more specific class is also indirectly an instance of the more general class. The specific class ‘inherits’ all the features of the more general class, while also adding some features that are uniquely its own (</a>OMG, 2009b).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Let’s dismantle the definition into its main components, and examine each part on its own. We will highlight the general principles by looking first at an example of species classification (note that this is intended only to illustrate the concept of generalization and is not a technical presentation of modern biological taxonomy).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Taxonomic relationship</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark149" class="a">‘Taxonomy’ literally means a scheme of hierarchic classification—either an applied set of classifications or the principles by which that set is constructed. The word was originally used for the hierarchic system of classification of plant and animal species; hence the example shown in </a>Fig. 4.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span><img width="509" height="306" alt="image" src="Image_216.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark149">Figure 4.4 </a><span class="s21">A simple, very incomplete, taxonomy of species.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The taxonomic relationship between the two elements in this hierarchy labelled ‘cat’ and ‘mammal’ can be simply rephrased as ‘a cat <i>is a kind of </i>mammal’. Many other relationships are also identified in the diagram. For example, a domestic cat is a kind of cat, as is a tiger, and both are also kinds of animals and kinds of living things. We can summarize this by saying that in each case the common relationship is that one element ‘is a kind of’ the other element. We should, however, be careful to avoid a common ambiguity. People often use the form ‘a cat is an animal’ as shorthand for ‘a cat is a kind of animal.’ But the statement ‘a Persian is a kind of cat’ means that Persians are a subclass of cats, while ‘Fritz is a cat’ conveys that Fritz is an</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">individual member of the class of cats, not a subclass. Membership and subclassification are both types of abstraction, but they are not identical concepts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">A more general class</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘Mammal’ is a word we use to classify any animal with certain characteristics. For example, all mammals have warm blood, suckle their babies on milk, have hair on their bodies and so on. ‘Cat’ is a word that classifies a subgroup of mammals, usually with thick fur and retractable claws. Many also have an ability to purr. Mammal is a more general class than cat, which in turn is more general than the domestic cat or the tiger. Any description of a mammal must apply to many different animals: domestic cats, tigers, dogs, whales, etc. A description of a ‘general’ mammal really means just a description of the common characteristics shared by all mammals. This may be rather brief, perhaps consisting of only one or two characteristics: for example, that all mammals suckle their young and have hair on their bodies (even whales have some hair, although many people think they do not). In the tree diagram, the more general an element is, the nearer it is to the root of the tree.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">A more specific class</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark149" class="a">‘Cat’ is more specific than ‘mammal’ and ‘domestic cat’ still more specific than ‘cat’. The more specific word in any pair of related classes conveys more information. Knowing that an animal is a cat, we can guess something about its diet, general body shape, size (within certain limits), number of legs (barring accidents, etc.), and so on. If we know only that it is a mammal, we can guess little, if anything at all, of its physical description or diet. The more specialized elements of a hierarchy are those that are further from the root of the tree and closer to the leaves. The most specialized elements of all are those that actually form the leaves of the tree. In </a>Fig. 4.4, the leaves are individual species.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Any instance of the specific class is also indirectly an instance of the more general class</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Whatever is true for a mammal is also true for a domestic cat. If one defining characteristic of a mammal is that it suckles its young, then a domestic cat also suckles its young, and so does a tiger, a dog or a whale. This is an important feature of any hierarchic taxonomy. As an illustration, we can think about what would happen if a zoologist discovers that a defining mammalian characteristic does not apply to an animal previously thought to be a mammal. For example, suppose a research project found conclusive evidence that common field mice lay eggs instead of bearing live young. Imagine the consternation and argument! Z oologists would have to decide whether to reclassify the field mouse or to redefine what distinguishes a mammal from other animals. Perhaps a brand new classification would be invented specifically to accommodate egg-laying mice. This is what occurred following the discovery of the duckbilled platypus and the echidnas in Australia in the 17<span class="s41">th</span> century. These animals are monotremes, which in most respects resemble mammals except that they lay eggs instead of bearing live young. Z oologists now regard monotremes as a separate subclass of mammals.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S pecializ ation adds additional information</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A full description of a domestic cat would contain a great deal more information than needed for a general member of the mammal class. For example, we might define a domestic cat by saying that, in addition to the general features of a mammal, it also has a certain skeletal structure, a particular arrangement of internal organs, carnivorous teeth and habit, thick fur, the ability to purr, and so on. Apart from the common mammalian features, none of these characteristics applies to <i>all </i>other mammals. No whales can purr, and baleen whales have no teeth; instead they have a kind of sieve in their upper jaw (called ‘baleen’), which they use to filter their food from the water. A full zoological description of any species contains at least one characteristic (or a unique combination of characteristics) that differentiates it from all other species. Otherwise it would not make sense to consider it a species in the first place.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Practical uses of generaliz ation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The main use of <i>generalization </i>in object-orientation is to describe relationships of similarity between classes. Object classes are arranged into hierarchies much the same as the species example. This has two main benefits.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The first results from the use of object classes to represent different aspects of a real-world situation that we wish to understand. Using generalization, we can build logical structures that make explicit the degree of similarity or difference between classes. This is an important aspect of the <i>semantics </i><a href="part9.htm#bookmark150" class="a">of a model—in other words, it helps to convey its meaning. For example, to know what hourly-paid and monthly-salaried employees in a business have in common with each other may be just as important as to know how they differ. The former may help to understand that some types of information must be recorded in identical ways for both types of employee. Figure </a>4.5 illustrates this with an example that might be suitable for a payroll system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><span><img width="534" height="335" alt="image" src="Image_217.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark150">Figure 4.5 </a><span class="s21">Hierarchy of employee types.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this model, every employee is represented by a date of appointment, date of birth, department, employee number, line manager and name. Some details, however, depend on whether their pay is calculated by months or by hours worked (the only significant differences shown). A hierarchically structured model allows the close similarity to be shown clearly, but also highlights the differences between a monthly paid and an hourly paid employee.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark151" class="a">A second benefit comes from the relative ease with which a hierarchy can be extended to fit a changing picture. If this company were to decide that a new, weekly-paid type of employee is required, it is a simple matter to add a new subclass to the hierarchy to cater for it, as shown in </a>Fig. 4.6.</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="539" height="236" alt="image" src="Image_218.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark151">Figure 4.6 </a><span class="s21">Hierarchies are easy to extend.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark152">Other features of generaliz ation</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Some features of generalization that are not mentioned explicitly in the definition given earlier are sufficiently important to deserve some discussion at this point. These are: the mechanism of <i>inheritance</i>, the <i>transitive </i>operation of inheritance and the <i>disjoint </i>nature of generalization hierarchies.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Inheritance<span class="p">. This is a mechanism for implementing generalization and specialization in an object-oriented programming language. When two classes are related by the mechanism of inheritance, the more general class is called a </span>superclass <span class="p">in relation to the other, and the more specialized is called its </span>subclass<span class="p">. As a first approximation, the rules of object-oriented inheritance generally work as shown below:</span></p><p class="s25" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a name="bookmark153">1. </a><span class="p">A subclass inherits all the characteristics of its superclass.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2. <span class="p">A subclass definition always includes at least one detail not derived from its superclass.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Inheritance is very closely associated with generalization. Generalization describes the logical relationship between elements that share some characteristics, while inheritance describes an object-oriented mechanism that allows the sharing to occur.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note that there is only a superficial resemblance between object-oriented inheritance and both the biological and the legal concepts of inheritance. Some key differences are listed below.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_219.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Biological inheritance (in mammals, at least) is complicated by the fact that a child inherits characteristics from both parents. Which characteristics come from each parent is determined partly at random and partly by the way that genes and chromosomes work.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_220.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Legal inheritance mainly relates to the transfer of property on the death of the original owner, rather than to the characteristics of the owner. The rules of legal inheritance vary from place to place, and are usually complex, but in most countries a legal heir is not necessarily a biological descendent.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_221.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">In object-oriented inheritance, a class usually has a single parent and it inherits all of that parent’s characteristics. Two exceptions to this are <i>multiple inheritance </i>and the <i>overriding </i>of inherited characteristics. Multiple inheritance means that a subclass is at once a member of more than one hierarchy and inherits characteristics from its superclasses in each hierarchy. Overriding means that an inherited feature is redefined in a subclass. This is useful when an operation needs to be defined in a different way in different subclasses. In this case, the operation might be specified in an outline or default manner in the superclass, and then respecified in a detailed but different manner in each subclass.</p><p class="s13" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Transitive operation<a href="part9.htm#bookmark149" class="a">. This means that the relationship between two elements at adjacent levels of a hierarchy ‘carries over’ to all more specialized levels. Thus, in </a><span class="p">Fig. 4.4, the definition of an</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">animal applies in turn to all mammals, and thus by a series of logical steps to a domestic cat. So we can refine the rules of inheritance given above, as follows.</p><p class="s25" style="padding-top: 5pt;padding-left: 19pt;text-indent: -13pt;text-align: left;">1. <span class="p">A subclass always inherits all the characteristics of its superclass, the superclass of its superclass, and so on as far as the hierarchy extends.</span></p><p style="padding-left: 19pt;text-indent: -13pt;text-align: left;"><span class="s25">2. </span>The definition of a subclass always includes at least one detail not derived from <i>any </i>of its superclasses.</p><p class="s13" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Disjoint nature<span class="p">. In a hierarchic system, the branches of the tree diverge as they get further away from the root and closer to the leaves. They are not permitted to converge. This means, for example, that a cat cannot be both a mammal and a reptile. In other words, each element in a hierarchy can only be a member of one classification at any given level of the hierarchy (although, of course, it can be a member of other classifications at other levels of the hierarchy, due to the transitive nature of the relationship).</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark154">The disjoint aspect of generalization means that we sometimes need to be careful about the characteristics chosen to express a generalization. For example, we could not use ‘Has four feet’ as the only defining characteristic of a mammal, even supposing that it were true of all mammals—because many lizards also have four feet, and this would make it possible to classify a lizard as a mammal. A class must be defined in terms of a unique set of characteristics that differentiate it from all other classes at its level of the hierarchy.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The fact that generalization hierarchies are disjoint should not be taken to mean that a class can only belong to one hierarchy. Generalization structures are abstractions that we choose to apply, since they express our understanding of some aspects of an application domain. This means that we can choose to apply more than one generalization structure to the same domain, if it expresses a relevant aspect of the situation. Thus, for example, a person might be simultaneously classified as a creature (<i>Homo sapiens</i>), as a citizen (a voter in a city electoral division) and as an employee (an account manager in Agate’s Creative Department). If each of these hierarchies were represented in an object-oriented model, the position of a person would be an example of multiple inheritance.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Real-world structures are not compelled to follow the logical rules we apply in object- oriented modelling. Sometimes they are not disjoint or transitive, and therefore not strictly hierarchic. This does not detract from the usefulness of hierarchic structures in object-oriented development.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">4.2.5 <b>Encapsulation, information hiding and message passing</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">These three concepts are closely related, so we will consider them together. Encapsulation is a feature of object-oriented programming, which is also applied in analysis modelling. It means the placing of data within an object together with the operations that apply to that data. An object really is little more than a bundle of data together with some processes that act on the data. The data is stored within the object’s attributes; together these comprise the object’s information structure that we discussed in Section 4.2.3. The processes are the object’s operations and each has a specific <i>signature</i>. An operation signature defines the structure and content that a message must have in order to act as a valid call. This consists of the name of the operation together with any parameters (usually data values) that the operation needs in order to run. In order to <i>invoke </i>an operation, its signature must be given. Signatures are sometimes also called <i>message protocols</i>. The complete set of all an object’s operation signatures is known as its interface. So each object provides an interface that allows other parts of the system to call its operations by sending it messages. The operations have access to the data stored within the object. The interface is separate from the implementation of both data and operations. The idea is that data should only be accessed or altered by operations of the same object (however most O-O programming languages provide ways of bypassing the encapsulation). Information hiding is the related but stronger design principle that states that no object or subsystem should expose the details of its implementation to other objects or subsystems. Both encapsulation and information hiding imply that, in order to work with each other, objects must exchange messages.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Objects often represent things in a real-world system that collaborate to carry out a</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">collective task. Collaborating things and people send each other messages. For example, everything we say to our friends and family, the emails we read when we log on to the network,</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">advertising posters on the bus, games shows and cartoons on TV , the colour of traffic light signals, the power-on indicator on a laptop, even the clothes we wear, our tone of voice and our posture—these are all messages of one sort or another. What makes all these messages useful is that they follow an understood protocol that lets us interpret their meaning. An obvious example is the international agreement that a red traffic light means ‘stop’ while a green light means ‘go.’ Software objects also need an agreed protocol so that they can communicate with each other.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Software was not constructed in this way until quite recently. Earlier approaches to systems development tended to separate data in a system from the processes that act on the data. This was done for sound analytical reasons and is still appropriate for some applications, but it can give rise to difficulties. Chief among these is the need for the person who designs a process to understand the organization of the data that it uses. For such a system, processes are said to be dependent on the structure of the data.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Dependency of process upon data structure can cause problems. A change to the data structure will often force a change to the processes that use it. This makes it harder to construct systems that are reliable, that can be upgraded or modified, and that can be repaired if they break down.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">By contrast, a well-designed object-oriented system is modularized so that each subsystem is as independent as it can be of the way that other subsystems have been designed and implemented. Encapsulation contributes to this by locating each process with the data it uses.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In practice, processes usually cannot all be located with all the data that they must access, so data and processes are distributed among many different objects. Some operations are specifically written to give access to the data encapsulated within an object. For one object to use the operations of another, it must send it a message.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Information hiding goes one step further than encapsulation, and ideally makes it impossible for one object to access another object’s data in any other way than through calls to its operations. This insulates each object from the need to ‘know’ any of the internal details of other objects.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Essentially, an object only needs to know its own data and its own operations. However, many processes are complex and require collaboration between objects. The ‘knowledge’ of some objects must therefore include knowing how to request <i>services </i>from other objects. A service is an action that one object or subsystem carries out on behalf of another, including, in this case, the retrieval of data stored by the other object. In this case, an object must ‘know’ which other object to ask and how to formulate the question. But it is not necessary for an object to ‘know’ anything about the way that another object will deliver the service. Such ‘knowledge’ would require the programmer responsible for implementing one object to have detailed knowledge of the way that the second object has been implemented.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark155" class="a">We can think of an object as being wrapped in layers of protection like the skins of an onion. Encapsulation locates data with the operations that directly use it. Information hiding makes the internal details of an object inaccessible to other objects. For another object to access an object’s data, it must send a message. When an object receives a message it can tell whether the message is relevant to it. If the message includes a valid signature to one of its operations, the object can respond. If it does not, the object cannot respond. An operation can only be invoked by a message that gives a valid operation signature. The object’s data lies even deeper inside, and can only be accessed by an operation of that object. Thus, the way that an operation works and the organization of data inside an object can both be changed without affecting any collaborating objects. As long as no operation signatures are changed, the changes are not visible from the outside. Figure </a>4.7 illustrates encapsulation contrasted with information hiding.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="191" alt="image" src="Image_222.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark155">Figure 4.7 </a><span class="s21">Encapsulation and information hiding: the layers of protection that surround an object.</span><a name="bookmark156">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This way of designing software has practical advantages. Consider a simple system to print pay cheques for employees in a business. Suppose that there is a class Employee, whose instances represent each person on the payroll. An Employee object is responsible for knowing about the salary earned by the real employee it represents. Suppose also that a PaySlip object is responsible for printing each employee’s payslip each month. In order to print the payslip, each PaySlip object must know how much the corresponding employee has earned. One object-oriented approach to this is for each PaySlip object to send a message to the associated Employee object, asking how much salary should be paid. The PaySlip object need not know how the Employee object works out the salary, nor what data it stores. It only needs to know that it can ask an Employee object for a salary figure, and an appropriate response will be given. Message passing allows objects to hide their internal details from other parts of the system, thus minimizing the knock-on effects of any changes to the design or implementation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">4.2.6 <b>Polymorphism</b></p><p class="s13" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Polymorphism <span class="p">literally means ‘an ability to appear as many forms’ and it refers to the possibility of identical messages being sent to objects of different classes, each of which responds to the message in a different, yet still appropriate, way. This means the originating object does not need to know which class is going to receive the message on any particular occasion. The key to this is that each object knows how to respond to valid messages that it receives.</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This is rather like the way people communicate. When one person sends a message to another, we often ignore the details of how the other person might respond. For example, a mother might use the same phrasing to tell her child to ‘go to bed now!’ But the precise tasks to be carried out by the child may be very different depending on his or her age and other characteristics. A five-year-old may set off towards bed by himself, but perhaps then requires help with washing his face, brushing his teeth and putting on his pyjamas; he may also expect to be read a bedtime story. A thirteen-year-old may not require any further help, once convinced that it really is bedtime.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark157" class="a">Polymorphism is an important element in the way that object-oriented approaches encourage the decoupling of subsystems. Figure </a><a href="part16.htm#bookmark291" class="a">4.8 uses a communication diagram to illustrate how it works in a business scenario (communication diagrams appear again in </a><a href="part18.htm#bookmark418" class="a">Chapter 7 and their notation is described fully in </a>Chapter 9). The diagram assumes that there are different ways of calculating an employee’s pay. Full-time employees are paid a salary that depends only on their grade; part-time staff are paid a salary that depends in a similar way on grade, but must also take into account the number of hours worked; temporary staff differ in that no deductions are made for the company pension scheme, but the salary calculation is otherwise the same as for a full-time employee. An object-oriented system to calculate pay for these employees might include a separate class for each type of employee, each able to perform the appropriate pay calculation. However, following the principle of polymorphism, the message signature for all calculatePay operations could be the same. Suppose one output from this system is a print-out showing the total pay for the current month: to assemble the total, a message is sent to each employee object, asking it to calculate its pay. Since the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">message  signature  is  the  same  in  each  case,  the  requesting  class  (here  called MonthlyPayPrint) need not know the class of each receiving object, still less how each calculation is carried out.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="271" alt="image" src="Image_223.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark157">Figure 4.8 </a><span class="s21">Polymorphism allows a message to achieve the same result even when the mechanism for achieving it differs between different objects.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Polymorphism is a powerful concept for the information systems developer. Working together with encapsulation and information hiding, it permits a clear separation between subsystems that handle superficially similar tasks in a different manner. This means that a system can easily be modified or extended to include extra features, since only the interfaces between classes need to be known by the person carrying out the modification. There is no need for a developer to know how any part of the system is implemented (its internal structure and behaviour) except for the part they are working on.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Program designers and programmers have struggled for many years to achieve such a high level of modularity in software. Object-orientation helps them to do this much more successfully than did any of its predecessors.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark158">4.2.7 </a><b>Object state</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An object’s <i>state </i>is defined as the totality of the current values of data within the object and its associations with other objects. All states are not equally important, but some differences of state imply significant differences in the behaviour that the object will display in response to the same message.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the real world, people and objects do not always behave in the same way in response to similar stimuli. For example, if you have just eaten an enormous lunch you will probably refuse the offer of a large, sticky gateau. However, if you are very hungry this offer may be much more tempting. We could say that at any given time you can be in either of two states: well-fed or hungry. Each state is characterized by data that describes your condition—in this case your level of hunger. It is also characterized by a difference in behaviour. Your response to certain messages differs according to the current value of your internal data. When well-fed you refuse food, but when hungry you accept it. A stimulus can also change your state, resulting in a change of behaviour. After eating a large gateau, your state changes from hungry to well-fed and you will now refuse further food.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1123" class="a">Objects also respond to messages according to their current state. Each state is represented by the current values of data within the object together with its associations with other objects. These can in turn be changed by the object’s behaviour in response to messages. Thus a state is a steady or stable period in the life of the object, during which it carries out an activity, waits for some event to occur, or meets some specified condition (Booch et al., 1999). It is an object’s state that determines what responses it can make to </a><a href="part38.htm#bookmark1123">messages,</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">under what circumstances it can make them, and also what responses it is unable to make. A good example of this is the behaviour of a computer printer. These typically have the states: ready, printing, off-line, out-of-paper, and so on. The printer’s response to a ‘print document’ request will change according to its current state when the message is received. If ready, it prints the document; if already printing another document, it queues it; if out-of-paper, it returns an error message and waits for the paper to be replenished before printing the document; if off-line, it returns a different error message and stays off-line.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The importance of object state for controlling the behaviour of an object-oriented software system is perhaps most apparent for safety-critical real-time systems, such as the engine and flight controls in an airliner. For the greater part of the flight, an onboard computer flies the aircraft entirely automatically. During take-off and landing the pilot and flight crew take control, but even then it is still the software that directly operates the engine throttles, elevators, and so on. It could be disastrous if all the engines were shut down during the final approach to land, and the software is designed to prevent this occurring. However, it may sometimes be necessary for the pilot to override this constraint during an emergency. The software must also be designed to permit this to occur and to correctly discriminate between the different situations. In order to ensure safety, the control software must be designed so that only the appropriate control behaviours (shut down engine, full throttle, climb, descend, turn) can occur in each possible state of the aircraft (parked, climbing, flying level on auto-pilot, landing). This must also take account of all external events that could trigger a change in behaviour or state (pilot operates throttle, turbulence causes course deviation, sudden loss of cabin pressure, etc.).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark159">The identification of object states can also be critical to the correct operation of business information systems. Here, the consequences of error are not usually life-threatening, but they can threaten the survival of the organization and thus have an impact on the lives and livelihoods of customers, workers, investors and others associated with the enterprise. For example, a DV D rental shop member with unpaid fines may not be permitted to borrow further DV Ds until the debt has been cleared. If the shop’s information systems fail to enforce this rule correctly, the shop may lose money that will be difficult to recover.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="311" height="25" alt="image" src="Image_224.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.3  </a><a href="part4.htm#bookmark4" class="s29">The Origins of Object-Orientation</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.3  </a><a href="part4.htm#bookmark4" class="s29">The Origins of Object-Orientation</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.3  </a><a href="part4.htm#bookmark4" class="s29">The Origins of Object-Orientation</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark160">Object-orientation is the product of several converging developments in the history of computing. For a good understanding of how to carry out software development in a properly object-oriented manner, it is helpful to identify what these are.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Increasing abstraction</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Throughout the history of computing, there has been a steady increase in the level of abstraction at which programmers can work. ‘Abstraction’ in this context means that the programmer is isolated from the physical details of the computer on which the program is to execute. He or she can write a single instruction, often a recognisable word with something close to its English meaning, which may be translated into a long sequence of ‘machine code’ instructions. At the same time, the purposes to which computers are applied have become enormously more complex and demanding, thus greatly increasing the complexity of the systems themselves. The usual way for programmers to give instructions to the earliest computers, such as the Colossus code-breaking machine, was to plug in wires and set switches that connected the thermionic valves of its processor. The physical configuration of the computer was effectively the program. This was the original machine code, and is regarded as the first generation of programming languages. There is not space here to cover the complex history of programming languages since those early days. Suffice it to say that object- oriented languages work at a higher level of abstraction than earlier languages, such as COBOL and C, which were themselves already much more abstract than machine code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Event-driven programming</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Research into computer simulation led directly to the object-oriented paradigm of independent, collaborating objects that communicate via messages. A typical simulation task is to model the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark161">loading of vehicles onto a large ferry ship, in order to determine the quickest safe way to do this. This simulation would be run many times under differing assumptions: for example, the sequence of loading, the arrangement of vehicles on the storage decks, the speed at which vehicles are driven onto the ship, the time separation between one vehicle and the next, and so on. The real-world situation that is being modelled is very complex and consists of a number of independent agents, each responding to events in ways that are easy to model at the level of individual agents, but very difficult to predict in the large, with many agents interacting with each other all at once. This kind of task is very difficult to program effectively in a procedural language (Pascal, for example, which several generations of university students learned as their first programming language). Program designs for procedural languages are based on the assumption that the program structure controls the flow of execution. Thus for a procedural program to tackle the simulation task described above, it must have separate routines that test for, and respond to, a vast number of alternative conditions.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">One solution to this problem is to structure the program in a similar way to the problem</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">situation itself, as a set of independent software agents, each of which represents an agent in the real-world system that is to be simulated. This insight evolved into early simulation languages such as Simula 67, and remains one of the key ideas in object-oriented software development: that the structure of the software should mirror the structure of the problem it is intended to solve. In this way, the tension between the model of the application domain and the model of the software (mentioned in Section 4.2.1) is resolved, turning a potential weakness into a strength.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">The spread of G U Is</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The rapid spread of graphical user interfaces (GUIs) in the 1980s and 1990s posed particular difficulties for contemporary development methods. GUIs brought some of the problems encountered earlier in simulation programming into the world of mainstream business applications. The reason for this is that users of a GUI are presented on their computer screen with a highly visual interface that offers many alternative actions all at once, each one a mouse-click away. Many other options can be reached in two or three more clicks via pull- down menus, list boxes and other dialogue techniques. Interface developers naturally responded by exploiting the opportunities offered by this new technology. As a result, it is now almost impossible for a system designer to anticipate every possible route that a user might take through a system’s interface. This means that the majority of desktop applications are now very difficult to design or control in a procedural way. The object-oriented paradigm offers a natural way to design software, each component of which offers clear services that can be used by other parts of the system quite independently of the sequence of tasks or the flow of control.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M odular software</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark75" class="a">Information hiding in a well-designed object-oriented system means that classes have two kinds of definition. Externally, a class is defined in terms of its interface. Other objects (and their programmers) need only know the services that are offered by objects of that class and the signature used to request each service. Internally, a class is defined in terms of what it knows and what it can do—but only objects of that class (and its programmer) need to know anything about this internal definition. It follows that an object-oriented system can be constructed so that the implementation of each part is largely independent of the implementation of other parts. This is what modularity means, and it contributes to solving some of the most intractable problems in information systems development. In Chapter </a>2, we saw that these include the fact that requirements may change both during the development process and after implementation. A modular approach helps to address these problems in several ways.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_225.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">It is easier to maintain a system built in a modular way, as changes to a subsystem are much less likely to have unforeseen effects on the rest of the system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_226.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">For the same reason, it is easier to upgrade a modular system. As long as replacement modules adhere to the interface specifications of their predecessors, other parts of the system are not affected.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_227.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">It is easier to build a system that is reliable in use. Subsystems can be tested more thoroughly in isolation, leaving fewer problems to be addressed later when the whole system is assembled.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_228.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;"><a name="bookmark162">A modular system can be developed in small, manageable increments. Provided each increment is designed to provide a useful and coherent package of functionality, they can be deployed one at a time.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Lifecycle problems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark102" class="a">Most systems development approaches until the early 1990s were based on the waterfall lifecycle model. This lifecycle model and its associated difficulties were discussed in Chapter 3. Object-orientation addresses these by encouraging an iterative lifecycle, also described in </a>Chapter 3. In an iterative development process, the activities of analysis, design and so on are repeated as necessary until everyone is satisfied with the quality of the software—subject, of course, to time and budget constraints. Iteration is also based on the integration of user feedback into the development cycle. This only makes practical sense where there are tangible products (usually software) to which the users can respond. Thus even the very first iteration will normally result in some working software, and subsequent iterations will refine this product through user input, more detailed analysis and so on, until it is fit to be accepted.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This aspect is strongly linked to the highly modular character of an object-oriented system, described in the previous section, and also to the ‘seamless’ development of models throughout an object-oriented lifecycle, which is discussed in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M odel transitions</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark595" class="a">Earlier approaches to information systems development created analysis models (e.g. data flow diagrams) that had a rather indirect relationship to the design models (e.g. structure charts and update process models) that followed them. This meant that designs for new systems, however good in their own right, were hard to trace back to the original requirements for the system. Yet what makes a design successful is that it meets the requirements in a way that is functional, efficient, economic and so on (see </a>Chapter 12). This means that it is important to be able to trace the features of the final system back to the specific requirement (or requirements) that it is intended to fulfil.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Object-oriented analysis and design avoid these transition problems by creating a uniform set of models throughout analysis and design, adding more detail at each stage and avoiding the awkward discontinuities that arise when one model must be discarded to be replaced by another with a different, incompatible structure. In UML, the fundamental analysis models are the <i>use case </i>and the <i>class diagram </i><a href="part9.htm#bookmark222" class="a">(described in Chapters </a><a href="part16.htm#bookmark291" class="a">6 and </a>7, respectively) and these are the backbone of the design, too, with other design models derived directly or indirectly from them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Reusable software</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a" name="bookmark163">Information systems are very expensive, yet in the past their developers have tended to reinvent new solutions to old problems, many times over. This wastes time and money, and has led to the demand for reusable software components, which can eliminate the need to keep reinventing the wheel. Object-oriented development methods offer great potential, not yet fully realized, for developing software components that are reusable in other systems for which they were not originally designed. This is partly a result of the highly modular nature of object- oriented software, and also due to the way that object-oriented models are organized. Inheritance is of particular importance in this context and we will say more about this in </a><a href="part31.htm#bookmark1004" class="a">Chapter 8, and about reuse in general in </a>Chapter 20.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="319" height="25" alt="image" src="Image_229.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.4  </a><a href="part4.htm#bookmark4" class="s29">Object-Oriented Languages Today</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.4  </a><a href="part4.htm#bookmark4" class="s29">Object-Oriented Languages Today</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.4  </a><a href="part4.htm#bookmark4" class="s29">Object-Oriented Languages Today</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark165" class="a" name="bookmark164">A number of object-oriented programming languages are available today, with some significant differences between their capabilities and the extent to which they adhere to the object- oriented paradigm. </a>Figure 4.9 lists some of the main characteristics of the most widely used of these languages. The ‘popularity rating’ is taken from an online index published by TIOBE</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1289" class="a">Software BV  (</a>TIOBE, 2009). (TIOBE’s rating is based on counting hits for each language when used as a search term on several widely used search engines. It gives an indication of the worldwide total number of programmers, training courses and vendors related to each language.) This is not a programming textbook, so we offer only a very brief description of each feature.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="271" alt="image" src="Image_230.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark165">Figure 4.9 </a><span class="s21">Characteristics of some widely used object-oriented languages.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark166">Strong typing refers to the degree of discipline that a language enforces on the programmer when declaring variables. In a strongly typed language (most modern languages are strongly typed), every data value and object that is used must belong to an appropriate type for its context. Static typed languages enforce this with type-checking at compile time. Dynamic typed languages check types at run-time, but some languages offer a hybrid approach that allows the flexibility of loading classes at run-time. Garbage collection is important for memory management in systems that create and delete many objects during their execution. If objects are not removed from memory when they are deleted, the system may run out of memory in which to execute. When this is provided automatically, it removes the responsibility for this task from the programmer. Multiple inheritance is important as it minimizes the amount of code duplication and hence reduces inconsistencies that can cause maintenance problems. In static typed languages, multiple inheritance can allow a new class to stand in for any of its superclasses, and this reduces the amount of special-case programming required elsewhere in the system.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Languages in which all constructs are implemented as classes or objects are said to be</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">‘pure’ object-oriented languages. Some languages permit data values that are not objects, but this introduces extra complexities for the programmer. Other languages allow unencapsulated types, but this gives the sloppy programmer opportunities to bypass the safer encapsulation of classes. Both of these circumstances can cause a system to be difficult to maintain and extend.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Dynamic loading refers to the ability of a language to load new classes at run-time. This can be used to allow software to reconfigure itself: for example, to cope with hardware or environment changes. It can help to propagate improvements and bug fixes, by concentrating maintenance efforts on the server side. It is also widely used to implement plug-ins such as those that allow a web browser to play video and audio content.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Standardized class libraries give the programmer access to classes that are known to run successfully on a variety of hardware platforms, and under a variety of operating systems. When these are not available, it can be difficult to modify an application so that it will run on another platform, or in conjunction with applications that have used a different library.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Finally, in earlier editions of this book we compared languages on the aspect of correctness constructs. However, only Eiffel provided these, and we have dropped this language from the comparison due its decline in popularity. This is a shame, as correctness constructs are a</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark492" class="a">valuable feature in a programming language. They allow a programmer to define pre- conditions and post-conditions on methods, thus forming an enforced contract between two classes that participate in requesting and providing a service. Contracts are important to the development of robust software and are discussed in </a>Chapter 10.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Limitations of object-orientation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">Some applications are not ideally suited to object-oriented development and in this section we make a few comments about these. There are two main examples. The first kind is systems that are strongly database-oriented. These have a record-based structure of data that is appropriate to a relational database management system (RDBMS) and their main processing requirements centre on the storage and retrieval of the data (e.g. a management information system used mainly for querying data in the database). Such applications cannot easily be adapted to an object-oriented implementation without losing the many benefits of using a RDBMS for data storage. Commercial RDBMSs are a very mature form of technology and they organize their data according to sound mathematical principles. This ensures a good balance of efficiency of retrieval, resilience to change and flexibility in use. However, RDBMSs are limited in their capabilities for storing and retrieving certain kinds of complex data structure, such as those that represent multimedia data. The spatial (map-based) data that forms the basis of a geographic information system (GIS) is a particular example of data structures to which RDBMSs are not well suited, but which are ideally suited to object-oriented development. Multimedia data such as video and audio clips are also better suited to an object-oriented implementation. We return to the relative advantages and disadvantages of RDBMSs as compared to object-oriented database systems in </a>Chapter 18.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Applications that are strongly algorithmic in their operation are less suited to an object-</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">oriented development approach. For some scientific applications that involve large and complex calculations (for example, satellite orbit calculations) it may be neither feasible nor desirable to split the calculation down into smaller parts. Such a system, if developed in an object-oriented manner, might contain very few objects, but each would be extremely complex. This would not be sound object-oriented design, and so either a procedural or a functional approach (these are alternative styles of programming) is recommended instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="122" height="24" alt="image" src="Image_231.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">4.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark167">In this chapter we have introduced the most important concepts in object-orientation, in particular, object and class, generalization and specialization, encapsulation, information hiding, message passing, object state and polymorphism. Understanding these gives an essential foundation for later chapters that deal with the practical application of object-oriented analysis and design techniques. We have also identified some of the main benefits of following an object-oriented approach, such as software and model reuse, modular systems that are easier to modify and maintain, and projects that deliver useful increments of software faster than other approaches. There is a great deal of synergy in the way that the different fundamental concepts contribute to the success of object-orientation. For example, message passing and polymorphism both play a significant role in achieving sound modularity in a system. But there is no clean break with the past; instead, the characteristics of object- orientation are best seen as the result of a gradual process of evolution that can be traced back to the earliest days of electronic digital computers. This evolutionary process is by no means finished yet. As applications and computing environments grow ever more complex, there is a continuing need for reliable, maintainable, modifiable information systems.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:67pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">4.1  <span class="s16">Define object, class and instance.</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.2  <span class="s16">What do you think is meant by ‘semantics’?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.3   <span class="s16">How does the object-oriented concept of message passing help to hide the</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:162pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s16" style="padding-left: 36pt;text-indent: 0pt;line-height: 12pt;text-align: left;">implementation of an object, including its data?</p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.4  <span class="s16">What is polymorphism?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.5  <span class="s16">What is the difference between generalization and specialization?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.6  <span class="s16">What rules describe the relationship between a subclass and its superclass?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.7  <span class="s16">What does it mean to say that an object-oriented system is highly modular?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">4.8  <span class="s16">Why is it particularly hard for a designer to anticipate a user’s sequence of tasks when using a GUI application?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.9  <span class="s16">What does ‘object state’ mean?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.10 <span class="s16">What is an operation signature?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">4.11 <span class="s16">Distinguish between ‘encapsulation’ and ‘information hiding.’</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:228pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">4.A <span class="s16">Section 4.2.1 mentions the human activity system and the proposed software system as particularly important systems to consider, but these are not the only systems that an analyst will encounter or work with. Make a list of any other systems you can think of that might be involved in the process of software development. What interfaces exist between them?</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">4.B <span class="s16">Reread the description of generalization given in Section 4.2.4. How does object- oriented inheritance differ from inheritance between a parent and a child: (i) in biology and (ii) in law?</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">4.C <span class="s16">Arrange the following into a hierarchy that depends on their relative generalization or specialization: person, thing, green, shape, primary school teacher, cub, polar bear, square, law, child, colour, animal. Add more classifications as necessary so that it is clear what is generalized or specialized at each level.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 10pt;text-indent: -23pt;text-align: justify;">4.D <span class="s16">Read the first section of the case study material for FoodCo (Section B1.1), and identify classes that represent FoodCo’s whole business environment.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">4.E <span class="s16">List all FoodCo’s products that are identified in the case study material in Case Study B1 and arrange these into a hierarchy. Imagine some more products that make your hierarchy more interesting, and add these to your diagram.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark168">Further Reading</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_232.png"/></span></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1211" class="s6">Most standard texts on object-oriented analysis and design contain a section that introduces the </a><a href="part38.htm#bookmark1263" class="s6">fundamental concepts of object-orientation. Although predating the development of UML, Jacobson et al. (1992) and </a><a href="part38.htm#bookmark1211" class="s6">Rumbaugh et al. (1991) remain good general introductions.</a></p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1226" class="s6">Most recent books use UML notation, for example, Maciaszek </a><a href="part38.htm#bookmark1233" class="s6">(2005), McLaughlin et al. </a><a href="part38.htm#bookmark1224" class="s6">(2006), or, from a more technical, software engineering perspective, </a>Lethbridge and Laganiere (2003).</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1231" class="s6">Readers who are interested in learning more about object-oriented programming will find almost too many books on this subject to be able to count them all. In the Java field, </a>McGrath (2007) is among the more readable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_233.png"/></span></p><p class="s1" style="padding-top: 4pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark169">1 What appears in the list depends on the needs of the application. Another team may be developing a system to monitor whether client companies comply with environmental laws. Their list may share some characteristics with ours, but may also add others of no interest to our model.</a></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_234.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:345pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s15" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark170">LEARNING OBJECTIVES</a><a name="bookmark171">&zwnj;</a></p></td><td style="width:95pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_235.jpg"/></span></p></td></tr><tr style="height:95pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_236.jpg"/></span> <span class="s16">what is meant by a model</span></p><p class="s16" style="padding-top: 1pt;padding-left: 34pt;padding-right: 155pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_237.jpg"/></span><span class="s17"> </span>the distinction between a model and a diagram <span><img width="20" height="13" alt="image" src="Image_238.jpg"/></span><span class="s38"> </span>the UML concept of a model</p><p class="s16" style="padding-left: 34pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_239.jpg"/></span><span class="s17"> </span>how to draw <i>activity diagrams </i>to model processes</p><p class="s17" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_240.jpg"/></span> <span class="s16">the approach to system development that we have adopted in this book.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 12pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark172">5.1 </a><span><img width="4" height="20" alt="image" src="Image_241.jpg"/></span><a href="part4.htm#bookmark4" class="s43"> </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 12pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Systems analysts and designers produce models of systems. A business analyst will start by producing a model of how an organization works; a systems analyst will produce a more abstract model of the objects in that business and how they interact with one another; a designer will produce a model of how a new computerized system will work within the organization. In UML, the term ‘model’ has a specific meaning, and we explain the UML concept of a model and how it relates to other UML concepts, such as the idea of a package. Diagrams are often confused with models. A diagram is a graphical view of a part of a model for a particular purpose.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark492" class="a">The best way to understand what we mean by a diagram is to look at an example. In the Unified Process (the method of developing systems that is promoted by the developers of UML) activity diagrams are used to model the development process itself. Activity diagrams are useful for modelling sequences of actions from business processes within an organization (or between organizations) down to the detail of how an operation works. Activity diagrams are one of the techniques that can be used to model the behavioural view of a system, and their use in systems analysis and design is explained in Chapter </a>10, where they are used as one way of specifying operations. We introduce them here as an example of a UML diagram and because, as in the Unified Process, we use them to model the development process that we use in the book.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark173">A systems analysis and design project needs to follow some kind of process. We have adopted a relatively lightweight process based on the Unified Process.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="219" height="24" alt="image" src="Image_242.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.2 </a><a href="part4.htm#bookmark4" class="s29">M odels and Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.2 </a><a href="part4.htm#bookmark4" class="s29">M odels and Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.2 </a><a href="part4.htm#bookmark4" class="s29">M odels and Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark174">In any development project that aims at producing useful artefacts, the main focus of both analysis and design activities is on models (although the ultimate objective is a working system). This is equally true for projects to build highways, space shuttles, television sets or software systems. Aircraft designers build wooden or metal scale models of new aircraft to test</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">their characteristics in a wind tunnel. A skilled furniture designer may use a mental model, visualizing a new piece of furniture without drawing a single line.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In IS development, models are usually both abstract and visible. On the one hand, many of the products are themselves abstract in nature; most software is not tangible for the user. On the other hand, software is usually constructed by teams of people who need to see each other’s models. However, even in the case of a single developer working alone, it is still advisable to construct visible models. Software development is a complex activity, and it is extremely difficult to carry all the necessary details in one person’s memory.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">5.2.1 <b>What is a model?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A model is an abstract representation of something real or imaginary. Like maps, models represent something else. They are useful in several different ways, precisely because they differ from the things that they represent.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_243.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">A model is quicker and easier to build.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_244.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_245.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">A model can be used in simulations, to learn more about the thing it represents. A model can evolve as we learn more about a task or problem.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_246.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">We can choose which details to represent in a model, and which to ignore. A model is an abstraction.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_247.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">A model can represent real or imaginary things from any domain.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Many different kinds of thing can be modelled. Civil engineers model bridges, city planners model traffic flow, economists model the effects of government policy and composers model their music. This book is a model of the activity of object-oriented analysis and design.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A useful model has just the right amount of detail and structure, and represents only what is important for the task at hand. This point was not well understood by at least one character in <i>The Restaurant at the End of the Universe </i><a href="part38.htm#bookmark1097" class="a">by Douglas Adams </a>(1980). A group of space colonists are trying to reinvent things they need after crash-landing on a strange planet, and are unable to proceed with a project to design the wheel, because they cannot come to an agreement on what colour it should be.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark219" class="a" name="bookmark175">Real projects do get bogged down in this kind of unnecessary detail if insufficient care is taken to exclude irrelevant considerations (though this example is a little extreme). What IS developers must usually model is a complex situation, frequently within a human activity system. We may need to model what different stakeholders think about the situation, so our models need to be rich in meaning. We must represent functional and non-functional requirements (see Section 6.2.2). The whole requirements model must be accurate, complete and unambiguous. Without this, the work of analysts, designers and programmers later in the project would be much more difficult. At the same time, it must not include premature decisions about how the new system is going to fulfil its users’ requests, otherwise analysts, designers and programmers may later find their freedom of action too restricted. Most systems development models today are held as data in modelling tools, and much of that data is represented visually in the form of diagrams, with supporting textual descriptions and logical or mathematical specifications of processes and data.</a><a href="part9.htm#bookmark219" class="s32">1</a><a name="bookmark176">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">5.2.2 <b>What is a diagram?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A diagram is a visual representation of some part of a model. Analysts and designers use diagrams to illustrate models of systems in the same way as architects use drawings and diagrams to model buildings. Diagrammatic models are used extensively by systems analysts and designers in order to:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_248.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">communicate ideas</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_249.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_250.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_251.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">generate new ideas and possibilities test ideas and make predictions understand structures and relationships.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The models may be of existing business systems or they may be of new computerized systems. If a system is very simple, it may be possible to model it with a single diagram and</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">supporting textual descriptions. Most systems are more complex and may require many diagrams fully to capture that complexity.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark177" class="a">Figure </a>5.1 shows an example of a diagram (a UML <i>activity diagram</i><a href="part9.htm#bookmark177" class="a">) used to show part of the process of producing a book. This diagram alone is not a complete model. A model of book production would include other activity diagrams to show other parts of the overall system such as negotiating contracts and marketing the book. This diagram does not even show all the detail of the activities carried out by authors and the other participants in the process. Many of the activities, shown as rectangles with rounded corners in Fig. </a><a href="part9.htm#bookmark178" class="a">5.1, could be expanded into more detail. For example, the activity Write Chapter could be broken down into other activities such as those shown in </a>Fig. 5.2.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="607" alt="image" src="Image_252.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark177">Figure 5.1 </a><span class="s21">Activity diagram for producing a book.</span></p><p style="padding-left: 157pt;text-indent: 0pt;text-align: left;"><span><img width="184" height="423" alt="image" src="Image_253.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark178">Figure 5.2 </a><span class="s21">Activity diagram for the activity Write Chapter.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark178" class="a">We might break some of the activities shown in </a>Fig. 5.2 down into more detail, though it will be difficult to show the detail at a lower level, as activities like Write a Paragraph, Add a Figure, Revise a Paragraph and Move a Figure do not lend themselves to being represented in the flowchart notation of the activity diagram. There is also a limit to what we want to show in such a diagram. There are many activities such as Make Coffee, Change CD and Stare out of Window that are part of the process of writing, but like the colour of the wheel in the example from <i>The Restaurant at the End of the Universe</i>, they represent unnecessary detail.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark177" class="a">The diagrams of Figs </a><a href="part9.htm#bookmark178" class="a">5.1 and </a>5.2 are typical of the kind of diagrams used in systems analysis and design. Abstract shapes are used to represent things or actions from the real world. The choice of what shapes to use is determined by a set of rules that are laid down for the particular type of diagram. In UML, these rules are laid down in the <i>OMG Unified Modeling Language Specification 2.2 </i><a href="part38.htm#bookmark1244" class="a">(OMG, </a>2009). It is important that we follow the rules about diagrams, otherwise the diagrams may not make sense, or other people may not understand them. Standards are important as they promote communication in the same way as a common language. They enable communication between members of the development team if they all document the information in the same standard formats. They promote communication over time, as other people come to work on the system, even several years after it has been implemented, in order to carry out maintenance. They also promote communication of good practice, as experience of what should be recorded and how best to do that recording builds up over time and is reflected in the techniques that are used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Modelling techniques are refined and evolve over time. The diagrams and how they map to things in the real world or in a new system change as users gain experience of how well they work. However, for the designers of modelling techniques, some general rules are that the techniques should aid (and enforce):</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_254.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_255.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_256.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">simplicity of representation—only showing what needs to be shown internal consistency—within a set of diagrams completeness—showing all that needs to be shown</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_257.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">hierarchical representation—breaking the system down and showing more detail at lower levels.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark179" class="a">Figure </a>5.3 shows some symbols from a label in an item of clothing. These icons belong to a standard that allows a manufacturer of clothing in Argentina to convey to a purchaser in Sweden that the item should be washed at no more than 40° C, should not be bleached and can be tumble dried on a low setting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 109pt;text-indent: 0pt;text-align: left;"><span><img width="314" height="71" alt="image" src="Image_258.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark179">Figure 5.3 </a><span class="s21">Example from a diagram standard.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark180">While not following the UML standards will not cause your T-shirts to shrink, it will cause you problems in communicating with other analysts and designers—at least if they are using UML as well. We have chosen to use UML in this book, as it has become the industry standard for modelling information systems.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">UML classifies diagrams as either <i>structural diagrams </i>or <i>behavioural diagrams</i>. Structural diagrams show the static relationship between elements, and are package, class, object, composite structure, component and deployment diagrams. Behavioural diagrams show an aspect of the dynamic behaviour of the system being modelled, and are use case, activity, state machine, communication, sequence, timing and interaction overview diagrams.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">UML consists mainly of a graphical language to represent the concepts that we require in the development of an object-oriented information system. UML diagrams are made up of four elements:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_259.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">icons</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_260.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_261.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">two-dimensional symbols paths</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_262.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">strings.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">These terms were used in the UML 1.X specifications, and are no longer used in UML 2.2. However, they are useful to explain the graphical representation of UML diagrams.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">UML diagrams are <i>graphs</i>—composed of various kinds of shapes, known as <i>nodes</i>, joined together by lines, known as <i>paths</i><a href="part9.htm#bookmark177" class="a">. The activity diagrams in </a><a href="part9.htm#bookmark178" class="a">Figs 5.1 and </a>5.2 illustrate this. Both are made up of two-dimensional symbols that represent activities, linked by arrows that represent the control flows from one activity to another and the flow of control through the process that is being modelled. The start and finish of each activity graph is marked by special symbols—icons: the dot for the initial node and the dot in a circle for the final node. The activities are labelled with strings, and strings are also used at the decision nodes (the diamond shapes) to show the conditions that are being tested.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1244" class="a">The UML Specification (OMG, </a>2009) provides the formal grammar of UML—the syntax— and the meaning of the elements and of the rules about how elements can be combined—the semantics. It also explains the different diagrams in more detail and provides examples of their construction and use (although with fewer examples than previous versions).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There is an example on the book’s website of how the UML specification defines the syntax and semantics of UML. It may be difficult to follow at this stage in your understanding of UML, so feel free to skip it and come back to it when you know more about UML.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">5.2.3 <b>The difference between a model and a diagram</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark181">We have seen an example of a diagram in the previous section. A single diagram can illustrate or document some aspect of a system. However, a model provides a complete view of a system at a particular stage and from a particular perspective.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For example, a requirements model of a system will give a complete view of the requirements for that system. It may use one or more types of diagram and will most likely</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">contain sets of diagrams to cover all aspects of the requirements. These diagrams may be grouped together in models in their own right. In a project that uses UML, a requirements model would probably consist of a use case model, which comprises use cases and prototypes of some use cases (see Chapter </a><a href="part9.htm#bookmark182" class="a">6) and an initial system architecture model which defines initial subsystems (see Section 5.2.4). Note that models can contain diagrams, data and textual information. Figure </a>5.4 shows this: on the left-hand side of the diagram is a UML diagram showing the contents of models and packages (see Section 5.2.4), while the right- hand side of the diagram illustrates schematically the fact that use case diagrams are one possible view of the contents of the use case model.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="216" alt="image" src="Image_263.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark182">Figure 5.4 </a><span class="s21">Illustration of a UML model and its relationship with one type of diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">On the other hand a behavioural model of a system will show those aspects of a system that are concerned with its behaviour—how it responds to events in the outside world and to the passage of time. During the initial analysis activities of a project, the behavioural model may be quite simple, using communication diagrams to show which classes collaborate to respond to external events and with informally defined messages passing between them. As the project progresses and more design activities have taken place, the behavioural model will be considerably more detailed, using interaction sequence diagrams to show in detail the way that objects interact, and with every message defined as an event or an operation of a class.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A model may consist of a single diagram, if what is being modelled is simple enough to be modelled in that way, but most models consist of many diagrams—related to one another in some way—and supporting data and textual documentation. Most models consist of many diagrams because it is necessary to simplify complex systems to a level that people can understand and take in. For example, the class libraries for Java are made up of hundreds of classes, but books that present information about these classes rarely show more than about twenty on any one diagram, and each diagram groups together classes that are conceptually related.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">5.2.4 <b>M odels in U M L</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1244" class="a">The UML 2.2 Superstructure Specification (</a>OMG, 2009b) defines a model as follows:</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;"><a name="bookmark183">A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the relevant level of detail.</a></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">In UML there are a number of concepts that are used to describe systems and the ways in which they can be broken down and modelled. A <i>system </i>is the overall thing that is being modelled, such as the Agate system for dealing with clients and their advertising campaigns. A <i>subsystem </i>is a part of a system, consisting of related elements: for example, the Campaigns subsystem of the Agate system. A <i>model </i>is an abstraction of a system or subsystem from a particular perspective or <i>view</i>. An example would be the use case view of the Campaigns</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">subsystem, which would be represented by a model containing use case diagrams, among other things. A model is complete and consistent at the level of abstraction that has been chosen. Different views of a system can be presented in different models, and a <i>diagram </i>is a graphical representation of a set of elements in the model of the system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1123" class="a">Different models present different views of the system. Booch et al. </a>(1999) suggest five views to be used with UML: the use case view, the design view, the process view, the implementation view and the deployment view. The choice of diagrams that are used to model each of these views will depend on the nature and complexity of the system that is being modelled. Indeed, you may not need all these views of a system. If the system that you are developing runs on a single machine, then the implementation and deployment views are unnecessary, as they are concerned with which components must be installed on which different machines.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">UML provides a notation for modelling subsystems and models that uses an extension of the notation for <i>packages </i><a href="part9.htm#bookmark184" class="a">in UML. Packages are a way of organizing model elements and grouping them together. They do not represent things in the system that is being modelled, but are a convenience for packaging together elements that do represent things in the system. They are used particularly in CASE tools as a way of managing the models that are produced. For example, the use cases can be grouped together into a Use Cases Package. Figure </a><a href="part9.htm#bookmark185" class="a">5.5 shows the notation for packages, subsystems and models. In diagrams we can show how packages, subsystems and models contain other packages, subsystems and models. This can be done by containing model elements within larger ones. </a>Figure 5.6 shows the notation for an example of a system containing two subsystems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="403" height="111" alt="image" src="Image_264.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark184">Figure 5.5 </a><span class="s21">UML notation for packages, subsystems and models.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="254" height="115" alt="image" src="Image_265.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark185">Figure 5.6 </a><span class="s21">UML notation for a system containing subsystems, shown by containment.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">5.2.5 <b>Developing models</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The models that we produce during the development of a system change as the project progresses. They change along three main dimensions:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_266.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_267.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">abstraction formality</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_268.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">level of detail.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">During a particular phase of a project we may extend and elaborate a model as we increase our understanding of the system that is to be built. At the end of each phase we hope to have a model that is complete and consistent, within the limitations of that phase of the project. That model represents a view of our understanding of the system at that point in the project.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In a system development project that uses an iterative lifecycle, different models that represent the same view may be developed at different levels of detail as the project</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">progresses. For example, the first use case model of a system may show only the obvious use cases that are apparent from the first iteration of requirements capture. After a second iteration, the use case model may be elaborated with more detail and additional use cases that emerge from discussion of the requirements. Some prototypes may be added to try out ideas about how users will interact with the system. After a third iteration, the model will be extended to include more structured descriptions of how the users will interact with the use cases and with relationships among use cases. (Use cases are explained in Chapter </a><a href="part9.htm#bookmark186" class="a">6.) Figure </a>5.7 illustrates this process of adding detail to a model through successive iterations. The number of iterations is not set at three. Any phase in a project will consist of a number of iterations, and that number will depend on the complexity of the system being developed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"><span><img width="500" height="295" alt="image" src="Image_269.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark186">Figure 5.7 </a><span class="s21">Development of the use case model through successive iterations.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a">It is also possible to produce a model that contains a lot of detail, but to hide or suppress some of that detail in order to get a simplified overview of some aspect of the system. For example, class diagrams (explained in Chapter </a>7) can be shown with the compartments that contain attributes and operations suppressed. This is often useful for showing the structural relationships between classes, using just the name of each class, without the distracting detail of all the attributes and operations. This is the case in the diagrams that show the classes in the Java class libraries (referred to in Section 5.2.3), where the intention is to show structural relationships between classes rather than the detail.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a" name="bookmark187">As we progress through analysis and design of a system, elements in the model will become less abstract and more concrete. For example, we may start off with classes that represent the kinds of objects that we find in the business, Campaigns, Clients etc., that are defined in terms of the responsibilities that they have. By the time that we get to the end of design and are ready to implement the classes, we will have a set of more concrete classes with attributes and operations, and the classes from the domain will have been supplemented by additional classes such as collection classes, caches, brokers and proxies that are required to implement mechanisms for storing the domain classes (see </a>Chapter 18).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark492" class="a">In the same way, the degree of formality with which operations, attributes and constraints are defined will increase as the project progresses. Initially, classes will have responsibilities that are loosely defined and named in English (or whatever language the project is being developed in). By the time we reach the end of design and are ready to implement the classes, they will have operations defined using activity diagrams, Object Constraint Language, structured English or pseudo-Code (see Chapter </a>10), with pre-conditions and post-conditions for each operation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This iterative approach, in which models are successively elaborated as the project progresses, has advantages over the Waterfall model, but it also has shortcomings. First, it is</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1041" class="a">sometimes difficult to know when to stop elaborating a model and, second, it raises the question of whether to go back and update earlier models with additional information that emerges in later stages of the project. Issues like these are addressed either as part of a methodology (Chapter </a>21) or as part of a project management approach (see supporting website). For now, we shall look at a first example of a UML diagram and see how it is developed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="258" height="25" alt="image" src="Image_270.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.3  </a><a href="part4.htm#bookmark4" class="s29">Drawing Activity Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.3  </a><a href="part4.htm#bookmark4" class="s29">Drawing Activity Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.3  </a><a href="part4.htm#bookmark4" class="s29">Drawing Activity Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark188">We have used activity diagrams earlier in this chapter to illustrate what is meant by a diagram. In this section we explain the basic notation of activity diagrams in UML and give examples of how they are used. We are introducing activity diagrams at this point, first to provide an illustration of a UML diagram type, and second, so that we can use them to illustrate the development process that we use in the book.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">5.3.1 <b>Purpose of activity diagrams</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="a" name="bookmark189">Activity diagrams can be used to model different aspects of a system. At a high level, they can be used to model business processes in an existing or potential system. For this purpose they may be used early in the system development lifecycle. They can be used to model a system function represented by a use case, possibly using object flows to show which objects are involved in each use case. This would be done during the phase of the lifecycle when requirements are being elaborated. They can also be used at a low level to model the detail of how a particular operation is carried out, and are likely to be used for this purpose in later analysis or system design activities. Activity diagrams are also used within the Unified Software Development Process (USDP) (Jacobson et al., </a>1999) to model the way in which the activities of USDP are organized and relate to one another in the software development lifecycle. We use them for a similar purpose in later chapters to show how the activities of the simplified process that we have adopted for this book fit together. (This process is described in Section 5.4.)</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In summary, activity diagrams are used for the following purposes:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_271.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_272.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_273.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_274.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">to model a process or task (in business modelling for instance); to describe a system function that is represented by a use case; in operation specifications, to describe the logic of an operation; in USDP to model the activities that make up the lifecycle.</p><p class="s41" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark220" class="a" name="bookmark190">Fashions change in systems analysis and design—new approaches such as object-oriented analysis and design replace older approaches and introduce new diagrams and notation. One diagram type that is always dismissed by the inventors of new approaches but always creeps back in again is the flowchart.</a>2<span class="p"> Activity diagrams are essentially flowcharts in an object- oriented context.</span></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark525" class="a">UML 2.0 changed the underlying model for activity diagrams. In UML 1.X they were based on state machines (see Chapter </a>11), but are now distinct from state machines and based on Petri nets.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">5.3.2 <b>Notation of activity diagrams</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Activity diagrams at their simplest consist of a set of <i>actions </i><a href="part9.htm#bookmark191" class="a">linked together by flows from one action to the next, formally called ActivityEdges. Each action is shown as a rectangle with rounded corners. The name of the action is written inside this two-dimensional symbol. It should be meaningful and summarize the action. </a>Figure 5.8 shows an example of two actions joined by a <i>control flow</i>.</p><p style="padding-left: 194pt;text-indent: 0pt;text-align: left;"><a name="bookmark194"><span><img width="86" height="95" alt="image" src="Image_275.jpg"/></span></a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark191">Figure 5.8 </a><span class="s21">Example of two activities joined by a control flow.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark193" class="a" name="bookmark192">Actions exist to carry out some task. In the example of Fig. </a><a href="part8.htm#bookmark14" class="a">5.9, the first action is to add a new client into the Agate system described in Chapter </a>A1. The flow to the second action implies that as soon as the first action is complete, the next action is started. Sometimes there is more than one possible flow from an action to the next.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 144pt;text-indent: 0pt;text-align: left;"><span><img width="219" height="207" alt="image" src="Image_276.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark193">Figure 5.9 </a><span class="s21">Activities with a decision node.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this example from the Agate system, the flow of work is summarized by this brief statement from an interview with one of the directors of Agate:</p><p class="s7" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">When we add a new client, we always assign a member of staff as a contact for the client straightaway. If it’s an important client, then that person is likely to be one of our directors or a senior member of staff. The normal reason for adding a new client is because we have agreed a campaign with them, so we then add details of the new campaign. But that’s not always the case</p><p class="s7" style="padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: justify;">—sometimes we add a client before the details of the campaign have been firmed up, so in that case, once we have added the client the task is complete. If we are adding the campaign, then we would record its details, and if we know which members of staff will be working on the campaign, we would assign each of them to work on the campaign.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This transcript from an interview describes some choices that can be made, and these choices will affect the actions that are undertaken. We can show these in an activity diagram with an explicit <i>decision node</i><a href="part9.htm#bookmark193" class="a">, represented by a diamond-shaped icon, as in </a>Figure 5.9.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark194" class="a">In UML 1.X, it was not necessary to use an explicit decision node like this. The diagram could just show the alternative flows out of the action Assign Staff Contact, as in </a>Figure 5.10.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 127pt;text-indent: 0pt;text-align: left;"><span><img width="263" height="167" alt="image" src="Image_277.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 5.10 <span class="s21">UML 1.X choice represented without an explicit decision point.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark195">However, this is no longer possible since UML 2.0. In UML 1.X, if there was more than one flow out of an action, it was treated as an OR, i.e. only one flow would be taken. In UML 2.2, it is treated as an AND, i.e. all of the flows must be taken.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The alternative flows are each labelled with a <i>guard condition</i>. The guard condition is shown inside square brackets and must evaluate to either true or false. The flow of control will follow along the first control flow with a guard condition that evaluates to true. Alternative guard conditions from a single decision node do not have to be mutually exclusive, but if they are not, you should specify the order of evaluation in some way, otherwise the results will be unpredictable. We would recommend that they should be mutually exclusive.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark194" class="a">Figures 5.9 and </a>5.10 illustrate another element of the notation of activity diagrams: when an activity has completed that ends the sequence of activities within a particular diagram, there must be a control flow to a <i>final node</i><a href="part9.htm#bookmark196" class="a">, shown as a black circle within a white circle with a black border. Each activity diagram should also begin with another special icon, a black circle, which represents the start of the activity. Figure </a>5.11 shows the addition of the <i>initial node </i><a href="part9.htm#bookmark193" class="a">into the diagram of </a>Fig. 5.9. It also shows an additional action—to assign a member of staff to work on a campaign—and additional guarded flows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><span><img width="386" height="449" alt="image" src="Image_278.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark196">Figure 5.11 </a><span class="s21">Activity diagram in frame with initial node.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark196" class="a">Figure </a>5.11 also shows a feature of UML diagrams from version 2.0 onwards: every diagram can be drawn in a <i>frame</i><a href="part18.htm#bookmark438" class="a">, a rectangle with the heading of the diagram in the top left hand corner. The heading consists of the kind of diagram (this is optional), in this case activity abbreviated as act, the name of the diagram and optional parameters. Frames are really only required for diagrams such as sequence diagrams where messages can enter the diagram from the boundary represented by the frame, as in </a>Fig. 9.6.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note that there is a loop or iteration created at the bottom of this diagram, where the activity Assign Staff to Campaign is repeated until there are no more staff to assign to this particular campaign.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Activity diagrams make it possible to represent the three structural components of all procedural programming languages: sequences, selections and iterations. This ability to model processes in this way is particularly useful for modelling business procedures, but can also be helpful in modelling the operations of classes. UML 2.0 added a large number of types of actions to the metamodel for activity diagrams. These actions are the kind of actions that take place in program code. These include actions such as <i>AddVariableValueAction </i>and <i>CreateObjectAction</i>. They are intended to make it easier to create activity diagrams that can model the implementation of operations and can be compiled into a programming language: <i>Executable UML</i>.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In an object-oriented system, however, the focus is on objects carrying out the processing necessary for the overall system to achieve its objectives. There are two ways in which objects can be shown in activity diagrams:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_279.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_280.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">the operation name and class name can be used as the name of an action; an object can be shown as providing the input to or output of an action.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark197">Figure 5.12 shows an example of the first of these uses of objects in activity diagrams. In this example, the total cost of a campaign is calculated from the cost of all the individual adverts in the campaign added to the campaign overheads. The names of the classes involved are shown followed by double colons in brackets beneath the names of the actions. If the name of the action is not the same as the name of an operation of the class, then the operation name can be shown after the colons. This is one of those specialized actions to support Executable UML: a </a><i>CallOperationAction</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><span><img width="268" height="376" alt="image" src="Image_281.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark198">Figure 5.12 </a><span class="s21">Activity diagram with operations of classes as actions.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The second way that objects are shown in activity diagrams is by using <i>object flows</i><a href="part9.htm#bookmark199" class="a">. An object flow is an arrow between an object and an action that may result in a change to the state of that object. The state of the object can be shown in square brackets within the symbol for the object. Figure </a>5.13 shows an example of this for the activity Record Completion of a Campaign, which changes the state of a Campaign object from Active to Completed. (Objects</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part16.htm#bookmark291" class="a" name="bookmark200">and classes are covered in much more detail in Chapters </a><a href="part18.htm#bookmark378" class="a">7 and </a><a href="part18.htm#bookmark525" class="a">8, and the idea of ‘state’ is covered in more detail in </a>Chapter 11, where we explain state machine diagrams.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 130pt;text-indent: 0pt;text-align: left;"><span><img width="256" height="153" alt="image" src="Image_282.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark199">Figure 5.13 </a><span class="s21">Activity diagram with object flows.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A final element of the notation of activity diagrams that it is useful to understand at this stage is the idea of <i>activity partitions</i>, which were called <i>swimlanes </i>in UML 1.X and are generally known by this name. Activity partitions are particularly useful when modelling how things happen in an existing system and can be used to show where actions take place or who carries out the actions.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark275" class="a">In the Agate system, when an advertising campaign is completed, the campaign manager for that advertising campaign records that it is completed. This triggers off the sending of a record of completion form to the company accountant. An invoice is then sent to the client and, when the client pays the invoice, the payment is recorded. (Some of these actions are documented as use cases in </a>Fig. A2.2.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark200" class="a">In order to model the way that the system works at the moment, we might draw an activity diagram like the one in </a>Fig. 5.14 in order to show these actions taking place. The brief for this project is to concern ourselves with the campaign management side of the business, as there is an existing accounts system in the company. However, the act of drawing this diagram raises the question of what happens to the payment from the client:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_283.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Does the payment go to the accountant, and is there some way in which the campaign manager is notified?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_284.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: justify;">Does the payment go to the campaign manager, and does he or she record the payment and then pass it on to the accountant?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="339" alt="image" src="Image_285.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Figure 5.14 <span class="s21">Activity diagram with activity partitions.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">Clarifying points like these is part of the process of requirements capture, which is covered in detail in </a>Chapter 6.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark201">One of the reasons for introducing activity diagrams at this point is that they are used in the Unified Software Development Process to document the activities of the software development lifecycle. In USDP, the diagrams are </a><i>stereotyped</i>—the standard UML symbols are replaced with special icons to represent actions and the inputs and outputs of those actions. In the next section, we describe the simplified process model that we have adopted in this book. We use activity diagrams to summarize this process in the case study chapters later in the book.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="243" height="25" alt="image" src="Image_286.png"/></span></p><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s28">5.4</a></p><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s28">5.4</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s28">5.4</a></p><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s29">A Development Process</a></p><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s29">A Development Process</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="#bookmark4" class="s29">A Development Process</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="a" name="bookmark202">A development process should specify what has to be done, when it has to be done, how it should be done and by whom in order to achieve the required goal. Project management techniques (see Chapter 22 on the supporting website) are used to manage and control the process for individual projects. One of the software development processes currently in wide use is the Rational Unified Process, a proprietary process now owned by IBM but based on the Unified Software Development Process (USDP) (Jacobson et al., </a>1999). USDP was originally developed by the team that created UML. It is claimed that USDP embodies much of the currently accepted best practices in information systems development. These include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_287.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_288.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_289.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_290.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">iterative and incremental development component-based development requirements-driven development configurability</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_291.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">architecture centrism</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_292.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">visual modelling techniques.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part31.htm#bookmark1041" class="a" name="bookmark203">USDP is explained in more detail in Chapter </a>21 on System Development Methodologies. USDP is often referred to as the <i>Unified Process</i>.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark114" class="a">USDP does not follow the traditional Waterfall Lifecycle shown in Fig. </a>3.3 but adopts an iterative approach within four main <i>phases</i><a href="part9.htm#bookmark204" class="a">. These phases reflect the different emphasis on tasks that are necessary as systems development proceeds (</a>Fig. 5.15). These differences are captured in a series of <i>workflows </i><a href="part9.htm#bookmark206" class="a">that run through the development process. Each workflow defines a series of activities that are to be carried out as part of the workflow and specifies the roles of the people who will carry out those activities. The important fact to bear in mind is that in the Waterfall Lifecycle, activities and phases are one and the same, while in iterative lifecycles like USDP the activities are independent of the phases and it is the mix of activities that changes as the project proceeds. Figure </a><a href="part9.htm#bookmark204" class="a">5.16 illustrates how a simplified Waterfall Lifecycle would look using the same style of diagram as </a>Fig. 5.15.</p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="475" height="468" alt="image" src="Image_293.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark204">Figure 5.15 </a><span class="s21">Phases and workflows in the Unified Software Development Process.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">5.4.1 <b>U nderlying principles</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark205">In order to place the techniques and models described in this book in context we have assumed an underlying system development process. We are not attempting to invent yet another methodology. The main activities that we describe here appear in one form or another in most system development methodologies. The system development process that we adopt is largely consistent with USDP, although it incorporates ideas from other sources. This approach incorporates the following characteristics. It is:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_294.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_295.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_296.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_297.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_298.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">iterative incremental requirements-driven component-based architectural.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">These principles are embodied in many commonly used methodologies and are viewed as elements of best practice.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">5.4.2 <b>M ain activities</b></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_299.jpg"/></span></p><p style="padding-left: 51pt;text-indent: -45pt;line-height: 18pt;text-align: left;">The systems development process embodies the following main activities: requirements capture and modelling</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_300.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">requirements analysis</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_301.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_302.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">system architecture and design class design</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_303.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">interface design</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_304.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_305.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">data management design construction</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_306.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_307.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">testing implementation.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark206" class="a">These activities are interrelated and dependent upon each other. In a waterfall development process they would be performed in a sequence (as in Fig. </a><a href="part9.htm#bookmark207" class="a">5.16). This is not the case in an iterative development process, although some activities clearly precede others. For example, at least some requirements capture and modelling must take place before any requirements analysis can be undertaken. V arious UML techniques and notations are used, as well as other techniques, and these are summarized in the table in Fig. </a>5.17.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><span><img width="484" height="377" alt="image" src="Image_308.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark206">Figure 5.16 </a><span class="s21">Phases and activities in a simplified waterfall process.</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="623" alt="image" src="Image_309.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark207">Figure 5.17 </a><span class="s21">Table of system development process activities.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark208">Only the key deliverables are listed in the table and are likely to be produced in a series of iterations and delivered incrementally. A brief summary of each activity follows. The models that are produced and the activities necessary to produce them are explained in more detail in subsequent chapters.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Requirements capture and modelling</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">V arious fact-finding techniques are used to identify requirements. These are discussed in Chapter </a>6. Requirements are documented in use cases and a requirements list. A use case captures an element of functionality and the requirements model may include many use cases. For example, in the Agate case study the requirement that the accountant should be able to record the details of a new member of staff on the system is an example of a use case. It would be described initially as follows:</p><p class="s27" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">U se Case: Add a new staff member</p><p class="s7" style="padding-top: 1pt;padding-left: 20pt;text-indent: 0pt;line-height: 110%;text-align: left;">When a new member of staff joins Agate, his or her details are recorded. He or she is assigned a staff number, and the start date is recorded. Start date defaults to today’s date. The starting grade</p><p class="s7" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">is recorded.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The use cases can also be modelled graphically. The use case model is refined to identify common procedures and dependencies between use cases. The objective of this refinement is to produce a succinct but complete description of requirements. Not all requirements will be captured in use cases. Some requirements that apply to the whole system will be captured in a list of requirements. Requirements that are concerned with how well the system performs rather than what it does (non-functional requirements) are also captured separately. It is also common to capture rules that reflect how the business works (business rules) in a separate document and cross-reference them from use cases.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Prototypes of some key user interfaces may be produced in order to help to understand the requirements that the users have for the system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark209" class="a">An initial system architecture in terms of an outline package structure (see </a>Fig. 5.18 for part of the Agate system) may be developed to help guide subsequent steps during the development process. This initial architecture will be refined and adjusted as the development proceeds.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"><span><img width="357" height="115" alt="image" src="Image_310.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark209">Figure 5.18 </a><span class="s21">Part of the initial system architecture for the Agate system.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Requirements analysis</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark211" class="a" name="bookmark210">This activity analyses the requirements. Essentially each use case describes one major user requirement. Each use case is analysed separately to identify the objects that are required to support it. The use case is also analysed to determine how these objects interact and what responsibilities each of the objects has in order to support the use case. Communication diagrams (Fig. </a><a href="part16.htm#bookmark291" class="a">5.19) are used to model the object interaction. The models for each use case are then integrated to produce an analysis class diagram, as described in Chapters </a><a href="part18.htm#bookmark378" class="a">7 and </a><a href="part9.htm#bookmark212" class="a">8. Figure </a>5.20 shows an example of an analysis class. The initial system architecture may be refined as a result of these activities. Object diagrams may be used to analyse the links between objects in order to determine the associations between classes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><span><img width="503" height="233" alt="image" src="Image_311.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark211">Figure 5.19 </a><span class="s21">Part of a communication diagram for the use case Add New Staff.</span></p><p style="padding-left: 175pt;text-indent: 0pt;text-align: left;"><span><img width="138" height="194" alt="image" src="Image_312.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark212">Figure 5.20 </a><span class="s21">Partly completed sample analysis class.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S ystem architecture and design</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark213" class="a">In this activity various decisions concerning the design process are made, including the further specification of a suitable systems architecture. For example, a possible architecture for the system in the Agate case study is shown in Fig. </a>5.21. This architecture has four layers. The two bottom layers provide common functionality and database access for the campaign costing and advert planning subsystems. Part of the architectural specification may include the identification of particular technologies to be used. In this case it may be decided to use a client–server architecture with the subsystem interfaces operating through a web browser to give maximum operational flexibility.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 119pt;text-indent: 0pt;text-align: left;"><span><img width="286" height="243" alt="image" src="Image_313.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark213">Figure 5.21 </a><span class="s21">Possible architecture for part of the Agate system.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark214">As well as package diagrams, shown here, component diagrams are used to model logical components of the system, and deployment diagrams are used to show the physical architecture of processors and the software that will run on them.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark611" class="a">System architecture and design is also concerned with identifying and documenting suitable development standards (e.g. interface design standards, coding standards) for the remainder of the project. System architecture and design is explained in </a>Chapter 13.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C lass design</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a">Each of the use case analysis models is now elaborated separately to include relevant design detail. Interaction sequence diagrams may be drawn to show detailed object communication (Chapter </a><a href="part18.htm#bookmark525" class="a">9) and state machine diagrams may be prepared for objects with complex state behaviour (</a><a href="part9.htm#bookmark215" class="a">Chapter 11). The separate models are then integrated to produce a detailed design class diagram. Design classes have attributes and operations specified (Fig. </a><a href="part9.htm#bookmark212" class="a">5.22) to replace the less specific responsibilities that may have been identified by the analysis activity </a><a href="part9.htm#bookmark212">(Fig.</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark212" class="a">5.20). The detailed design of the classes normally necessitates the addition of further </a><a href="part23.htm#bookmark681" class="a">classes to support, for example, the user interface and access to the data storage system (typically a database management system). Class design is explained in </a>Chapter 14.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 94pt;text-indent: 0pt;text-align: left;"><span><img width="352" height="146" alt="image" src="Image_314.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark215">Figure 5.22 </a><span class="s21">Partly completed sample design class.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">U ser interface design</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark814" class="a" name="bookmark216">The nature of the functionality offered via each use case has been defined in requirements analysis. User interface design produces a detailed specification as to how the required functionality can be realized. User interface design gives a system its look and feel and determines the style of interaction the user will have. It includes the positioning and colour of buttons and fields, the mode of navigation used between different parts of the system and the nature of online help. Interface design is explained in Chapter </a>17 and is very dependent on class design. Sequence diagrams are used to model the interaction between instances of classes, and state machine diagrams are used to model the way in which the user interface responds to user events, such as mouse clicks and the entry of data. The class model is updated with new classes representing the user interface, and detail is added as the interaction becomes better understood.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Data management design</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">Data management design focuses on the specification of the mechanisms suitable for implementation of the database management system being used (see Chapter  </a>18). Techniques such as normalization and entity–relationship modelling may be particularly useful if a relational database management system is being used. Data management design and class design are interdependent. Sequence diagrams are used to model the interaction between instances of classes, and state machine diagrams are used to model the way that objects change state over time in response to real world events. The class model is updated with new classes representing the way in which data will be stored, including data management frameworks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C onstruction</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Construction is concerned with building the application using appropriate development technologies. Different parts of the system may be built using different languages. Java may be used to construct the user interface, while a database management system such as Oracle would manage data storage and handle commonly used processing routines. Class, sequence, state machine, component and deployment diagrams provide the specification to the developers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Testing</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Before the system can be delivered to the client it must be thoroughly tested. Testing scripts should be derived from the use case descriptions that were previously agreed with the client. Testing should be performed as elements of the system are developed. Different kinds of tests are carried out as the construction work proceeds. Testing is not all left to the end.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Implementation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The final implementation of the system will include its installation on the various computers that will be used. It will also include managing the transition from the old systems to the new</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">systems for the client. This will involve careful risk management and staff training.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="122" height="25" alt="image" src="Image_315.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">5.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark217">As in many kinds of development projects, we use models to represent things and ideas that we want to document and to test out without having to actually build a system. Of course, our ultimate aim is to build a system and the models help us to achieve that. Models allow us to create different views of a system from different perspectives and, in an information system development project, most models are graphical representations of things in the real world and the software artefacts that will be used in the information system.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">These graphical representations are diagrams, which can be used to model objects and processes. In UML a number of diagrams are defined and the rules for how they are to be drawn are documented. UML defines two types of diagram: structural and behavioural. Diagrams are also supported with textual material, some of which may be informal, for example in natural language, while some may be formal, for example written in Object Constraint Language.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As a project progresses a variety of models are produced in order to represent different aspects of the system that is being built. A model is a complete and consistent view of a system from a particular perspective, typically represented visually in diagrams. An example of a diagram notation that is used in UML is the activity diagram. Activity diagrams model activities that are carried out in a system and include sequences of actions, alternative paths and repeated actions. As well as being used in system development projects, activity diagrams are also used in the Unified Software Development Process to document the sequence of activities in a workflow.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The Unified Software Development Process provides a specification of a process that can be used to develop software systems. It is made up of phases, within which models of the system are elaborated through successive iterations in which additional detail is added to the models until the system can be constructed in software and implemented. For the purpose of this book, we have broken the software development process into a number of activities that must be undertaken in order to develop a system. These activities are described in more detail in subsequent chapters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:272pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">5.1  <span class="s16">What is the difference between a diagram and a model?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">5.2  <span class="s16">What are the two types of UML diagram?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;text-indent: -26pt;text-align: left;">5.3 <span class="s16">Why do we use models in developing computerized information systems and other artefacts?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">5.4  <span class="s16">Why do we need standards for the graphical elements of diagrams?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 22pt;text-indent: -26pt;text-align: left;">5.5  <span class="s16">What is the UML notation for each of the following: package, subsystem and model?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">5.6  <span class="s16">In what way can we show in UML that something is contained within something else, for example a subsystem within another subsystem?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">5.7  <span class="s16">What is the notation used for an action in a UML activity diagram?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">5.8  <span class="s16">What links actions in an activity diagram?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">5.9  <span class="s16">In what way can a decision be represented in a UML activity diagram?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">5.10 <span class="s16">What is the notation for the two special nodes that start and finish an activity diagram?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">5.11 <span class="s16">What is meant by a guard condition?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">5.12 <span class="s16">What is an object flow?</span></p><p class="s35" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">5.13 <span class="s16">What is the notation for an object flow?</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:36pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s35" style="padding-left: 36pt;text-indent: -26pt;text-align: left;">5.14 <span class="s16">What is the difference between USDP and the Waterfall Lifecycle in the relationship between activities and phases?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark218">Case Study Work, Exercises and Projects</a></p></td></tr><tr style="height:180pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">5.A <span class="s16">Some people suggest that information systems are models or simulations of the real world. What are the advantages and disadvantages of thinking of information systems in this way?</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">5.B <span class="s16">Think of other kinds of development project in which models are used. For each kind of project list the different kinds of models that you think are used.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">5.C <span class="s16">Choose a task that you carry out and that you understand, for example preparing an assignment at college or university, or a task at work. Draw an activity diagram to summarize the actions that make up this task. Use activity partitions if the task involves actions that are carried out by other people.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">5.D <span class="s16">Choose some of the actions in your activity diagram and break them down into more detail in separate diagrams.</span></p><p class="s35" style="padding-left: 32pt;padding-right: 9pt;text-indent: -23pt;text-align: justify;">5.E <span class="s16">Read about the Rational Unified Process (RUP) (see references in the Further Reading section). Identify some of the differences between RUP and USDP.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_316.png"/></span></p><p class="s7" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="http://www.bpmn.org/" class="s6" target="_blank">Although activity diagrams are used in UML for a variety of purposes, including modelling business processes, there are other notations that are becoming more widely used specifically for business process modelling. These have their origins in workflow modelling notations and the growth of business process automation packages that use web services to carry out steps in a business process. The Business Process Modelling Notation (BPMN) is becoming the standard in this area, and is now managed by the OMG (</a>http://www.bpmn.org/).</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1123" class="s6">Booch et al. </a><a href="part38.htm#bookmark1210" class="s6">(1999) discuss the purpose of modelling and the differences between models and diagrams. They also describe the notation of activity diagrams. Jacobson et al. </a>(1999) describe the Unified Software Development Process and explain the notation of the stereotyped activity diagrams that they use to model the workflows in USDP.</p><p style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1220" class="s6">An alternative to USDP is the Rational Unified Process, </a><a href="part38.htm#bookmark1222" class="s6">see Kruchten </a><a href="part38.htm#bookmark1220" class="s6">(2004), Kroll and </a><a href="http://www.ibm.com/developerworks/rational/products/rup/" class="s6" target="_blank">Kruchten (2003) or the IBM Corporation website (</a><a href="part38.htm#bookmark1220" class="s6">http://www.ibm.com/developerworks/rational/products/rup/).</a></p><p class="s7" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1234" class="s6">Executable UML is explained in a book by </a>Mellor and Balcer (2002).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_317.png"/></span></p><p class="s1" style="padding-top: 4pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark219">1 Some approaches rely primarily on formal logic techniques and rigorous mathematical specification. These are most often applied to real-time and safety-critical systems, such as those that control aircraft in flight or manage nuclear power plants, and are not covered in this book.</a><a name="bookmark220">&zwnj;</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;">2 Flowcharts are useful because they model the way that people perform tasks as a sequence of actions with decision points where they take one of a set of alternative paths, in which some actions are repeated either a number of times or until some condition is true and some actions take place in parallel. In UML 2.2 activity diagrams have the semantics of Petri Nets.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_318.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.5pt" cellspacing="0"><tr style="height:35pt"><td style="width:346pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s44" style="padding-top: 11pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark221">LEARNING OBJECTIVES</a><a name="bookmark222">&zwnj;</a></p></td><td style="width:94pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_319.jpg"/></span></p></td></tr><tr style="height:93pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s45" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">In this chapter you will learn</p><p class="s17" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_320.jpg"/></span> <span class="s45">the distinction between the current and required systems</span></p><p class="s17" style="padding-top: 1pt;padding-left: 33pt;padding-right: 113pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_321.jpg"/></span> <span class="s45">when and how to apply the five major fact-finding techniques </span><span><img width="20" height="13" alt="image" src="Image_322.jpg"/></span> <span class="s45">the need to document requirements</span></p><p class="s45" style="padding-left: 33pt;padding-right: 113pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_323.jpg"/></span><span class="s17"> </span>how to draw <i>use case diagrams </i>to document requirements <span><img width="20" height="13" alt="image" src="Image_324.jpg"/></span><span class="s17"> </span>how to write <i>use case descriptions</i>.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="141" height="24" alt="image" src="Image_325.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.1  </a><a href="part4.htm#bookmark4" class="s48">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.1  </a><a href="part4.htm#bookmark4" class="s48">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.1  </a><a href="part4.htm#bookmark4" class="s48">Introduction</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark223">Identifying what a new system should be able to do is one of the first steps in its development, whether you are developing some simple programs for your own use or embarking on the development of a large-scale system for a commercial client. The specification of what the system must do is based on the users’ requirements, and gathering this information from users is a key role of the systems analyst or business analyst. Requirements will include what the existing system does, and what the new system has to do that the existing system doesn’t do. To gather requirements, the analyst will read up on the organization, carry out interviews, observe people at work, collect samples of documents and possibly use questionnaires. The subjects of the investigation will include many stakeholders, not just users of the system, but all the people who have an interest in the new system and whose needs must be considered. UML provides a diagramming technique that can be used to document the stakeholders’ requirements. This is the use case diagram, a relatively simple diagram that is supported by written information in the form of use case descriptions.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="195" height="23" alt="image" src="Image_326.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.2 </a><a href="part4.htm#bookmark4" class="s48">U ser Req uirements</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.2 </a><a href="part4.htm#bookmark4" class="s48">U ser Req uirements</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.2 </a><a href="part4.htm#bookmark4" class="s48">U ser Req uirements</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark224">The aim of developing a new information system must be to produce something that meets the needs of the people who will be using it. In order to do this, we must have a clear understanding both of the overall objectives of the business and of what it is that the individual users of the system are trying to achieve in their jobs. Unless you are in the rare position of developing a system for a new organization, you will need to understand how the business is operating at present and how people are working now. Many aspects of the current system will need to be carried forward into the new system, so it is important that information about what people are doing is gathered and documented. These are the requirements that are derived from the ‘current system’. The motivation for the development of a new information system is usually problems with and inadequacies of the current system, so it is also essential to capture what it is that the users require of the new system that they cannot do with their existing system. These are the ‘new requirements’. The requirements should identify benefits of buying or building the new</a><a name="bookmark225">&zwnj;</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">system that can be included in the ‘Business Case’ or ‘Cost-Benefit Analysis’, which is used to justify the expense of the new system in terms of the benefits that it will bring.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.2.1 <b>Current system</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The existing system may be a manual one, based on paper documents, forms and files; it may already be computerized; or it may be a combination of both manual and computerized elements. Whichever it is, it is reasonably certain that large parts of the existing system meet the needs of the people who use it, that it has to some extent evolved over time to meet business needs and that users are familiar and comfortable with it. It is almost equally certain that there are sections of the system that no longer meet the needs of the business, and that there are aspects of the business that are not dealt with in the existing system.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is important that the analyst, gathering information as one of the first steps in developing a new system, gains a clear understanding of how the existing system works: parts of the existing system will be carried forward into the new one. It is also important because the existing system will have shortcomings and defects, which must be avoided or overcome in the new system. It is not always easy or possible to replace existing systems. So-called <i>legacy systems </i>may have been developed some time ago and may contain millions of lines of program code, which have been added to and amended over a period of time. One approach to dealing with such systems is to create new front-ends, typically using modern graphical user interfaces and object-oriented languages, and <i>wrap </i>the legacy systems up in new software. If this is the case, then it is also necessary to understand the interfaces to the legacy systems that the new <i>wrappers </i>will have to communicate with.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is not always possible to leave legacy systems as they are and simply wrap them in new code. Sometimes the suppliers of legacy systems withdraw support for older versions of applications; sometimes the technology in which they were written becomes obsolete and unsupported. In these cases, the system may need to be replaced for IT reasons rather than because of business requirements for new functionality. It was not possible to ignore the problems that faced companies at the turn of the century, when it was realized that many systems were in danger of catastrophic collapse as a result of the decision to use two decimal digits to store the year. However, the process of changing the program code in such systems is a matter of understanding the internal working of existing systems rather than gathering information about the way the organization works and the way that people do their jobs.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark226">Not everyone agrees that a detailed understanding of the current system is necessary. Advocates of Agile approaches to software development argue that the focus should be on understanding the users’ requirements for the new system and not on the functionality of the old system.</a></p><p class="s49" style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">We believe that a case can be made for investigating the existing system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_327.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_328.jpg"/></span></p><p class="s49" style="padding-top: 5pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">Some of the functionality of the existing system will be required in the new system. Some of the data in the existing system is of value and must be migrated into the new system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_329.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">Technical  documentation  of  existing  computer  systems  may  provide  details  of processing algorithms that will be needed in the new system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_330.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_331.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_332.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">The existing system may have defects that we should avoid in the new system. Studying the existing system will help us to understand the organization in general. Parts of the existing system may be retained. Information systems projects are now rarely ‘green field’ projects in which manual systems are replaced by new computerized systems; more often there will be existing systems with which interfaces must be established.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_333.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">We are seeking to understand how people do their jobs at present in order to characterize people who will be users of the new system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_334.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">We may need to gather baseline information against which we can set and measure performance targets for the new system.</p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">For all these reasons, an understanding of the current system should be part of the analysis process. However, the analyst should not lose sight of the objective of developing a new system. In the sections on functional, non-functional and usability requirements below, we shall explain what kind of information we are gathering.</p><p class="s50" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">6.2.2 <b>New req uirements</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Most organizations now operate in an environment that is rapidly changing. The relative strength of national economies around the world can change dramatically and at short notice; the fortunes of large companies, which may be an organization’s suppliers, customers or competitors, can be transformed overnight; new technologies are introduced that change production processes, distribution networks and the relationship with the consumer; governments and (particularly in Europe) supra-governmental organizations introduce legislation that has an impact on the way that business is conducted. Some authors make the case for developing business strategies to cope with this turmoil. Tom Peters in <i>Thriving on Chaos </i>(1988) argues that we must learn to love change and develop flexible and responsive organizations to cope with the dynamic business environment. A clear result of responding to a dynamic environment is that organizations change their products and services and change the way they do business. The effect of this is to change their need for information. Even in less responsive organizations, information systems become outdated and need enhancing and extending. Mergers and demergers create the need for systems to be replaced. The process of replacement offers an opportunity to extend the capabilities of systems to take advantage of new technological developments, or to enhance their usefulness to management and workforce. Many organizations are driven by internal factors to grow and change the ways in which they operate, and this too provides a motivation for the development of new information systems.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark227">Whether you are investigating the working of the existing system or the requirements for the new system, the information you gather will fall into one of three categories: ‘functional requirements’, ‘non-functional requirements’ and ‘usability requirements’. Functional and non- functional requirements are conventional categories in systems analysis and design, while usability is often ignored in systems development projects. In many university courses, issues surrounding the usability of systems are taught under the separate heading of human factors or human–computer interaction, or are only considered in the design stage of the development process. However, the lesson of human factors research is that usability considerations should be integral to the systems development lifecycle and so they are included here.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">F unctional requirements</p><p class="s52" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Functional requirements <span class="s49">describe what a system does or is expected to do, often referred to as its </span>functionality<span class="s49">. In the object-oriented approach, which we are taking here, we shall initially employ use cases to document the functionality of the system. As we progress into the analysis stage, the detail of the functionality will be recorded in the data that we hold about objects, their attributes and operations.</span></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">At this stage, we are setting out to establish what the system must do, and functional requirements include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_335.jpg"/></span></p><p class="s49" style="padding-top: 6pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">descriptions of the processing that the system will be required to carry out;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_336.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">details of the inputs into the system from paper forms and documents, from interactions between people, such as telephone calls, and from other systems;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_337.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">details of the outputs that are expected from the system in the form of printed documents and reports, screen displays and transfers to other systems;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_338.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;line-height: 11pt;text-align: left;">details of data that must be held in the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Non-functional requirements</p><p class="s52" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Non-functional requirements <span class="s49">are those that describe aspects of the system that are concerned with how well it provides the functional requirements. These include:</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_339.jpg"/></span></p><p class="s49" style="padding-top: 6pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">performance criteria such as desired response times for updating data in the system or retrieving data from the system;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_340.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_341.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">ability of the system to cope with a high level of simultaneous access by many users; availability of the system with the minimum of downtime;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_342.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;line-height: 11pt;text-align: left;">time taken to recover from a system failure;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_343.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">anticipated volumes of data, either in terms of transaction throughput or of what must be stored;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_344.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;line-height: 11pt;text-align: left;">security considerations such as resistance to attacks and the ability to detect attacks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">U sability requirements</p><p class="s52" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Usability requirements <a href="part23.htm#bookmark777" class="s53">are those that will enable us to ensure that there is a good match between the system that is developed and both the users of that system and the tasks that they will undertake when using it. The International Organization for Standardization (ISO) has defined the usability of a product as ‘the extent to which specified users can achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use’. Usability can be specified in terms of measurable objectives, and these are covered in more detail in Chapter </a><span class="s49">16 on Human–Computer Interaction. In order to build usability into the system from the outset, we need to gather the following types of information:</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_345.jpg"/></span></p><p class="s49" style="padding-top: 5pt;padding-left: 49pt;text-indent: 0pt;text-align: left;"><a name="bookmark228">characteristics of the users who will use the system;</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_346.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_347.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_348.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">the tasks that the users undertake, including the goals that they are trying to achieve; situational factors that describe the situations that could arise during system use; acceptance criteria by which the user will judge the delivered system.</p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Booth (1989) describes the issues surrounding system usability in more detail.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="237" height="24" alt="image" src="Image_349.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.3  </a><a href="part4.htm#bookmark4" class="s48">Fact-Finding Techniq ues</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.3  </a><a href="part4.htm#bookmark4" class="s48">Fact-Finding Techniq ues</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.3  </a><a href="part4.htm#bookmark4" class="s48">Fact-Finding Techniq ues</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark229">There are five main fact-finding techniques that are used by analysts to investigate requirements. Here we describe each of them in the order that they might be applied in a system development project, and for each one we explain the kind of information that you would expect to gain from its use, its advantages and disadvantages, and the situations in which it is appropriate to use it.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.3.1 <b>Background reading</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">If an analyst is employed within the organization that is the subject of the fact-gathering exercise, then it is likely that he or she will already have a good understanding of the organization and its business objectives. If, however, he or she is going in as an outside consultant, then one of the first tasks is to try to gain an understanding of the organization. Background reading or research is part of that process. The kind of documents that are suitable sources of information include the following:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_350.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_351.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_352.jpg"/></span></p><p class="s49" style="padding-top: 5pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">company reports organization charts policy manuals</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_353.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_354.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">job descriptions reports</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_355.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;line-height: 11pt;text-align: left;">documentation of existing systems.</p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Although  reading  company  reports  may  provide  the  analyst  with  information  about  the organization’s mission, and so possibly some indication of future requirements, this technique mainly provides information about the current system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Advantages and disadvantages</p><p class="s50" style="padding-top: 1pt;padding-left: 17pt;text-indent: -11pt;text-align: left;">+  <span style=" color: #000;">Background reading helps the analyst to get an understanding of the organization before meeting the people who work there.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">It also allows the analyst to prepare for other types of fact finding; for example, by being aware of the business objectives of the organization.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">Documentation on the existing system may provide formally defined information requirements for the current system.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">– <span style=" color: #000;">Written documents often do not match up to reality; they may be out of date or they may reflect the official policy on matters that are dealt with differently in practice.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Appropriate situations</p><p class="s49" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Background reading is appropriate for projects where the analyst is not familiar with the organization being investigated. It is useful in the initial stages of investigation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark230">6.3.2 </a><b>Interviewing</b></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark231" class="s53">Interviewing is probably the most widely used fact-finding technique; it is also the one that requires the most skill and sensitivity. Because of this, we have included a set of guidelines on interviewing that includes some suggestions about etiquette in Box </a>6.1.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A systems analysis interview is a structured meeting between the analyst and an interviewee who is usually a member of staff of the organization being investigated. The interview may be one of a series of interviews that range across different areas of the interviewee’s work or that probe in progressively greater depth about the tasks undertaken by the interviewee. The degree of structure may vary: some interviews are planned with a fixed set of questions that the interviewer works through, while others are designed to cover certain topics but will be open- ended enough to allow the interviewer to pursue interesting facts as they emerge. The ability to respond flexibly to the interviewee’s responses is one of the reasons why interviews are so widely used.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Interviews can be used to gather information from management about their objectives for the organization and for the new information system, from staff about their existing jobs and their information needs, and from customers and members of the public as possible users of systems. While conducting an interview, the analyst can also use the opportunity to gather documents that the interviewee uses in his or her work.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is usually assumed that questionnaires are used as a substitute for interviews when potential interviewees are geographically dispersed in branches and offices around the world. The widespread use of desktop video conferencing may change this and make it possible to interview staff wherever they are. Even then, questionnaires can reach more people.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1165" class="s53">Interviewing different potential users of a system separately can mean that the analyst is given different information by different people. Resolving these differences later can be difficult and time-consuming. One alternative is to use group interviews or workshops in order to get the users to reach a consensus on issues. Dynamic Systems Development Method (DSDM) is a method of carrying out systems development in which group discussions are used (DSDM Consortium, 2007). These discussions are run as facilitated workshops for knowledgeable </a>users with a facilitator who aims to get the users to pool their knowledge and to reach a consensus on the priorities of the development project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Advantages and disadvantages</p><p class="s50" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">+  <span style=" color: #000;">Personal contact allows the analyst to be responsive and adapt to what the user says.</span></p><p class="s49" style="padding-left: 17pt;text-indent: 0pt;text-align: left;">Because of this, interviews produce high-quality information.</p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">The analyst can probe in greater depth about the person’s work than can be achieved with other methods.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">+ <span style=" color: #000;">If the interviewee has nothing to say, the interview can be terminated.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">– <span style=" color: #000;">Interviews are time-consuming and can be the most costly form of fact gathering.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">–  <span style=" color: #000;">Interview results require the analyst to work on them after the interview: the transcription of tape recordings or writing up of notes.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">– <span style=" color: #000;">Interviews can be subject to bias if the interviewer has a closed mind about the problem.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">– <span style=" color: #000;">If different interviewees provide conflicting information, it can be difficult to resolve later.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Appropriate situations</p><p class="s49" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Interviews are appropriate in most projects. They can provide information in depth about the existing system and about people’s requirements from a new system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:7.58928pt" cellspacing="0"><tr style="height:25pt"><td style="width:438pt" bgcolor="#3395B9"><p class="s54" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark231">Box 6.1 </a><b>Guidelines on Interviewing</b></p></td></tr><tr style="height:12pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:33pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s56" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;line-height: 106%;text-align: left;">Conducting an interview requires good planning, good interpersonal skills and an alert and responsive frame of mind. These guidelines cover the points you should bear in mind when planning and</p><p class="s56" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">conducting an interview.</p></td></tr><tr style="height:35pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Before the interview</p></td></tr><tr style="height:21pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">You should always make appointments for interviews in advance. You should give the interviewee</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">information about the likely duration of the interview and the subject of the interview.</p></td></tr><tr style="height:21pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Being interviewed takes people away from their normal work. Make sure that they feel that it is time well</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">spent.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.125pt" cellspacing="0"><tr style="height:21pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">It is conventional to obtain permission from an interviewee’s line manager before interviewing them.</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Often the analyst interviews the manager first and uses the opportunity to get this permission.</p></td></tr><tr style="height:31pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 11pt;text-indent: 13pt;text-align: left;">In large projects, an interview schedule should be drawn up showing who is to be interviewed, how often and for how long. Initially this will be in terms of the job roles of interviewees rather than named individuals. It</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">may be the manager who decides which individual you interview in a particular role.</p></td></tr><tr style="height:21pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Have a clear set of objectives for the interview. Plan your questions and write them down. Some people</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">write the questions with space between them for the replies.</p></td></tr><tr style="height:11pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Make sure your questions are relevant to the interviewee and his or her job.</p></td></tr><tr style="height:35pt"><td style="width:441pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">At the start of the interview</p></td></tr><tr style="height:11pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Introduce yourself and the purpose of the interview.</p></td></tr><tr style="height:11pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Arrive on time for interviews and stick to the planned timetable—do not overrun.</p></td></tr><tr style="height:31pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 11pt;text-indent: 13pt;text-align: left;">Ask the interviewee if he or she minds you taking notes or tape-recording the interview. Even if you tape- record an interview, you are advised to take notes. Machines can fail! Your notes also allow you to refer back</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">to what has been said during the course of the interview and follow up points of interest.</p></td></tr><tr style="height:31pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 11pt;text-indent: 13pt;text-align: left;">Remember that people can be suspicious of outside consultants who come in with clipboards and stopwatches. The cost–benefit analyses of many information systems justify the investment in terms of</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">savings in jobs!</p></td></tr><tr style="height:35pt"><td style="width:441pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">During the interview</p></td></tr><tr style="height:41pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 11pt;text-indent: 0pt;text-align: justify;">Take responsibility for the agenda. You should control the direction of the interview. This should be done in a sensitive way. If the interviewee is getting away from the subject, bring them back to the point. If what they are telling you is important, then say that you will come back to it later and make a note to remind yourself to</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">do so.</p></td></tr><tr style="height:31pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 11pt;text-indent: 13pt;text-align: left;">Use different kinds of question to get different types of information. Q uestions can be open-ended—‘Can you explain how you complete a timesheet?’—or closed—‘How many staff use this system?’. Do not,</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">however, ask very open-ended questions such as ‘Could you tell me what you do?’.</p></td></tr><tr style="height:11pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Listen to what the interviewee says and encourage him or her to expand on key points.</p></td></tr><tr style="height:31pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 7pt;text-indent: 13pt;text-align: left;">Keep the focus positive if possible. Make sure you have understood answers by summarizing them back to the interviewee. Avoid allowing the interview to degenerate into a session in which the interviewee</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">complains about everyone and everything.</p></td></tr><tr style="height:21pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">You may be aware of possible problems in the existing system, but you should avoid prejudging issues</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">by asking questions that focus too much on problems. Gather facts.</p></td></tr><tr style="height:21pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Be sensitive about how you use information from other interviews that you or your colleagues have</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">already conducted, particularly if comments were negative or critical.</p></td></tr><tr style="height:55pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 11pt;text-indent: 13pt;text-align: left;">Use the opportunity to collect examples of documents that people use in their work, ask if they mind you having samples of blank forms and photocopies of completed paperwork.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-top: 6pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">After the interview</p></td></tr><tr style="height:31pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 11pt;text-indent: 0pt;text-align: left;">Thank the interviewee for their time. Make an appointment for a further interview if it is necessary. Offer to provide them with a copy of your notes of the interview for them to check that you have accurately recorded</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">what they told you.</p></td></tr><tr style="height:21pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Transcribe your tape or write up your notes as soon as possible after the interview while the content is</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">still fresh in your mind.</p></td></tr><tr style="height:21pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">If you said that you would provide a copy of your notes for checking then send it to the interviewee as</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">soon as possible. Update your notes to reflect their comments.</p></td></tr><tr style="height:14pt"><td style="width:441pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark232">6.3.3 </a><b>Observation</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Watching people carrying out their work in a natural setting can provide the analyst with a better understanding of the job than interviews, in which the interviewee will often concentrate on the normal aspects of the job and forget the exceptional situations and interruptions that occur and which the system will need to cope with. Observation also allows the analyst to see what information people use to carry out their jobs. This can tell you about the documents they refer to, whether they have to get up from their desks to get information, how well the existing system handles their needs. One of the authors has observed staff using a telesales system where there was no link between the enquiry screens for checking the availability of stock and the data entry screens for entering an order. These telesales staff kept a pad of scrap paper on the desk and</p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">wrote down the product codes for all the items they had looked up on the enquiry screens so that they could enter them into the order-processing screens. This kind of information does not always emerge from interviews.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">People are not good at estimating quantitative data, such as how long they take to deal with certain tasks, and observation with a stopwatch can give the analyst plentiful quantitative data, not just about typical times to perform a task but also about the statistical distribution of those times.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In some cases where information or items are moving through a system and being dealt with by many people along the way, observation can allow the analyst to follow the entire process through from start to finish. This type of observation might be used in an organization where orders are taken over the telephone, passed to a warehouse for picking, packed and dispatched to the customer. The analyst may want to follow a series of transactions through the system to obtain an overview of the processes involved.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Observation can be an open-ended process in which the analyst simply sets out to observe what happens and to note it down, or it can be a closed process in which the analyst wishes to observe specific aspects of the job and draws up an observation schedule or form on which to record data. This can include the time it takes to carry out a task, the types of task the person is performing or factors such as the number of errors they make in using the existing system as a baseline for usability design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Advantages and disadvantages</p><p class="s50" style="padding-top: 1pt;padding-left: 17pt;text-indent: -11pt;text-align: left;">+  <span style=" color: #000;">Observation of people at work provides first-hand experience of the way that the current system operates.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">Data is collected in real time and can have a high level of validity if care is taken in how the technique is used.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">Observation can be used to verify information from other sources or to look for exceptions to the standard procedure.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">+ <span style=" color: #000;">Baseline data about the performance of the existing system and of users can be collected.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">–  <span style=" color: #000;">Most people do not like being observed and are likely to behave differently from the way in which they would normally behave. This can distort findings and affect the validity.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">– <span style=" color: #000;">Observation requires a trained and skilled observer for it to be most effective.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">– <span style=" color: #000;">There may be logistical problems for the analyst; for example, if the staff to be observed work shifts or travel long distances in order to do their job.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">– <span style=" color: #000;">There may also be ethical problems if the person being observed deals with sensitive private or personal data or directly with members of the public; for example in a doctor’s surgery.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark233">Appropriate situations</a></p><p class="s49" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Observation is essential for gathering quantitative data about people’s jobs. It can verify or disprove assertions made by interviewees, and is often useful in situations where different interviewees have provided conflicting information about the way the system works. Observation may be the best way to follow items through some kind of process from start to finish.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.3.4 <b>Document sampling</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark234" class="s53">Document sampling can be used in two different ways. First, the analyst will collect copies of blank and completed documents during the course of interviews and observation sessions. These will be used to determine the information that is used by people in their work and the inputs to and outputs from processes which they carry out, either manually or using an existing computer system. Ideally, where there is an existing system, screenshots should also be collected in order to understand the inputs and outputs of the existing system. Figure </a>6.1 shows a sample document collected from Agate, our case study company.</p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><span><img width="546" height="660" alt="image" src="Image_356.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s59" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark234">Figure 6.1 </a><span class="s60">Sample document from the AGATE case study.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark234" class="s53">Second, the analyst may carry out a statistical analysis of documents in order to find out about patterns of data. For example, many documents such as order forms contain a header section and a number of lines of detail. (The sample document in Fig. </a>6.1 shows this kind of structure.) The analyst may want to know the distribution of the number of lines in an order. This will help later in estimating volumes of data to be held in the system and in deciding how many lines should be displayed on screen at one time. While this kind of statistical sampling can give a picture of data volumes, the analyst should be alert to seasonal patterns of activity, which may mean that there are peaks and troughs in the amount of data being processed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Advantages and disadvantages</p><p class="s50" style="padding-top: 1pt;padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">Can be used to gather quantitative data, such as the average number of lines on an invoice and the range of values.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">+ <span style=" color: #000;">Can be used to find out about error rates in paper documents.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">– <span style=" color: #000;">If the system is going to change dramatically, existing documents may not reflect how it will be in future.</span></p><p class="s26" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Appropriate situations</p><p class="s49" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The first type of document sampling is almost always appropriate. Paper-based documents give a good idea of what is happening in the current system. They also provide supporting evidence for the information gathered from interviews or observation.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The statistical approach is appropriate in situations where large volumes of data are being processed, and particularly where error rates are high and a reduction in errors is one of the criteria for usability.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">6.3.5 <b>Questionnaires</b></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark236" class="s53" name="bookmark235">Q  uestionnaires are a research instrument that can be applied to fact finding in system development projects. They consist of a series of written questions. The questionnaire designer usually limits the range of replies that respondents can make by giving them a choice of options. (Figure </a><a href="part9.htm#bookmark238" class="s53">6.2 shows some of the types of question.) YES/NO questions only give the respondent two options. (Sometimes a DON’T KNOW option is needed as well.) If there are more options, the multiple choice type of question is often used when the answer is factual, whereas scaled questions are used if the answer involves an element of subjectivity. Some questions do not have a fixed number of responses, and must be left open-ended for the respondent to enter what they like. Where the respondent has a limited number of choices, these are usually coded with a number, which speeds up data entry if the responses are to be analysed by computer software. If you plan to use questionnaires for requirements gathering, they need very careful design. Box</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><a href="part9.htm#bookmark238" class="s53">6.2 lists some of the issues that need to be addressed if you are thinking of using questionnaires.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="526" height="388" alt="image" src="Image_357.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="584" height="57" alt="image" src="Image_358.png"/></span></p><p class="s61" style="text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark238">Coding</a></p><p class="s61" style="text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark238">Coding</a></p><p style="text-indent: 0pt;text-align: left;"/><p class="s61" style="text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark238">Coding</a></p><p class="s12" style="padding-left: 9pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Using questionnaires requires good planning. If you send out 100 questionnaires and they do not work, it is difficult to get respondents to fill in a second version. These guidelines cover the points you should bear in mind when using questionnaires.</p><p class="s12" style="padding-left: 9pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Using questionnaires requires good planning. If you send out 100 questionnaires and they do not work, it is difficult to get respondents to fill in a second version. These guidelines cover the points you should bear in mind when using questionnaires.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-left: 9pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Using questionnaires requires good planning. If you send out 100 questionnaires and they do not work, it is difficult to get respondents to fill in a second version. These guidelines cover the points you should bear in mind when using questionnaires.</p><p class="s62" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Box 6.2 <b>Guidelines on Questionnaires</b></p><p class="s62" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Box 6.2 <b>Guidelines on Questionnaires</b></p><p style="text-indent: 0pt;text-align: left;"/><p class="s62" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Box 6.2 <b>Guidelines on Questionnaires</b></p><p class="s59" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark236">Figure 6.2 </a><span class="s60">Types of question used in questionnaires.</span><a name="bookmark237">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:7.58928pt" cellspacing="0"><tr style="height:41pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">How will you code the results? If you plan to use an optical mark reader, then the response to every question must be capable of being coded as a mark in a box. If you expect the results to be keyed into a database for analysis, then you need to decide on the codes for each possible response. If the questions are open-ended,</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: justify;">how will you collate and analyse different kinds of responses?</p></td></tr><tr style="height:35pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Analysis</p></td></tr><tr style="height:31pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Whatever analysis you plan should be decided in advance. If you expect to carry out a statistical analysis of the responses, you should consult a statistician <b>before </b>you finalize the questions. Statistical techniques are</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">difficult to apply to responses to poorly designed questions.</p></td></tr><tr style="height:21pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">You can use a special statistical software package, a database or even a spreadsheet to analyse the</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">data.</p></td></tr><tr style="height:35pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Piloting</p></td></tr><tr style="height:21pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">You should try out your questionnaire on a small pilot group or sample of your respondents. This enables</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">you to find out if there are questions they do not understand, they misinterpret or they cannot answer.</p></td></tr><tr style="height:21pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">If you plan to analyse the data using statistical software, a database or a spreadsheet, you can create a</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">set of trial data to test your analysis technique.</p></td></tr><tr style="height:35pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Sample size and structure</p></td></tr><tr style="height:52pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">If you plan to use serious statistical techniques, then those techniques may place lower limits on your sample size. If you want to be sure of getting a representative sample, by age, gender, department, geographical location, job grade or experience of existing systems, then that will help to determine how many people to include. Otherwise it may be down to you to choose a sensible percentage of all the possible</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">respondents.</p></td></tr><tr style="height:35pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Delivery</p></td></tr><tr style="height:11pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">How will you get the questionnaires to your respondents, and how will they get their replies back to you?</p></td></tr><tr style="height:31pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;padding-right: 9pt;text-indent: 13pt;text-align: left;">You can post them, or use internal mail in a large organization, fax them, email them or create a web- based form on the intranet and notify your target group by email. If you use the intranet, you may want to</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">give each respondent a special code, so that only they can complete their own questionnaire.</p></td></tr><tr style="height:21pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Your respondents can then post, fax or email their responses back to you, or complete them on the</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">intranet.</p></td></tr><tr style="height:35pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Respondent information</p></td></tr><tr style="height:31pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">What information about the respondents do you want to gather at the same time as you collect their views</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">and requirements? If you want to analyse responses by age, job type or location, then you need to include questions that ask for that information.</p></td></tr><tr style="height:31pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;text-indent: 13pt;text-align: left;">You can make questionnaires anonymous or you can ask respondents for their name. If the questionnaire is not anonymous, you need to think about confidentiality. People will be more honest in their</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">replies if they can respond anonymously or in confidence.</p></td></tr><tr style="height:31pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;text-indent: 13pt;text-align: left;"><a href="part23.htm#bookmark595" class="s65">If you ask for respondents’ names and you store that information, then in the UK you should consider the provisions of the Data Protection Act (1998). (See also Chapter </a>12.) There are similar requirements in other</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">countries.</p></td></tr><tr style="height:35pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Covering letter or email</p></td></tr><tr style="height:31pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">In a covering letter you should explain the purpose and state that the questionnaire has management support. Give an estimate of the time required to fill in the questionnaire and a deadline for its return. Thank</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">the respondents for taking part.</p></td></tr><tr style="height:35pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Structure</p></td></tr><tr style="height:41pt"><td style="width:438pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 9pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">Structure the questionnaire carefully. Give it a title, and start with explanatory material and notes on how to complete it. Follow this with questions about the respondent (if required). Group questions together by subject. Avoid lots of instructions like: ‘If you answered YES to Q . 7, now go to Q . 13’. Keep it reasonably</p><p class="s58" style="padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">short.</p></td></tr><tr style="height:17pt"><td style="width:438pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.125pt" cellspacing="0"><tr style="height:18pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s57" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">Return rate</p></td></tr><tr style="height:31pt"><td style="width:441pt" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">Not everyone will necessarily respond. You need to plan for this and either use a larger sample than you need or follow up with reminders. If you use a form on the intranet, you should be able to identify who has</p><p class="s58" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">not responded and email them reminders. Equally, you can email a thank you to those who do respond.</p></td></tr><tr style="height:35pt"><td style="width:441pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">Feedback</p></td></tr><tr style="height:53pt"><td style="width:441pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E3F0F5"><p class="s58" style="padding-left: 10pt;padding-right: 11pt;text-indent: 0pt;text-align: justify;">This needs to be handled carefully—telling everyone that 90% of the company cannot use the existing system may not go down well—but people do like to know what use was made of the response they made. They may have spent half an hour filling in your questionnaire, and they will expect to be informed of the outcome. A summary of the report can be sent out to branches, distributed to departments, sent to named respondents or placed on the intranet.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark239">Advantages and disadvantages</a></p><p class="s50" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">+ <span style=" color: #000;">An economical way of gathering data from a large number of people.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+  <span style=" color: #000;">If the questionnaire is well designed, then the results can be analysed easily, possibly by computer.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">– <span style=" color: #000;">Good questionnaires are difficult to construct.</span></p><p class="s50" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">– <span style=" color: #000;">There is no automatic mechanism for follow-up or probing more deeply, although it is possible to follow up with an interview by telephone or in person if necessary.</span></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">– <span style=" color: #000;">Postal questionnaires suffer from low response rates.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Appropriate situations                                             <span class="s49">Q  uestionnaires are most useful when the views or knowledge of a large number of people need to be obtained or when the people are geographically dispersed, for example in a company with many branches or offices around the country or around the world. Q  uestionnaires are also appropriate for information systems that will be used by the general public, and where the analyst needs to get a picture of the types of user and usage that the system will need to handle.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.3.6 <b>Remembering the techniq ues</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">For those who like mnemonics, these techniques are sometimes referred to as SQ  IRO— sampling, questionnaires, interviewing, reading (or research) and observation. This order has been chosen to make it possible to pronounce the mnemonic. However, this is not the order in which they are most likely to be used. This will depend on the situation and the organization in which the techniques are being used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.3.7 <b>Other techniq ues</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Some kinds of system require special fact-finding techniques. <i>Expert systems </i>are computer systems that are designed to embody the expertise of a human expert in solving problems. Examples include systems for medical diagnosis, stock market trading and geological analysis for mineral prospecting. The process of capturing the knowledge of the expert is called <i>knowledge acquisition </i>and, as it differs from establishing the requirements for a conventional information system, a number of specific techniques are applied. Some of these are used in conjunction with computer-based tools.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="182" height="24" alt="image" src="Image_359.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.4 </a><a href="part4.htm#bookmark4" class="s48">U ser Involvement</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.4 </a><a href="part4.htm#bookmark4" class="s48">U ser Involvement</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.4 </a><a href="part4.htm#bookmark4" class="s48">U ser Involvement</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark240">The success of a systems development project depends not just on the skills of the team of analysts, designers and programmers who work on it, or on the project management skills of the project manager, but on the effective involvement of users in the project at various stages of the lifecycle. The term </a><i>stakeholders </i><a href="part9.htm#bookmark75" class="s53">was introduced in Chapter </a>2 to describe all those people who have an interest in the successful development of the system. Stakeholders include all people who stand to gain (or lose) from the implementation of the new system: users, managers and budget-holders. Analysts deal with people at all levels of the organization. In large projects it is</p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">likely that a steering committee with delegated powers will be set up to manage the project from the users’ side. This will include the following categories of people:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_360.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_361.jpg"/></span></p><p class="s49" style="padding-top: 5pt;padding-left: 49pt;text-indent: 0pt;text-align: left;"><a name="bookmark241">senior management—with overall responsibility for running the organization financial managers with budgetary control over the project</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_362.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;line-height: 11pt;text-align: left;">managers of the user department(s)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_363.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_364.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">representatives of the IT department delivering the project representatives of users.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_365.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: -43pt;line-height: 18pt;text-align: left;">Users will be involved in different roles during the course of the project as: subjects of interviews to establish requirements</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_366.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_367.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_368.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">representatives on project committees those involved in evaluating prototypes those involved in testing</p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="541" alt="image" src="Image_369.png"/></span></p><p class="s51" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Case Study Example</p><p class="s66" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">The section that follows applies what has been covered in this chapter so far to the case study.</p><p class="s51" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Case Study Example</p><p class="s66" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">The section that follows applies what has been covered in this chapter so far to the case study.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s51" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Case Study Example</p><p class="s66" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">The section that follows applies what has been covered in this chapter so far to the case study.</p><p class="s66" style="text-indent: 9pt;text-align: justify;"><a href="part8.htm#bookmark16" class="s67">One of the first tasks in fact finding is to draw up a plan that outlines what information is being sought, which techniques will be used, who is involved and how long the fact finding will take. A draft plan for fact finding at Agate is shown above. The jobs of the subjects are those shown in the list in </a>Figure A1.1 in the Agate case study.</p><p class="s66" style="text-indent: 9pt;text-align: justify;"><a href="part8.htm#bookmark16" class="s67">One of the first tasks in fact finding is to draw up a plan that outlines what information is being sought, which techniques will be used, who is involved and how long the fact finding will take. A draft plan for fact finding at Agate is shown above. The jobs of the subjects are those shown in the list in </a>Figure A1.1 in the Agate case study.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s66" style="text-indent: 9pt;text-align: justify;"><a href="part8.htm#bookmark16" class="s67">One of the first tasks in fact finding is to draw up a plan that outlines what information is being sought, which techniques will be used, who is involved and how long the fact finding will take. A draft plan for fact finding at Agate is shown above. The jobs of the subjects are those shown in the list in </a>Figure A1.1 in the Agate case study.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_370.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_371.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">subjects of training courses end-users of the new system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:16.0179pt" cellspacing="0"><tr style="height:24pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Objective</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Techniq ue</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Subject(s)</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s68" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">Time commitment</p></td></tr><tr style="height:24pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">To get background on the company and the advertising industry</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;padding-right: 8pt;text-indent: 0pt;line-height: 106%;text-align: left;">Background reading</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">Company reports, trade journals</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">0.5 day</p></td></tr><tr style="height:24pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">To establish business objectives. Agree likely scope of new system. Check out involvement of non-UK offices</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Interview</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Two directors</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;padding-right: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">2 × 1 hour each</p></td></tr><tr style="height:24pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">To gain understanding of roles of each department. Check out line management and team structure in the Creative department. Agree likely interviewees among staff</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Interview</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;padding-right: 3pt;text-indent: 0pt;line-height: 106%;text-align: left;">Department heads (only 1 account manager)</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;padding-right: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">2 × 1 hour each</p></td></tr><tr style="height:14pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">1 account manager</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:238pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;line-height: 4pt;text-align: left;">To find out how the core business operates</p></td><td style="width:62pt" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;line-height: 4pt;text-align: left;">Interview</p></td><td style="width:75pt" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 5pt;text-align: left;">1 graphic designer</p></td><td style="width:46pt;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 5pt;text-align: left;">1.5 hours</p></td></tr><tr style="height:6pt"><td style="width:238pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:62pt" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:75pt" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 5pt;text-align: left;">1 copy writer</p></td><td style="width:46pt;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 5pt;text-align: left;">each</p></td></tr><tr style="height:12pt"><td style="width:238pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:62pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:75pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">1 editor</p></td><td style="width:46pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:17pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">To follow up development of business understanding</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Observation</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">2 creative staff</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">0.5 day each</p></td></tr><tr style="height:31pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">To determine role of support admin staff and relationship to core business</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Interview</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">2 admin staff (based on experience with the company)</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;padding-right: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">1.5 hours each</p></td></tr><tr style="height:24pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">To establish what records and resources are kept</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">Interview/document sampling</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;padding-right: 16pt;text-indent: 0pt;line-height: 106%;text-align: left;">Filing clerk Resource librarian</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;padding-right: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">2 × 1 hour each</p></td></tr><tr style="height:24pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;padding-right: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">To determine what use is made of current computer system. To determine functionality of current system</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Interview</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Computer manager</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">2 × 1 hour</p></td></tr><tr style="height:31pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">To establish additional requirements for new system</p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Interview</p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">2 account managers</p><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">3 staff from Creative department</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 4pt;padding-right: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">3 × 1 hour each</p></td></tr><tr style="height:14pt"><td style="width:238pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-left-style:solid;border-left-width:1pt;border-left-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:62pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:75pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 4pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Accountant</p></td><td style="width:46pt;border-top-style:solid;border-top-width:1pt;border-top-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:238pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;line-height: 4pt;text-align: left;">To establish accounting requirements for new system</p></td><td style="width:62pt" bgcolor="#E2EDF5"><p class="s69" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;line-height: 4pt;text-align: left;">Interview</p></td><td style="width:75pt" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 5pt;text-align: left;">Credit controller</p></td><td style="width:46pt;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 5pt;text-align: left;">1.5 hours</p></td></tr><tr style="height:6pt"><td style="width:238pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:62pt" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:75pt" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 5pt;text-align: left;">1 purchasing assistant</p></td><td style="width:46pt;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;line-height: 5pt;text-align: left;">each</p></td></tr><tr style="height:12pt"><td style="width:238pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:62pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:75pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793" bgcolor="#E2EDF5"><p class="s69" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">1 accounts clerk</p></td><td style="width:46pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#E2EDF5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="264" height="23" alt="image" src="Image_372.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.5  </a><a href="part4.htm#bookmark4" class="s48">Documenting Req uirements</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.5  </a><a href="part4.htm#bookmark4" class="s48">Documenting Req uirements</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.5  </a><a href="part4.htm#bookmark4" class="s48">Documenting Req uirements</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark242">Information systems professionals need to record facts about the organization they are studying and its requirements. As soon as the analysts start gathering facts, they will need some means of documenting them. In the past the emphasis was on paper forms, but now it is rare for a large-</a><a name="bookmark243">&zwnj;</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark171" class="s53">scale project to depend on paper-based documentation. As we have explained in Chapter </a>5, systems analysts and designers model the new system in a mixture of diagrams, data and text. The important thing to bear in mind is that within a project some set of standards should be adhered to. These may be the agreed standards of the organization carrying out the analysis and design project or they may be a requirement of the organization that is having the work done. For example, government and military projects usually require that developers conform to a specific set of standards. We are using UML to produce models of the system from different perspectives. Computer Aided Software Engineering (CASE) tools are normally used to draw the diagrammatic models and to maintain in a repository the associated data about the various things that are shown in the diagrams.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">However, there will also be other kinds of documents, not all of which fit into the UML framework. In large-scale projects a librarian or configuration manager may be required to keep track of these documents and ensure that they are stored safely and in a way that enables them to be retrieved when required. Such documents include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_373.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_374.jpg"/></span></p><p class="s49" style="padding-top: 5pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">records of interviews and observations details of problems</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_375.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_376.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">copies of existing documents and where they are used details of requirements</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_377.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_378.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">details of users minutes of meetings.</p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Even in smaller projects that cannot justify a librarian, a filing system with an agreed set of conventions on how material is to be filed, and for recording who has taken items from the filing system, is good practice.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In many projects, these documents will be stored digitally, using a document management system or a version control system. Handwritten documents and sample documents can be scanned with an image scanner and held in digital form. In this case, many people can access the same document simultaneously. The system enforces control over whether a document can be updated, and ensures that no more than one person at a time is able to check out a document in order to amend it.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Not all of the documents listed above represent requirements, and it is necessary to maintain some kind of list or database of requirements. There are software tools available to hold requirements in a database and some can be linked to CASE tools and testing tools. This makes it possible to trace from an initial requirement through the analysis and design models to where it has been implemented and to the test cases that test whether the requirement has been met.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="s53">Use cases, which are explained in the next section, can be used to model requirements, but because they focus on the functionality of the system are not good for documenting non- functional requirements. Jacobson et al. </a><a href="part38.htm#bookmark1259" class="s53">(1999) suggest that the use case model should be used to document functional requirements and a separate list of ‘supplementary requirements’ (those not provided by a use case) should be kept. They say that, together, the use case model and the list of supplementary requirements constitute a traditional requirements specification. Rosenberg and Scott (1999) argue that use cases are not the same as requirements: use cases </a>describe units of system behaviour, whereas requirements are rules that govern the behaviour of the system; one requirement may be met by more than one use case, and one use case may meet more than one requirement; some non-functional requirements are difficult to attribute to any particular use case.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark222" class="s53">Some people try to document requirements in use cases by writing long use case descriptions using templates that enable them to include non-functional requirements as well as functional requirements. This approach is explained in more detail, with examples in the on-line Chapter </a>6A on the book’s website.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We favour the view that use cases can be used to model functional requirements, but a separate list of requirements should be kept, containing all requirements—functional and non- functional—for the system. Where there is a relationship between a particular use case and a particular requirement, this should be recorded. Moreover, some requirements describe very high-level units of behaviour and may need to be broken down into low-level requirements that describe more precisely what is to be done. Any database of requirements should make it possible to hold this kind of hierarchical structure of requirements.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are software tools available to assist in the documentation of requirements. Essentially, they provide a database of requirements of different types with standard attributes of those</p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">requirements, and can usually be customized to allow the users to record other attributes of the requirements that are needed for a particular project or organization, such as priority or source. In some cases, these tools can be integrated with CASE tools or modelling tools in order to provide for ‘traceability of requirements’. This means that model elements that deliver a requirement can be linked to the requirement in question. If a requirement subsequently changes, it is possible to trace the impact of that requirement change on all the model elements that it affects, such as use cases and classes.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark245" class="s53" name="bookmark244">Sometimes the process of requirement gathering throws up more requirements than can be met in a particular project. They may be outside the scope of the project, overambitious, too expensive to implement or just not really necessary at this stage. The process of building a requirements model for a system involves going through all the candidate requirements to produce a list of those that will be part of the current project. Figure </a>6.3 shows this as an activity diagram. (An approach such as the <i>MoSCoW rules </i><a href="part31.htm#bookmark1041" class="s53">explained in Chapter </a>21 can be used to help prioritize requirements.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"><span><img width="376" height="206" alt="image" src="Image_379.jpg"/></span></p><p class="s59" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark245">Figure 6.3 </a><span class="s60">Activity diagram to show the activities involved in capturing requirements.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="128" height="24" alt="image" src="Image_380.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.6 </a><a href="part4.htm#bookmark4" class="s48">U se Cases</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.6 </a><a href="part4.htm#bookmark4" class="s48">U se Cases</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.6 </a><a href="part4.htm#bookmark4" class="s48">U se Cases</a></p><p class="s52" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark246">Use cases </a><a href="part9.htm#bookmark247" class="s53">are descriptions of the functionality of the system from the users’ perspective. Use case diagrams are used to show the functionality that the system will provide and to show which users will communicate with the system in some way to use that functionality. Figure </a><span class="s49">6.4 shows an example of a use case diagram. This is a relatively simple diagramming technique, and its notation is explained below in Section 6.6.2.</span></p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"><span><img width="367" height="441" alt="image" src="Image_381.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s59" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark247">Figure 6.4 </a><span class="s60">Example use case diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s52" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Use case diagrams <a href="part38.htm#bookmark1211" class="s53">were developed by Jacobson et al. </a><span class="s49">(1992), and the subtitle of the book in which they are presented is </span>A Use Case Driven Approach<span class="s49">. Jacobson and his co-authors offer a complete approach to the development of object-oriented software systems, but use case diagrams are the starting point for much of what follows in their approach.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.6.1 <b>Purpose</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1211" class="s53">The use case model is part of what Jacobson et al. </a>(1992) call the requirements model; they also include a problem domain object model and user interface descriptions in this requirements model. Use cases specify the functionality that the system will offer from the users’ perspective. They are used to document the scope of the system and the developer’s understanding of what it is that the users require.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Use cases are supported by <i>behaviour specifications</i><a href="part9.htm#bookmark171" class="s53">. These specify the behaviour of each use case either using UML diagrams, such as activity diagrams (see Chapter </a>5), <i>communication diagrams </i>or <i>sequence diagrams </i><a href="part18.htm#bookmark418" class="s53">(see Chapter </a>9), or in text form as <i>use case descriptions</i>.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark248">Textual use case descriptions provide a description of the interaction between the users of the system, termed </a><i>actors</i>, and the high-level functions within the system, the use cases. These descriptions can be in summary form or in a more detailed form in which the interaction between actor and use case is described in a step-by-step way. Whichever approach is used, it should be remembered that the use case describes the interaction as the user sees it, and is not a definition of the internal processes within the system or some kind of program specification.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.6.2 <b>Notation</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark249" class="s53">Use case diagrams show three aspects of the system: actors, use cases and the system or subsystem boundary. Figure </a>6.5 shows the elements of the notation.</p><p style="padding-left: 70pt;text-indent: 0pt;text-align: left;"><span><img width="426" height="190" alt="image" src="Image_382.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s59" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark249">Figure 6.5 </a><span class="s60">The notation of the use case diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark249" class="s53">Actors represent the roles that people, other systems or devices take on when communicating with the particular use cases in the system. Figure 6.5 shows the actor Staff Contact in a diagram for the Agate case study. In Agate, there is no job title Staff Contact: a director, an account manager or a member of the creative team can take on the role of being staff contact for a particular client company, so one actor can represent several people or job titles. Equally, a particular person or job title may be represented by more than one actor on use case diagrams. This is shown in Figs </a><a href="part9.htm#bookmark250" class="s53">6.5 and </a>6.6 together. A director or an account manager may be the Campaign Manager for a particular client campaign, as well as being the Staff Contact for one or more clients.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="364" height="102" alt="image" src="Image_383.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s59" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark250">Figure 6.6 </a><span class="s60">Use case showing Campaign Manager actor.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">The use case description associated with each use case can be brief:</p><p class="s39" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;text-align: center;">Assign staff to work on a campaign</p><p class="s21" style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;line-height: 112%;text-align: left;">The campaign manager selects a particular campaign. A list of staff not already working on that campaign is displayed, and he or she selects those to be assigned to this campaign.</p><p class="s49" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Alternatively, it can provide a step-by-step breakdown of the interaction between the user and the system for the particular use case. An example of this extended approach is provided below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s39" style="padding-left: 164pt;text-indent: 0pt;text-align: left;">Assign staff to work on a campaign</p><p class="s39" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Actor Action                  System Response</p><p class="s21" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">1. The actor enters the client name.       2. Lists all campaigns for that client.</p><p class="s70" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 70%;text-align: left;">3. Selects the relevant campaign.         <span class="s21">4. Displays a list of all staff members not already</span></p><p class="s21" style="padding-left: 235pt;text-indent: 0pt;line-height: 8pt;text-align: left;">allocated to this campaign.</p><p class="s21" style="padding-top: 4pt;padding-left: 33pt;text-indent: -9pt;line-height: 112%;text-align: left;">5. Highlights the staff members to be assigned to this campaign.</p><p class="s21" style="padding-top: 4pt;padding-left: 19pt;text-indent: -9pt;line-height: 112%;text-align: left;">6. Presents a message confirming that staff have been allocated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Alternative Courses</p><p class="s21" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Steps 1–3. The actor knows the campaign name and enters it directly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1150" class="s53">Constantine </a>(1997) makes the distinction between <i>essential </i>and <i>real </i>use cases. Essential use cases describe the ‘essence’ of the use case in terms that are free of any technological or implementation details, whereas real use cases describe the concrete detail of the use case in terms of its design. During the analysis stage, use cases are almost always essential, as the</p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">design has not yet been decided upon. In a real use case, Step 2 in the use case description for Assign staff to work on a campaign could be described as ‘Lists all campaigns for the client in a list box, sorted into alphabetical order by campaign title’.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Each use case description represents the usual way in which the actor will go through the particular transaction or function from end to end. Possible major alternative routes that could be taken are listed as <i>alternative courses</i>. The term <i>scenario </i>is used to describe use cases in which an alternative course is worked through in detail, including possible responses to errors. The use case represents the generic case, while the scenarios represent specific paths through the use case.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As well as the description of the use case itself, the documentation should include the purpose or intent of the use case, that is to say details of the task that the user is trying to achieve through the means of this use case, for example:</p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 112%;text-align: left;">The campaign manager wishes to record which staff are working on a particular campaign. This information is used to validate timesheets and to calculate staff year-end bonuses.</p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">One way of documenting use cases is to use a template (a blank form or wordprocessing document to be filled in). This might include the following sections:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_384.jpg"/></span></p><p class="s49" style="padding-top: 5pt;padding-left: 49pt;text-indent: 0pt;text-align: justify;">name of use case</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_385.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_386.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_387.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;text-align: justify;">pre-conditions (things that must be true before the use case can take place) post-conditions (things that must be true after the use case has taken place) purpose (what the use case is intended to achieve)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_388.jpg"/></span></p><p class="s49" style="padding-left: 49pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">description (in summary or in the format above).</p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1141" class="s53">Cockburn </a><a href="part9.htm#bookmark222" class="s53">(2000) provides examples of templates and guidance on how to write good use cases. More detail in his approach can be found on the book’s website in on-line Chapter </a>6A.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Two further kinds of relationship can be shown on the use case diagram itself. These are the <i>Extend </i>and <i>Include </i>relationships. They are shown on the diagram using a piece of UML notation that you will come across in other diagrams: <i>stereotypes</i>.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A stereotype is a special use of a model element that is constrained to behave in a particular way. Stereotypes can be shown by using a keyword, such as ‘extend’ or ‘include’ in matched <i>guillemets</i>, like « extend» . (Guillemets are used as quotation marks in French and some other languages. They are not the same as guillemots, which are seabirds found in the North Atlantic and North Pacific oceans!)</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark251" class="s53">The extend and include relationships are easy to confuse. « extend»  is used when you wish to show that a use case provides additional functionality that may be required in another use case. In Fig. 6.7, the use case Print campaign summary extends Check campaign budget. This means that at a particular point in Check campaign budget the user can optionally invoke the behaviour of Print campaign summary, which does something over and above what is done in Check campaign budget (print out the information in this case). There may be more than one way of extending a particular use case, and these possibilities may represent significant variations on the way the user uses the system. Rather than trying to capture all these variations in one use case, you would document the core functionality in one and then extend it in others. Extension points can be shown in the diagram, as in Check campaign budget in Fig. </a>6.7. They are shown in a separate compartment in the use case ellipse, headed extension points. The names of the extension points are listed in this compartment. If an extension point exists, it must have a name. A condition can be shown in a UML <i>comment </i>attached to the relationship. Comments are used to add to a diagram information that is not part of other graphical elements in the diagram. The condition must be true for the extension to take place in a particular instance of the use case.</p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;"><span><img width="542" height="199" alt="image" src="Image_389.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s59" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark251">Figure 6.7 </a><span class="s60">Use case diagram showing « extend» .</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark252" class="s53">« include»  applies when there is a sequence of behaviour that is used frequently in a number of use cases and you want to avoid copying the same description of it into each use case in which it is used. Figure </a>6.8 shows that the use case Assign staff to work on a campaign has an</p><p class="s49" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">« include»  relationship with Find campaign. This means that when an actor uses Assign staff to work on a campaign the behaviour of Find campaign will also be included in order to select the relevant campaign. Note the direction of the arrows in the examples of Include and Extend relationships. The arrow always points at the use case that is being included or extended.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="526" height="102" alt="image" src="Image_390.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s59" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark252">Figure 6.8 </a><span class="s60">Use case diagram showing « include» .</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is important not to overuse include and extend relationships. Overuse can result in the decomposition of the functionality of use cases into many small use cases that deliver no real value to the users of the system.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As well as describing the use cases, it is worth describing who the actors are in terms of job titles or the way in which they interact with the system. Although at the moment we are concentrating on requirements, later we shall need to know who the actual users are for each high-level function that is represented by a use case. This may help in specifying the security for different functions or in assessing the usability of the functions.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Bear in mind that actors need not be human users of the system. They can also be other systems that communicate with the one that is the subject of the systems development project, for example other computers or automated machinery or equipment.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark254" class="s53" name="bookmark253">Figure </a>6.9 shows a use case diagram for the Campaign Management subsystem with both extend and include relationships. Note that you do not have to show all the detail of the extension points on a diagram: the extension points compartment in the use case can be suppressed. Of course, if you are using a CASE tool to draw and manage the diagrams, you may be able to toggle the display of this compartment on and off and, even if the information is not shown on a particular diagram, it will still be held in the CASE tool’s repository.</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="549" height="392" alt="image" src="Image_391.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s59" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark254">Figure 6.9 </a><span class="s60">Use case diagram showing both « extend» and « include» .</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark138" class="s53">In Chapter </a><a href="part18.htm#bookmark378" class="s53">4, the concepts of generalization, specialization and inheritance were introduced. They are explained in more detail in Chapter </a><a href="part9.htm#bookmark255" class="s53">8. Generalization and specialization can be applied to actors and use cases. For example, suppose that we have two actors, Staff Contact and Campaign Manager, and a Campaign Manager can do everything that a Staff Contact can do, and more. Rather than showing communication associations between Campaign Manager and all the use cases that Staff Contact can use, we can show Campaign Manager as a specialization of Staff Contact, as in Fig. 6.10. Similarly, there may be similar use cases where the common functionality is best represented by generalizing out that functionality into a ‘super- use case’ and showing it separately. For example, we may find that there are two use cases at Agate—Assign individual staff to work on a campaign and Assign team of staff to work on a campaign—which  are  similar  in  the  functionality  they  offer.  We  might  abstract  out  the commonality into a use case Assign staff to work on a campaign, but this will be an abstract use case. It helps us to define the functionality of the other two use cases, but no instance of this use case will ever exist in its own right. This is also shown in Fig. </a>6.10. The use of italics for the name of the use case shows that it is abstract.</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;"><a name="bookmark256"><span><img width="416" height="350" alt="image" src="Image_392.jpg"/></span></a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s59" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark255">Figure 6.10 </a><span class="s60">Generalization of actors and use cases.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">6.6.3 <b>Supporting use cases with prototyping</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark814" class="s53">As the requirements for a system emerge in the form of use cases, it is sometimes helpful to build simple prototypes of how some of the use cases will work. A prototype is a working model of part of the system—usually a program with limited functionality that is built to test out some aspect of how the system will work. (Prototypes were discussed in Section 3.3.2 and are explained in more detail in Chapter </a>17 on the design of the user interface.)</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Prototypes can be used to help elicit requirements. Showing users how the system might provide some of the use cases often produces a stronger reaction than showing them a series of abstract diagrams. Their reaction may contain useful information about requirements.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark254" class="s53">For example, there are a number of use cases in the Campaign Management subsystem for Agate that require the user to select a campaign in order to carry out some business function. The use case diagram in Fig. </a><a href="part9.htm#bookmark256" class="s53">6.9 reflects this in the « include»  relationships with the use case Find campaign. The use case Find campaign will clearly be used a great deal, and it is worth making sure that we have the requirements right. A prototype could be produced that provides a list of all the campaigns in the system. A possible version of this is shown in Fig. </a>6.11.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="531" height="256" alt="image" src="Image_393.jpg"/></span></p><p class="s59" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 6.11 <span class="s60">Prototype interface for the Find campaign use case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark257" class="s53">Showing this prototype interface design to the users may well produce the response that this way of finding a campaign will not work. There may be hundreds of campaigns in the system, and scrolling through them would be tedious. Different clients may have campaigns with similar names, and it would be easy to make a mistake and choose the wrong campaign if the user does not know which client it belongs to. For these reasons, the users might suggest that the first step is to find the right client and then display only the campaigns that belong to that client. This leads to a different user interface as shown in Fig. </a>6.12.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="548" height="264" alt="image" src="Image_394.jpg"/></span></p><p class="s59" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark257">Figure 6.12 </a><span class="s60">Revised prototype interface for the Find campaign use case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark258">The information from this prototyping exercise forms part of the requirements for the system. This particular requirement is about usability, but it can also contribute to meeting other, non- functional requirements concerned with speed and the error rate: it might be quicker to select first the client and then the campaign from a short-list than search through hundreds of campaigns; and it might reduce the number of errors made by users in selecting the right campaign to carry out some function on.</a></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Prototypes can be produced with visual programming tools, with scripting languages like TCL/TK, with a package like Microsoft PowerPoint or even as web pages using HTML.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark259" class="s53">Prototypes do not have to be developed as programs. Screen and window designs can be sketched out on paper and shown to the users, either formally or informally. A series of possible screen layouts showing the steps that the user would take to interact with a particular use case can be strung together in a storyboard, as in Fig. </a>6.13.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;"><span><img width="501" height="148" alt="image" src="Image_395.jpg"/></span></p><p class="s59" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark259">Figure 6.13 </a><span class="s60">Prototype storyboard.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">6.6.4 <b>CASE tool support</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark260">Drawing any diagram and maintaining the associated documentation is made easier by a CASE tool, as described in Section 3.8.</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">As well as allowing the analyst to produce diagrams showing all the use cases in appropriate subsystems, a CASE tool should also provide facilities to maintain the repository associated with the diagram elements and to produce reports. Automatically generated reports can be merged into documents that are produced for the client organization. The behaviour specification of each use case forms part of the requirements model or requirements specification, which it is necessary to get the client to agree to.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.6.5 <b>Business modelling with use case diagrams</b></p><p class="s49" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">We have used use case diagrams here to model the requirements for a system. They can also be used earlier in the life of a project to model an organization and how it operates. Business modelling is sometimes used when a new business is being set up, when an existing business is being ‘re-engineered’, or in a complex project to ensure that the business operation is correctly understood before starting to elicit the requirements.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark262" class="s53" name="bookmark261">In the examples that we have shown above, the actors have all been employees of the company interacting with what will be a computerized system. In business modelling, the actors are the people and organizations outside the company, interacting with functions within the company. For example, Fig. </a>6.14 shows the Client as an actor and use cases that represent the functions of the business rather than functions of the computer system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="276" alt="image" src="Image_396.jpg"/></span></p><p class="s59" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark262">Figure 6.14 </a><span class="s60">Example of business modelling with use cases.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1216" class="s53">Note the special symbols that are used for the business use cases and business actors in business use case diagrams. You may see these used, as they are part of a UML profile for business modelling, and are often shown as in the example on the left, although the original IBM paper on the subject (Johnston, </a>2004) shows them as in the example on the right.</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A full business model of Agate would show all the functions of the company, and the actors would be the other people and organizations with which Agate interacts, for example the media companies (TV  stations and magazine and newspaper publishers), from which Agate buys advertising time and space, and the subcontractors that Agate uses to do design work and printing. There are other approaches to business modelling, the most prominent of which use process charts, which are similar to activity diagrams. Although this kind of business process modelling has been around for a few decades, it has recently acquired a new significance with the development of web services and service-oriented architectures and the idea that it is possible to model business processes and then have them automated directly through the use of workflow tools and services. Notations such as Business Process Modelling Notation (BPMN) and XML-based languages such as Business Process Execution Language for Web Services (BPEL4WS) have been developed as a result of this interest in business process automation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">6.6.6 <b>Testing and use cases</b></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark964" class="s53">One of the benefits of developing use cases as part of the specification of the system that is to be implemented, is that they can form the basis of scenarios that can be used as test cases when the system has been developed. If you look at the more detailed use case description for the use case Assign Staff to Work on a Campaign in Section 6.6.2, you can see that if you were given a first delivery of the system to test, you could run through the steps in this use case with an agreed set of test data, and check that the system performed as required. Use cases alone are not the full specification of what needs testing but they provide a good basis for developing test cases, which are explained in more detail in Chapter </a>19.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="335" height="24" alt="image" src="Image_397.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.7 </a><a href="part4.htm#bookmark4" class="s48">Req uirements Capture and M odelling</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.7 </a><a href="part4.htm#bookmark4" class="s48">Req uirements Capture and M odelling</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.7 </a><a href="part4.htm#bookmark4" class="s48">Req uirements Capture and M odelling</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark207" class="s53" name="bookmark263">The first stage of most projects is one of capturing and modelling the requirements for the system. As we progress through the book, we shall include activity diagrams to illustrate the main activities in and products of each phase. These diagrams link back to the table in Fig. </a><a href="part9.htm#bookmark264" class="s53">5.17, which summarizes the approach that we are taking in this book. Figure </a>6.15 shows the first such diagram.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"><span><img width="454" height="266" alt="image" src="Image_398.jpg"/></span></p><p class="s59" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark264">Figure 6.15 </a><span class="s60">Activity diagram for Requirements capture and modelling.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this case we have not broken the activity Requirements capture and modelling down into more detail, though it could potentially be broken down into separate activities for the capture of the requirements (interviewing, observation, etc.) and for the modelling of the requirements (use case modelling, prototyping, etc.).</p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark265">We have used object flows to show the documents and models that are the inputs to and outputs from activities, and activity partitions to show the role that is responsible for the activities. In this case, one or more people in the role of Requirements Team will carry out this activity. In a small project, this may be one person, who carries out many other analysis and design activities; in a large project or organization, this may be a team of requirements analysis specialists taking more specialist roles.</a></p><p class="s49" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part16.htm#bookmark270" class="s53">The Case Study Chapter </a>A2, which follows this one, provides more extended examples of the outputs of the Requirements capture and modelling activity.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="119" height="24" alt="image" src="Image_399.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.8  </a><a href="part4.htm#bookmark4" class="s48">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.8  </a><a href="part4.htm#bookmark4" class="s48">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s47">6.8  </a><a href="part4.htm#bookmark4" class="s48">Summary</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark266">Analysts investigating an organization’s requirements for a new information system may use five main fact-finding techniques—background reading, interviews, observation, document sampling and questionnaires. They use these to gain an understanding of the current system and its operation, of the enhancements the users require to the current system and of the new requirements that users have for the new system.</a></p><p class="s49" style="padding-top: 4pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark267">Using agreed standards to document requirements allows the analysts to communicate these requirements to other professionals and to the users. Use case diagrams are one diagramming technique that is used to summarize the users’ functional requirements in a high-level overview of the way that the new system will be used.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;">Case Study Example</p><p class="s66" style="padding-top: 6pt;padding-left: 15pt;text-indent: 0pt;text-align: justify;">You have already seen several examples from the case study in this chapter. The use cases are determined by the analyst from the documentation that is gathered from the fact-finding process. What follows is a short excerpt from an interview transcript, which has been annotated to show the points that the analyst would pick up on and use to draw the use case diagrams and produce the associated documentation. The interview is between Dave Harris, a systems analyst, and Peter Bywater, an Account Manager at Agate. It is from one of the interviews with the objective: ‘ To establish additional requirements for new system’ (in the fact-finding plan in the earlier case study section in this chapter). Commentary has been added in brackets.</p><p class="s71" style="padding-top: 7pt;padding-left: 15pt;text-indent: 0pt;text-align: justify;">Dave H arris: <i>You were telling me about concept notes. What do you mean by this?</i></p><p class="s66" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;"><b>Peter Bywater: </b>At <span class="s60">present, w</span>hen we come up with an idea for a campaign we use a word processor to create what we call a concept note. We keep all the note files in one directory for a particular campaign, but it’s often difficult to go back and find a particular one.</p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">DH : <span class="s60">So is this something you’d want in the new system?</span></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;">PB: <span class="s60">Yes. We need some means to enter a concept note and to find it again. </span><i>(This sounds like two possible use cases. Who are the actors? )</i></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">DH : <span class="s60">So who would you want to be able to do this?</span></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">PB: <span class="s60">I guess that the staff working on a campaign should be able to create a new note in the system.</span></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">DH : <span class="s60">Only them? </span><i>(Any other actors? )</i></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">PB: <span class="s60">Yes, only the staff actually working on a campaign.</span></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">DH : <span class="s60">What about finding them again? Is this just to view them or could people modify them?</span></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;">PB:  <span class="s60">Well, we don’t change them now. We just add to them. It’s important to see how a concept has developed. So we would only want to view them. But we need some easy way of browsing through them until we find the right one. </span><i>(Who are the actors for this? )</i></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">DH : <span class="s60">Can anyone read the concept notes?</span></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;">PB: <span class="s60">Yes, any of the staff might need to have a look.</span></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;">DH : <span class="s60">Would you need any other information apart from the text of the concept itself? </span><a href="part16.htm#bookmark291" class="s67">(Thinking ahead to </a><i>Chapter 7! )</i></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;">PB: <span class="s60">Yes. It would be good to be able to give each one a title. Could we use the titles then when we browse through them? Oh, and the date, time and whoever created that concept note.</span></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;">DH : <span class="s60">Right, so you’d want to select a campaign and then see all the titles of notes that are associated with that campaign, so you could select one to view it? </span><i>(Thinking about the interaction between the user and the system.)</i></p><p class="s71" style="padding-left: 15pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">PB: <span class="s60">Yes, that sounds about right .</span></p><p class="s66" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">…</p><p class="s66" style="padding-top: 7pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">(From this information, Dave Harris is going to be able to develop the use case descriptions for two use cases:</p><p class="s66" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">Create concept note Browse concept notes</p><p class="s66" style="padding-left: 15pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part9.htm#bookmark267" class="s67">The use case diagram is shown in Fig. 6 </a>.16 . The use case descriptions will be as follows.)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="851" alt="image" src="Image_400.png"/></span></p><p class="s59" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Figure 6.16 <span class="s60">Use cases for Advert Preparation subsystem.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Create concept note</p><p class="s60" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">A member of staff working on a campaign can create a concept note, which records ideas, concepts and themes that will be used in an advertising campaign. The note is in text form. Each note has a title. The person who created the note, the date and time are also recorded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Browse concept notes</p><p class="s60" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Any member of staff may view concept notes for a campaign. The campaign must be selected first. The titles of all notes associated with that campaign will be displayed. The user will be able to select a note and view the text on screen. Having viewed one note, others can be selected and viewed.</p><p class="s66" style="padding-top: 5pt;padding-left: 9pt;text-indent: 9pt;text-align: left;">(The interaction here is quite straightforward, so we shall not need a more detailed breakdown of the interaction between user and system.</p><p class="s66" style="padding-left: 9pt;text-indent: 9pt;text-align: left;"><a href="part9.htm#bookmark267" class="s67">Note that in Fig. 6 </a>.16 , because Campaign Staff is a specialization of Staff, we do not need to show a communication association between the Campaign Staff actor and the Browse concept notes use case.)</p><p class="s59" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Figure 6.16 <span class="s60">Use cases for Advert Preparation subsystem.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Create concept note</p><p class="s60" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">A member of staff working on a campaign can create a concept note, which records ideas, concepts and themes that will be used in an advertising campaign. The note is in text form. Each note has a title. The person who created the note, the date and time are also recorded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Browse concept notes</p><p class="s60" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Any member of staff may view concept notes for a campaign. The campaign must be selected first. The titles of all notes associated with that campaign will be displayed. The user will be able to select a note and view the text on screen. Having viewed one note, others can be selected and viewed.</p><p class="s66" style="padding-top: 5pt;padding-left: 9pt;text-indent: 9pt;text-align: left;">(The interaction here is quite straightforward, so we shall not need a more detailed breakdown of the interaction between user and system.</p><p class="s66" style="padding-left: 9pt;text-indent: 9pt;text-align: left;"><a href="part9.htm#bookmark267" class="s67">Note that in Fig. 6 </a>.16 , because Campaign Staff is a specialization of Staff, we do not need to show a communication association between the Campaign Staff actor and the Browse concept notes use case.)</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"/><p class="s59" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Figure 6.16 <span class="s60">Use cases for Advert Preparation subsystem.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Create concept note</p><p class="s60" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">A member of staff working on a campaign can create a concept note, which records ideas, concepts and themes that will be used in an advertising campaign. The note is in text form. Each note has a title. The person who created the note, the date and time are also recorded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Browse concept notes</p><p class="s60" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">Any member of staff may view concept notes for a campaign. The campaign must be selected first. The titles of all notes associated with that campaign will be displayed. The user will be able to select a note and view the text on screen. Having viewed one note, others can be selected and viewed.</p><p class="s66" style="padding-top: 5pt;padding-left: 9pt;text-indent: 9pt;text-align: left;">(The interaction here is quite straightforward, so we shall not need a more detailed breakdown of the interaction between user and system.</p><p class="s66" style="padding-left: 9pt;text-indent: 9pt;text-align: left;"><a href="part9.htm#bookmark267" class="s67">Note that in Fig. 6 </a>.16 , because Campaign Staff is a specialization of Staff, we do not need to show a communication association between the Campaign Staff actor and the Browse concept notes use case.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.5pt" cellspacing="0"><tr style="height:22pt"><td style="width:440pt" bgcolor="#006793"><p class="s55" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:369pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 35pt;padding-right: 9pt;text-indent: -25pt;text-align: justify;">6.1  <span class="s45">Read the following description of a requirement for FoodCo, and decide which parts of it are functional requirements and which are non-functional requirements.</span></p><p class="s46" style="padding-top: 4pt;padding-left: 35pt;padding-right: 9pt;text-indent: 0pt;text-align: justify;">The allocation of staff to production lines should be mostly automated. A process will be run once a week to carry out the allocation based on the skills and experience of operatives. Details of holidays and sick leave will also be taken into account. A first draft Allocation List will be printed off by 12.00 noon on Friday for the following week. Only staff in Production Planning will be able to amend the automatic allocation to fine- tune the list. Once the amendments have been made, the final Allocation List must be printed out by 5.00pm. The system must be able to handle allocation of 100 operatives at present, and should be capable of expansion to handle double that number.</p><p class="s72" style="padding-top: 3pt;padding-left: 35pt;padding-right: 11pt;text-indent: -25pt;text-align: left;">6.2  <span class="s45">Name the five main fact-finding techniques and list one advantage and one disadvantage of each.</span></p><p class="s72" style="padding-top: 3pt;padding-left: 35pt;text-indent: -25pt;text-align: left;"><a name="bookmark268">6.3 </a><span class="s45">Imagine that you will be interviewing one of the three staff in Production Planning at FoodCo. Draw up a list of ten questions that you would want to ask him or her.</span></p><p class="s72" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">6.4  <span class="s45">What is the purpose of producing use cases?</span></p><p class="s72" style="padding-top: 3pt;padding-left: 35pt;padding-right: 11pt;text-indent: -25pt;text-align: left;">6.5    <span class="s45">Describe in your own words the difference between the « extend»  and « include» relationships in use case diagrams.</span></p><p class="s72" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">6.6  <span class="s45">What is the difference between an ‘essential’ and a ‘real’ use case?</span></p><p class="s72" style="padding-top: 3pt;padding-left: 35pt;padding-right: 9pt;text-indent: -25pt;text-align: justify;">6.7  <span class="s45">Write a use case description in the extended form, used for the Assign staff to work on a campaign example in Section 6.6.2, for either Create concept note or Browse concept notes.</span></p><p class="s72" style="padding-top: 3pt;padding-left: 35pt;padding-right: 9pt;text-indent: -25pt;text-align: justify;">6.8  <span class="s45">Think of the different possible uses you could make of a library computer system and draw a use case diagram to represent these use cases.</span></p><p class="s72" style="padding-top: 3pt;padding-left: 35pt;padding-right: 9pt;text-indent: -25pt;text-align: justify;">6.9  <span class="s45">List some non-functional requirements of a library computer system (as in Q uestion 6.8) that you would not model using use cases.</span></p><p class="s72" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">6.10 <span class="s45">In what way are use case diagrams different when used for business modelling?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.49999pt" cellspacing="0"><tr style="height:22pt"><td style="width:440pt" bgcolor="#006793"><p class="s55" style="padding-top: 3pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:79pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 32pt;padding-right: 9pt;text-indent: -22pt;text-align: justify;">6.A <a href="part9.htm#bookmark22" class="s73">Refer to the material for the second case study—FoodCo (introduced in Case Study Chapter </a><span class="s45">B1). Draw up your initial fact-finding plan along the lines of the plan given in the Case Study Example on page 151.</span></p><p class="s72" style="padding-left: 32pt;padding-right: 9pt;text-indent: -22pt;text-align: justify;">6.B <span class="s45">Read the following excerpt from a transcript of an interview with one of the production planners at FoodCo. Draw a use case diagram and create use case descriptions for the</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.5pt" cellspacing="0"><tr style="height:552pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s45" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">use cases that you can find in this information.</p><p class="s57" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">K en Ong: <span class="s45">So what happens when you start planning the next week’s allocation?</span></p><p class="s57" style="padding-top: 3pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">Rik Sharma: <span class="s45">Well, the first thing to do is to check which staff are unavailable.</span></p><p class="s57" style="padding-top: 3pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">K O: <span class="s45">Would that be because they are on holiday?</span></p><p class="s57" style="padding-top: 3pt;padding-left: 32pt;padding-right: 21pt;text-indent: 0pt;text-align: justify;">RS: <span class="s45">Yes, they could be on holiday or they could be off sick. Because staff are handling raw food, we have to be very careful with any illness. So factory staff often have to stay off work longer than they would if they were office workers.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">K O: <span class="s45">So how do you know who’s off sick and who’s on holiday?</span></p><p class="s57" style="padding-top: 3pt;padding-left: 32pt;padding-right: 21pt;text-indent: 0pt;text-align: justify;">RS: <span class="s45">They have to complete a holiday form if they want a holiday. They send it to the Factory Manager, who authorizes it and sends it to us. We take a copy and enter the details into our system. We then return the form to the member of staff.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">K O: <span class="s45">What details do you enter?</span></p><p class="s57" style="padding-top: 3pt;padding-left: 32pt;padding-right: 20pt;text-indent: 0pt;text-align: justify;">RS: <span class="s45">Who it is, the start date of the holiday and the first date they are available for work again.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">K O: <span class="s45">What about illness?</span></p><p class="s57" style="padding-top: 3pt;padding-left: 32pt;padding-right: 21pt;text-indent: 0pt;text-align: justify;">RS: <span class="s45">The first day someone is off sick they have to ring in and notify us. We have to find someone to fill in for them for that day if we can.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;padding-right: 21pt;text-indent: 0pt;text-align: justify;">K O: <span class="s45">Right. Let’s come back to that in a minute. How do you record the fact that they’re off sick for your next week’s production plan?</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;padding-right: 20pt;text-indent: 0pt;text-align: justify;">RS: <span class="s45">We make an entry in the system. We record which member of staff it is, when they went off sick, the reason and an estimate of how many days they’re likely to be off.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;padding-right: 20pt;text-indent: 0pt;text-align: justify;">K O: <span class="s45">Right, so how do you get at that information when you come to plan next week’s allocation?</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;padding-right: 20pt;text-indent: 0pt;text-align: justify;">RS: <span class="s45">Well, we run off three lists. We enter Monday’s date, and it prints us off one list showing who is available all week, a second list showing who is not available all week, and a third list showing who is likely to be available for part of the week.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;text-indent: 0pt;text-align: justify;">K O: <span class="s45">Then what?</span></p><p class="s57" style="padding-top: 3pt;padding-left: 32pt;padding-right: 20pt;text-indent: 0pt;text-align: justify;">RS: <span class="s45">Then we start with the people who are available all week and work round them. We pull each operative’s record up on the screen and look at two main factors—first their skills and experience, and second, which line they’re working on at the moment and how long they’ve been on that line. Then we allocate them to a line and a session in one of the three factories.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;padding-right: 21pt;text-indent: 0pt;text-align: justify;">K O:  <span class="s45">So you can allocate them to any one of the three factories. Do you enter the same data for each one?</span></p><p class="s57" style="padding-top: 2pt;padding-left: 32pt;padding-right: 20pt;text-indent: 0pt;text-align: justify;">RS: <span class="s45">No, there are slight variations in the allocation screen for each of the factories— mainly for historical reasons.</span></p><p class="s45" style="padding-top: 6pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">…</p><p class="s72" style="padding-top: 3pt;padding-left: 32pt;padding-right: 9pt;text-indent: -22pt;text-align: justify;">6.C  <span class="s45">Find out what you can about a software package to support requirements capture. Does it integrate with a modelling tool? What kind of traceability of requirements does it provide?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="127" height="2" alt="image" src="Image_401.png"/></span></p><p class="s21" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1124" class="s33">Booth </a><a href="part9.htm#bookmark171" class="s33">(1989) Chapter </a>5 describes the issues surrounding the usability of systems in more detail than we can here, and explains the process of Task Analysis.</p><p class="s21" style="padding-left: 5pt;text-indent: 9pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1245" class="s33">Oppenheim </a><a href="part38.htm#bookmark1100" class="s33">(2000) provides a very detailed coverage of questionnaire design for survey purposes. It is aimed mainly at social science and psychology students, but has some relevant chapters on how to formulate effective questions. Many books for students on how to carry out a research project cover fact- gathering techniques such as interviewing and questionnaire design. Allison et al. </a>(1996) is an example, but most university libraries and bookshops will have a selection of similar books.</p><p class="s21" style="padding-top: 3pt;padding-left: 5pt;text-indent: 9pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1193" class="s33">Hart </a>(1997) gives a detailed explanation of the techniques that are specific to the development of expert systems.</p><p class="s21" style="padding-left: 5pt;text-indent: 9pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1256" class="s33">Roberts </a><a href="part38.htm#bookmark1302" class="s33">(1989) addresses the role of users in a systems development project. This book is one of a series of guides written for civil servants in the UK government service, and is relatively bureaucratic in its outlook. However, it ranges widely over the issues that users may face. Yourdon </a><a href="part9.htm#bookmark102" class="s33">(1989) discusses users and their roles in Chapter </a>3.</p><p class="s21" style="padding-left: 5pt;text-indent: 9pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1211" class="s33">Jacobson et al. </a><a href="part38.htm#bookmark1259" class="s33">(1992) present the original ideas behind use cases as an analysis technique, and these are developed in Rosenberg and Scott </a><a href="part38.htm#bookmark1141" class="s33">(1999) or Cockburn </a>(2000).</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="281" alt="image" src="Image_402.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part8.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part10.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>

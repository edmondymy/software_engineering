<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Glossary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part36.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part38.htm">Next &gt;</a></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><a name="bookmark1093">Abstract class </a><span class="s7">a class that can have no instances; a superclass that acts only as a generalized template for its instantiated subclasses.</span><a name="bookmark1094">&zwnj;</a></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Abstract data type (ADT) </span>a set of data values and operations that act on them. An ADT is specified formally using mathematical notation. The concept of an ADT is a precursor to object-orientation as it associates operations with a data structure; it is also the essence of encapsulation (<i>q.v.</i>). Stack and queue are commonly used examples of ADTs.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Abstract operation <span class="s7">an operation that is not implemented in the class in which it appears (usually an abstract superclass), but that will be implemented in a subclass.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Abstraction <span class="s7">a simplified representation that contains only those features that are relevant for a particular task; the act of separating out the general or reusable parts of an element of a system from its particular implementation.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Action <span class="s7">a step in an activity, used to represent where work is taking place; an executable statement, commonly associated with a state or transition in a state machine.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Activation <span class="s7">the execution of an operation, represented in interaction sequence diagrams as a long thin rectangle.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Activity <span class="s7">an activity is a group of one or more actions that may execute as a result of a triggering event.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Activity diagram <span class="s7">a diagram that shows activities and actions to describe workflows.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Activity edge <span class="s7">a flow between elements in an activity.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Activity final node <span class="s7">the final node in an activity that terminates the actions in that activity.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Activity partition <span class="s7">a column or row in an activity diagram used to show an area of responsibility for the actions in it. Sometimes referred to as a swimlane.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Actor <span class="s7">an external entity of any form that interacts with the system. Actors may be physical devices, human roles (rather than individual persons) or information systems.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Adornment <span class="s7">an element attached to another model element: for example, a stereotype icon or a constraint.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Aggregation <span class="s7">a wholeâ€“part association between two or more objects or components, where one represents the whole and the others parts of that whole.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Algorithm <span class="s7">a description of the internal logic of a process or decision in terms of a structure of smaller steps. The structure may consist of steps in sequence, selection between alternatives and iteration.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Analysis class stereotype </span>one of three specialized kinds of class (boundary, control and entity classes (<i>q.v</i>.)) that feature in analysis class diagrams. These represent a separation of concerns that forms the basis of the architecture recommended for most models developed following UP guidelines (<i>cf </i>stereotype).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Antipattern <span class="s7">documents unsuccessful attempts at providing solutions to certain recurring problems but includes reworked solutions that are effective.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Artefact <span class="s7">a model element used in deployment diagrams representing a file or collection of files containing source code or an executable. (Artifact in US spelling.)</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Association <span class="s7">a logical connection between two instances. Associations are commonly found between classes, although in some circumstances a class can have an association with itself. An association describes possible links between instances, and may correspond either to logical relationships in the application domain or to message paths in software.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Association class <span class="s7">a class that is modelled in order to provide a location for attributes or operations that properly belong to an association between other classes.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Association instance </span>another name for a link (<i>q.v</i>.).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Asynchronous message <span class="s7">a message that does not cause the invoking operation to halt execution while it awaits the return of control.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Attribute <span class="s7">an element of a class where a data item is stored as a value; together with operations, attributes define a class. Describes some property of instances of the class.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Attribute value <span class="s7">the value of an attribute that is held by a particular object at a particular time.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Behavioural classifier </span>a UML classifier (<i>q.v.</i>) that models a behavioural aspect of a system; for example, a collaboration (<i>q.v.</i>).</p><p class="s11" style="padding-top: 3pt;padding-left: 14pt;text-indent: -8pt;text-align: left;">Behavioural model <span class="s7">a UML model that focuses on the behaviour of the elements of an application as opposed to their structure: for example, a use case model.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Behavioural state machine </span>(see <i>state machine</i>).</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Boundary class <span class="s7">a stereotyped class that provides an interface to users or to other systems (see</span></p><p class="s14" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">stereotype<span class="s7">).</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Business rule </span>see <i>enterprise rule</i>.</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Capta <span class="s7">data that has been selected for processing because of its relevance to a particular purpose.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Cardinality </span>the number of elements in a set; contrast with <i>multiplicity </i>(<i>q.v</i>.).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Choice pseudostate <span class="s7">allows the splitting of a transition into multiple exit transitions and is a dynamic conditional branch. The guard conditions are evaluated when the transition reaches the choice pseudostate.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Class <span class="s7">a descriptor for a collection of objects that are logically similar in terms of their possible behaviour (operations) and the structure of their data (attributes).</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Class diagram <span class="s7">a UML structure diagram that shows classes with their attributes and operations, together with the associations between classes.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Class Responsibility Collaboration (CRC) <span class="s7">CRC cards provide a technique for exploring the possible ways of allocating responsibilities to classes and the collaborations that are necessary to fulfil the responsibilities</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Class-scope <span class="s7">an element that occurs only once and is attached to the class, not to any individual object. A class-scope attribute or operation is accessed through the class (i.e. prefixed with the class name) not through an object. Model elements that are of class scope are underlined in class diagrams.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Classifier <span class="s7">a classifier is a group of abstract model elements that have similar structure. The classifiers in UML are Actors, Artefacts, Classes, Collaborations, Components, Enumerations, Data types, Interfaces, Nodes, Roles, Signals and Use cases.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Cohesion <span class="s7">a measure of the degree to which the elements of a component (e.g. a model or class) contribute to a single purpose for the component; regarded as a desirable feature.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Collaboration <span class="s7">the structure and links between a group of instances that participate in a behaviour. The behaviour can be that of an operation, a use case or any other behavioural classifier.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Collaboration diagram </span>a UML 1.X term for a communication diagram (see <i>communication diagram</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Collection class <span class="s7">provides collection-specific behaviour to maintain a collection. Used when designing associations with a many multiplicity to hold collections of object identifiers.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Combined fragment <span class="s7">a combined fragment contains one or more interaction operands (or compartments) and is enclosed in a frame; each operand contains an interaction fragment; the meaning of a combined fragment is determined by its interaction operator.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;">Common Object Req uest Broker Architecture (CORBA) <span class="s7">a mechanism to support the construction of systems in which objects, possibly written in different languages, reside on different machines and are able to interact by message passing.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;"><span class="s11">Communication diagram </span>type of interaction diagram (<i>q.v.</i>) that shows an interaction between lifelines (e.g. objects) and the context of the interaction in terms of the links between the lifelines.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Communication path <span class="s7">a path between nodes in a deployment diagram that allows communication between the nodes, usually stereotyped with the protocol for the communication.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Component <span class="s7">a replaceable part of a system defined primarily in terms of the interfaces that it provides and the interfaces that it requires in order to operate. Components may be executable software modules that have a well-defined interface and identity; they may also be complex model elements that will be realized as free-standing software modules.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Component-Based Development (CBD) <span class="s7">an approach to software development that focuses on the use of replaceable components. CBD differs from other development approaches, in particular, through its emphasis on the assembly of software systems from pre-existing components.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Component diagram <span class="s7">a diagram that shows the organization of and dependencies among components.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Composite structure diagram <span class="s7">a diagram that shows the internal structure of a composite. For instance, a composite structure diagram may be used to show the elements of a collaboration and how the collaboration as a whole interacts with the rest of the system.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Composition <span class="s7">a strong form of aggregation with a lifetime dependency between each part and the whole. No part can belong to more than one composition at a time and, if the composite whole is deleted, its parts are deleted with it.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Concrete class <span class="s7">a class that may have instances.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Concurrent states <span class="s7">if an object may be in two or more states at the same time, then these states are said to be concurrent.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Constructor operation <span class="s7">an operation that creates a new instance of a class.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Context (of a pattern) <span class="s7">the circumstances in which a particular problem occurs.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Contract <span class="s7">a black box description of a service (of a class or subsystem) that specifies the results of the service and the conditions under which it will be provided.</span></p><p class="s7" style="padding-top: 3pt;padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Control class </span>a stereotyped class that controls the interaction between boundary classes and entity classes (see <i>stereotype</i>).</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Control flow <span class="s7">a flow between actions in an activity diagram that indicates the flow from one to another.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Coupling <span class="s7">relates to the degree of interconnectedness between design components and is reflected by the number of links and the degree of interaction an object has with other objects.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Critical path analysis (CPA) <span class="s7">a diagrammatic technique for analysing the dependencies between project tasks and determining those tasks that must be completed on time if the project itself is to be completed on time.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Data <span class="s7">raw facts, not yet identified as relevant to any particular purpose.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Decision node <span class="s7">a node in an activity diagram where a flow branches into multiple alternative flows.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Deep history pseudostate <span class="s7">shows that a region in a composite state will resume at the last active substate in each of the nested submachines within that region, no matter how deeply nested they are.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Degree </span>another word for <i>multiplicity </i>(<i>q.v.</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Dependency <span class="s7">a relationship between two model elements, such that a change in one element may require a change in the dependent element.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Dependency constraint </span>(see <i>integrity constraint</i>)</p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Deployment diagram </span>A diagram that shows the run-time configuration of processing nodes (<i>q.v.</i>) and the artefacts that are located on them.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Deployment specification <span class="s7">an artefact deployed to a node in a deployment diagram in order to configure other artefacts deployed to the same node.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Design constraint <span class="s7">a constraint that limits the design options that may be used. Common design constraints include cost and data storage requirements.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Destructor operation <span class="s7">an operation that destroys an instance of a class.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Device <span class="s7">a node representing a processor in a deployment diagram.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Diagram <span class="s7">a graphical illustration that documents some aspect of a system, not necessarily complete or consistent.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Domain integrity </span>(see <i>integrity constraint</i>)</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Domain model <span class="s7">an analysis class model that is independent of any particular use cases or applications, and that typically contains only entity objects. A domain model may serve as a basis for the analysis and design of components that can be reused in more than one software system.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Encapsulation </span>the practice of locating operations together with the data on which they operate, typically within the same class or component (see also <i>information hiding </i>and <i>abstract data type</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Enterprise (or business) rule <span class="s7">a statement that expresses an association between domain concepts together with any business constraints on its multiplicity: for example, each order is placed by exactly one customer while a customer may place one or more orders.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Entity class </span>a stereotyped class that represents objects in the business domain model (see <i>stereotype</i>).</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Entry pseudostate <span class="s7">shows an exceptional entry point into a submachine state.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Event </span>an occurrence that is of significance to the information system and in some way affects its operation: for example, by causing a transition in state; may be included in a state machine (<i>q.v.</i>).</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Exception <span class="s7">a mechanism in object-oriented languages for handling errors or unexpected inputs.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Execution or Execution occurrence </span>(see <i>activation</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Execution environment <span class="s7">a type of node in a deployment diagram representing an implementation environment, container or platform in which an artefact is deployed.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Exit pseudostate <span class="s7">an exceptional exit point from a submachine state.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Extend relationship <span class="s7">a relationship between use cases where one use case extends or adds optional new actions to another. Written as a stereotype Â« extendÂ» .</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Extension point <span class="s7">the point in a use case where an extension occurs, based on satisfying some condition.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">eX treme Programming (X P) <span class="s7">an approach to systems development that focuses on producing the simplest coding solution for application requirements. One characteristic is the use of pair programming, with code being written by two developers working at a single workstation.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Final node <span class="s7">the exit point from an activity diagram.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Final pseudostate <span class="s7">a notational convenience used to indicate the final state in a state machine.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Flow final node <span class="s7">the node in an activity diagram that terminates a flow but leaves other flows unaffected.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Forces (of a pattern) <span class="s7">the particular issues that must be addressed in resolving a problem.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Fork <span class="s7">a node in an activity diagram where a flow is split into multiple parallel flows.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Frame <span class="s7">a labelled rectangle that represents the boundary of a diagram; frames may be used for all diagram types but may be omitted where the boundary of the diagram is clear (except for interaction diagrams where a frame must always be used).</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Functional req uirement <span class="s7">a requirement that specifies a part of the functionality required by the user.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Generalization <span class="s7">the abstraction of common features among elements (for example, classes) by the creation of a hierarchy of more general elements (for example, superclasses) that contain the common features.</span></p><p class="s11" style="padding-top: 3pt;padding-left: 14pt;text-indent: -8pt;text-align: left;">Guard condition <span class="s7">a Boolean expression associated with a transition so that the transition only occurs if the condition evaluates as true at the time the event fires. May involve parameters of the triggering event and also attributes and links of the object that owns the state machine.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Implementation diagram <span class="s7">a generic term for the UML diagrams used in modelling the implementation of a system.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Include relationship <span class="s7">a relationship between use cases where one use case includes the actions described in another use case. Written as a stereotype Â« includeÂ» .</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Incremental development <span class="s7">development and delivery of software in incremental stages, where each increment provides some useful functionality. Some initial analysis scopes the problem and identifies major requirements. These are then reviewed and those that deliver most benefit to the client become the focus of the first increment. The installation of the first increment provides feedback to the team, which informs the second increment and so on.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Information <span class="s7">facts that have been selected as relevant to a purpose and then organized or processed in such a way that they have meaning for that purpose.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;">Information hiding <span class="s7">the practice of designing a component (e.g. a module, class or subsystem) so that its internal implementation details are not exposed to other components and its data can be accessed only through its own operations.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Inheritance <span class="s7">the mechanism by which object-oriented programming languages implement a relationship of generalization and specialization between classes. A subclass instance automatically acquires features of its superclasses.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Initial node <span class="s7">the entry point to an activity diagram.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Initial pseudostate <span class="s7">a notational convenience used to indicate the starting state in a state machine. A state machine may not remain in its initial pseudostate.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;">Instance <span class="s7">usually a single object (also object instance), although the term instance can also be applied to other elements: for example, an association instance is a link. Instances are generally only called such in the context of their membership of a particular class or type.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Instance diagram <span class="s7">a UML diagram similar in form to a class diagram, but which contains object instances instead of classes, links instead of associations and may show attribute values (also known as an object diagram).</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Integrity constraint <span class="s7">ensures that an information system holds data that is mutually consistent and is manipulated correctly. Referential integrity ensures that object identifiers in one object refer only to objects that exist. Dependency constraints ensure that attribute dependencies, where one attribute may be calculated from other attributes, are maintained consistently. Domain integrity ensures that attributes hold only permissible values.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Interaction <span class="s7">defines the message passing between lifelines (e.g. objects) within the context of a collaboration to achieve a particular behaviour.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Interaction constraint <span class="s7">a Boolean expression that must be true before the interaction fragment in the combined fragment region it guards can execute.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Interaction diagram <span class="s7">an umbrella term for sequence, communication, timing and interaction overview diagrams.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Interaction fragment <span class="s7">a part of an interaction shown on a separate sequence diagram.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Interaction occurrence </span>is replaced by the term InteractionUse (<i>q.v.</i>) in UML 2.2.</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Interaction operand <span class="s7">a compartment in a combined fragment; contains an interaction fragment.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Interaction operator <span class="s7">determines the meaning of a combined fragment: for example, the interaction operator â€˜loopâ€™ indicates that the combined fragment specifies an iteration.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Interaction overview diagram <span class="s7">a variant of an activity diagram that incorporates interaction diagrams. An interaction overview diagram focuses on the flow of control in an interaction where the nodes in the diagram are interactions or interaction occurrences.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Interaction seq uence diagram </span>(see <i>sequence diagram</i>)</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Interaction use <span class="s7">a frame that does not show the detail of an interaction fragment, but refers to another sequence diagram (an interaction fragment) that does show this detail. A mechanism to hide complex detail that may be included in a sequence diagram or an interaction overview diagram.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Interface <span class="s7">that part of the boundary between two interacting systems through which they communicate; the set of all signatures for the public operations of a class, package or component.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Interface class </span>a class via which a system can interact with its actors (see also <i>boundary class</i>).</p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;"><span class="s11">Invariant </span>an aspect of a UML model expressed as a formal statement that must always remain true. For example, the value of a derived attribute totalCost must always be equal to the total of all cost attribute values. Usually expressed in OCL (<i>q.v.</i>).</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Join <span class="s7">a node in an activity diagram where multiple parallel flows are merged into a single flow.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;">Junction pseudostate <span class="s7">a junction between transitions in a state machine diagram that allows the merging or splitting of transitions.</span></p><p class="s11" style="padding-top: 3pt;padding-left: 14pt;text-indent: -8pt;text-align: left;">K nowledge <span class="s7">a complex structure of information that allows its possessor to decide how to behave in particular situations.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Legacy system <span class="s7">a computerized information system, probably in use for a long time and built with technologies that are now outmoded (perhaps also using different technologies and/or development approaches at different times)â€”but that continues to deliver benefit to the organization.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Lifecycle (of a project) <span class="s7">the phases through which a development project passes from the inception of the idea through to the completion and use of the product and its eventual decommissioning.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Lifeline <span class="s7">represents the period of existence of a modelling element (e.g. object, subsystem) in an interaction diagram.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Link <span class="s7">a connection between objects; an instance of an association.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">M erge <span class="s7">a node in an activity diagram where alternative flows created at a decision node merge back to a single flow.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">M essage <span class="s7">a request to an object for it to provide some specified service, either an action that it can carry out or information that it can provide. A message invokes an operation or service.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">M essage passing </span>a metaphor for the way that objects interact in an object-oriented system by sending each other messages that request services, or request or supply information. Since objects interact only through the messages they exchange, their internal details need not be exposed (see <i>information hiding</i>).</p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">M ethod </span>the implementation of an operation; the instantiation of a methodology (<i>q.v.</i>) on a specific project.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">M ethodology <span class="s7">a framework that describes an overall approach to software development; typically comprises a programming paradigm (e.g. object-orientation), a set of techniques and notations (e.g. UML) that support the approach, a lifecycle model (e.g. spiral and incremental) with phases that structure the development process, and a unifying set of procedures and philosophy. Examples include UP and Scrum.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">M odel <span class="s7">a complete view of a system at a particular stage of development and from a particular perspective: for example, an analysis model shows the logical specification for a system, while an implementation model shows the detailed allocation of software components to processors and network nodes.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">M odel Driven Architecture (M DA) </span>an OMG initiative and an approach to developing systems in which a platform-independent architectural model (<i>q.v</i>.) is produced and transformed into a platform-specific model (<i>q.v</i>.) from which code can be generated.</p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">M odular construction </span>an approach that aims to build component-based systems that are easy to maintain, modify or extend. Relies on software modules that are essentially decoupled (see <i>coupling</i>) subsystems, with their internal details hidden from other modules.</p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">M ultiplicity </span>a constraint that specifies the range of permitted <i>cardinalities </i>(<i>q.v</i>.), for example, in an association role or in a composite class. For example, an association may have a multiplicity of between 1 and 5 (written as 1..5), and a particular instance of that association may have a cardinality of 3.</p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Node (in activity diagram) </span>a diagram element that typically represents an action, a decision, or the start or end of the overall activity. Nodes are connected to each other by paths called object flows and control flows (<i>q.v.</i>)</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Node (in deployment diagram) <span class="s7">a physical computational resource used by a system at run-time, typically having processing capability and memory in a deployment diagram.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Non-functional req uirement <span class="s7">a requirement that relates to system features that cannot be expressed in the form of specific functions, such as performance, maintainability and portability.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Normalization <span class="s7">a technique that groups attributes based upon functional dependencies according to several rules to produce normalized data structures that are largely redundancy free.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;"><span class="s11">Object </span>a single thing or concept, either in a model of an application domain or in a software system, that can be represented as an encapsulation (<i>q.v.</i>) of state, behaviour and identity; a member of a class that defines a set of similar objects.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Object constraint language (OCL) <span class="s7">a specification language designed to accompany UML and that can be used to define elements of a model, their behaviour (such as operations), constraints (such as guard conditions), etc. with greater rigour than is possible in the purely graphical language of UML itself.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Object diagram </span>(see <i>instance diagram</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Object flow <span class="s7">flow between an object and an action or activity in an activity diagram, that indicates that the object is used or its state is changed by the action or activity.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Operation </span>an aspect of the behaviour that defines a class; an element of the services that are provided by a class; a specification (often written in OCL, <i>q.v.</i>) of an element of system functionality that will be implemented as a method.</p><p class="s11" style="padding-top: 3pt;padding-left: 14pt;text-indent: -8pt;text-align: left;">Operation signature <span class="s7">the interface to an operation, defined by the operationâ€™s name, the number and type of its parameters and the type of the return value, if any. Polymorphically redefined operations have the same signature.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Package <span class="s7">a mechanism for grouping UML elements, usually classes, into groups. Packages can be nested within other packages.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Pattern <span class="s7">an abstract solution to a commonly occurring problem in a given context.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Phase <span class="s7">a distinct period of time in the lifecycle of a development project, marked by a particular focus of activity and often also by deliverables that are characteristic of that phase. For example, during the elaboration phase in UP, activity concentrates on producing a design for a suitable system that demonstrates how it can be built within an acceptable timescale and budget.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Platform-independent model (PIM ) </span>a model produced in model-driven architecture (<i>q.v</i>.) that is independent of a development or deployment environment.</p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Platform-specific model (PSM ) </span>a model produced in model-driven architecture (<i>q.v</i>.) that is generated from a platform-independent model (<i>q.v</i>.) for a particular deployment environment.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Polymorphism <span class="s7">the ability of different methods to implement the same operation, and thus to respond to the same message in different ways that are appropriate to their class. For example, objects of different subclasses in an inheritance hierarchy may respond differently to the same message, yet with a common meaning to their responses.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Post-condition <span class="s7">part of an operation specification or used in a protocol state machine; those conditions that must be true after the operation has executed or a transition has firedâ€”in other words, the valid results of the operation or the completion of the transition.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Pre-condition <span class="s7">part of an operation specification or used in a protocol state machine; those conditions that must be true before the operation can execute in an operation specification or before a transition may fire in a protocol state machine.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Primary operation <span class="s7">an operation to create or destroy an instance of a class, or to get or set the value of an attribute.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Procedural call </span>(see <i>synchronous message</i>).</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Processing node <span class="s7">a node in a deployment diagram.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Property <span class="s7">a feature or characteristic of a UML element, usually one for which there is no specific UML notation.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Protocol state machine </span>(see <i>state machine</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;">Prototype <span class="s7">a system or partially complete system that is built quickly to explore some aspect of the system requirements. Usually not intended as the final working system, but in some development approaches a prototype may be iteratively refined to become the final working system.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Query operation <span class="s7">an operation that returns data or information but causes no change of state within a model or a software system.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Realize relationship <span class="s7">a relationship between two elements where one is in some sense an implementation of the other, although it may not necessarily have the same structure. Commonly used to show that a class supports an interface or that a collaboration implements a use case. Written as a stereotype Â« realizeÂ» .</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Refactoring <span class="s7">to restructure and simplify program code so that duplication is removed and flexibility is enhanced.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Referential integrity </span>(see <i>integrity constraint</i>).</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Relation <span class="s7">a group of related data items organized in columns and rows, also known as a table. </span>Reply <span class="s7">a return of control to the object that originated the message that began the activation. </span>Repository <span class="s7">that part of a CASE or modelling tool environment that handles the storage of models,</span></p><p class="s7" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">including diagrams, specifications and definitions.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Responsibility <span class="s7">a high-level description of the behaviour of a class or component. Primarily reflects the services that it can offer to other elements, and also the knowledge or information that is available to it, either stored internally or requested via collaboration with other elements.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Reuse <span class="s7">the assembly of all or part of a new software system from elements, components or abstractions that already exist. Reuse can refer to binary software, designs or specifications, or to more abstract features such as elements in a generalization hierarchy.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Semantics <span class="s7">the meaning of an element, diagram, model or expression, as distinct from the syntactic rules that determine whether it is valid UML. Semantics can apply at a relatively abstract level: for example, an association between two classes signifies that there can be links between their instances. Semantics can also apply at an application- or domain-related level: for example, in a typical bank application it is not meaningful for an account to be associated with more than one customer.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Seq uence diagram <span class="s7">(or interaction sequence diagram) shows an interaction between objects arranged in a time sequence. Sequence diagrams can be drawn at different levels of detail and also to meet different purposes at several stages in the development lifecycle.</span></p><p class="s11" style="padding-top: 3pt;padding-left: 14pt;text-indent: -8pt;text-align: left;">Service <span class="s7">a useful function (or set of functionality) that is carried out by an object, component or subsystem when requested to do so by another object or component.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Service oriented architecture (SOA) <span class="s7">an approach to systems architecture that relies on defining loosely-coupled components that can interact by exchanging requests for services over a network.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Shallow history pseudostate <span class="s7">shows that a region in a composite state in a state machine will resume at the last active substate at the level of the shallow history pseudostate.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Signal </span>(see <i>asynchronous message</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;">SOAP <span class="s7">(formerly Simple Object Access Protocol) a protocol used in the provision of web services to define message format and other aspects of the exchange between the client application and the server.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Software architecture <span class="s7">describes the subsystems and components of a software system and the relationships between the components.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Specialization <span class="s7">the other face of generalization; an element (for example, a class) is said to be specialized when it has a set of characteristics that uniquely distinguish it from other elements. Distinguishes subclasses from their superclass.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Stakeholders <span class="s7">anyone who is affected by the information system. Stakeholders include not only users and development team members, but also resource managers and the quality assurance team, for example.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">State <span class="s7">the state of an object is determined by values of some of its attributes and the presence or absence of certain links with other objects. It reflects a particular condition for the object and normally persists for a period of time until a transition to another state is triggered by an event.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">State machine <span class="s7">a model of states and state-dependent behaviour for a modelling element (e.g. object, subsystem, port, interface) and for interactions. There is a distinction between protocol and behavioural state machines. Protocol state machines only show all the legal transitions with their pre- and post- conditions. Behavioural state machines include activity expressions to show the actions that result from triggering events.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Static conditional branch </span>(see <i>junction pseudostate</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Stereotype <span class="s7">a specialized UML modelling element. The stereotype name is contained within matched guillemets Â« â€¦Â» . For example, an interface package is a stereotype of a package and an entity class is a stereotype of a class.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Structural model <span class="s7">a UML model that focuses on the structure of the elements of an application as opposed to their behaviour: for example, a class or component model.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Subclass <span class="s7">a specialized class that acquires general features from its ancestor superclasses in a generalization hierarchy, but that also adds one or more specialized characteristics of its own.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Subsystem <span class="s7">a part of a system that can be regarded as a system in its own right.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Superclass <span class="s7">a generalized class that is an abstraction of the common characteristics of its subclasses in a generalization hierarchy.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Swimlane </span>(see <i>activity partition</i>).</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Synchronizing operation <span class="s7">an operation that ensures that those attribute values which are dependent upon each other (e.g. may be calculated from each other) have consistent values.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Synchronous message <span class="s7">or procedural call causes the invoking operation to suspend execution until control has been returned to it.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Syntax </span>the rules that determine whether an element, diagram, model or expression is valid UML. For example, an association must connect two typed instances, and must have at least two ends, each of which must be connected to the type at that end. Syntax differs from semantics (<i>q.v.</i>) in that it is concerned only with the formal rules for a technically valid model, and not for whether the model actually means what it should mean.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">System <span class="s7">an abstraction of a complex interacting set of elements, for which it is possible to identify a boundary, an environment, inputs and outputs, a control mechanism and some process or transformation that the system achieves.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Table <span class="s7">group of related data items organized in columns and rows. Used to store data in relational databases.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Task <span class="s7">a specific activity or step in a project.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Techniq ue <span class="s7">a method for carrying out a project task.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Template collaboration <span class="s7">a parameterized collaboration which may be implemented (that is, instantiated) with different classes or objects.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Timing diagram <span class="s7">type of interaction diagram that shows the state changes for one or more lifelines, typically those with important time-dependent behaviour; messages between lifelines may be shown.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: left;"><span class="s11">Transaction </span>an elementary exchange, say of an item of capta (<i>q.v</i>.) or of a unit of value; a complex database function involving updates to several objects, such that if any single update were to fail the entire function must be rolled back, with all involved objects being restored to their initial state to ensure that the database is left in a consistent state overall.</p><p class="s11" style="padding-top: 3pt;padding-left: 14pt;text-indent: -8pt;text-align: left;">Transition <span class="s7">the movement from one state or activity to another, triggered by an event. A transition may start and end at the same state.</span></p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Trigger <span class="s7">an event that is capable of causing a transition to fire.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Type <span class="s7">a stereotype of class that is distinct from an implementation class; a type is defined by attributes and operations but, since it is a pure specification, may not have methods. Classes that represent application domain concepts are in fact types. An object may change type dynamically during system execution, and may thus appear at different times to belong to different classes.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">U sability req uirement <span class="s7">user requirement that describes criteria by which the ease of use of the system can be judged.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">U se case <span class="s7">describes, from a userâ€™s perspective, a behaviourally related set of transactions that are normally performed together to produce some value for the user. Use cases can be represented graphically in a use case diagram, each use case being described in the repository. Use cases may be modelled at varying degrees of abstraction: essential use cases, the most abstract, are technologically and implementation independent, whereas real use cases describe how the use case actually operates in a particular environment.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">U se case realization <span class="s7">a set of model elements that show the structure and behaviour of the software that corresponds to the use caseâ€”usually a collaboration or class diagram.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">U ser req uirement <span class="s7">something that users require a software system to do (functional requirement); alternatively, a standard for the performance of a system (nonfunctional requirement).</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">U ser story <span class="s7">in eXtreme Programming requirements are captured as user stories. A user story is similar to a use case.</span></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s11">Value </span>(see <i>attribute value</i>).</p><p class="s11" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Vertex (plural vertices) <span class="s7">a node in a state machine diagram.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Visibility <span class="s7">UML modelling elements (e.g. attributes or operations) may be designated with different levels of accessibility or visibility. Public visibility means that the element is directly accessible by any class; private visibility means that the element may only be used by the class that it belongs to; protected visibility means that the element may only be used by either the class that includes it or a subclass of that class; and package visibility means that an element is visible to objects in the package.</span></p><p class="s7" style="padding-left: 14pt;text-indent: -8pt;text-align: justify;"><span class="s11">Web service </span>a mechanism that allows one application to provide a service to other applications over the web, involving messages that are transmitted using a protocol such as SOAP (<i>q.v.</i>). Many web services present an interface that includes a machine-readable definition of the services that they provide.</p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Web Service Definition Language (WSDL) <span class="s7">a language based on XML that has been specialised for use in defining web services; a client application can read the WSDL definition of a web service to discover the operations that are available together with their signatures.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Workflow <span class="s7">in UP, a set of activities carried out by members of the development team aimed at creating models with a particular focus, for example requirements or implementation.</span></p><p class="s11" style="padding-left: 14pt;text-indent: -8pt;text-align: left;">Wrapper <span class="s7">or object wrapper, used to integrate object-oriented and non-object-oriented systems by encapsulating the non-object-oriented system with an object-oriented style of interface.</span></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="114" alt="image" src="Image_1681.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part36.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part38.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>

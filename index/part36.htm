<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Appendix B: Selected Solutions and Answer Pointers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part35.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part37.htm">Next &gt;</a></p><p style="padding-left: 8pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1088">In this section we give solutions to a selection of the review questions in the chapters, and also pointers on possible approaches to some of the end-of-chapter case study work, exercises and projects.</a><a name="bookmark1089">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 8pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="s29" name="bookmark1090">Answers to Selected Review Questions</a></p><p class="s22" style="padding-top: 8pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">1.3 <span class="p">Even if something isn’t a system (or might not be one), thinking of it as one still gives useful insights.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">1.5  <span class="p">Feedback is sampling one or more outputs of a system for comparison with a control value. Feed-forward is sampling a system input, usually before it enters the system. The control value may be an output, input or an internal measure of system performance.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">1.6  <span class="p">Because each participant in the system may have a different view of its purpose. It is not always possible to reach complete agreement on a shared, single purpose.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">1.7  <span class="p">A management support system provides information that helps managers to make decisions. Most use feedback or feed-forward to monitor the performance of that part of the organization for which the manager is responsible.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">1.9  <span class="p">Business goals and strategy are typically defined first, as they provide the context. An IS strategy identifies applications that can help to meet business goals, and an IT strategy identifies IT needed to develop and run the applications. Each informs its predecessor about what can realistically be achieved. The process is iterative.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">1.10 <span class="p">One of the simplest definitions says that information is data with a structure and a meaning derived from the context in which it is used.</span></p><p class="s22" style="padding-top: 8pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">2.1  <span class="p">They differ in their view of the problems because their view of the meaning and purpose of IS development also differs (see also Review Q uestion 1.6).</span></p><p class="s22" style="padding-top: 8pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">2.3 <span class="p">The simplest definition is ‘fitness for purpose’. But it can be hard to identify and define the purpose unambiguously. A more practical alternative is ‘meeting all user requirements, both stated and implied’.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">2.6  <span class="p">The system may address irrelevant problems. It may not fit the way that people work. It may be unsuitable for its environment. It may be out of date before delivery. Political difficulties may lead to delay or cancellation.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">2.7 <span class="p">A stakeholder has an interest in a project because they are (or will be) affected by its progress or by its results.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">3.1  <span class="p">Key approaches include using a systematic approach to development (e.g. RUP, AUP, etc), ensuring effective user involvement, using incremental development, applying effective project management, and giving appropriate consideration to installation and operational issues.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">3.2 <span class="p">Some disadvantages of the Waterfall Lifecycle:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;">Real projects rarely follow a simple sequential lifecycle.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1670.png"/></span></p><p style="padding-top: 3pt;padding-left: 63pt;text-indent: 0pt;text-align: left;">Iterations are almost inevitable.</p><p style="padding-top: 1pt;padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: left;">The lapsed time between inception and delivery is frequently too long. It is unresponsive to changes in the technology or requirements.</p><p class="s22" style="padding-top: 7pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">3.5  <span class="p">Prototyping is not necessarily concerned with the delivery of a working system, whereas an incremental approach delivers a working system in successive increments. Note that in the Unified Software Development Process an increment can produce any lifecycle product.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">3.7  <span class="p">Syntactic correctness is concerned with using the notation (e.g. UML) correctly, consistency relates to producing a set of models or diagrams that are consistent with each other and completeness refers to producing models that are completely defined.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">3.8   <span class="p">The term requirements traceability refers to the capability of tracking each requirement to all the systems development deliverables (from requirements models to program code) that relate to it.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">3.9  <span class="p">A diagram may be syntactically correct and complete and consistent with other diagrams and models, but it may not relate accurately or completely to the user requirements, the most important criterion for any diagram or model.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">4.2  <span class="p">Semantics is the study of meaning. In object-oriented development it is generally used to denote the meaning that an element has for the user. (User may include the modeller or developer, not just the end-user of the software.) An object’s semantics include its purpose, description, relationships and behaviour seen from a user perspective.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">4.3  <span class="p">Other parts of a system only see an object’s interface (services it can perform and operation signatures). Internal details including data and the implementation of operations are hidden and can only be accessed by a message that contains a valid signature.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">4.4  <span class="p">Polymorphism means that when one message is sent to objects of different types, each has an appropriate, but different, implementation for its response. The object that sends the message need not know which type of object is addressed, since the operation signature is the same. One way of implementing polymorphism is through inheritance and overriding.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">4.6  <span class="p">A subclass inherits all characteristics of its superclass and other ancestors (some may be overridden, but are still technically inherited). Each subclass is different from its ancestors in at least one way.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">5.2 <span class="p">Structural and behavioural diagrams.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">5.4  <span class="p">To promote communication between team members in a project. To communicate over time to other people who will work on the system. To communicate good practice and experience.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">5.7 <span class="p">A rectangle with rounded corners.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">5.8 <span class="p">Control flows.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">5.10 <span class="p">The start node (a filled black circle) and the final node (a filled black circle within another circle).</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">5.13 <span class="p">An arrow between an object and an action.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">6.1  <span class="p">Examples of functional requirements are: the need for a process to be run that allocates staff to lines based on their skills and experience, and on holidays and sick leave; printing out an allocation list; amending the allocation list. Examples of non- functional requirements include: printing the allocation list by 12.00 noon; the need to handle 200 operatives’ details.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">6.4 <span class="p">Use cases are produced to model the functionality of the system from the users’ point of view and to show which users will communicate with the system. They show the scope of the system.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1671.png"/></span></p><p class="s22" style="padding-top: 3pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">6.6  <span class="p">An essential use case documents the interaction between user and system in a way that is free of technological and implementation details, and a real use case describes the concrete detail of a use case in terms of its design.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">6.10 <span class="p">The use cases represent the functions of the business rather than functions of the computer system, and the actors represent people and organizations outside the business interacting with those functions.</span></p><p class="s22" style="padding-top: 8pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">7.2  <span class="p">An attribute is a characteristic of a class (every person has a height). An attribute value is a characteristic of an instance (this author is 1.75m tall).</span></p><p class="s22" style="padding-top: 8pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">7.3 <span class="p">An element’s stability is the relative infrequency of change in its description. Instances may be created, destroyed or updated frequently, but it is unlikely that the class description will change as often.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">7.6  <span class="p">Multiplicity denotes the range of values for the number of objects that can be linked to a single object by a specific association. It is a constraint because it limits the behaviour of a system. If a client can have only one staff contact, it should not be possible to link a second.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">7.10 <span class="p">A link is a connection between two objects. ‘Changing’ a link (say by substituting another object at one end) is equivalent to destroying the link and creating a new one. (Think about two objects tied with a single length of string. In a substitution, there is a moment when neither one nor the other is connected—unless you tie on the second before untying the first, but an object link cannot do this).</span></p><p class="s22" style="padding-top: 4pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">7.12 <span class="p">A communication diagram shows only those objects that collaborate to provide the functionality of a particular use case (or operation), although they are usually identified as anonymous instances of their class. The links that are shown are only those required for that purpose. A class diagram typically shows all the classes in a particular package and all the associations between them.</span></p><p class="s22" style="padding-top: 7pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">8.1  <span class="p">Use of a component saves time and work. A friend of one of the authors once said: ‘Have you ever wondered how much it would cost to make your own light bulb?’</span></p><p class="s22" style="padding-top: 8pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">8.3  <span class="p">Objects are well encapsulated, and object structures can be designed this way. The hierarchic nature of generalization abstracts out the more general features of a class. Hierarchic organization of models helps the developer to find components easily when they are needed. Composition hides whole structures within a composite object.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">8.4  <span class="p">A component of a composition cannot be shared with another composition. The component has a coincident lifetime with the composition (although a component can be explicitly detached before the composition is destroyed).</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">8.5  <a href="part18.htm#bookmark492" class="a">This is a basis for polymorphism. The superclass operation defines the signature, but each subclass has a different method that implements the behaviour (see </a><a href="part18.htm#bookmark492">Chapter 10).</a></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">8.6  <span class="p">An abstract class has no instances and exists only as a superclass in a hierarchy. It provides a generalized basis for concrete subclasses that do have instances.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">8.12 <span class="p">An antipattern documents unsuccessful attempts at solving problems and suggests how the failed solution may be adapted to solve the problem successfully.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">9.1  <span class="p">Communication diagrams discourage both using a large number of messages between two objects and having too many parameters for each message as these are clumsy to represent on the diagram.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">9.2 <span class="p">Small self-contained classes are easier to develop, test and maintain.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">9.3  <span class="p">Sequence diagrams have a time dimension (normally vertically down the page) while communication diagrams do not. Communication diagrams show the links between objects, which are not shown on sequence diagrams.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: justify;">9.5  <span class="p">A lifeline represents the existence of the entity being modelled (e.g. an object) during the interaction represented in an interaction diagram. It may be used in sequence</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1672.png"/></span></p><p style="padding-top: 3pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">diagrams, communication diagrams, timing diagrams or interaction overview diagrams (within interaction fragments).</p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: left;">9.6  <span class="p">An execution occurrence indicates which operation is executing at a particular stage in an interaction represented in a sequence diagram.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 45pt;text-indent: -23pt;text-align: left;">9.9  <span class="p">Sequence numbers are written in a nested style in a communication diagram to represent nested procedural calls.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">9.11 <span class="p">Complex interactions may be represented using UML by:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: justify;">hiding some of the detail of the interaction using interaction uses referencing other interaction fragments. Common interaction fragments may be referenced from several other sequence diagrams.</p><p style="padding-top: 2pt;padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: justify;">using lifelines to represent groups of objects and their interaction or to represent subsystems. These lifelines refer to another interaction fragment, which contains the hidden detail.</p><p style="padding-top: 2pt;padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: justify;">using interaction overview diagrams to show the overall flow of control with in-line interaction fragments and interaction use to hide the detail of the interaction.</p><p class="s22" style="padding-top: 7pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">9.15 <span class="p">Timing diagrams are used to show how state changes occur over time. They are of particular value when specifying how time constraints affect the interaction between lifelines.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">10.1 <span class="p">Operation specifications confirm the user’s view of the logical behaviour of a model. They also specify what the designer and programmer must produce to meet the users’ requirements.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">10.2 <span class="p">Decision tables are particularly suited to representing decisions with complex multiple input conditions and complex multiple outcomes, where the precise sequence of steps is either not significant or is not known.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 46pt;text-indent: -24pt;text-align: justify;">10.4 <span class="p">An algorithm defines the step-by-step behaviour of an operation. A non-algorithmic approach defines only pre-conditions and results.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">10.5 <span class="p">Non-algorithmic methods of operation specification emphasize encapsulation.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">10.9 <span class="p">OCL expressions have:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;">a context within which the expression is valid (for example, a specified class);</p><p style="padding-top: 1pt;padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: left;">a property within the context to which the expression applies (for example, an attribute of the specified class);</p><p style="padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: left;">an operation that is applied to the property (for example, a mathematical expression that tests the value of the attribute).</p><p class="s22" style="padding-top: 7pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">11.2   <span class="p">A guard condition is evaluated when a particular event occurs and only if the condition is true does the associated transition fire.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">11.3  <span class="p">All the guard conditions from a state should be mutually exclusive so that for each set of circumstances there is only one valid transition from a state. If they are not mutually exclusive more than one transition may be valid and the behaviour of the state machine is indeterminate.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">11.4   <span class="p">A composite state contains substates and is used to represent complex state behaviour in a hierarchical fashion. A composite state may contain a single decomposition compartment with a single submachine or it may contain several decomposition compartments, each with a submachine. In the latter case the composite state has concurrent substates.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">11.5   <span class="p">If an object is occupying a composite state that has more than one submachine then it will occupy a substate in each of the submachines in the composite state. Consequently it will occupy more than one substate at any one time while it is in the composite state.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1673.png"/></span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">11.6  <span class="p">The substates in a composite state are nested and may be nested to any arbitrary depth. In most cases nesting substates to one or two levels down will model the state behaviour adequately. Only if the composite state contains orthogonal submachines will these nested substates be concurrent.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 53pt;text-indent: -31pt;text-align: justify;">11.11  <span class="p">The typical symptoms that a state machine has not been drawn to model state changes include the following.</span></p><p style="padding-top: 8pt;padding-left: 63pt;text-indent: 0pt;text-align: left;">Most transitions are fired by state completion.</p><p style="padding-top: 1pt;padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: left;">Many messages are sent to ‘self’, reflecting code reuse rather than actions triggered by events.</p><p style="padding-left: 63pt;text-indent: 0pt;line-height: 12pt;text-align: left;">States do not capture state-dependent behaviour associated with the class.</p><p class="s22" style="padding-top: 8pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">12.3   <span class="p">User wants report etc.—analysis. Selection of business objects etc.—logical design. Size of paper etc.—physical design.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">12.5    <span class="p">Seamlessness means that the same model (class diagram) is used and successively refined throughout the project.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">12.7   <span class="p">Functional, efficient, economical, reliable, secure, flexible, general, buildable, manageable, maintainable, usable, reusable.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">13.2  <span class="p">An architectural view is a representation of a particular system or part of a system from a particular perspective. An architectural viewpoint is a template that describes how to create and use an architectural view.</span></p><p style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;"><span class="s22">13.3  </span>The four views are the <i>logical view</i>, the <i>implementation view</i>, the <i>process view </i>and the <i>deployment view</i>. The additional view is the <i>use case view</i>.</p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">13.7   <span class="p">An enterprise architecture links the design of the business to the information systems that are needed to support that business.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 53pt;text-indent: -31pt;text-align: justify;">13.10 <span class="p">Open layered architectures are more difficult to maintain because each layer may communicate with all lower layers, hence increasing the degree of coupling in the architecture. A change to one layer may ripple to many layers.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 53pt;text-indent: -31pt;text-align: justify;">13.11  <span class="p">A closed layered architecture may require more processing as messages have to be passed through intervening layers.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 53pt;text-indent: -31pt;text-align: justify;">13.13  <span class="p">The main differences between the MV C and the layered architecture include the update propagation mechanism and the separation of the presentation layer into the</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">V iew and Controller components in the MV C.</p><p class="s22" style="padding-top: 2pt;padding-left: 53pt;text-indent: -31pt;text-align: justify;">13.14  <span class="p">A broker decouples subsystems by acting as an intermediate messaging-passing component through which all messages are passed. As a result a subsystem is aware of the broker and not directly in communication with the other subsystems. This makes it easier to move the subsystems to distributed computers.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">14.1  <span class="p">We elaborate user interface and application control classes; we add mechanisms to support data management. The class diagram is also updated with the types and visibility of attributes and operations and to show how associations are designed.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">14.2  <span class="p">Private, public, protected or package visibility.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">14.3  <span class="p">Attributes should be designated private to enforce encapsulation.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">14.7  <span class="p">Collection classes can be used to hold the object identifiers of the linked objects at the many end of an association. Collection classes provide collection-specific behaviour for manipulating the collection.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">14.8  <span class="p">A collection class of object identifiers should be included in a class if it is not used by another class and it does not increase the complexity of the class unduly.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 53pt;text-indent: -31pt;text-align: justify;">14.10  <span class="p">A derived attribute should be used to reduce the processing time for one or more transactions so that user response times are appropriate. However, it should be noted that this may increase the processing time of other transactions in order to ensure that the data integrity is maintained.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1674.png"/></span></p><p class="s22" style="padding-top: 3pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">15.2   <span class="p">The main aspects of changeability are maintainability, extensibility, restructuring and portability.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">15.3   <span class="p">The class constructor in the Singleton pattern is private so that it can only be accessed by the class-scope instance( ) method. This ensures that the Singleton class has total control over its own instantiation.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">15.4  <span class="p">The Singleton pattern ensures that only one instance of a class exists and provides system-wide access to that instance.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">15.7   <span class="p">A pattern catalogue is a group of largely unrelated patterns, which may be used together or independently. A pattern language is a group of related patterns that relate to a particular problem domain.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">16.3   <span class="p">Dialogue metaphor describes interaction in terms of conversation between user and system involving different kinds of communication. Direct manipulation metaphor represents objects of interest to the user as objects on the screen that they can manipulate through the use of the mouse. Dialogue follows sequence determined by system. Direct manipulation is event-driven, and user can determine sequence of events.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">16.6  <span class="p">User may hit Return key without thinking and delete the Client in error.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">16.9  <span class="p">Possible advantages: structured—aids management of projects, applies standards that aid communication, forces consideration of all aspects of HCI design; ethnographic—analyst gets detailed understanding of context of system, active user involvement, social and political factors taken into account; scenario-based—helps to think through possible alternative routes in use cases, can be used to justify design decisions, valuable for testing programs. Possible disadvantages: structured</span></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: justify;">—can be bureaucratic; ethnographic—can be time-consuming; scenario-based— generates large volume of documentation.</p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">17.2  <span class="p">A horizontal prototype deals with only one layer of the system architecture, usually the user interface. A vertical prototype takes one subsystem and develops it through each layer.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">17.6   <span class="p">We use state machine diagrams to model the lifetime of instances of business classes.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">17.8  <span class="p">A list of states, for each state the valid events that can cause a transition from that state, the state that each transition leads to, and any operations associated with the transition into the new state.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 53pt;text-indent: -31pt;text-align: justify;">17.11  <span class="p">Java EventListener only handles changes to interface objects. MV C deals with changes to Model objects. The Java Observer and Observable interfaces provide MV C mechanisms.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">18.3  <span class="p">Tagged data, with a tag for the class of each object and the attribute of each value within each object. This way, it is possible to reconstruct any object from the data in the file without having to hard code the structure of every possible complex object. (This is the approach used by the Java ObjectOutputStream and ObjectInputStream classes, and by XML and SOAP.)</span></p><p class="s22" style="padding-top: 4pt;padding-left: 63pt;text-indent: -42pt;text-align: justify;">18.6  1. <span class="p">Remove repeating groups. Ensure all row–column intersections contain only atomic values.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 21pt;text-indent: 4pt;text-align: left;">2. <span class="p">Make sure every attribute is dependent on the whole primary key. Create a separate table for part-key dependencies.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 21pt;text-indent: 5pt;text-align: left;">3. <span class="p">Ensure every attribute is dependent on the primary key and not on another non-key attribute. Create a separate table for non-key dependencies.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">18.8  <span class="p">Object Manipulation Language and Object Definition Language.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">19.3  <span class="p">Artefact represents development artefacts, typically physical files that are deployed on a system, whereas a component represents modular software units with a well- defined interface and can be a logical or physical component of the system.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1675.png"/></span></p><p class="s22" style="padding-top: 3pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">19.7  <span class="p">Possible tests would be to test validation of date, test validation of start time, check validation of job number, line number, product etc. More detailed validation of time could be to check that it is within a certain amount of time of current time—if not, then a warning should be displayed.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">19.8   <span class="p">Review of cost–benefit analysis. Summary of functional requirements met and amended. Review of achievement of non-functional requirements. Assessment of user satisfaction. Problems and issues with the system. Extract of quantitative data for future planning. Identification of candidate components for reuse. Possible future developments. Actions required. (See Section 19.9.2 for the detail.)</span></p><p class="s22" style="padding-top: 4pt;padding-left: 53pt;text-indent: -31pt;text-align: justify;">19.10  <span class="p">Because analysts or designers will have the wider view of the system and can ensure that changes fit in and do not have a detrimental impact on other subsystems.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;"><a name="bookmark1091">20.1  </a><span class="p">Saving time and money in developing the components, saving time and money in testing the components, and creating components that can be recombined to create flexible business processes.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">20.3   <span class="p">Jacobson et al. define a component as any artefact produced during systems development constructed to be reusable.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">20.6   <span class="p">It considers a component to be an executable unit of code rather than a type or class. It specifies that a component should have an interface, and that it should be capable of being connected together with other components via its interface.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">21.1  <span class="p">A methodology is essentially a set of principles. A method is an instantiation of the principles in a given situation.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">21.2    <span class="p">A task is something you do in a particular project. Tasks have products. A technique specifies how to carry out a task. A task might be ‘Analyse the requirements for a use case’. One technique for doing this would be the UML collaboration diagram.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">21.4   <span class="p">A full statement of DSDM Atern would repeat the eight principles—focus on the business need, deliver on time, collaborate, and so on. But perhaps the key feature is the use of time boxing combined with the MoSCoW approach to prioritizing requirements.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">21.5   <span class="p">Scrum doesn’t agree with UP on much apart from its emphasis on an iterative approach and its implicit acceptance of object-orientation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 8pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="s29" name="bookmark1092">Answer Pointers for Selected Case Study Work, Exercises and Projects</a></p><p class="s22" style="padding-top: 8pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">1.B  <span class="p">Some main subsystems are: online sales, retail shops, supplies, deliveries, systems support and accounts, and more. Some of the control mechanisms involve supplier re-orders, the product catalogue, network performance and security. Most have some human activities and automated support. One example of feedback includes online shoppers, watching the progress of their orders. The market researcher uses feed- forward (what attracts customers to web pages).</span></p><p class="s22" style="padding-top: 4pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">1.C  <span class="p">Main business aim: say, ‘To establish FoodCo as an independent branded name supplying a range of high quality food products to consumers’. Subsidiary aims: diversification of customer base; achievement of international recognition and sales. Each will be translated into measurable objectives: for example, as a basis for the selection of information systems development projects.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">2.C  <span class="p">Stakeholders should include many of the following. V ery good if you listed them all; excellent if you thought of some not shown below (provided you can justify their inclusion). Patients and potential patients, patients’ relatives, ambulance drivers, paramedics, control room operators, accident and emergency staff, supervisors of professional stakeholders, managers who control affected budgets, policy level managers, taxpayers (or purchasers of medical insurance policies if this is how the</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1676.png"/></span></p><p style="padding-top: 3pt;padding-left: 44pt;text-indent: 0pt;text-align: justify;">system is funded), general medical practice staff, politicians (particularly if the service is publicly funded), members of the general public (who make the emergency calls), other road users.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">3.A <span class="p">An incremental development can be justified for the following reasons:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: left;">Useful increments can be delivered quite quickly. For example, staff management and material tracking could be implemented initially.</p><p style="padding-left: 63pt;text-indent: 0pt;line-height: 112%;text-align: left;">Users can gain experience with the systems. Risk is minimized.</p><p style="padding-left: 63pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Requirements can be refined in light of the initial increments.</p><p class="s22" style="padding-top: 3pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">4.A  <a href="part9.htm#bookmark32" class="a">The human activity system referred to is the application domain for the proposed IS. Other human activity systems include the project team, the analyst’s department, the business planning system and the wider (political and cultural) system of the organization. The project team probably use various information systems, including CASE tools. Formal and informal structures of communication and relationships are the main interfaces. Other installed software and hardware systems may be important (consider the discussion in </a><span class="p">Box B1.2).</span></p><p class="s22" style="padding-top: 4pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">4.D <span class="p">You should have equivalents for most of the following. The names are not significant at this stage, nor is an exact match in the way that you have grouped concepts together.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 45pt;text-indent: 0pt;line-height: 110%;text-align: justify;">Factory,  Product,  ProductRange,  PackedProduct,  SaladPack,  V egetablePack, CookedProduct, Sauce, Pickle, SandwichTopping, Ingredient, Customer, Supermarket, Brand, Farm, Supplier, Employee, Consumer.</p><p class="s22" style="padding-top: 8pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">5.A  <span class="p">Some kinds of information systems can be used to model the real world in order to try out ideas. For example, decision support systems typically model some aspect of a business and allow staff and managers to ask ‘What if?’ questions: ‘What would happen to demand for a product if the price was increased by 10%?’ or ‘If we targeted a particular area with a mailshot, what kind of response to our product could we expect, based on what we know about the population of that area?’</span></p><p style="padding-top: 4pt;padding-left: 44pt;text-indent: 3pt;text-align: justify;">However, a customer in an information system is not a model of the customer, it is a set of data values that describe attributes of the customer.</p><p style="padding-top: 5pt;padding-left: 44pt;text-indent: 4pt;text-align: justify;">Also, some things in information systems are the real-world objects. An invoice in a sales order processing system is the real invoice; it is not a model. In object-oriented systems, there is sometimes a belief that the operations of objects are things that those objects do to themselves.</p><p style="padding-top: 5pt;padding-left: 44pt;text-indent: 0pt;text-align: justify;">(Rumbaugh et al. (1991) suggest operations for a Bicycle class, like move and repair.) Typically the operations of objects are actually operations that we want the system to carry out on those objects, and we package them in the class as a way of organizing the design of the software system.</p><p class="s22" style="padding-top: 4pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">5.B <span class="p">Designing cars, designing aircraft (models to use in wind tunnels), architecture and town planning, packaging design for products.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">6.B  <span class="p">Here are some of the use cases that should be in the diagram with the actor in brackets. Check Staff Availability (Production Planner), Enter Details of Staff Illness (Production Planner), Print Availability Lists (Production Planner). There is a need for some means of entering details of staff holidays. The decision about who does this will affect the scope of the system. It could be done by the staff themselves and authorized online by the factory manager, or this process could be done on paper and only authorized holidays entered by the production planners.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 21pt;text-indent: 0pt;text-align: justify;">7.A <span class="p">The following are sample descriptions for two of the use cases.</span></p><p class="s13" style="padding-top: 2pt;padding-left: 46pt;text-indent: 0pt;text-align: justify;">Record employee leaving the line</p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1677.png"/></span></p><p style="padding-top: 3pt;padding-left: 46pt;text-indent: 0pt;text-align: justify;">Normally employees are recorded as leaving the line when they clock off at the end of a working shift. Although there are breaks in the operation of the line during a shift these are not normally recorded as employees leaving the line. Date, time and location are recorded.</p><p class="s13" style="padding-top: 5pt;padding-left: 46pt;text-indent: 0pt;text-align: justify;">Stop run</p><p style="padding-top: 5pt;padding-left: 46pt;text-indent: 0pt;text-align: justify;">When the production line stops for a routine reason, e.g. for a break, to restock or to reload equipment, the time the run stopped is recorded and a reason is recorded. The line supervisor or chargehand can do this.</p><p class="s22" style="padding-top: 5pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">7.B <span class="p">For the use case realization for Record employee leaving the line, you should have a collaboration involving Employee, Supervisor, ProductionLine, ProductionLineRun and EmployeeAbsence, as well as a boundary class and a control class.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">8.C   <span class="p">Possible subclasses include TelevisionAdvert, RadioAdvert, MagazineAdvert, PosterAdvert, LeafletAdvert. We could introduce another layer of hierarchy by grouping  NewspaperAdvert  and  MagazineAdvert  under  PrintMediaAdvert,  and TelevisionAdvert and RadioAdvert under BroadcastMediaAdvert. (You may have chosen equally valid alternative names.)</span></p><p class="s22" style="padding-top: 4pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">8.E <span class="p">Some generalization and composition can be justified by the inclusion of the following classes: Operative, RoutineBreak, AbsenceRecord.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">9.A  <span class="p">The sequence diagrams should be derivable and consistent with the communication diagrams produced during use case realization when you answered Exercise 7.B. However, you will be adding more detail in terms of message signatures and message types.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 44pt;text-indent: -23pt;text-align: justify;">9.B  <span class="p">V ariations in allocations of responsibility will depend upon how much responsibility the control class has and how much is devolved to the entity classes or the boundary classes. At one extreme the control class orchestrates all the functionality of the use case, at the other the control class delegates the complete control of the use case to one of the entity classes. A good design will lie between these extremes.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">10.A  <span class="p">One of the more complex (and therefore one that is well worth trying) would be ProductionLineRun.start( ). Preconditions for this operation should be suggested by your use case description.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">10.D  <span class="p">Most decision tables can be converted easily into Structured English with either case or nested-if. For very simple tables (two outcomes) if-then-else may be enough.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">11.A  <span class="p">The events that affect ProductionLine include start run, end run, detect problem, pause run. The possible states for ProductionLine include Idle, Running, ProblemInterrupted and Paused.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">12.A   <span class="p">Examples include sequence of entry, branching points (where the user has a choice), repetition of entries (can the user enter more than one holiday at the same time?), commands that the user might need to use while entering data (but not whether they use a menu, function keys or control keys).</span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">12.D   <span class="p">In Windows there are many standards, for example: the use of function keys, particularly in combination with Alt and Ctrl keys; the standards for the appearance of menus, for example, menu entries followed by dots (‘…’) when the menu entry leads to a dialogue box; the positioning of certain buttons in dialogue boxes (‘OK’ and ‘Cancel’).</span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">13.D  <span class="p">An example would be support for the Z achman Framework in Enterprise Architect from Sparx Systems. There is a plug-in that allows the user to create a six by six matrix, and clicking on the cells in the matrix takes the user to a diagram of the appropriate type.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">13.E  <span class="p">The FoodCo Production Control System could contain the subsystems Employee Management, Product and Production Line Management.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1678.png"/></span></p><p class="s22" style="padding-top: 3pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">14.A  <span class="p">All attributes should be designated private and operations public. Choose data types that reflect the domains from which the attribute values are selected.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">14.B   <span class="p">The one-way associations are Line–LineFault. The two-way associations are Supervisor–ProductionLine and Line–LineRun.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">15.B  <span class="p">The ProductionLine class could use the state pattern with the state subclasses Idle, Running, ProblemInterrupted, Waiting. This use of the state pattern reduces the complexity of the ProductionLine class but may increase the storage and processing requirements for the application as a whole.</span></p><p class="s22" style="padding-top: 7pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">16.A <span class="p">See answer pointer to 12.D.</span></p><p class="s22" style="padding-top: 2pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">16.C <span class="p">Something along these lines …</span></p><p style="padding-top: 7pt;padding-left: 52pt;text-indent: 9pt;text-align: justify;">First, Rik runs off the three availability lists to show who is available for work the following week. He then starts with operatives who are available all week. For each operative, he views their record on screen, looking at their skills and experience, the line they are currently working on, and how long they have been on that line. He allocates each operative in turn to a line and a session in one of the factories.</p><p style="padding-top: 4pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">This does not provide any detail of actual interaction with the system.</p><p class="s22" style="padding-top: 8pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">17.A   <span class="p">If you are expecting to develop for a windowing environment, you will need a dialogue window as a minimum.</span></p><p style="padding-top: 8pt;padding-left: 52pt;text-indent: 10pt;text-align: justify;">Depending on how you handle looking up information, for example a list of valid reasons for stopping the line, you may need separate windows in which to display these look-ups. However, in the factory environment you may want to use a simpler device with an LCD screen for display and a sealed keyboard with dedicated keys. A PC with a mouse may be unnecessary and unsuitable in a messy environment. However, we are assuming a windowing environment for the other exercises in this chapter.</p><p class="s22" style="padding-top: 7pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">18.B   <span class="p">You should end up with the following tables (or similar names): SalesOrder, OrderLine, Customer and Product.</span></p><p class="s22" style="padding-top: 8pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">18.F   <a href="part23.htm#bookmark920" class="a">This will be similar to Figure </a><span class="p">18.23, with a ClientBroker class to handle the operation to find each Client.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">19.B  <span class="p">Many libraries now use a web browser to access catalogue services. If this is the case, then your deployment diagram will include the client machines (PCs, Apple Macs or workstations), the web server and probably another machine running the library software. Library staff may access the system from simple terminals for use cases to issue and return books. They will connect directly to the machine running the software, not via the web server. (The actual configuration will depend on your particular system.)</span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">19.E  <span class="p">Issues to consider are as follows. Is the manual organized around the tasks a user carries out? Has it got an index? Can you find the terms in the index that you, the user, know, or does it use computer jargon? Does it show screenshots? Are they the same as actual screens or windows in the version you are using? (You should be able to think of other criteria.)</span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">19.F   <span class="p">Possible inclusions for bug reports: user name, telephone no., building, room, address etc. Date and time bug occurred. Type of machine on which bug occurred. Operating system of machine. Software in which bug occurred. Other software running at the same time. Program/window/function being used at time of bug. Any error messages displayed for the user. What the user expected to happen. What actually happened. What the user did (key strokes, mouse clicks on buttons or menus etc.) immediately beforehand.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 52pt;text-indent: -31pt;text-align: justify;">20.C  <span class="p">You could either include the encryption package within the security package or have it as a separate package. The core security classes will need its services and</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="931" alt="image" src="Image_1679.png"/></span></p><p style="padding-left: 46pt;text-indent: 0pt;text-align: justify;">will have a dependency on it. Will it need any kind of user interface classes, for example, if it requires setting up with some kind of parameters? If it does, it will presumably need somewhere to store these parameters, in which case it will also need data storage services.</p><p style="padding-left: 46pt;text-indent: 0pt;text-align: justify;">will have a dependency on it. Will it need any kind of user interface classes, for example, if it requires setting up with some kind of parameters? If it does, it will presumably need somewhere to store these parameters, in which case it will also need data storage services.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"/><p style="padding-left: 46pt;text-indent: 0pt;text-align: justify;">will have a dependency on it. Will it need any kind of user interface classes, for example, if it requires setting up with some kind of parameters? If it does, it will presumably need somewhere to store these parameters, in which case it will also need data storage services.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="115" alt="image" src="Image_1680.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part35.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part37.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>

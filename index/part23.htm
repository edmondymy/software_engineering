<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>A4. Agate Ltd Case Study—Further Analysis</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part22.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part24.htm">Next &gt;</a></p><h2 style="padding-top: 12pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark577">Agate Ltd</a><a name="bookmark578">&zwnj;</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="155" height="25" alt="image" src="Image_702.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark361" class="a" name="bookmark579">In this chapter we show how the analysis model presented in </a>Chapter A3 has been refined in a further iteration. The refinement has been carried out with two particular aims in mind.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a">First we aim to improve our understanding of the domain and thereby increase the general usefulness of the model in a wider context. This essentially means identifying opportunities for reuse through the elaboration of generalization, composition and aggregation structures in the class model, as described in </a>Chapter 8.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a">Second, we aim to improve the level of detail of the model and also the accuracy with which it reflects user requirements. This is addressed partly through appropriate allocation of behaviour to classes, derived from the analysis of class interaction using sequence diagrams and state machines. We also seek to specify the behavioural aspects of the model in more detail through the specification of operations. The related techniques are described in </a><a href="part18.htm#bookmark492" class="a">Chapters 9, </a><a href="part18.htm#bookmark525" class="a">10 and </a>11.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As a result of these activities, the analysis class model is revised to reflect our greater understanding of the domain and of the requirements.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">The following sections include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_703.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">samples of the sequence diagrams and state machines that help us to understand the behavioural aspects of the model;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_704.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">specifications for some operations that capture this behaviour and communicate it to the designers;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_705.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">a revised analysis class diagram that shows the effects of further analysis on the static structure of the model.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Together, the class diagram and operation specifications comprise an analysis class model.</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="532" height="443" alt="image" src="Image_706.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark580">Figure A4.1 </a><span class="s21">Sequence diagram for </span><span class="s89">Add a new advert to a campaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="217" height="25" alt="image" src="Image_707.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.2 </a><a href="part4.htm#bookmark4" class="s29">Seq uence Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.2 </a><a href="part4.htm#bookmark4" class="s29">Seq uence Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.2 </a><a href="part4.htm#bookmark4" class="s29">Seq uence Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark580" class="a" name="bookmark581">The first sequence diagram, shown in Fig. </a><a href="part23.htm#bookmark582" class="a">A4.1, is for the use case Add a new advert to a campaign. The second sequence diagram, shown in Fig. </a><a href="part18.htm#bookmark418" class="a">A4.2, is for the use case Check campaign budget. Both these sequence diagrams are discussed in some detail in Chapter </a>9; note that for simplicity we show here the version of Add a new advert to a campaign that does not include boundary and control classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Sequence diagrams help the requirements analyst to identify at a detailed level the operations that are necessary to implement the functionality of a use case. It is worth mentioning that, although at this point we are still primarily engaged in analysis—in other words, an attempt to understand the demands that this information system will fulfil—there is already a significant element of design in our models. There is no one correct sequence diagram for a given use case. Instead, there are a variety of possible sequence diagrams, each of which is relatively more or less satisfactory in terms of how well it meets the needs of the use case. The sequence diagrams illustrated here are the product of experimentation, judgement and several iterations of modelling carried out by analysts and users together.</p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"><span><img width="450" height="305" alt="image" src="Image_708.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark582">Figure A4.2 </a><span class="s21">Sequence diagram for </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="488" alt="image" src="Image_709.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark583">Figure A4.3 </a><span class="s21">State machine for </span><span class="s89">Campaign.</span></p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span><img width="440" height="577" alt="image" src="Image_710.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark584">Figure A4.4 </a><span class="s21">Initial state machine for </span><span class="s89">StaffMember.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="179" height="25" alt="image" src="Image_711.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.3 </a><a href="part4.htm#bookmark4" class="s29">State M achines</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.3 </a><a href="part4.htm#bookmark4" class="s29">State M achines</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.3 </a><a href="part4.htm#bookmark4" class="s29">State M achines</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark583" class="a" name="bookmark585">In this section we present the final state machine for Campaign (</a><a href="part18.htm#bookmark525" class="a">Fig. A4.3), which has already been discussed at some length in Chapter </a><a href="part23.htm#bookmark584" class="a">11, and an initial state machine for StaffMember (</a>Fig. A4.4), which is presented here for the first time. These represent the behaviour of objects of significant classes in the Campaign Management and Staff Management analysis packages, respectively.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In conjunction with sequence diagrams, state machines help to identify the operations that are required and to allocate those operations to appropriate classes. All operations shown on sequence diagrams and state machines are added to the relevant class definitions. Each operation must also in due course be specified, and it is to this that we turn in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="255" height="24" alt="image" src="Image_712.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.4  </a><a href="part4.htm#bookmark4" class="s29">Operation Specifications</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.4  </a><a href="part4.htm#bookmark4" class="s29">Operation Specifications</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.4  </a><a href="part4.htm#bookmark4" class="s29">Operation Specifications</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part23.htm#bookmark582" class="a" name="bookmark586">The operation specifications given below define all operations identified for the sequence diagram Check campaign budget, which is shown above in </a>Fig. A4.2.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note that in all cases the logic of the operation is very simple; for some it consists of little more than returning the value of an attribute. Each operation, and, indeed, each object, has responsibility for only a small part of the processing required to realize the use case.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">By reading the operation specifications in conjunction with the sequence diagram, it is easy to see how the Client, Campaign and Advert objects collaborate to realize this use case.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This view of collaborating objects is simplified to some extent, in that it does not include control and boundary objects and their operations. However, operations in these objects are no more complex than those shown below, since their primary role is simply to call and co- ordinate operations on the entity objects.</p><p class="s18" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Context: <span class="p">Campaign</span></p><p class="s7" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Operation specification: <span class="s86">checkCampaignBudget()</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">Operation intent: <span class="s86">return campaign budget and actual costs.</span></p><p class="s91" style="padding-top: 6pt;padding-left: 23pt;text-indent: 0pt;line-height: 64%;text-align: justify;">Operation signature: <span class="s86">Campaign::checkCampaignBudget()</span></p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 9pt;text-align: center;">budgetCostDifference:Money</p><p class="s7" style="padding-top: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: center;">Logic description (pre- and post-conditions):</p><p class="s18" style="padding-top: 3pt;padding-left: 34pt;text-indent: 0pt;text-align: center;">pre<span class="p">:  self-&gt;exists()</span></p><p style="padding-top: 4pt;padding-left: 70pt;text-indent: -36pt;line-height: 66%;text-align: left;"><b>post</b><span class="s93">:  </span>result = self.originalBudget-self.estimatedCost <b>and </b>self.estimatedCost = self.adverts.estimatedCost-&gt;sum()</p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Other operations called: <span class="s86">Advert.getCost(), self.getOverheads()</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Events transmitted to other objects: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Attributes set: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Response to exceptions: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Non-functional requirements: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 9pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation specification: <span class="s86">getCampaignDetails()</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation intent: <span class="s86">return the title and budget of a campaign.</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation signature: <span class="s86">Campaign::getCampaignDetails() title:String, campaignBudget:Money</span></p><p class="s7" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Logic description (pre- and post-conditions):</p><p class="s18" style="padding-top: 3pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">pre<span class="p">:  self-&gt;exists()</span></p><p class="s18" style="padding-top: 2pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">post<span class="p">: result = self.title, self.estimatedCost</span></p><p class="s7" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Other operations called: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Events transmitted to other objects: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Attributes set: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Response to exceptions: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Non-functional requirements: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 9pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation specification: <span class="s86">getOverheads()</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation intent: <span class="s86">calculate the total overhead cost for a campaign.</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation signature: <span class="s86">Campaign::getOverheads() campaignOverheads:Money</span></p><p class="s7" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Logic description (pre- and post-conditions):</p><p class="s18" style="padding-top: 3pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">pre<span class="p">:  self-&gt;exists()</span></p><p class="s18" style="padding-top: 2pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">post<span class="p">: result = self.campaignOverheads</span></p><p class="s7" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"><a name="bookmark587">Other operations called: </a><span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Events transmitted to other objects: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Attributes set: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Response to exceptions: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 3pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Non-functional requirements: <span class="s86">none defined</span></p><p class="s18" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Context: <span class="p">Client</span></p><p class="s7" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation specification: <span class="s86">getName()</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation intent: <span class="s86">return the client name.</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation signature: <span class="s86">Client::getName()name:String</span></p><p class="s7" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Logic description (pre- and post-conditions):</p><p class="s18" style="padding-top: 3pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">pre<span class="p">:  self-&gt;exists</span></p><p class="s18" style="padding-top: 2pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">post<span class="p">: result = self.name</span></p><p class="s7" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Other operations called: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Events transmitted to other objects: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Attributes set: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Response to exceptions: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Non-functional requirements: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 9pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation specification: <span class="s86">listCampaigns()</span></p><p class="s7" style="padding-top: 5pt;padding-left: 20pt;text-indent: 2pt;line-height: 138%;text-align: left;">Operation intent: <span class="s86">return a list of campaigns for a client. </span>Operation signature: <span class="s86">Client::listCampaigns()titles:String[] </span>Logic description (pre- and post-conditions):</p><p class="s18" style="padding-left: 33pt;text-indent: 0pt;line-height: 11pt;text-align: left;">pre<span class="p">:  self-&gt;exists</span></p><p style="padding-top: 2pt;padding-left: 23pt;text-indent: 10pt;line-height: 140%;text-align: left;"><b>post</b>:  result = self.campaign-&gt;collect(campaign.title) <span class="s94">Other operations called: </span>Campaign.getCampaignDetails <span class="s94">Events transmitted to other objects: </span>none</p><p class="s7" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Attributes set: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Response to exceptions: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Non-functional requirements: <span class="s86">none defined</span></p><p class="s18" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Context: <span class="p">Advert</span></p><p class="s7" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation specification: <span class="s86">getCost()</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Operation intent: <span class="s86">return the actual cost for an advert.</span></p><p class="s7" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;line-height: 15pt;text-align: left;">Operation signature: <span class="s95">Advert::getCost()</span></p><p style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">actualAdvertCost:Money</p><p class="s7" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Logic description (pre- and post-conditions):</p><p class="s18" style="padding-top: 3pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">pre<span class="p">:  self-&gt;exists()</span></p><p class="s18" style="padding-top: 2pt;padding-left: 33pt;text-indent: 0pt;text-align: left;">post<span class="p">: result = self.actualAdvertCost</span></p><p class="s7" style="padding-top: 4pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Other operations called: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Events transmitted to other objects: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Attributes set: <span class="s86">none</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Response to exceptions: <span class="s86">none defined</span></p><p class="s7" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Non-functional requirements: <span class="s86">none defined</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="383" height="24" alt="image" src="Image_713.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.5  </a><a href="part4.htm#bookmark4" class="s29">Further Refinement of the Class Diagram</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.5  </a><a href="part4.htm#bookmark4" class="s29">Further Refinement of the Class Diagram</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.5  </a><a href="part4.htm#bookmark4" class="s29">Further Refinement of the Class Diagram</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part23.htm#bookmark589" class="a" name="bookmark588">Figure </a>A4.5 shows the revised analysis class diagram, after inheritance and aggregation structures have been added. For reasons of space, all attributes and operations have been</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">suppressed from this view.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="389" alt="image" src="Image_714.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark589">Figure A4.5 </a><span class="s21">Revised analysis class diagram with generalization and aggregation structures.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure A4.6 shows an excerpt from the analysis class diagram, detailing the generalization and aggregation structure for Advert with attributes and operations visible. This partial diagram reflects a further iteration of investigation and requirements modelling, which revealed that there is a requirement to keep track of the various elements used to create an advertisement. This is because photographs, music clips and so on can often be used for more than one advertisement in a campaign, and it has been a problem to identify and retrieve these elements when they are needed.</p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="527" height="599" alt="image" src="Image_715.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark590">Figure A4.6 </a><span class="s21">Generalization and aggregation structure for </span><span class="s89">Advert.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="406" height="25" alt="image" src="Image_716.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.6  </a><a href="part4.htm#bookmark4" class="s29">Further Activities of Req uirements Analysis</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.6  </a><a href="part4.htm#bookmark4" class="s29">Further Activities of Req uirements Analysis</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A4.6  </a><a href="part4.htm#bookmark4" class="s29">Further Activities of Req uirements Analysis</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark591">Figure A4.7 shows an activity diagram that illustrates the relationship between the products of the analysis model before and after this iteration of analysis. Some details are worth highlighting.</a></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="370" alt="image" src="Image_717.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark592">Figure A4.7 </a><span class="s21">High-level activity diagram showing how elements of the analysis model are created or updated during this iteration of analysis.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_718.jpg"/></span></p><p style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The analysis class model now includes some detailed class definition. In particular, all operations should be specified at least in outline.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_719.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="part23.htm#bookmark592" class="a">Some parts of the analysis model may be substantially unchanged during this iteration, for example the communication diagrams and the glossary. Although this is not necessarily the case, we have shown these as unaffected in </a>Fig. A4.7.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_720.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As a result of the operation specification activity, many attributes may also have been specified in more detail. Some, particularly those that are required to provide parameters to operations in other classes, will certainly now be typed. We have not shown this yet, since the typing of attributes is essentially a design activity. But in practice, some design decisions are made in parallel with the more detailed analysis that we describe in this chapter.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark593" class="a">Figure </a>A4.8 shows a more detailed view of the activities that are carried out and the products directly used or affected during this iteration. In this diagram, we have tried to suggest a sensible outline sequence for carrying out the various activities. However, it should be noted that this is no more than a guide, and is certainly not meant to be prescriptive. An iterative approach should always be followed that is sensitive to the needs of the project, to the skill of the developers and to the often haphazard manner in which understanding grows during the modelling and analysis of requirements.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="350" alt="image" src="Image_721.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark593">Figure A4.8 </a><span class="s21">The activities that are carried out and the products directly used or affected during this iteration of analysis.</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_722.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:350pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark594">LEARNING OBJECTIVES</a><a name="bookmark595">&zwnj;</a></p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_723.jpg"/></span></p></td></tr><tr style="height:87pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">the difference between analysis and design</p><p class="s16" style="padding-left: 54pt;padding-right: 147pt;text-indent: 0pt;text-align: justify;">the difference between logical and physical design the difference between system and detailed design the characteristics of a good design</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">the need to make trade-offs in design.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_724.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="77" alt="image" src="Image_725.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark596">Two questions that may be asked by those who are new to systems analysis and design are: ‘What is the difference between analysis and design?’ and ‘Why treat analysis and design as separate activities?’ In the development of information systems, as in the development of many kinds of system, the process of analysis is distinguished from the process of design. Analysis is often said to be about the ‘What?’ of a system, and design is described as being about the ‘How?’. Design can start before or after the decision has been made about the hardware and software to be used in implementing the system. Implementation-independent or logical design is distinguished from implementation-dependent or physical design. Design takes place within the context of the architecture of the enterprise and its information systems. Design also takes place at more than one level: system design or architectural design, which addresses structural aspects and standards that affect the overall system, and detailed design, which addresses the design of classes and the detailed working of the system.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In producing a design for a system, a designer will be working within a framework of</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">general quality criteria and will also be trying to achieve measurable objectives for the design that are specific to the particular system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="369" height="24" alt="image" src="Image_726.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.2  </a><a href="part4.htm#bookmark4" class="s29">H ow is Design Different from Analysis?</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.2  </a><a href="part4.htm#bookmark4" class="s29">H ow is Design Different from Analysis?</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.2  </a><a href="part4.htm#bookmark4" class="s29">H ow is Design Different from Analysis?</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1262" class="a" name="bookmark597">Design has been described by Rumbaugh </a>(1997) as stating ‘how the system will be constructed without actually building it’. The models that are produced by design activities show how the various parts of the system will work together; the models produced by analysis activities show what is in the system and how those parts are related to one another.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">12.2.1 <b>M oving to design</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The word <i>analysis </i>comes from a Greek word meaning to break down into component parts. When we analyse an organization and its need for a new system, the analysis activity is</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">characterized as asking <i>what </i>happens in the current system and <i>what </i>is required in the new system. It is a process of seeking to understand the organization, investigating its requirements and modelling them. The result of this analysis activity is a specification of what the proposed system will do based on the requirements.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Design is about producing a solution that meets the requirements that have been analysed. The parts that have been broken down are assembled into one of a number of possible solutions. The design activity is concerned with specifying <i>how </i><a href="part38.htm#bookmark1211" class="a">the new system will meet the requirements. There may be many possible design solutions, but the intention is to produce the best possible solution in the circumstances. Those circumstances may reflect constraints such as limits on how much can be spent on the new system or the need for the new system to work with an existing system. Jacobson et al. </a>(1992) regard design as part of the construction process (together with implementation). The systems designer has his or her attention focused on the implementation of the new system, while the systems analyst is focused on the way the business is organized and a possible better organization; the focuses of these two activities are very different.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark598" class="a">A simple example of this can be seen in the Agate case study. Analysis identifies the fact that each Campaign has a title attribute, and this fact is documented in the class model. Design determines how this will be entered into the system, displayed on screen and stored in some kind of database together with all the other attributes of Campaign and other classes. This is shown schematically in </a>Fig. 12.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="496" alt="image" src="Image_727.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark598">Figure 12.1 </a><span class="s21">How elements of the model change from requirements through analysis to design.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Design can be seen either as a stage in the systems development lifecycle or as an activity that takes place within the development of a system. In projects that follow the waterfall</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark114" class="a">lifecycle model (Fig. </a><a href="part38.htm#bookmark1262" class="a">3.3), the analysis stage will be complete before the design stage begins. However, in projects that follow an iterative lifecycle, design is not such a clear-cut stage, but is rather an activity that will be carried out on the evolving model of the system. </a>Rumbaugh (1997) distinguishes between the idea of design as a stage in the waterfall lifecycle and design as a process that different parts of the model of the system will go through at different times.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="a">In the Unified Process (Jacobson et al., </a><a href="part38.htm#bookmark1222" class="a">1999), design is organized as a workflow—a series of activities with inputs and outputs—that is independent of the project phase. In the Rational Unified Process (Kruchten, </a><a href="part9.htm#bookmark171" class="a">2004), analysis and design are combined into a single workflow— the analysis activities produce an overview model, if it is required, but the emphasis is on design—and the workflow is similarly independent of the project phase. We have adopted a similar approach to the Unified Process in the process outlined in </a>Chapter 5. A project consists of major phases (inception, elaboration, construction and transition); each phase requires one or more iterations and, within the iterations, the amount of effort dedicated to the activities in each workflow gradually increases and then declines as the project progresses. The difference between this kind of approach and the traditional waterfall model is that in the traditional approach analysis, design, construction and other stages in the waterfall are both activities and stages: during the analysis stage, for example, all the analysis activity is meant to take place. Real projects are not like this: during the early part of the project, which may be called ‘analysis’, some design activity may take place; during the later part of the project, which may be called ‘design’, some analysis activity may take place. Process models such as the Unified Process recognise this and give the phases different names to decouple them from the activities. As long as less and less analysis and more and more design (and then implementation) take place as the project develops, the project is making progress. Despite this, many projects still treat analysis and design as separate stages rather than activities that gradually elaborate the model as the project progresses. This has some benefits for project management, as the full scope of the system is analysed and agreed before any design begins, so it is easier to plan and estimate costs. However, the requirements often change, and it is better to recognize this and adopt an iterative approach.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark599">12.2.2 </a><b>Design in the iterative lifecycle</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">One of the arguments put forward for the use of object-oriented approaches is that the same model (the class diagram or object model) is used right through the life of the project. Analysis identifies classes, those classes are refined in design, and the eventual programs will be written in terms of classes. While this so-called <i>seamlessness </i><a href="part38.htm#bookmark1262" class="a">of object-oriented methods may seem like an argument for weakening the distinction between analysis and design, when we move into design, different information is added to the class diagram, and other different diagrams are used to support the class diagram. Rumbaugh </a>(1997) distinguishes between analysis and design in terms of the amount of detail that is included in the model. On a continuum, the analysis stage provides an abstract model of ‘what to do’ while the design stage documents ‘exactly how to do it’. As the project moves from one end of this continuum to the other, additional detail is added to the model until a clear specification of ‘how to do it’ is provided. This additional detail is added in the form of diagrams such as interaction diagrams, state machine diagrams and deployment diagrams that supplement the information in the class diagram. The class diagram is also enhanced during design by the addition of detail about attributes and operations and additional classes to handle the implementation of the user interface, communication between subsystems and data storage.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In an iterative project the whole system does not go through this evolution together;</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">different parts of the system will be prioritized in successive iterations. In each iteration, a set of use cases can be taken forward for development.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="282" height="25" alt="image" src="Image_728.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.3  </a><a href="part4.htm#bookmark4" class="s29">Logical and Physical Design</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.3  </a><a href="part4.htm#bookmark4" class="s29">Logical and Physical Design</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.3  </a><a href="part4.htm#bookmark4" class="s29">Logical and Physical Design</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark600">At some point in the life of a systems development project a decision must be made about the hardware and software that are to be used to develop and deliver the system—the hardware and software platform. In some projects this is known right from the start. Many companies</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark611" class="a">have an existing investment in hardware and software, and any new project must use existing system software (such as programming languages and database management systems) and will be expected to run on the same hardware. However, service-oriented architectures (see Chapter </a>13) and open system standards, which allow for different hardware and software to operate together, have meant that even for such companies, the choice of platform is more open. For many new projects the choice of platform is relatively unconstrained and so at some point in the life of the project a decision must be made about the platform to be used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some aspects of the design of systems are dependent on the choice of platform. These will affect the system architecture, the design of objects and the interfaces with various components of the system. Examples include the following.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_729.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The decision to create a distributed system with elements of the system running on different machines will require the use of some <i>middleware</i>, to allow objects to communicate with one another across the network. This will affect the design of objects and the messages used to communicate.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_730.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The decision to write programs in Java and to use a relational database that supports ODBC (Object Data Base Connectivity) will require the use of JDBC (Java Data Base Connectivity) and optionally a framework, such as the Java Persistence API, to map between the objects and the relational database.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_731.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The choice of Java as a software development language will mean that the developer has the choice of using the standard Java AWT (Abstract Windowing Toolkit), the Java Swing classes, the Standard Widget Toolkit (SWT) or proprietary interface classes for designing the interface.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_732.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Java does not support multiple inheritance; other object-oriented languages such as C++ do. If the system being developed appears to require multiple inheritance then in Java this will have to be implemented using Java’s interface mechanism.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_733.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If the system has to communicate with special hardware, for example bar-code scanners, then it may be necessary to design the interface so that it can be written in C as a <i>native method </i>and encapsulated in a Java class, as Java cannot directly access low-level features of hardware.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Java has been used here as an example. The same kinds of issues will arise whatever platform is chosen.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;">It is also the case that there are many design decisions that can be made without knowledge of the hardware and software platform.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_734.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The interaction between objects to provide the functionality of particular use cases can be designed using interaction diagrams or communication diagrams.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_735.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The layout of data entry screens can be designed in terms of the fields that will be required to provide the data for the objects that are to be created or updated, and the order in which they will appear on the screen can be determined. However, the exact nature of a textbox and whether it is a Borland C++ TEdit, a Java TextField, a C# TextBox, a V isual Basic TextBox or something else can be left until later.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_736.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The nature of commands and data to be sent to and received from special hardware or other systems can be determined without needing to design the exact physical format of messages.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Because of this, design is sometimes divided into two stages. The first is <i>implementation- independent </i>or <i>logical </i>design and the second is <i>implementation-dependent </i>or <i>physical </i>design. Logical design is concerned with those aspects of the system that can be designed without knowledge of the implementation platform; physical design deals with those aspects of the system that are dependent on the implementation platform that will be used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Having an implementation-independent design may be useful if you expect a system to have to be re-implemented with little change to the overall design but on a different platform: for example, a Windows program that is to be ported to MacOS and Linux, or a program that must run on different types of handheld and smartphone using Windows Mobile, Symbian and Android.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">In many projects, design begins after hardware and software decisions have been made. However, if this is not the case, then the project manager must ensure that the plan of work for the project takes account of this and that logical design activities are tackled first. In an iterative project lifecycle, logical design may take place in the early design iterations or, if the system is partitioned into subsystems, the logical design of each subsystem will take place before its physical design.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark601">The OMG promotes an initiative called Model-Driven Architecture (MDA). This approach is based on the idea that a system can be modelled in UML to create a platform-independent model (PIM), and that this PIM can then be transformed using automated modelling and programming tools into a platform-dependent model (PDM) for a specific platform. The same PIM can be translated into many different PDMs for different platforms.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="340" height="25" alt="image" src="Image_737.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.4  </a><a href="part4.htm#bookmark4" class="s29">System Design and Detailed Design</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.4  </a><a href="part4.htm#bookmark4" class="s29">System Design and Detailed Design</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.4  </a><a href="part4.htm#bookmark4" class="s29">System Design and Detailed Design</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark603" class="a" name="bookmark602">Design of systems takes place at two levels: system design and detailed design. These design activities take place in the context of the architecture of the enterprise as a whole and the architecture of the system. </a>Figure 12.2 shows the relationship between enterprise architecture, system architecture, system design and detailed design in schematic form.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="458" alt="image" src="Image_738.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark603">Figure 12.2 </a><span class="s21">The relationships between architecture and design.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Enterprise architecture deals with the way the organization operates, its people, its locations, its strategy and how the information technology and information systems support the organization. The enterprise architect ensures that all IT projects across the organization conform to this high-level architecture.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">System architecture deals with the architecture of single systems or groups of related systems within the framework provided by the enterprise architecture. The structure of and relationships between subsystems are the domain of the system architect. Within a project, the system architect acts as an advocate of the users’ interests, making sure that the architectural features of the system meet both their functional and non-functional requirements.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">System design is concerned with the design of the components of the system and the setting of standards: for example, for the design of the human–computer interface. Within the constraints of the enterprise architecture and the system architecture, the system designer chooses appropriate technologies and sets standards that will be used across the system. Design patterns can be used in system architecture, system design and detailed design, but the choice of patterns that will be used in the implementation is most relevant to system design.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Detailed design is concerned with designing individual elements to fit the architecture, to conform to the standards and to provide the basis for an effective and efficient implementation. In an object-oriented system, the detailed design is mainly concerned with the design of objects and classes. Detailed design also addresses the user interface and database design.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark611" class="a">The reality is that most organizations do not have the luxury of employing people in all these roles. Few businesses, even large ones, employ enterprise architects, and most blur the distinction between system architecture and system design. Detailed design may even be left to developers. We cover system design and system architecture together in </a><a href="part23.htm#bookmark681" class="a">Chapter 13, with a short discussion of how enterprise architecture frameworks influence the system level work. Detailed class design is covered in Chapter </a><a href="part23.htm#bookmark738" class="a">14, while Chapters </a><a href="part23.htm#bookmark868" class="a">15 to </a>18 deal with the use of design patterns, the user interface design and the database design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">12.4.1 <b>System design</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark611" class="a">During system design the designers make decisions that will affect the system as a whole. The most important aspect of this is the overall architecture of the system (Chapter </a>13). Many systems use a client–server architecture in which the work of the system is divided between the clients (typically PCs on the users’ desks) and a server (usually a Unix, Linux or Windows machine that provides services to a number of users). This raises questions about how processes and objects will be distributed on different machines, and it is the role of the system designer or system architect to decide on this. The design will have to be broken down into subsystems and these subsystems may be allocated to different processors. This introduces a requirement for communication between processors, and the systems designer will need to determine the mechanisms used to provide for this communication. Distributing systems over multiple processors also makes it possible for different subsystems to be active simultaneously or concurrently. This concurrency needs to be designed into the system explicitly rather than left to chance.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Many organizations have existing standards for their systems. These may involve interface</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">design issues such as screen layouts, report layouts or how online help is provided. Decisions about the standards to be applied across the whole system are part of system design, whereas the design of individual screens and documents (to comply with these standards) is part of detailed design.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark604">When a new system is introduced into an organization, it will have an impact on people and their existing working practices. Job design is often included in system design and addresses concerns about how people’s work will change, how their interest and motivation can be maintained and what training they will require in order to carry out their new jobs. How people use particular use cases will be included in the detailed design of the human–computer interface.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">12.4.2 <b>Detailed design</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Traditionally, detailed design has been about designing inputs, outputs, processes and file or database structures; these same aspects of the system also have to be designed in an object- oriented system, but they will be organized in terms of classes. During the analysis phase of a project, concepts in the business will have been identified and elaborated in terms of classes, and use cases will have been identified and described. The classes that have been included in</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the class diagram will reflect the business requirements but they will only include a very simplistic view of the classes to handle the interface with the user, the interface with other systems, the storage of data and the overall co-ordination of the other classes into programs. These classes will be added in design with greater or lesser degrees of detail depending on the hardware and software platform that is being used for the new system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="331" height="25" alt="image" src="Image_739.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.5  </a><a href="part4.htm#bookmark4" class="s29">Qualities and Objectives of Design</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.5  </a><a href="part4.htm#bookmark4" class="s29">Qualities and Objectives of Design</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.5  </a><a href="part4.htm#bookmark4" class="s29">Qualities and Objectives of Design</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a" name="bookmark605">There are a number of criteria for a good design and these are discussed in Section 12.5.1. Perhaps the most obvious measure of design quality is whether the finished application is of high quality. This assumes that the analysis that preceded the design work was itself of high quality. (Analysis quality was discussed in Chapter </a>7.) However, this is a rather vague and circular way of assessing quality. There are some criteria that can be applied to determine whether a design is fit for purpose. Some of the criteria given below for a good design will bring benefits to the developers, while some will provide benefits for the eventual users of the system. In Section 12.5.2 we discuss how it is often necessary to make trade-offs between different design criteria, as it may not be possible to achieve all of them in a single design. In Section 12.5.3 the ways in which we can measure whether the business objectives have been met are explored.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">12.5.1 <b>Objectives and constraints</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1305" class="a">The designers of a system seek to achieve many objectives that have been identified as the characteristics of a good design since the early days of information systems development. Yourdon and Constantine </a><a href="part38.htm#bookmark1247" class="a">(1979) cite efficiency, flexibility, generality, maintainability and </a><a href="part38.htm#bookmark1160" class="a">reliability; DeMarco </a><a href="part38.htm#bookmark1247" class="a">(1979) proposes efficiency, maintainability and buildability; and Page- Jones (1988) suggests that a good design is efficient, flexible, maintainable, </a><a href="part23.htm#bookmark606" class="a">manageable, satisfying and productive. These latter two points highlight issues concerned with human– computer interaction and remind us of the need for the design to produce a usable system. Other characteristics of a good design are that it should be functional, portable, secure and economical; in the context of object-oriented systems, reusability is a priority objective. The characteristics of good design that will influence the design of the Agate sysem are shown in </a>Figure 12.3 and listed below.</p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;"><span><img width="487" height="487" alt="image" src="Image_740.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark606">Figure 12.3 </a><span class="s21">The qualities of good design.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">F unctional</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">When we use a computer system, we expect it to perform correctly and completely those functions that it is claimed to perform; when an information system is developed for an organization, the staff of that organization will expect it to meet their documented requirements fully and according to specification. So, for example, the staff of Agate will expect their system to provide them with the functionality required to document advertising campaigns, record notes about campaigns and store information about the advertisements to be used in those campaigns. If it does not perform these functions, it is not fully functional. Referring back to Rumbaugh’s definition of design as ‘how the system will be constructed without actually building it’, a functional design should show how every element of the required system will work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Efficient</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It is not enough that a system performs the required functionality; it should also do so efficiently, in terms both of time and resources. Those resources can include disk storage, processor time and network capacity. This is why design is not just about producing any solution, but about producing the optimal solution. This objective may apply to Agate’s requirement to store textual notes about ideas for campaigns and advertisements. A sample two lines of text containing twenty words takes up about 100 bytes in text format, but stored in the format of a well-known word-processor can take as much as 13,800 bytes (this is without the use of any special fonts or styles). A poor design might use object linking and embedding (OLE) to handle the word-processing of the notes but would pay a severe penalty in increased storage requirements!</p><p class="s26" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Economical</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Linked to efficiency is the idea that a design should be economical. This applies not only to the fixed costs of the hardware and software that will be required to run it, but also to the running costs of the system. The cost of memory and disk storage is very low compared to twenty years ago, and most small businesses using Microsoft Windows probably now require more disk space for their programs than they do for their data. However, the growth of multimedia systems for business purposes may make it once more important to calculate the storage requirements of a system carefully. For large enterprises, it is still important to plan carefully for storage requirements and their anticipated growth.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Reliable</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The system must be reliable in two ways: first, it should not be prone to either hardware or software failure; and second, it should reliably maintain the integrity of the data in the system. Hardware reliability can be paid for: manufacturers provide systems with redundant components that run in parallel or that step in when an equivalent component fails; RAID (redundant arrays of inexpensive disks) technology can provide users with disk storage that is capable of recovering from the failure of one drive in an array. The designers must design software reliability into the system. In physical design, detailed knowledge of the development environment is likely to help ensure reliability.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Reliability depends to some extent on the ability of the system to be tested thoroughly. A well-analysed and designed system will specify the valid and invalid combinations of data that can be handled. It will also show clearly the structure of the system and which elements of the system are dependent on others so that testing can work up through classes, groups of classes, subsystems and eventually the whole system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S ecure</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Systems should be designed to be secure against malicious attack by outsiders and against unauthorized use by insiders. System design should include considerations of how people are authorized to use the system and policies on passwords. It should also cover protection of the system from outsiders, including firewalls in either hardware or software to protect the system from access via public networks, such as the Internet. In European countries that are members of the European Union, there are data protection laws that are designed to protect the interests of individuals about whom data is held in information systems, such as the Data Protection Acts (1984 and 1998) and the Computer Misuse Act (1990) in the UK. Where such legislation exists, the designer should ensure that the design of the system will comply with its requirements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">F lexible</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1305" class="a">Some authors treat flexibility as the ability of the system to adapt to changing business requirements as time passes. Yourdon and Constantine </a>(1979) call this feature <i>modifiability</i>. By flexibility they mean the ability to configure the system to handle different circumstances based on control values that are not compiled into the system but are available for the user to set at run-time. In the Agate system, this could be reflected in the choice of Open Database Connectivity (ODBC) as the means to access the database. This provides a standard mechanism for accessing databases, and changing the ODBC driver used would allow either the system to access a local or a remote version of the database or for the system to be migrated to a different database management system at a later date. Another possibility would be to ensure that all the prompts and error messages used by the system are held in an external data file that can be loaded up when the program runs or in response to a menu option. This allows for the creation of multiple files of messages and would enable users to set the language that they wish to use. The use of Unicode, which provides a character set that includes ideographic characters (for example, Chinese, Japanese and Korean) as well as all the world’s alphabets, would enable a system to be developed for Agate that could be localized for each location in which it is used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">G eneral</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Generality describes the extent to which a system is general-purpose. It is more applicable to utility programs than to large information systems. However, it includes the issue of <i>portability</i>,</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">which applies to the Agate system that is to be developed in Java so that it can run on different hardware (PCs and Apple Macs). The system may also exhibit generality from the point of view of the developers, who may wish to use the same system for other clients in the advertising industry. Reuse is discussed below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">B uildable</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">From the perspective of the programmer who has to write the program code to build the system, it is important that the design is clear and not unnecessarily complex. In particular, the physical design should relate closely to the features that are available in the development language. Not all object-oriented languages offer the same features: for example, in the visibility of attributes and operations (public, private, protected, friend etc.); in the ability to handle multiple inheritance; or in the availability of utility classes such as collections or linked lists in the base language. Designs that rely on features such as these will force the programmer to work around them if a different language is being used from the one that the designer had in mind.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M anageable</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A good design should allow the project manager to estimate the amount of work involved in implementing the various subsystems. It should also provide for subsystems that are relatively self-contained and can be marked off as completed and passed on for testing without fear that changes to other parts of the system still in development will have unforeseen consequences on them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M aintainable</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Maintenance is cited as taking up as much as 60% of the data-processing budget of organizations. Maintenance activities include fixing bugs, modifying reports and screen layouts, enhancing programs to deal with new business requirements, migrating systems to new hardware and fixing the new bugs that are introduced by all of the above. A well-designed and documented system is easier to maintain than one that is poorly designed and documented. If maintenance is easy then it is less costly. It is particularly important that there is a close match between the developed program code and the design. This makes it easier for the maintenance programmer to understand the intention of the designer and to ensure that it is not subverted by the introduction of new code. Maintenance programmers can spend up to 50% of their working time just trying to understand the code that they are maintaining.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">U sable</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Usability covers a range of aspects including the idea, mentioned above, that a system should be both satisfying and productive. It may seem odd to suggest that people should enjoy using their computer systems and find it a satisfying experience. However, if you think about the times that you have used a computer system and have found it a source of dissatisfaction, then you can perhaps imagine a satisfying system as one with an absence of dissatisfying features. Many of the features that contribute to user satisfaction are characteristic of good human–computer interface (HCI) design. For example, the concept of <i>affordance </i><a href="part23.htm#bookmark777" class="a">(meaning that objects on the interface suggest their function) can reduce the number of errors made by users. Reducing error rates and ensuring that if users do make an error it is clear both where they went wrong and how to recover from the error can contribute to the satisfaction of users. Productivity can be enhanced by ensuring that the tasks that users wish to carry out using the system are straightforward to carry out and do not introduce an overhead of keystrokes or mouse-clicks to achieve. If usability requirements have been captured (see Section 6.2.2), then the design should take these into account. Usability is considered in more detail in </a>Chapter 16.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Reusable</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Reusability is the Holy Grail of object-oriented development. Many of the features of object- oriented systems are geared to improve the possibility of reuse. Reuse affects the designer in three ways: first, he or she will consider how economies can be made by designing reuse into the system through the use of inheritance; second, he or she will look for opportunities to use design patterns, which provide templates for the design of reusable elements; and third, he or</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark738" class="a">she will seek to reuse existing classes or components either directly or by subclassing them. Design patterns are described in detail in Chapter </a><a href="part31.htm#bookmark1004" class="a">15. Existing classes could be classes that have been developed for other projects, classes in class libraries that are associated with the development language (such as the Java AWT) or classes that are bought in from outside vendors. To date, object-oriented development has not achieved the levels of reuse that were expected. In order to reuse a software class, a designer must be aware of the existence of the class, and be able to determine both that its interface matches the interface for the class that he or she requires and that the methods of the class match those required. It is arguable that in order to determine whether an available class matches requirements, the required class must already have been designed. The economies from reuse thus appear during the construction of the software and require a change to a culture of project management that supports reuse; this means that project managers must be able to recognize the effort that is saved by not writing and testing lines of code (because a class is being reused). The development of strategies to parcel up classes as components and the provision of component management software are discussed in </a>Chapter 20.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">There is clearly some overlap between the categories that have been listed here. Aspects of maintainability overlap with flexibility, generality with reuse, efficiency with economy. What is often the case, however, is that some design objectives will conflict with one another. This happens more often at the level of specific objectives rather than general ones such as those described above. However, it should be possible to see that functionality, reliability and security could all conflict with economy. Many of the conflicts result from constraints that are imposed on the system by the users’ non-functional requirements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark607">12.5.2 </a><b>Design trade-offs</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Design frequently involves choosing the most appropriate compromise. The designer is often faced with design objectives or constraints that are mutually incompatible and he or she must then decide which objective is the more important.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Design constraints arise from the context of the project as well as from the users’ requirements. The clients’ budget for the project, the timescale within which they expect the system to be delivered, the skills of staff working on the project, the need to integrate the new system with existing hardware or systems and standards set as part of the overall systems design process can all constrain what can be achieved. Resolving conflicts between requirements and constraints results in the need for compromises or trade-offs in design. A couple of examples should illustrate how these can occur.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_741.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If the users of Agate’s new system require the ability to change fonts in the notes that they write about campaigns and adverts, then they will want to be able to edit notes with the same kind of functionality that would be found in a word-processor. As pointed out earlier in Section 12.5.1 when we discussed efficiency, this will seriously impact the storage requirements for notes. It will also have an effect on network traffic, as larger volumes of data will need to be transferred across the network when users browse through the notes. The designers will have to consider the impact of this requirement. It may be that the users will have to accept reduced functionality or the management of Agate will have to recognize that their system will have higher costs for storage than first envisaged. Compromise solutions may involve transferring only the text of a note (without the overhead of all the formatting information) when users are browsing a note and transferring the full file only when it needs to be viewed or edited. However, this will increase the processing load on the server. Another compromise solution might be to use a different file format such as RTF (rich text format) rather than the word-processor format. For the short text file discussed above this reduces the byte count to 1,770 while retaining formatting information.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_742.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Agate would like the system to be configurable so that prompts, help and error</p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">messages are displayed in the language of the user. This means that each prompt and error message must be read into the programs from data files or the database. While this is good software design practice and makes the system more flexible, it</p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">will increase the workload of the designers when they design elements of the interface. Without this requirement, it is enough for each designer to specify that messages such as ‘Campaign’ or ‘Not on file’ appear on screen; there is a minimal need for liaison between designers. With this requirement, the designers will need to draw up a list of prompts, labels and error messages that can be referred to by number or by some other key so that the same message is used consistently wherever it is applicable. This means that the programmers will not hard code messages into the system, but will refer to them as elements in an array of messages, for example. While this increases the flexibility and to some extent the maintainability of the system, it is likely to increase the cost of the design phase.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It is important that these design decisions are clearly documented, and the reasoning behind compromises and trade-offs is recorded. Keeping the client informed of these decisions is always important to ensure that the decisions are consistent with the client’s needs.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The requirements model may indicate the relative priorities of the different objectives or constraints but, if it does not, then it is useful to prepare general guidelines. These guidelines must be agreed with clients since they determine the nature of the system and what functionality will be delivered. Guidelines for design trade-offs ensure consistency between the decisions that are made at different stages of development. They also ensure consistency between different subsystems. However, no guidelines can legislate for every case. Design experience and further discussions with the client will remain necessary to resolve those situations that cannot be anticipated—at least some of these occur on almost every project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">12.5.3 <b>M easurable objectives in design</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In the last but one section, we discussed some of the general objectives of the designers in a systems development project. Some objectives are specific to a particular project, and it is important to be able to assess whether these objectives have been achieved. One way of doing this is to ensure that these objectives are expressed in measurable terms so that they can be tested by simulation during the design phase, in prototypes that are built for this purpose or in the final system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">Measurable objectives often represent the requirements that we referred to as non- functional requirements in Chapter </a>6. They also reflect the fact that information systems are not built for their own sake, but are developed to meet the business needs of some organization. The system should contribute to the strategic aims of the business, and so should help to achieve aims such as:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_743.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_744.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">provide better response to customers; increase market share.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">However, such aims are vague and difficult to assess. If they are expressed in measurable terms, then it is possible to evaluate whether they can be achieved by the design or whether they have been achieved by the finished system. Ideally, they should be phrased in a way that shows how these objectives are attributable to the system. If a company expects to increase its market share as a result of introducing a new computer system but does not achieve this, it should be possible to tell whether this is a failure of the new system or the outcome of other factors outside the control of the system developers, such as economic recession. The system may contribute to business objectives such as those above by providing better information or more efficient procedures, but for the objectives to be measurable they need to be phrased as operational objectives that can be quantified, such as:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_745.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_746.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">to reduce invoice errors by one-third within a year; to process 50% more orders during peak periods.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">These set clear targets for the designers and a way of checking whether these objectives can be achieved (within the constraints on the system) and whether they have been achieved once the system is up and running.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="25" alt="image" src="Image_747.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">12.6  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark608">While analysis looks to the business in order to establish requirements, design looks to the technology that will be used to implement those requirements. An effective design will meet general objectives that will make the system both easier to build and maintain and more usable and functional for the end-users. The design of a system should also meet specific objectives relating to the business needs of the users, and these specific objectives should be phrased in quantifiable, operational terms that allow them to be tested. This process of design takes place in the context of constraints that are imposed by the users, their budget and existing systems, the available technology and the skills and knowledge of the design and development team.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark611" class="a">System design focuses on determining a suitable architectural structure (discussed in </a>Chapter 13) for the system and defines the context within which the remaining design activity is performed.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark681" class="a">In Chapter </a><a href="part23.htm#bookmark738" class="a">14 we describe detailed design of the classes in the required system. Chapter 15 explains how patterns can be used to assist the design </a><a href="part23.htm#bookmark777" class="a">process. </a><a href="part23.htm#bookmark738" class="a">Chapters 16 </a><a href="part23.htm#bookmark814" class="a">and </a><a href="part23.htm#bookmark738" class="a">17 </a><a href="part23.htm#bookmark868" class="a">look specifically at the design of the human–computer interface and Chapter </a>18 discusses the design of data storage.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:418pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">12.1 <span class="s16">What are the advantages of separating the analysis and design phases of a project?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 12pt;text-indent: -29pt;text-align: left;">12.2 <span class="s16">What are the advantages of separating the analysis and design activities of a project?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;line-height: 109%;text-align: left;">12.3 <span class="s16">Users at Agate require a report of unpaid campaigns. Which of the following aspects of the report represents analysis, logical design and physical design? </span><span class="s42">The size of the paper and the position of each field in the report.</span></p><p class="s42" style="padding-top: 1pt;padding-left: 38pt;padding-right: 12pt;text-indent: 0pt;text-align: left;">The fact that the user wants a report of completed campaigns that have not yet been paid for by the client.</p><p class="s42" style="padding-top: 2pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">The selection of the business objects and their attributes used by the report.</p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;text-indent: -29pt;text-align: left;">12.4 <span class="s16">Which of the following sentences describing an element of the FoodCo system represents analysis, logical design and physical design?</span></p><p class="s42" style="padding-top: 2pt;padding-left: 38pt;padding-right: 19pt;text-indent: 0pt;text-align: left;">The reason for stopping a run will be selected from one of the values displayed in a listbox (Java Choice) in the Record Line Stop dialogue window.</p><p class="s42" style="padding-top: 2pt;padding-left: 38pt;padding-right: 56pt;text-indent: 0pt;text-align: left;">When a production line stops during a run, the reason for stopping will be recorded.</p><p class="s42" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: 0pt;text-align: left;">The reason for stopping a run will be entered into the system by selecting from a list of valid reasons.</p><p class="s16" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><span class="s35">12.5 </span>What is meant by <i>seamlessness </i>in object-oriented systems development?</p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">12.6  <span class="s16">What are the differences between system design and detailed design?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">12.7 <span class="s16">List twelve quality criteria for good design.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">12.8 <span class="s16">Reread the description of the FoodCo case study in Case Study B1. Identify any constraints that you think might be imposed on the design of the new system.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">12.9 <span class="s16">Based on the same information try to identify possible measurable objectives for the new FoodCo system.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">12.10 <span class="s16">Agate wants the new system to provide access to the same data from every office around the world. Maintaining a network that is constantly connected between all the offices is considered too expensive, while using a network that dials up remote offices as required would provide response times that are too slow. What kind of compromise solution can you come up with to this problem?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="588" height="24" alt="image" src="Image_748.png"/></span></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:19pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-left: 10pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:234pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">12.A <span class="s16">FoodCo requires a data entry screen for entering details of staff holidays. Without knowing what software or hardware is going to be used to develop this data entry screen, list as many features of the design as you can that are not dependent on the implementation platform.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">12.B <span class="s16">Design applies to a wide range of artefacts, for example cars, buildings, books and packaging. Choose an artefact that you use and try to identify what makes for a good design in this context. Are there aspects that do not apply to systems design? Are there aspects of systems design that should perhaps apply to the design of artefacts that you use?</span></p><p class="s35" style="padding-top: 1pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">12.C <span class="s16">Find out what laws (if any) exist in your country to protect computer systems against malicious attack from hackers. What implications does the law have for the design of systems?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">12.D <span class="s16">In the introduction to Section 12.5. We pointed out that some criteria for good quality in design will bring benefits to the designers, while others will bring benefits to the eventual users of the system. Try to decide which of the characteristics discussed in Section 12.5.1 bring benefits to the designers as well as the end-users.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark609">Further Reading</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_749.png"/></span></p><p class="s7" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1209" class="s6">For those with an interest in the historical development of systems design, the classics of structured design are Jackson </a><a href="part38.htm#bookmark1305" class="s6">(1975) and Yourdon and Constantine </a><a href="part38.htm#bookmark1238" class="s6">(1979). The classics of object-oriented design would include Meyer </a><a href="part38.htm#bookmark1121" class="s6">(1997), Booch </a><a href="part38.htm#bookmark1212" class="s6">(1994) and Jacobson et al. </a><a href="part38.htm#bookmark1275" class="s6">(1995). Sommerville </a><a href="part38.htm#bookmark1252" class="s6">(2007) and Pressman </a>(2009) both provide detailed discussions of design issues.</p><p style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1185" class="s6">If you are interested in an approach to the analysis and design of requirements that is completely different from object-oriented approaches, SSADM (Structured Systems Analysis and Design Method) makes a very clear distinction between requirements analysis, logical design and physical design. A separate stage in SSADM is used to carry out the choice of development environment (Technical System Options), and the physical design is then prepared for this </a><a href="part38.htm#bookmark1274" class="s6">environment. Skidmore et al. </a><a href="part38.htm#bookmark1185" class="s6">(1994), Goodland and Slater (1995) or any other book on SSADM explains the way in which these stages are handled.</a></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_750.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:351pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark610">LEARNING OBJECTIVES</a><a name="bookmark611">&zwnj;</a></p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_751.jpg"/></span></p></td></tr><tr style="height:99pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the major concerns of system design</p><p class="s16" style="padding-left: 54pt;padding-right: 65pt;text-indent: 0pt;text-align: left;">what is meant by architecture in information systems development the factors that influence the architecture of a system</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">the range of architectural styles that can be used, including layers and partitions how to apply the Model–V iew–Controller architecture</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">which architectures are suitable for distributed systems.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_752.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="93" alt="image" src="Image_753.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a" name="bookmark612">The system design activity defines the context in which detailed design will occur. In Chapter </a><a href="part38.htm#bookmark1210" class="a">5 we described the Unified Software Development Process (USDP) (Jacobson et al., </a>1999) as ‘architecture-centric’. A major part of system design is defining the architecture of the system. However, up to this point we have not stated what we mean by architecture in the context of information systems; nor have we explained how to design the architecture of a system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Every system has an architecture of some sort. If the designers and developers do not take the time or have the skills to produce explicit architectural models of the system, the system will still have an architecture. However, that architecture will be implicit and will be influenced by factors such as the choice of programming language, database and platform, and the skills and experience of the development team. Any such implicit architecture is likely to result in a system that does not meet the non-functional requirements and is difficult to maintain or enhance. Producing an explicit architecture means that the architect has to consider the non- functional requirements, the context of the system and how it and its components may be used and further developed in the future.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this chapter, we explain what is meant by system architecture, what are the factors that influence the development of an architecture and the kind of issues that are addressed by an architecture. The architecture is part of the design framework that sets the context for the detailed design of the system. During system design, the following activities will be undertaken.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_754.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_755.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_756.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_757.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="part23.htm#bookmark595" class="a" name="bookmark613">Priorities are set for design trade-offs. (</a><a href="part23.htm#bookmark611" class="a">Chapter 12) Subsystems and major components are identified. (Chapter 13) Any inherent concurrency is identified. (Chapter 13) Subsystems are allocated to processors. (</a>Chapter 13)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_758.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="part23.htm#bookmark738" class="a">Design patterns that can be used will be identified (</a>Chapter 15)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_759.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="part23.htm#bookmark777" class="a">A strategy and standards for human–computer interaction are chosen. (</a><a href="part23.htm#bookmark814" class="a">Chapters 16 and </a>17)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_760.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="part23.htm#bookmark868" class="a">A data management strategy is selected. (</a>Chapter 18)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_761.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_762.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="part31.htm#bookmark964" class="a">Code development standards are specified. (Chapter 19) System test plans are produced. (</a>Chapter 19)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_763.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="part31.htm#bookmark964" class="a">Implementation requirements are identified (for example, data conversion). </a><a href="part31.htm#bookmark964">(Chapter 19)</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="338" height="25" alt="image" src="Image_764.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.2  </a><a href="part4.htm#bookmark4" class="s29">What Do We M ean by Architecture?</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.2  </a><a href="part4.htm#bookmark4" class="s29">What Do We M ean by Architecture?</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.2  </a><a href="part4.htm#bookmark4" class="s29">What Do We M ean by Architecture?</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark614">The use of the term ‘architecture’ in the development of information systems obviously derives from the practice of architecture in the built environment. The Royal Institute of British Architects (RIBA) describes ‘What Architects Do’ as follows:</a></p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 109%;text-align: justify;">Architects are trained to take your brief and can see the big picture—they look beyond your immediate requirements to design flexible buildings that will adapt with the changing needs of your business.</p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 109%;text-align: justify;">Architects solve problems creatively—when they are involved at the earliest planning stage, they gain more opportunities to understand your business, develop creative solutions, and propose ways to reduce costs.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">If we replaced the word ‘buildings’ with ‘information systems’ many systems architects and software architects would happily sign up to this definition of what they do. There are certain key features in these two sentences that apply as much to systems architecture as to the architecture of buildings.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_765.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Systems architects act on behalf of the client. Part of their role is to understand the client’s business and how that business can best be supported by an information system. However, the client may make conflicting demands on the new information system, and part of the systems architect’s role is to resolve those conflicts.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_766.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Systems architecture addresses the big picture. The architecture of an information system is a high-level view of the system: it is modelled in terms of the major components and the way they are interconnected; it does not normally address the detailed design of the system, though it may set standards to be applied.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_767.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If flexibility is important, then systems architects will produce an architecture that is intended to deliver this quality. In the current climate of rapid change in the business environment, flexibility is often cited as a reason for adopting certain types of systems architecture. However, there are other qualities of information systems that may be more important for a particular client, in which case those qualities will be addressed by the architecture.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_768.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark615">Systems architects are concerned with solving problems. In information systems development, problems manifest themselves in terms of risks to the success of the project. The reason that the Unified Process is architecture-centric is that by concentrating on the architecture and making architectural decisions early in the project lifecycle, the risks can be reduced or mitigated.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_769.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Reducing costs is not a primary objective of systems architects. However, proposing unnecessarily expensive solutions never wins anyone any friends, and producing an explicit architecture for a new system means that the specific needs of that system are addressed and unnecessary features eliminated. It also means that risks are tackled early in the project lifecycle and that the chance is minimized of discovering late in the project that the new system will not meet some requirement, with the need for costly design changes or reworking.</p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Of these, probably the most important is that architecture is about the big picture. Analysis is inevitably about detail: the business analyst needs to understand and document every requirement in a clear and unambiguous way; the systems analyst must consider use cases and other requirements and translate them into a complete model of the classes necessary to support those use cases, their attributes and responsibilities or operations and a first-cut view of how instances of those classes will interact. Design is about translating every aspect of the analysis model into a design model that will effectively implement the requirements: the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">designer must consider the type of every attribute and design each operation to take the necessary parameters, return the right value and be efficient in its working. Architecture, on the other hand, looks at the large-scale features of the system and how those features work together as a whole: the architect groups classes together into packages, models the system as a set of interacting components and considers what platforms to deploy those components on in order to deliver the required qualities of the system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are a number of different views of architecture in the development of information systems. Our focus here is on systems architecture and software architecture. In Section 13.4 we discuss enterprise architecture and technical architecture and their relationship with systems and software architectures.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1183" class="a">In their book on large-scale software architecture, Garland and Anthony </a><a href="part38.htm#bookmark1208" class="a">(2003) use the definition of architecture from the Institute of Electrical and Electronics Engineers (IEEE) standard IEEE 1471–2000 (</a>IEEE, 2000). This provides the following definitions of key terms.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_770.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">System <span class="p">is a set of components that accomplishes a specific function or set of functions.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_771.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark616">Architecture  </a><a href="part23.htm#bookmark672" class="a">is  the  fundamental  organization  of  a  system  embodied  in  its components, their relationships to each other and to the environment, and the principles guiding its design and evolution.</a><a href="part23.htm#bookmark672" class="s32">1</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_772.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_773.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Architectural description <span class="p">is a set of products that document the architecture. </span>Architectural view <span class="p">is a representation of a particular system or part of a system from a particular perspective.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_774.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Architectural viewpoint <span class="p">is a template that describes how to create and use an architectural view. A viewpoint includes a name, stakeholders, concerns addressed by the viewpoint, and the modelling and analytic conventions.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Given this definition of architecture, then <i>software architecture </i>is the organization of a system in terms of its software components, including subsystems and the relationships and interactions among them, and the principles that guide the design of that software system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1110" class="a">The IEEE definition is important because it stresses the fact that the same system can be shown in different views that emphasize different aspects of that system. Bass et al., </a>(2003) point out that architecture is often defined as something like ‘the overall structure of the system’, but criticise this because it implies that a system has only a single structure. They suggest asking anyone who takes this position exactly which structure of the system the architecture represents.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark617" class="a">Soni et al. (1995) identify four different aspects of software architecture, which are shown in </a>Fig. 13.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="132" alt="image" src="Image_775.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part38.htm#bookmark1298" class="s96" name="bookmark617">Figure 13.1 </a><a href="part38.htm#bookmark1298" class="s33">Four aspects of software architecture according to Soni et al. (adapted from Weir and Daniels, 1998).</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In terms of object-oriented development, the conceptual architecture is concerned with the structure of the static class model and the connections between the components of the model. The module architecture describes the way the system is divided into subsystems or modules and how they communicate by exporting and importing data. The code architecture defines how the program code is organized into files and directories and grouped into libraries. The execution architecture focuses on the dynamic aspects of the system and the communication between components as tasks and operations execute.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1222" class="a">The Rational Unified Process uses five views of the system, known as the ‘4 + 1 views’ (Kruchten, </a>2004). The four views are the <i>logical view</i>, the <i>implementation view</i>, the <i>process view </i>and the <i>deployment view</i>. The one view that ties them all together is the <i>use case view</i><a href="part23.htm#bookmark618" class="a">. These five views are explained in </a>Fig. 13.2.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="241" alt="image" src="Image_776.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark618">Figure 13.2 </a><span class="s21">The 4 + 1 views.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">These five views conform to the IEEE 1471 definition of what constitutes a view. They provide a description of the system from a particular perspective. The static structural relationships between classes and packages in the logical view present a different aspect of the system from the dynamic relationships between runtime processes in the process view. A single diagram or model cannot easily combine both these perspectives, let alone all five.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Different views are like different maps of a country. It is possible to find maps that show the physical topography—mountains, hills, rivers and lakes; maps that show the human geography</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">—towns, cities and the road and rail networks; maps that show the land use—farming, woodland, industry and human settlements; and maps that show schematically the volume of transport flow between major conurbations. However, trying to combine all these views of the country in a single map would make it confusing and difficult to understand.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark619">Maps conform to particular conventions for how they represent the geography of a country. For example, the physical topography is shown using contour lines, colour or shading, or some combination of these three, to represent the height of features and the location of water. Clearly, models that represent different views of a system must adopt some conventions for the different features that are shown in the model. The use of conventions makes it possible for the systems architect to communicate with stakeholders about the system and to provide guidance to designers and developers. A set of conventions for drawing architectural models is known as an </a><i>architecture description language </i><a href="part38.htm#bookmark1110" class="a">(ADL). Bass et al. </a><a href="part38.htm#bookmark1243" class="a">(2003) use UML as an ADL. UML 2.0 has specific features that have been added and adapted in order to make it more suitable for modelling architectures as well as producing analysis and design models. The UML 2.0 Request for Proposals (OMG, </a>2000), which solicited proposals for the changes that should be made to the specification, had as one of its specific objectives the following:</p><p class="s21" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 109%;text-align: left;">Enable the modeling of structural patterns, such as component-based development and the specification of run-time architectures.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This has resulted in the introduction of composite structure diagrams and changes to the component diagram notation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="343" height="25" alt="image" src="Image_777.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.3 </a><a href="part4.htm#bookmark4" class="s29">Why Produce Architectural M odels?</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.3 </a><a href="part4.htm#bookmark4" class="s29">Why Produce Architectural M odels?</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.3 </a><a href="part4.htm#bookmark4" class="s29">Why Produce Architectural M odels?</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark620">A software architect uses architectural models based on different views in order to reason about the proposed system and the way it will operate from different perspectives. In particular,</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1110" class="a">this makes it possible to assess how well the system will deliver the non-functional requirements. Bass et al. </a>(2003) do not like the term non-functional requirements. They argue that what they term <i>quality attributes </i>of a system, such as performance, security or fault tolerance, are intimately bound up with the behaviour of the system and the way that it responds to inputs. They believe that defining a set of non-functional requirements that are somehow separate from the functional behaviour of the system is dangerous, as it implies that the functionality of the system can be addressed first and then the non-functional requirements can be tacked onto the system towards the end of the development process. We have used the term ‘non-functional requirements’ because it is widely understood and because it focuses attention during requirements gathering on all those aspects of how well the system will deliver the functionality. However, we do not believe that this is a licence to ignore such requirements until the end of the development process.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Development processes based on the Unified Process are architecture-centric. This means</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">that getting the architecture right is a priority, and this in turn means that from the start of the project the architects are trying to address the non-functional requirements of the system, because the architecture provides the framework for delivering these quality attributes of the system. Getting the architecture right early on is also about reducing the risks in the project. If one of the requirements of a new system is that it should be able to handle very large peak processing volumes (for example, in an online order processing system), then it is important to prove as soon as possible in the project that the architecture supports the achievement of these peak loads. If the early work addresses only the ability to process orders but does not ensure that the design can be scaled up to handle the peak loads, then there is always the risk that the fact that the system cannot handle the loads will not be discovered until late in the project, and that this will result in delays while the software is redesigned to cope with the peak volumes.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Using architectural models, the architect can assess the ability of the system architecture to</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark621" class="a">deliver quality attributes such as high performance. The way that the different views in the 4 + 1 view of the system can contribute to assessing performance is shown in </a>Fig. 13.3.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="308" alt="image" src="Image_778.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark621">Figure 13.3 </a><span class="s21">The contribution of the 4 + 1 views to assessing performance.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark621" class="a" name="bookmark622">It is important to realize that some of the features shown in Fig. </a>13.3 to increase performance will not contribute to the achievement of other quality attributes. For example, adding lightweight versions of classes will mean that for every business class there are two versions, and any change to the attributes of the business class means an associated change to the attributes of the lightweight version; this makes the code more complex to maintain. Similarly, reducing the number of components involved in a process may mean that</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">functionality that does not naturally belong together is grouped into the same component or subsystem, and this reduces the flexibility of the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="331" height="25" alt="image" src="Image_779.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.4  </a><a href="part4.htm#bookmark4" class="s29">Influences on System Architecture</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.4  </a><a href="part4.htm#bookmark4" class="s29">Influences on System Architecture</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.4  </a><a href="part4.htm#bookmark4" class="s29">Influences on System Architecture</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark623">The systems architect developing the architecture for a new system does not operate in isolation. In any organization there will be existing systems that will constrain and influence the architecture. Many large organizations are now developing or have developed an </a><i>enterprise architecture</i>, which provides a framework for all system development. An enterprise architecture links the design of the business to the information systems that are needed to support that business. Either as part of an enterprise architecture or as a separate framework, many organizations have technology standards or a <i>technical reference architecture </i>that lays down a set of technologies, often including specific products that are acceptable, and defines how they should be used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the following subsections, we explain each of these influences in turn and the effect that they have on the architecture. In Section 13.5 we explain the range of <i>architectural styles </i>that are typically applied within the organization’s information systems and that the architect can choose to adopt in developing new systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">13.4.1 <b>Existing systems</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In many cases, the architecture of a new system will be designed to conform to the existing systems in the organization. This applies to the technical aspects such as choice of operating system, database and programming language, and to the way in which the components of the new system will be chosen, designed and interconnected. An organization that has adopted Java 2 Enterprise Edition (J2EE) or Microsoft .NET for its systems will expect new systems to be developed to fit in with this framework. Frameworks such as J2EE and .NET are well documented in books and web resources, but any business that adopts them is also likely to maintain a set of technology standards or a technical reference architecture that explains how to use the framework in the particular company.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a">Where there are existing systems, any new system may be able to take advantage of reuse of components in those systems. This is particularly the case when the new system and the old share the same architecture. In </a><a href="part31.htm#bookmark1004" class="a">Chapter 8 we introduced the idea of reusable components, and we develop it further in </a>Chapter 20. Organizations that plan for software reuse will typically use some kind of searchable repository in which they store reusable assets. The OMG, the body that manages the UML standard, also maintains the standard for the <i>Reusable Asset Specification </i>(RAS), which provides a set of guidelines about the structure, content and description of reusable software assets. Products such as LogicLibrary’s Logidex and Select Asset Manager from Select Business Solutions provide tools to help manage collections of components.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Heritage systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark624">Sometimes the existing systems may not provide a pattern for development of new systems. The technologies that were used to develop them may be out of date and difficult to support. The systems may still be doing a good job of supporting the business, but a decision has been made to adopt new technologies. The term </a><i>heritage system </i>is sometimes used in preference to legacy system to describe a system that uses out-of-date technology but is still delivering a clear benefit to the business or is key to its operations. If a heritage system is not being replaced, the new system may need to access data from it via some kind of interface. <i>Enterprise Application Integration </i>(EAI) tools are software tools that connect to systems in order to integrate them with one another. If the heritage system uses a well-known technology, there is likely to be an <i>adapter </i>available that will connect it to the EAI tool and enable the EAI tool to extract data from the old system and make it available to the new or pass data into it in order to use its functionality.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S ervices</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A technique for connecting to heritage systems that is growing in popularity is to wrap them in a layer of software that exposes the required functionality as <i>services</i>. <i>Web services </i>are the most recent technique applied to this problem, but the idea of a <i>Service-Oriented Architecture </i>(SOA) has been around for longer than the Web.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark625" class="a">The wrapper acts as a service proxy, so that it looks the same as other services to the client systems that invoke operations on the service, as shown in </a>Fig. 13.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="518" height="53" alt="image" src="Image_780.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark625">Figure 13.4 </a><span class="s21">Wrapping a legacy system as a service.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There may be many kinds of interface to legacy systems. Sometimes they have been written to provide an Application Programming Interface (API), in which case it may be possible to use this, although there may be a limited choice of programming languages to use. Often they do not have an API, but may provide some other kind of interface: they listen on a TCP/IP socket for connections, or they check for files placed in a certain directory and treat the file as input. Sometimes the only way to access a legacy system is for the wrapper to pretend to be a terminal (<i>terminal emulation</i>) and connect to it and send text and terminal codes as though a user were typing the data in, and then to read the data that comes back and extract what is required from the mix of prompts, actual data values and control sequences. This is known as <i>screen-scraping</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Reverse-engineering and model-driven architecture</p><p class="s13" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Model-Driven Architecture <span class="p">(MDA) is one of the reasons for some of the changes that were made to UML to produce V ersion 2.0. The idea of MDA is to separate the business and application logic of a system from the underlying platform technology. This abstract view of what the system must do is known as a </span>platform-independent model <span class="p">(PIM). The PIM is then combined with a definition of the platform architecture in order to produce a </span>platform-specific model <span class="p">(PSM) that can be built and executed on a particular platform. In order to produce a PIM, it is necessary to be able to specify actions that must be carried out within a system in a precise and verifiable way. Using this approach, it should be possible to build a platform- independent specification of a system and then, using different standard mappings, to transform it into a platform-specific model. The PSM is then further transformed to implementation code using automated tools that are already available for building software from models. A single PIM could thus be implemented in different ways: J2EE, .NET, CORBA.</span></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><a name="bookmark626">The OMG also has an initiative to promote MDA. UML is central to the MDA initiative.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Although earlier versions of UML provided ways of modelling structures (class diagrams), interaction (sequence diagrams) and lifecycles (state machine diagrams), the specification of actions in activity diagrams was not up to the task of precisely defining how classes should carry out operations. The developers of UML 2.0 have added a precise <i>action semantics </i>to the language. Combined with the notation of activity diagrams (which have also been defined more precisely in UML 2.0), this is intended to make UML the language of choice for producing PIMs.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As well as creating applications by transforming PIMs, the OMG also promotes the idea of reverse-engineering existing applications into PIMs. The idea is that if the business and application logic of a legacy system can be separated from the implementation details, and represented in an abstract specification language (UML with action semantics), then that PIM can then be used to re-implement the functionality of the system on a different, more modern platform. Products such as ArcStyler from InteractiveObjects not only provide a way of producing implementations from PIMs, but also of reverse-engineering existing application code into a PIM.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">13.4.2 <b>Enterprise architectures</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In large, complex organizations, particularly those that operate in many countries and have different divisions of the business that address different markets, there is a risk that system development will be unco-ordinated. Indeed, there is a risk that nobody will have an overall understanding of the business, let alone the systems that support it. When a project for a new system is proposed, it is difficult to analyse the effect of that new system. Q uestions that might be asked include the following.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_781.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_782.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">How does the system overlap with other systems in the organization? How will the system need to interface with other systems?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_783.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_784.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Will the system help the organization to achieve its goals? Is the cost of the system justified?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1306" class="a">Enterprise architectures provide a way of modelling the enterprise and aspects of the way it conducts business and of driving these concepts down into the practical issues of how the information systems are intended to support the business. V arious US federal government departments have created their own enterprise architecture frameworks. Outside government, the most widely known framework is the Z achman framework (Z achman, </a><a href="part38.htm#bookmark1278" class="a">1987), developed originally by John Z achman, and extended in collaboration with John Sowa (Sowa and Z achman, 1992). The framework has undergone a process of evolution since then, </a><a href="part38.htm#bookmark1308" class="a">described by Z achman himself </a><a href="part38.htm#bookmark1307" class="a">(2009), and a current concise definition is available on the Z achman International website (Z achman, </a>2008).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The Z achman framework seeks to build explicit models of the enterprise from two views. The first asks the questions: What? How? Where? Who? When? and Why? The second looks at the system at different levels, from the most conceptual, business view down to the view of the actual implemented system. The two dimensions are usually viewed as a matrix and the values that fill the thirty-six cells in the matrix are the actual models of aspects of the enterprise at different levels and from different perspectives.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark627">The task of the </a><i>enterprise architect </i>is to build up a total picture of the enterprise using these categories. This total picture of the enterprise and its systems supports the process of ensuring that any IT investment is aligned to the goals of the business. Clearly this is a daunting task for a large organization, and one of the criticisms of the Z achman framework is that it is a heavyweight approach to enterprise architecture.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In an organization that has adopted any kind of enterprise architecture framework, that framework should be the starting point for identifying constraints on the architecture of new systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">13.4.3 <b>Technical reference architectures</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Whereas enterprise architectures address the entire organization and its systems, <i>technical reference architectures </i>focus on the technology that is used within the enterprise, the standards for the technologies to apply and guidance on how to apply that technology. This may be in terms of a standards document, or a list of approved technologies or architectural models that show how different technologies should be applied in a typical system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1287" class="a">For organizations that do not have the time or resources to develop their own framework for technology standards, The Open Group produced The Open Group Architecture Framework (TOGAF) in 1995. The current version is 9.0 (</a>The Open Group, 2009).</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">TOGAF consists of three main parts.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_785.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The Architecture Development Method describes an approach for developing enterprise IT architectures.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_786.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The Enterprise Continuum shows the continuum of architectures from a general foundation architecture to a specific architecture for the particular organization.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_787.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The Resources section provides a range of useful information and examples of architectural patterns, principles and other guidance.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The Open Group also maintains an online Standards Information Base (SIB) that lists hundreds of IT standards categorized according to the building blocks in the Foundation Architectures model.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="213" height="25" alt="image" src="Image_788.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.5  </a><a href="part4.htm#bookmark4" class="s29">Architectural Styles</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.5  </a><a href="part4.htm#bookmark4" class="s29">Architectural Styles</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.5  </a><a href="part4.htm#bookmark4" class="s29">Architectural Styles</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark628">Architects designing buildings do not start from scratch every time they are given a new commission. They design buildings that are similar to others that they or other architects have built previously, and they learn what works and what does not. Systems architects are very similar: they design systems that conform to the prevailing standards, and fashions in systems architecture come and go, like flying buttresses on Gothic churches or lifts on the outside of buildings.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In systems architecture, the term <i>architectural styles </i><a href="part38.htm#bookmark1110" class="a">is used to apply to these ways of designing systems that conform to the prevailing fashion. Often these fashions are the result of changes in technology: for example, until the advent of the PC, it would not have been possible to implement client–server system architectures using PCs connected to mini- computers. Architectural styles also apply to software architecture. Bass et al. </a><a href="part38.htm#bookmark1129" class="a">(2003) describe five main types: independent components, data flow, data centred, virtual machine, and call and return, each with subtypes. Each style has characteristics that make it more or less suitable for certain types of application. We will consider some of the major alternatives. It is worth noting that software architectures have been documented in the patterns form by </a><a href="part38.htm#bookmark1266" class="a">Buschmann et al. (1996) and </a>Schmidt et al. (2000) amongst others.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark629">13.5.1 </a><b>Subsystems</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A subsystem typically groups together elements of the system that share some common properties. An object-oriented subsystem encapsulates a coherent set of responsibilities in order to ensure that it has integrity and can be maintained. For example, the elements of one subsystem might all deal with the human–computer interface, the elements of another might all deal with data management and the elements of a third may all focus on a particular functional requirement.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The subdivision of an information system into subsystems has the following advantages.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_789.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">It produces smaller units of development.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_790.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_791.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">It helps to maximize reuse at the component level. It helps the developers to cope with complexity.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_792.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_793.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">It improves maintainability. It aids portability.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark492" class="a">Each subsystem should have a clearly specified boundary and fully defined interfaces with other subsystems. A specification for the interface of a subsystem defines the precise nature of the subsystem’s interaction with the rest of the system but does not describe its internal structure (this is a high-level use of contracts, which are described in Chapter </a>10). A subsystem can be designed and constructed independently of other subsystems, simplifying the development process. Subsystems may correspond to increments of development that can be delivered individually as part of an incremental lifecycle (if the developers are using the spiral lifecycle model or an iterative and incremental approach such as the Unified Process).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Dividing a system into subsystems is an effective strategy for handling complexity. Sometimes it is only feasible to model a large complex system piece by piece, with the subdivision forced on the developers by the nature of the application. Splitting a system into subsystems can also aid reuse, as each subsystem may correspond to a component that is suitable for reuse in other applications. A judicious choice of subsystems during design can reduce the impact on the overall system of a change to its requirements. For example, consider an information system that contains a presentation subsystem that deals with the human–computer interface (HCI). A change to the data display format need not affect other subsystems. Of course there may still be some changes to the requirements that affect more than one subsystem. The aim is to localize the consequences of change, so that a change in one subsystem does not trigger changes in other subsystems (sometimes referred to as the ripple effect). Moving an application from one implementation platform to another can be much easier if the software architecture is appropriate. An example of this would be the conversion of a Windows application so that it could run in a Unix environment. This would require changes to the software that implements the human–computer interface. If this is dealt with by</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">specialized subsystems then the overall software change is localized to these subsystems. As a result, the system as a whole is easier to port to a different operating environment.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Each subsystem provides services for other subsystems, and there are two different styles of communication that make this possible. These are known as <i>client–server </i>and <i>peer-to-peer </i><a href="part23.htm#bookmark630" class="a">communication and are shown in Fig. </a>13.5. The circles represent the interfaces exposed by the subsystems, and the dashed arrows represent dependencies on those interfaces.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Client–server communication requires the client to know the interface of the server subsystem, but the communication is only in one direction. The client subsystem requests services from the server subsystem and not vice versa. Peer-to-peer communication requires each subsystem to know the interface of the other, thus coupling them more tightly. The communication is two-way since either peer subsystem may request services from the other.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 85pt;text-indent: 0pt;text-align: left;"><span><img width="377" height="248" alt="image" src="Image_794.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark630">Figure 13.5 </a><span class="s21">Styles of communication between subsystems.</span><a name="bookmark631">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark630" class="a">In general, client–server communication is simpler to implement and to maintain, as the subsystems are less tightly coupled than they are when peer-to-peer communication is used. In Fig. </a><a href="part31.htm#bookmark1004" class="a">13.5 the subsystems are represented using packages that have been stereotyped to indicate their role. Component diagrams can be used to model logical subsystems, and deployment diagrams can be used to model the implementation of subsystems (see </a><a href="part31.htm#bookmark1004">Chapter 20).</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">13.5.2 <b>Layering and partitioning</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark632">There are two general approaches to the division of a software system into subsystems. These are known as </a><i>layering</i><a href="part23.htm#bookmark673" class="a">—so called because the different subsystems usually represent different levels of abstraction</a><span class="s41">2</span>—and <i>partitioning</i>, which usually means that each subsystem focuses on a different aspect of the functionality of the system as a whole. In practice both approaches are often used together on one system, so that some of its subsystems are divided by layering, while others are divided by partitioning.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Layered subsystems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark633" class="a">Layered architectures are among the most frequently used high-level structures for a system. A schematic of the general structure is shown in </a>Fig. 13.6.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Each layer corresponds to one or more subsystems, which may be differentiated from each other by differing levels of abstraction or by a different focus of their functionality. It works like this: the top layer uses services provided by the layer immediately below it. This in turn may require the services of the next layer down. Layered architectures can be either open or closed, and each style has its particular advantages. In a closed layered architecture a certain layer (say layer N) can only use the services of the layer immediately below it (layer N – 1). In an open layered architecture layer N may directly use the services of any of the layers that lie below it.</p><p style="padding-left: 126pt;text-indent: 0pt;text-align: left;"><span><img width="267" height="234" alt="image" src="Image_795.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark633">Figure 13.6 </a><span class="s21">Schematic of a layered architecture.</span><a name="bookmark634">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A closed architecture minimizes dependencies between the layers and reduces the impact of a change to the interface of any one layer. An open layered architecture produces more compact code since the services of all lower-level layers can be accessed directly by any layer above them without the need for extra program code to pass messages through each intervening layer. However, this breaks the encapsulation of the layers, increases the dependencies between layers and increases the difficulty caused when a layer needs to be changed.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1285" class="a">Networking protocols provide some of the best-known examples of layered architectures. A network  protocol  defines  how  computer  programs  executing  on  different  computers communicate with each other. Protocols can be defined at various levels of abstraction and each level can be mapped onto a layer. The OSI (Open Systems Interconnection) Seven Layer Model was defined by the International Organization for Standardization (ISO) as a standard architectural model for network protocols (Tanenbaum et al., </a><a href="part23.htm#bookmark636" class="a">2002). The structure provides flexibility for change since a layer may be changed internally without affecting other layers, and it enables the reuse of layer components. The OSI Seven Layer Model is illustrated in </a><a href="part23.htm#bookmark636">Fig. 13.7.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1129" class="a">Buschmann et al. </a>(1996) suggest that a series of issues need to be addressed when applying a layered architecture in an application. These include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_796.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">maintaining the stability of the interfaces of each layer</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_797.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_798.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_799.jpg"/></span></p><p class="s41" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="part23.htm#bookmark674" class="a" name="bookmark635">the construction of other systems using some of the lower layers variations in the appropriate level of granularity for subsystems</a>3<span class="p"> the further subdivision of complex layers</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_800.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">performance reductions due to a closed layered architecture.</p><p style="padding-left: 131pt;text-indent: 0pt;text-align: left;"><span><img width="254" height="395" alt="image" src="Image_801.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark636">Figure 13.7 </a><a href="part38.htm#bookmark1129" class="s33">OSI Seven Layer Model (adapted from </a><span class="s21">Buschmann et al., 1996).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 179pt;text-indent: 0pt;text-align: left;"><span><img width="125" height="169" alt="image" src="Image_802.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark637">Figure 13.8 </a><span class="s21">Simple layered architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark637" class="a">The OSI model has seven layers only because it covers every aspect of the communication between two applications, ranging from application-oriented processes to drivers and protocols that directly control network hardware devices. Many layered architectures are much simpler than this. </a>Figure 13.8 shows a simple example of a three layer architecture.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark637" class="a">The lowest layer of the architecture in Fig. </a>13.8 consists of data management library classes. The layer immediately above this, the data formatting layer, uses services that are provided by the data management library classes in order to get data from a database management system. This data is formatted before it is passed upwards to the application layer. Supposing this system were to be modified to allow it to use a different database management system, the layered architecture limits major changes to the data management library class layer with some possible changes to the data formatting layer.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1129" class="a">The following steps are adapted from Buschmann et al. </a>(1996) and provide an outline process for the development of a layered architecture for an application. Note that this does not suggest that the specification of a system’s architecture is a rule-based procedure. The steps offer guidelines on the issues that need to be addressed during the development of a layered architecture.</p><p class="s25" style="padding-top: 3pt;padding-left: 19pt;text-indent: -13pt;text-align: justify;">1. <span class="p">Define the criteria by which the application will be grouped into layers. A commonly used criterion is the level of abstraction from the hardware. The lowest layer provides primitive services for direct access to the hardware while the layers above provide more complex services that are based upon these primitives. Higher layers in the architecture carry out tasks that are more complex and correspond to concepts that occur in the application domain.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">2. <span class="p">Determine the number of layers. Too many layers will introduce unnecessary overheads while too few will result in a poor structure.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">3. <span class="p">Name the layers and assign functionality to them. The top layer should be concerned with the main system functions as perceived by the user. The layers below should provide services and infrastructure that enable the delivery of the functional requirements.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">4. <span class="p">Specify the services for each layer. In general it is better in the lower layers to have a small number of low-level services that are used by a larger number of services in higher layers.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">5. <span class="p">Refine the layering by iterating through steps 1 to 4.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">6. <span class="p">Specify interfaces for each layer.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">7. <span class="p">Specify the structure of each layer. This may involve partitioning within the layer.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">8.  <span class="p">Specify the communication between adjacent layers (this assumes that a closed layer architecture is intended).</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;"><a name="bookmark638">9.  </a><a href="part23.htm#bookmark675" class="a">Reduce the coupling between adjacent layers.</a><span class="s41">4</span><span class="p"> This effectively means that each layer should be strongly encapsulated. Where a client–server communication protocol will be used, each layer should have knowledge only of the layer immediately below it.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark639" class="a">One of the simplest application architectures has only two layers—the application layer and a database layer. Tight coupling between the user interface and the data representation would make it more difficult to modify either independently, so a middle layer is often introduced in order to separate the conceptual structure of the problem domain. This gives the architecture shown in </a>Fig. 13.9, which is commonly used for business-oriented information systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark640" class="a">A common four-layer architecture separates the business logic layer into application logic and domain layers, and this is illustrated in Fig. </a>13.10. The approach that has been adopted during the analysis activity of use case realization results in the identification of boundary, control and entity classes. It is easy to see that it is possible to map the boundary classes onto a presentation layer, the control classes onto an application logic layer and the entity classes on a domain layer. Thus from an early stage in the development of an information system some element of layering is being introduced into the software architecture. However, it is important to appreciate that as we move through design, the allocation of responsibility amongst these types of class may be adjusted to accommodate non-functional requirements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 179pt;text-indent: 0pt;text-align: left;"><span><img width="125" height="169" alt="image" src="Image_803.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark639">Figure 13.9 </a><span class="s21">Three layer architecture.</span></p><p style="padding-left: 179pt;text-indent: 0pt;text-align: left;"><span><img width="125" height="234" alt="image" src="Image_804.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark640">Figure 13.10 </a><span class="s21">Four layer architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark964" class="a">Separation of the application logic layer from the domain layer may be further justified because several applications share (or are likely to share) one domain layer, or because the complexity of the business objects forces a separation into two layers. It can also be used when the objects are physically distributed (see </a>Chapter 19). However, it must be emphasized that there is no perfect solution to this kind of design problem. There are only solutions that have different characteristics (perhaps different levels of efficiency or maintainability). A good design solution is one that balances competing requirements effectively.</p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1282" class="a" name="bookmark641">Layered architectures are used quite widely. J2EE (Sun Java Centre, </a><a href="part23.htm#bookmark676" class="a">2005) adopts a multi- tiered</a>5<span class="p"> approach and an associated patterns catalogue has been developed. The architecture has five layers (client, presentation, business, integration and resource tiers) and the patterns catalogue addresses the presentation, business and integration tiers.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Partitioned subsystems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark642" class="a">As suggested earlier, some layers within a layered architecture may have to be decomposed because of their intrinsic complexity. Figure </a>13.11 shows a four-layer architecture for part of Agate’s campaign management system that also has some partitioning in the upper layers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 49pt;text-indent: 0pt;text-align: left;"><span><img width="471" height="274" alt="image" src="Image_805.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark642">Figure 13.11 </a><span class="s21">Four-layer architecture applied to part of the Agate campaign management system.</span><a name="bookmark643">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this example the application layer corresponds to the analysis class model for a single application, and is partitioned into a series of subsystems. These subsystems are loosely coupled and each should deliver a single service or coherent group of services. The Campaign</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark677" class="a" name="bookmark644">Database layer provides access to a database that contains all the details of the campaigns, their adverts and the campaign teams. The Campaign Domain layer uses the lower layer to retrieve and store data in the database and provides common domain functionality for the layers above. For example, the Advert subsystem might support individual advert costing while the Campaign Costs subsystem uses some of the same common domain functionality when costing a complete campaign. Each application subsystem has its own presentation layer to cater for the differing interface needs of different user roles.</a><a href="part23.htm#bookmark677" class="s32">6</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A system may be split into subsystems during analysis because of the system’s size and complexity. However, the analysis subsystems should be reviewed during design for coherence and compatibility with the overall system architecture.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The subsystems that result from partitioning should have clearly defined boundaries and well-specified interfaces, thus providing high levels of encapsulation so that the implementation of an individual subsystem may be varied without causing dependent changes in the other subsystems. The process of identifying subsystems within a particular layer can be detailed in much the same way as for subsystem layers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">13.5.3 <b>M odel– View– Controller</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Many interactive systems use the Model–V iew–Controller (MV C) architecture. This structure was first used with Smalltalk but has since become widely used with many other object- oriented development environments. The MV C architecture separates an application into three major types of component: models that comprise the main functionality, views that present the user interface and controllers that manage the updates to models and views. This structure is capable of supporting user requirements that are presented through differing interface styles, and it aids maintainability and portability.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark645" class="a">It is common for the view of an information system that is required for each user to differ according to their role. This means that the data and functionality available to any user should be tailored to his or her needs. The needs of different types of user can also change at varying rates. For both these reasons it makes sense to give each user access to only the relevant part of the functionality of the system as a whole. For example, in the Agate case study many users need access to information about campaigns, but their perspectives vary. The campaign manager needs to know about the current progress of a campaign. She is concerned with the current state of each advertisement and how this impacts on the campaign as a whole—is it prepared and ready to run, or is it still in the preparation stage? If an advert is behind schedule, does this affect other aspects of the campaign? The graphic designer also needs access to adverts but he is likely to need access to the contents of the advert (its components and any notes that have been attached to it) as well as some scheduling information. A director may wish to know about the state of all live campaigns and their projected income over the next six months. This gives at least three different perspectives on campaigns and adverts, each of which might use different styles of display. The director may require charts and graphs that summarize the current position at quite a high level. The campaign manager may require lower level summaries that are both textual and graphical in form. The graphic designer may require detailed textual displays of notes with a capability to display graphical images of an advert’s content. Ideally, if any information about a campaign or an advert is updated in one view then the changes should also be immediately reflected in all other views. Figure </a>13.12 shows a possible architecture, but some problems remain.</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="540" height="211" alt="image" src="Image_806.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark645">Figure 13.12 </a><span class="s21">Multiple interfaces for the same core functionality.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The design of such varied and flexible user interfaces that still incorporate the same core functionality is likely to be expensive because elements of functionality may have been duplicated for different interfaces. This makes the software more complex and thus also more error prone. There is an impact on maintainability too, since any change to core functionality will necessitate changes to each interface subsystem.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">We repeat below some of the difficulties that need to be resolved for this type of application.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_807.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a name="bookmark646">The same information should be capable of presentation in different formats in different windows.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_808.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_809.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Changes made within one view should be reflected immediately in the other views. Changes in the user interface should be easy to make.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_810.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Core functionality should be independent of the interface to enable multiple interface styles to co-exist.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark642" class="a">While the four-layer architecture in Fig. </a>13.11 resolves some of these problems it does not handle the need to ensure that all view components are kept up to date. The MV C architecture solves this through its separation of core functionality (model) from the interface and through its incorporation of a mechanism for propagating updates to other views. The interface itself is split into two elements: the output presentation (view) and the input controller (controller).</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Figure 13.13 shows the basic structure of the MV C architecture.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><span><img width="445" height="192" alt="image" src="Image_811.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark647">Figure 13.13 </a><a href="part38.htm#bookmark1200" class="s33">General structure of Model–V iew–Controller (adapted from </a><span class="s21">Hopkins and Horan, 1995).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">The responsibilities of the components of an MV C architecture are listed below.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_812.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Model<span class="p">. The model provides the central functionality of the application and is aware of each of its dependent view and controller components.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_813.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">View<span class="p">. Each view corresponds to a particular style and format of presentation of information to the user. The view retrieves data from the model and updates its</span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">presentations when data has been changed in one of the other views. The view creates its associated controller.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_814.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Controller<span class="p">. The controller accepts user input in the form of events that trigger the execution of operations within the model. These may cause changes to the information and in turn trigger updates in all the views ensuring that they are all up to date.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_815.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Propagation mechanism<span class="p">. This enables the model to inform each view that the model data has changed and as a result the view must update itself. It is also often called the dependency mechanism.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark649" class="a">Figure </a>13.14 represents the capabilities offered by the different MV C components as they might be applied to part of the campaign management system at Agate.</p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark678" class="a" name="bookmark648">The operation update() in the AdvertV iew and AdvertController components triggers these components to request data from the CampaignModel component.</a>7<span class="p"> This model component has no knowledge of the way that each view and controller component will use its services. It need only know that all view and controller components must be informed whenever there is a change of state (a modification either of object attributes or of their links).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"><span><img width="453" height="386" alt="image" src="Image_816.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark649">Figure 13.14 </a><span class="s21">Responsibilities of MV C components, as applied to Agate.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The attach() and detach() operations in the CampaignModel component enable views and controllers to be added to the setOfObservers. This contains a list of all components that must be informed of any change to the model core data. In practice there would be separate views, each potentially with its own controller, to support the requirements of the campaign manager and the director.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark650" class="a">The interaction sequence diagram in Fig. </a>13.15 illustrates the communication that is involved in the operation of an MV C architecture. (The choice of message type—synchronous or asynchronous—shown in this diagram is only one of the possibilities that could be appropriate; the features of the implementation environment would influence the actual design decision.) An AdvertController component receives the interface event changeAdvert. In response  to  this  event  the  controller  invokes  the  modifyAdvert  operation  in  the CampaignModel object. The execution of this operation causes a change to the model.</p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="514" height="375" alt="image" src="Image_817.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark650">Figure 13.15 </a><span class="s21">MV C component interaction.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For example, the target completion date for an advertisement is altered. This change of state must now be propagated to all controllers and views that are currently registered with the model as active. To do this the modifyAdvert operation invokes the notify operation in the model, which sends an update message to the view. The view responds to the update message by executing the displayAdvert operation which requests the appropriate data from the model via the getAdvertData operation. The model also sends an update message to the AdvertController, which then requests the data it needs from the model.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One of the most important aspects of the MV C architecture is that each model knows only which views and controllers are registered with it, but not what they do. The notify operation causes an update message to all the views and controllers (for clarity, only one view and one controller are shown in the diagram, but interaction with the others would be similar). The update message from the model is in effect saying to the views and controllers: ‘I have been updated and you must now ensure that your data is consistent.’ Thus the model, which should be the most stable part of the application, is unaffected by changes in the presentation requirements of any view or controller. The change propagation mechanism can be structured so that further views and controllers can be added without causing a change to the model. Each of these may support different interface requirements but require the same model functionality. However, since views and controllers need to know how to access the model in order to get the information they require, some changes in the model will inevitably still cause changes in other components.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Other kinds of communication may take place between the MV C components during the operation of the application. The controller may receive events from the interface that require a change in the way that some data is presented to the user but do not cause a change of state. The controller’s response to such an event would be to send an appropriate message to the view. There would be no need for any communication with the model.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark651">13.5.4 </a><b>Architectures for distributed systems</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Distributed information systems have become more common as communications technology has improved and have also become more reliable. An information system may be distributed over computers at the same location or at different locations. Since Agate has offices around</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark964" class="a">the world, it may need information systems that use data that is distributed among different locations. If Agate grows, it may also open new offices and require new features from its information systems. An architecture that is suitable for distributed information systems needs also to be flexible so that it can cope with change. A distributed information system may be supported by software products such as distributed database management systems or object request brokers or may adopt a service-oriented architecture (these are discussed in </a><a href="part31.htm#bookmark964">Chapter 19).</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1129" class="a">A general </a><a href="part38.htm#bookmark1129" class="s40">broker </a><a href="part38.htm#bookmark1129" class="a">architecture for distributed systems is described by Buschmann et </a><a href="part23.htm#bookmark652" class="a">al. (1996). A simplified version of the broker architecture is shown in </a><a href="part38.htm#bookmark1129" class="a">Fig. </a><a href="part38.htm#bookmark1129">13.16.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: left;"><span><img width="344" height="167" alt="image" src="Image_818.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark652">Figure 13.16 </a><span class="s21">Schematic of simplified broker architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A broker component increases the flexibility of the system by decoupling the client and server components. Each client sends its requests to the broker rather than communicating directly with the server component. The broker then forwards the service request to an appropriate server. A broker may offer the services of many servers and part of its task is to identify the relevant server to which a service request should be forwarded. The advantage offered by a broker architecture is that a client need not know where the service is located, and it may therefore be deployed on either a local or a remote computer. Only the broker needs to know the location of the servers that it handles.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure 13.17 shows a sequence diagram for client–server communication using the broker architecture. In this example the server subsystem is on a local computer. In addition to the broker itself, two additional <i>proxy </i>components have been introduced to insulate the client and server from direct access with the broker. On the client side a ClientSideProxy receives the initial request from the client and packs the data in a format suitable for transmission. The request is then forwarded to the Broker which finds an appropriate server and invokes the required service via the ServerSideProxy.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="436" alt="image" src="Image_819.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark653">Figure 13.17 </a><a href="part38.htm#bookmark1129" class="s33">Broker architecture for local server (adapted from </a><span class="s21">Buschmann et al., 1996).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The ServerSideProxy then unpacks the data and issues the service request sending the service message to the Server object. The service operation then executes and on completion responds to the ServerSideProxy. The response is then sent to the Broker which forwards it to the originating ClientSideProxy. Note that these are both new messages and not returns. The reason for this is that a broker does not wait for each response before handling another request. Once its sendRequest activation has been completed, the broker will in all probability deal with many other requests and thus requires a new message from the ServerSideProxy object to cause it to enter a new activation. Unlike the broker, the ClientSideProxy has remained active; this then unpacks the message and the response becomes available to the Client as control returns.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark654" class="a">Figure </a>13.18 shows how the participants in this interaction can be allocated to different processes, with the client and its proxy running in one process thread, the broker in another and the server and its proxy in a third.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 103pt;text-indent: 0pt;text-align: left;"><span><img width="328" height="103" alt="image" src="Image_820.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark654">Figure 13.18 </a><a href="part23.htm#bookmark653" class="s33">Process allocation of components in </a><span class="s21">Figure 13.17.</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="187" alt="image" src="Image_821.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark655">Figure 13.19 </a><span class="s21">Schematic of broker architecture using bridge components.</span><a name="bookmark656">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 127pt;text-indent: 0pt;text-align: left;"><span><img width="263" height="136" alt="image" src="Image_822.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark657">Figure 13.20 </a><a href="part23.htm#bookmark655" class="s33">Process allocation of components in </a><span class="s21">Figure 13.19.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark655" class="a">Figure </a>13.19 shows a schematic broker architecture that uses <i>bridge </i><a href="part23.htm#bookmark657" class="a">components to communicate between two remote processors. Each bridge converts service requests into a network specific protocol so that the message can be transmitted. Figure </a>13.20 shows a possible allocation of these components to processes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">13.5.5 <b>Organization structures for architecture and development</b></p><p class="s41" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark679" class="a" name="bookmark658">Dividing a system into subsystems has benefits for project management. Each subsystem can be allocated to a single development team, which can operate independently of other teams, provided that they adhere to the interface requirements for their subsystem. Where a subsystem must be split between two development teams, there is a heavy communications overhead that is incurred in ensuring that the different parts of the subsystem are constructed to consistent standards. In such cases the structure of either the organization or of the software tends to change so that they become more closely aligned with each other; this helps to minimize the communications overhead and is sometimes known as Conway’s Law</a>8<a href="part38.htm#bookmark1153" class="a"> (Coplien, </a><span class="p">1995). If a subsystem that is being developed by more than one team is cohesive, and the way it is split between teams has no apparent functional basis, then the teams may coalesce in practice and operate as one. Teams that are working on the same subsystem are sometimes inhibited from merging, perhaps because they are located on different continents. The subsystem should then be treated as if it were two separate subsystems. An interface between these two new subsystems can be defined and the teams can then operate autonomously. Where the allocation of one subsystem to two teams is such that one team deals with one set of requirements and the other deals with a different set of requirements, the subsystem can also be treated as if it were actually two subsystems, with a defined interface between them.</span><a name="bookmark659">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="159" height="25" alt="image" src="Image_823.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.6  </a><a href="part4.htm#bookmark4" class="s29">Concurrency</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.6  </a><a href="part4.htm#bookmark4" class="s29">Concurrency</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.6  </a><a href="part4.htm#bookmark4" class="s29">Concurrency</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark660">In most systems there are many objects that do not need to operate concurrently but some may need to be active simultaneously. Object-oriented modelling captures any inherent</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark562" class="a">concurrency in the application principally through the development of interaction diagrams and state machines. The examination of use cases also helps with the identification of concurrency. There are several ways of using these models to identify circumstances where concurrent processing may be necessary. First, a use case may indicate a requirement that the system should be able to respond simultaneously to different events, each of which triggers a different thread of control. Second, if a state machine reveals that a class has complex nested states which themselves have concurrent substates, then the design must be able to handle this concurrency. The state machine for the class Campaign has nested concurrent states within the Active state (see </a>Fig. 11.20) and there may be the possibility of concurrent activity. In this particular example, the concurrent activity that occurs in the real world need not necessarily be represented as concurrent processing in the computerized information system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark661" class="a">In cases where an object is required to exhibit concurrent behaviour it is sometimes necessary to split the object into separate objects in order to avoid the need for concurrent activity within any one object. Concurrent processing may also be indicated if interaction diagrams reveal that a single thread of control requires that operations in two different objects should execute simultaneously, perhaps because of asynchronous invocation. This essentially means that one thread of control is split into two or more active threads. An example of this is shown in </a>Fig. 13.21.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 71pt;text-indent: 0pt;text-align: left;"><span><img width="413" height="266" alt="image" src="Image_824.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark661">Figure 13.21 </a><span class="s21">Concurrent activity in an interaction diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Different objects that are not active at the same time can be implemented on the same logical processor (and thus also on the same physical processor—this distinction is explained below). Objects that must operate concurrently must be implemented on different logical processors (though perhaps still on the same physical processor).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The distinction between logical and physical concurrency is as follows. There are a number of ways of simulating the existence of multiple processors using only a single physical processor. For example, some operating systems (Unix and Windows XP) allow more one than one task to appear to execute at the same time, and are thus called multi-tasking operating systems. In fact, only one task really takes place at any one time, but the operating system shares the processor between different tasks so quickly that the tasks appear to execute simultaneously. Where there are no tight time constraints a multi-tasking operating system can provide a satisfactory implementation of concurrency. But it is important to ensure that the hardware configuration of the computer can cope with the demands of multitasking.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark662" class="a">When there are tight time constraints a scheduler subsystem can be introduced that </a><a href="part23.htm#bookmark662">ensures that each thread of control operates within the constraints on its response time. Figure</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark662" class="a">13.22 illustrates a possible relationship between a scheduler and the other parts of a </a>system. Events that are detected by the I/O (input/output) subsystems generate interrupts in the scheduler. The scheduler then invokes the appropriate thread of control. Further interrupts may</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">invoke other threads of control and the scheduler allocates a share of physical processor time to each thread.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="475" height="287" alt="image" src="Image_825.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark662">Figure 13.22 </a><span class="s21">Scheduler handling concurrency.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Another way of implementing concurrency is to use a multi-threaded programming language (such as Java). These permit the direct implementation of concurrency within a single processor task. Finally, a multi-processor environment allows each concurrent task to be implemented on a separate processor.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">Most concurrent activity in a business information system can be supported by a multi-user environment. These are designed to allow many users to perform tasks simultaneously. Multi- user concurrent access to data is normally handled by a separate database management system (DBMS)—these are introduced briefly in Section 13.8.1 and are discussed in more detail in </a>Chapter 18.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="223" height="25" alt="image" src="Image_826.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.7  </a><a href="part4.htm#bookmark4" class="s29">Processor Allocation</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.7  </a><a href="part4.htm#bookmark4" class="s29">Processor Allocation</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.7  </a><a href="part4.htm#bookmark4" class="s29">Processor Allocation</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark663">In the case of a simple, single-user system it is almost always appropriate for the complete system to operate on a single computer. The software for a multi-user information system (all or part of it) may be installed on many computers that use a shared database server. More complex applications sometimes require the use of more than one type of computer, where each provides a specialized kind of processing capability for a specific subsystem. An information system may also be partitioned over several computers, because subsystems must operate concurrently, because some parts of the application need to operate in different locations (in other words, it is a distributed system), or because the processing load is greater than one processor can handle (in other words, the load must be balanced across multiple machines). Information systems that use the Internet or company intranets for their communications are now widespread. Such distributed information systems operate on diverse computers and operating systems.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The allocation of a system to multiple processors on different platforms involves the</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">following steps.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_827.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">The application should be divided into subsystems.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_828.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_829.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Processing requirements for each subsystem should be estimated. Access criteria and location requirements should be determined.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_830.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Concurrency requirements for the subsystems should be identified.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_831.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Each subsystem should be allocated to an operating platform—either general purpose (PC or workstation) or specialized (embedded micro-controller or specialist server).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_832.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_833.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Communication requirements between subsystems should be determined. The communications infrastructure should be specified.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The estimation of processing requirements requires careful consideration of such factors as event response times, the data throughput that is needed, the nature of the I/O that is required and any special algorithmic requirements. Access and location factors include the difficulties that may arise when a computer will be installed in a harsh operating environment such as a factory shop floor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="262" height="24" alt="image" src="Image_834.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.8  </a><a href="part4.htm#bookmark4" class="s29">System Design Standards</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.8  </a><a href="part4.htm#bookmark4" class="s29">System Design Standards</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.8  </a><a href="part4.htm#bookmark4" class="s29">System Design Standards</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark664">System design sets standards that will be applied in later design and development activities. In particular, these include standards that will apply to the design of the database, the design of the user interface and the construction standards that will apply to the program code that is written to implement the system.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">13.8.1 <b>Database design</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark665">Suitable data management approaches for an information system can vary from simple file storage and retrieval to sophisticated database management systems of various types. In some applications where data has to be accessed very rapidly, the data may be kept in main memory while the system executes. However, most data management is concerned with storing data, often large volumes, so that it may be accessed at a later stage either by the same system or by another.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">Database management systems (DBMS) provide various facilities that are useful in many applications and that make a DBMS the obvious choice for many applications. Once a decision has been made to use a DBMS, the most appropriate type must be selected. A relational DBMS is likely to be appropriate if there are large volumes of data with varying (perhaps ad hoc) access requirements. An object-oriented DBMS is more likely to be suitable if specific transactions require fast access or if there is a need to store complex data structures and there is not a need to support a wide range of transaction types. A third type of DBMS is emerging— the object-relational DBMS—that is similar to an object-oriented DBMS in its support for complex data structures, but that also provides effective querying facilities. These issues and the detailed design consequences of the choice of DBMS are explored further in </a>Chapter 18.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">13.8.2 <b>U ser interface design standards</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark777" class="a">Standards for the human–computer interface are an important aspect of the design activity, since it is with the interface that users actually interact. There are standard style guides for applications written to run on Windows PCs or on Apple Macs. Organizations may also have their own style guides that define the conventions to be used in designing windows and dialogues so that users will experience the same style of user interface in every system they use and can easily transfer their knowledge of how to use one system to another. Some characteristics of good dialogues and the subject of style guides for HCI are discussed in </a>Chapter 16.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">13.8.3 <b>Construction guidelines</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Construction guidelines may not appear relevant at this stage in a systems development project. However, they are pertinent to system design because there is a growing tendency for developers to use CASE environments that have code generation capabilities. It is also the case that when a rapid development approach or an iterative approach is followed, application</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">development will have begun while analysis and design on other parts of the system are still progressing.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark964" class="a">Construction guidelines will normally include advice on the naming of classes, of operations and of attributes, and where this is the case these guidelines are also applicable during the analysis activity. Wherever possible, consistent naming conventions should be enforced throughout the project since this makes it easier to trace an analysis class directly through to its implementation. Other guidelines for construction might relate to the use of particular software features (for example, using only standard language constructs in order to aid portability) and the layout of the code. These issues are addressed in more detail in </a><a href="part31.htm#bookmark964">Chapter 19.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="281" height="25" alt="image" src="Image_835.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.9  </a><a href="part4.htm#bookmark4" class="s29">Agate Software Architecture</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.9  </a><a href="part4.htm#bookmark4" class="s29">Agate Software Architecture</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.9  </a><a href="part4.htm#bookmark4" class="s29">Agate Software Architecture</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark270" class="a" name="bookmark666">In the case study chapters, </a><a href="part18.htm#bookmark361" class="a">A2, </a><a href="part23.htm#bookmark578" class="a">A3 and </a><a href="part16.htm#bookmark284" class="a">A4, we have developed the models for the Agate system. The initial package architecture was shown in </a><a href="part23.htm#bookmark667" class="a">Fig. A2.8. However, this does not reflect a proper layering or partitioning of the software architecture. We may begin with a four-layer architecture that separates responsibility for the user interface, the application logic, the domain classes and the database. A simple view of this is shown in </a>Fig. 13.23.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 179pt;text-indent: 0pt;text-align: left;"><span><img width="125" height="235" alt="image" src="Image_836.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark667">Figure 13.23 </a><span class="s21">Four-layer architecture for Agate.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark667" class="a">However, we know that Agate requires the system to be capable of distribution. One option would be to adopt a thin-client architecture. In this approach, all four of the layers shown in </a><a href="part23.htm#bookmark667">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark667" class="a">13.23 would be located on one or more servers, and the user interface would be generated as HTML and displayed in a browser. However, this would not give us the kind of interactivity that we have been modelling in our prototype user interfaces, which rely on a client program running on the users’ PCs. (Adding a rich Internet application (RIA) as the user interface in a browser would provide a similar separation of client and server to the one we have planned for.) So we need to decide where to split the system between the client side and the server side. The Agate Control package could be split into a client-side package that co-ordinates the user interface, playing the role of Controller, and a server-side package that orchestrates the business logic of the use cases and interacts with the domain classes. If we adopt this approach, we will break the closed layering of the architecture of Fig. </a>13.23. Both the client- side and the server-side classes will need to understand the structure of the entity objects in the domain package (Advert, Campaign, Client etc.). If we develop in Java, the jar file containing these classes will need to be located on the client as well as the server, even if their operations are not invoked on the client. One way to reduce this dependency is to use lightweight versions of the entity classes in the Agate Domain package. These are classes that have the attributes of the entity classes, but do not have any operations apart from constructors and those operations necessary to get and set attribute values. This is an</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark668" class="a">established pattern in J2EE systems, and is shown in Fig. </a>13.24. Note that as we move into design, the human readable package names that we have been using so far are replaced with package names that will map to Java packages or C# namespaces.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark669" class="a">Note that the dependency between the Agate Control Client package and the Agate V alue Objects package is no more than that, a dependency. It does not imply that there is some kind of communication across the network between the two. In fact if we implement the packages as Java packages, and deploy them, the value object package (com.agate.domain.vo) will exist in both the client process and the server process. This is shown in </a>Figure 13.25.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark931" class="a">We shall revisit this architecture in the case study </a>chapter A5, once we have considered in more detail the design of classes, the user interface and the database.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="355" alt="image" src="Image_837.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark668">Figure 13.24 </a><span class="s21">Possible package architecture for Agate, showing how it will be implemented as Java packages or C# namespaces.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 108pt;text-indent: 0pt;text-align: left;"><span><img width="316" height="136" alt="image" src="Image_838.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark669">Figure 13.25 </a><span class="s21">Process allocation for Agate.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="141" height="25" alt="image" src="Image_839.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.10  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.10  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">13.10  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1208" class="a" name="bookmark670">Systems and software architecture have aspects in common with the architecture of buildings, and architectural models are typically produced using different views, which address different aspects of the architecture. In information systems, ‘architecture is the fundamental organization of a system embodied in its components, their relationships to each other, and to the environment, and the principles guiding its design and evolution’ (IEEE, </a>2000). Many architects now use UML in order to produce architectural models of systems.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">One of the key concerns of architects is to ensure that the architecture of the system will enable it to meet the quality attributes (non-functional requirements) that are expected of it. The models allow them to reason about how well the proposed structures and relationships will support demands on performance, reliability, reusability and other quality attributes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The architecture of new systems is often constrained by existing systems, because they define either explicitly or implicitly the way in which systems are built within the organization, or because the new systems will have to interoperate with the old. There is a growing interest in wrapping up existing systems as services to support a service-oriented architecture, or in extracting the business logic from heritage systems using reverse-engineering to produce platform-independent models, and then deriving new implementations in more modern technologies from the models. The Model-Driven Architecture movement places UML at the centre of its work and many of the features that have been improved or added in UML 2.0 are there to support MDA.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Large organizations may mandate approaches to architecture development based on enterprise architecture or technical reference architectures that lay down models of the business and how it operates (in the former case) or of standard technologies to be applied (in the latter case). Experienced architects also draw on architectural styles, which act as architectural patterns and provide well understood ways of constructing the high-level architecture of new systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:348pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">13.1  <span class="s16">Give a definition of architecture in an information systems context.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 56pt;text-indent: -29pt;text-align: left;">13.2 <span class="s16">What is the difference between an architectural view and an architectural viewpoint?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.3  <span class="s16">What are the 4 + 1 views of architecture in the Unified Process?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.4 <span class="s16">What are the benefits of adopting an architecture-centric approach?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;text-indent: -29pt;text-align: left;">13.5 <span class="s16">How do existing systems influence the architecture of new systems in the same organization?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.6 <span class="s16">Explain the difference between a PIM and a PSM.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.7 <span class="s16">What is meant by enterprise architecture?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.8  <span class="s16">What are the advantages of dividing a system into a collection of subsystems?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 12pt;text-indent: -29pt;text-align: left;">13.9 <span class="s16">What is the difference between client–server and peer-to-peer communication between subsystems?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.10 <span class="s16">Why is an open layered architecture more difficult to maintain?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.11 <span class="s16">What are the disadvantages of the closed layered architecture?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;text-indent: -29pt;text-align: left;">13.12 <a href="part23.htm#bookmark642" class="s36">What advantages would there be if the Advert HCI subsystem in Fig. </a><span class="s16">13.11 were designed to have direct access to the Campaign Database layer?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">13.13 <span class="s16">What are the main differences between the MV C architecture and the layered and partitioned architecture?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 56pt;text-indent: -29pt;text-align: left;">13.14 <span class="s16">In what sense does a broker decouple two subsystems that need to communicate with each other? How does this work?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.15 <span class="s16">How do architectural divisions of systems help with project management?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;text-indent: -29pt;text-align: left;">13.16 <span class="s16">Why is it sometimes necessary to design information systems that have explicitly concurrent behaviour?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">13.17 <span class="s16">How should you go about allocating system tasks to processors?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:45pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">13.A <span class="s16">Compare Soni’s four aspects with the UP 4 + 1 views. What do they have in common and how do they differ?</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:140pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s35" style="padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">13.B <span class="s16">Consider a system that you use regularly. What, if anything, can you tell about the architecture of the system from the user’s perspective?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">13.C <span class="s16">Develop a series of steps for the identification of partitioned subsystems within a layer in a layered architecture. Use the process for the identification of layers described in Section 13.5.2 as a starting point. Highlight any significant differences that you feel exist between the two processes.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">13.D <span class="s16">Investigate a framework for enterprise architecture. What support is there for it in modelling tools?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">13.E <span class="s16">Suggest a suitable layered architecture with any necessary partitioning for the FoodCo case study by following the procedures defined above.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark671">Further Reading</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_840.png"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1110" class="s6">Bass et al. </a>(2003) is an updated version of their 1998 book, in which they have adopted UML as their architecture description language. The book mixes case studies from different kinds of projects with theory and practical guidance.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: left;"><a href="part38.htm#bookmark1183" class="s6">Garland and Anthony </a>(2003) provide an excellent and practical approach to developing software architectures using UML.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: left;"><a href="part38.htm#bookmark1129" class="s6">Buschmann et al. </a><a href="part38.htm#bookmark1266" class="s6">(1996) and Schmidt et al. </a>(2000) provide further details of the architectures discussed in this chapter and describe other interesting alternatives.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: left;"><a href="http://www.omg.org/mda/" class="s6" target="_blank">Details of the OMG’s MDA initiative can be found at </a><a href="http://www.zachmaninternational.com/" class="s6" target="_blank">www.omg.org/mda/. Z achman International (</a>www.zachmaninternational.com) provides information about the Z achman framework.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_841.png"/></span></p><p class="s1" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark672">1 From IEEE </a><i>Standard 1471–2000</i>, Copyright 2000 IEEE.<a name="bookmark673">&zwnj;</a></p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark674">2 Or layers of service.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a name="bookmark675">3 The context determines an appropriate size for the subsystems. Granularity refers to the size of the elements of a larger whole, fine-grained being small elements and coarse-grained being large.</a></p><p class="s1" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark676">4 For more details of what we mean by coupling, see Section 14.4.3.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark677">5 These use the term tier as broadly equivalent to layer.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a name="bookmark678">6 This example is for illustrative purposes only. Our analysis class model for Agate is too small to justify this kind of partitioning in practice.</a></p><p class="s1" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark679">7 In this example the CampaignModel will hold details of campaigns and their adverts.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">8 This is an example of an organizational pattern.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_842.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:350pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark680">LEARNING OBJECTIVES</a><a name="bookmark681">&zwnj;</a></p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_843.jpg"/></span></p></td></tr><tr style="height:87pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;padding-right: 254pt;text-indent: 0pt;text-align: left;">how to design attributes how to design operations how to design classes</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">how to design associations</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the impact of integrity constraints on design.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_844.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="77" alt="image" src="Image_845.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark595" class="a" name="bookmark682">The design activity is concerned with turning an analysis model into a specification of a system that can be given to a programmer to build, or that can be used in a modelling tool to generate code in a programming language like Java or C# . System design provides a framework for this. Detailed design is about examining the classes and the associations between them, deciding how well they will perform in a live system and making changes to improve the analysis class model in a way that meets the criteria for good design discussed in </a>Chapter 12.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Design adds detail to the analysis model: the type and visibility of each attribute must be decided, and the visibility and signature of each operation must be determined. Design can also result in changes to the classes and associations that emerge from analysis: classes may be merged or split, new associations may be added, the direction in which associations can be navigated must be decided, and the location of operations may be changed in order that classes can meet their responsibilities effectively. Design will add new classes: these classes will support human–computer interaction and allow the data in attributes to be stored in a database.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="483" height="24" alt="image" src="Image_846.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark684">14.2  </a><a href="part4.htm#bookmark4" class="s29">What Do We Add in Object-Oriented Detailed Design?</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark684">14.2  </a><a href="part4.htm#bookmark4" class="s29">What Do We Add in Object-Oriented Detailed Design?</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark684">14.2  </a><a href="part4.htm#bookmark4" class="s29">What Do We Add in Object-Oriented Detailed Design?</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark683">The guiding principle in all of this is how well the chosen design allows classes to interact with one another to deliver the functionality of the system. However, there are also some other principles that can be applied to help in producing a good design, notably those associated with coupling and cohesion. There is also a view that changes to the analysis model should be kept to a minimum, as the analysis model represents a coherent and consistent description of the classes necessary to meet the requirements. Integrity constraints that were identified in analysis must be adhered to if the system is to maintain its consistency and integrity. So there is a balance to be struck between retaining the structures that were discovered in analysis and making sure that they will support a working system.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In detailed design, we add to the analysis model at two levels. At the level of the class model, we add new classes to support inputs, outputs, processes and file or database structures. At the level of individual classes, we add new attributes, operations and associations to support the interaction between them and to meet criteria for good design. In this short section we briefly explain what we add to the class model. This is then dealt with in more detail in the following chapters. The rest of this chapter then addresses what we add to the analysis class model.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The analysis activities of a project will have identified concepts in the business and elaborated them in terms of classes; use cases will have been identified and described. The classes that have been included in the class model will reflect the business requirements but they will include only a very simplistic view of the other classes that are required to handle the interface with the user, the interface with other systems, the storage of data and the overall co- ordination of the classes into programs. These other classes will be added in design with greater or lesser degrees of detail depending on the hardware and software platform that is being used for the new system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1138" class="a">Coad et al. </a>(1997) suggested that in addition to the problem domain or business classes, developing a detailed design involves three further elements. These are:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_847.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_848.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_849.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">human interface data management system interaction.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark814" class="a">Chapter 16 discusses the principles of how to design good human–computer interaction, while Chapter </a><a href="part23.htm#bookmark868" class="a">17 deals with the design of interface classes. Chapter </a><a href="part23.htm#bookmark738" class="a">18 addresses the design of data management. As we add the additional classes to handle these aspects of the system, we also add control classes that manage the interaction between other classes in the system. We also use design patterns, which are explained in </a>Chapter 15, in order to make best use of other designers’ experience and good practice in the design of the way our classes interact.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="353" height="25" alt="image" src="Image_850.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.3  </a><a href="part4.htm#bookmark4" class="s29">Attribute and Operation Specification</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.3  </a><a href="part4.htm#bookmark4" class="s29">Attribute and Operation Specification</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.3  </a><a href="part4.htm#bookmark4" class="s29">Attribute and Operation Specification</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark685">As we stated above, one of the tasks in detailed design is to add more detail to the specification of attributes and operations in the classes that analysis has identified. This includes the following:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_851.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_852.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_853.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">deciding the data type of each attribute; deciding how to handle derived attributes; adding primary operations;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_854.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_855.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">defining the signature of operations including the types of parameters; deciding the visibility of attributes and operations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark686">14.3.1 </a><b>Attribute data types</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">During analysis we have not considered in detail the data types of the attributes, although on occasions it may be useful to record data type information in analysis. For example, an attribute temperature may be a floating-point data type if it holds the temperature in Centigrade or it may be an enumerated data type if it holds one of the values ‘hot’, ‘warm’ or ‘cold’. The attribute has a different meaning and would be manipulated differently for each of these data types and it is important to determine during analysis which meaning is appropriate and meets the users’ needs. Most CASE tools require the user to choose a data type for each attribute as it is added to the model or will use a default type such as int or string.</p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark732" class="a" name="bookmark687">Common primitive data types include Boolean (true or false), character (any alphanumeric or special character), integer (whole numbers) and floating-point (decimal numbers).</a>1<span class="p"> In most object-oriented languages more complex data types such as string and date are available, and others such as money or name can be constructed from the primitive data types or may be available in standard libraries. An attribute’s data type is declared in a UML class diagram using the following syntax:</span></p><p style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">&lt;<i>property</i>&gt; <i>::</i>= <i>[ </i>&lt;<i>visibility</i>&gt;<i>] [ ‘ /’] </i>&lt;<i>name</i>&gt; <i>[ ‘ :’ </i>&lt;<i>prop-type</i>&gt;<i>] [ ‘ [ ’ </i>&lt;<i>multiplicity</i>&gt; <i>‘ ] ’] [ ‘ </i>=<i>’ </i>&lt;<i>default</i>&gt;<i>]</i></p><p class="s13" style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">[ ‘ { ’ <span class="p">&lt;</span>property-string <span class="p">&gt; </span>[ ‘ ,’ <span class="p">&lt;</span>property-string <span class="p">&gt;</span>] * ‘ } ’]</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The visibility is an indicator of whether other classes can access the value, and is explained in more detail in Section 14.3.5. The value ‘/’ is a literal that denotes a derived attribute (see Section 14.3.2). The name is the attribute name, the prop-type is its data type, the default is the default value that the attribute is set to when an instance of the class is first created, and the property-string describes a property of the attribute, such as constant or fixed. The characters in single quotes are literals. The attribute name is the only feature of its declaration that is compulsory.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark688" class="a">Figure </a>14.1 shows the class BankAccount with attribute data types declared. The attribute balance in a BankAccount class might be declared with an initial value of zero using the syntax:</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">balance: Money = 0.00</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The attribute accountName might be declared with the property string indicating that it must have a value and may not be null using the syntax:</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">accountName: String {not null}</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Attribute declarations can also specify the multiplicity of the attribute in much the same way as the multiplicity of an association may be specified. For example, an Employee class might include an attribute to hold a list of qualifications that would be declared using the syntax:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">qualification: String[0..10]</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This declaration states that the attribute qualification may hold from zero to 10 qualifications.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 139pt;text-indent: 0pt;text-align: left;"><span><img width="233" height="281" alt="image" src="Image_856.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark688">Figure 14.1 </a><span class="s21">BankAccount class.</span><a name="bookmark689">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.3.2 <b>Derived attributes</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The values of some attributes can be derived from other attributes in the same class or other classes. They may have been identified in analysis, but will not be implemented as attributes in design. They will have an operation to get the value, but not to set it (see Section 14.3.3). It is necessary to decide how these values will be calculated. There are two choices: to calculate them when they are needed; or to calculate them whenever one of the values on which they depend changes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark688" class="a">In Fig. </a>14.1, the attribute availableBalance is a <i>derived attribute </i>indicated in UML by the symbol ‘/’ before the name of the attribute. The value of this attribute might be defined as the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">sum of the balance and the overdraftLimit attributes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">When  we  need  the  value  of  the  availableBalance  attribute,  the  operation getAvailableBalance() might include a line of code to add balance and overdraftLimit and return the result. Alternatively, every time that we update the balance or overdraftLimit attribute values, we could include a line of code to update the availableBalance value at the same time.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Typically the choice will depend on two factors, firstly how many operations may affect the value of the derived attribute and whether they are likely to change, and secondly how difficult it is to calculate the derived attribute from scratch compared to calculating it when the attributes it depends on change.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark690">In our example, it is only necessary to change the availableBalance value when the balance or the overdraftLimit values change. However, the bank may change the way it calculates the availableBalance value to include any debit transactions that have been recorded during the day but not processed against the account balance: for example, cash withdrawals from automated teller machines (ATMs) or payments by debit card. (Banks typically process all such transactions overnight in a batch process and update the account balance, but don’t want customers to withdraw more money than they have funds available.) So operations that record unprocessed transactions need to be updated to change the availableBalance value. Now when we process a debit transaction overnight, we also have to check whether it is one of the types (ATM and debit card) that have already been deducted from the availableBalance value or not. This is making the system more complicated, and we have to remember (document) what operations affect availableBalance. In this case, it is almost certainly simpler to calculate availableBalance when we need it.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">However, if a customer has hundreds of unprocessed debit transactions in a day, and the</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">only way to work out the availableBalance value is to get the current balance of the account and then deduct all the unprocessed debit transactions and add the overdraft limit, it would require a lot of processing each time the value is required. If the alternative is to take the existing availableBalance value and deduct the value of a debit transaction when it occurs, then we might choose the second approach, as it is simpler and quicker, though it adds a slight overhead to each transaction. However, it makes the system more complicated. We might want to add a new attribute called committedAmount that holds the value of all unprocessed debit transactions, and is updated each time a customer withdraws cash or uses their debit card. Calculating availableBalance then becomes a matter of adding the balance and the overdraftLimit and deducting the committedAmount. When the unprocessed debit transactions are processed in the overnight batch run, they can be deducted from the committedAmount, which will normally be zero at the end of the overnight process.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">We have explained this example in some detail to show that there are trade-offs to be made</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">between complexity and processing requirements, and that there are often several ways of designing classes that the designer must choose between.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.3.3 <b>Primary operations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In analysis we identify those operations that are necessary to support the use cases that we analyse. However, we are designing classes for reuse, so we need to provide them with a set of operations that can be used in use cases that we haven’t anticipated yet.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1304" class="a">There are certain standard operations that are normally included in all classes. These are operations to create instances of objects, to retrieve the attribute values of instances, to modify the attribute values of instances, to select instances based on some kind of key or identifier, and to delete instances. </a>Yourdon (1994) calls these implicit services. These are also known as <i>primary operations </i>and include constructor, destructor, get and set operations.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_857.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Constructor<span class="p">—operation to create an instance of a class. Usually has the same name as the class. There may be multiple versions with different signatures (see Section 14.3.4).</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_858.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Destructor<span class="p">—operation to delete an instance of a class from memory. C#  and C++ have explicit destructors named the same as the class with a tilde at the beginning,</span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">e.g. ~ BankAccount. In Java you can override the finalize() method of Object, which is the superclass of all other classes, if you need to carry out any processing before an object is removed from memory by the garbage collector. The C# destructor is similar</p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">to the Java finalize() method and is called by the garbage collector, whereas the C++ destructor must be called explicitly.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_859.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_860.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Get operation<span class="p">—operation to get the value of an attribute, also known as an </span>accessor<span class="p">. </span>Set operation<span class="p">—operation to set the value of an attribute, also known as a </span>mutator<span class="p">.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark691">Some authors say that these usually need not be shown on diagrams, as they clutter up the diagrams and make them difficult to read. However, all operations have to be specified somewhere, and it is important to recognize that a class may have several different constructors for instances of that class. Sometimes it is important to be able to see these services in the diagrams. However, this is an issue about the functionality offered by modelling tools rather than methodologies. Ideally, it should be possible to switch off the display of any operation that the analyst or designer does not wish to have displayed in the operations compartment in a class. If you use a modelling tool that can generate set and get operations for every attribute, you do not need to include them in your class diagram.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We have shown primary operations on some class diagrams to emphasize their presence and have taken a pragmatic approach. In most parts of the book, we have shown those operations that were useful to show. We have usually included the operations that are not primary operations. We have included some primary operations, usually because they are referred to in the text or some related diagram.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One commonly held approach is normally not to show primary operations on analysis class diagrams as it can be assumed that such functionality is available. During analysis, issues such as the visibility of operations or the precise data types of attributes may not have been finally decided. However, when a design class model is completed it may be important to indicate that certain primary operations have public or protected visibility (see Section 14.3.5) and, as such, these may justifiably be shown on the diagram. Those that are private may be omitted as they do not constitute part of the class’s public interface.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Exceptionally, primary operations may usefully be included on analysis class diagrams either if they reflect particular functionality that has to be publicly visible or if it is important to indicate, for example, that more than one constructor is required. A class may need more than one constructor if objects could be instantiated in one of several initial states that require different input parameters. Each constructor would have a different signature.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are clearly alternative approaches and it is important that appropriate documentation standards are clearly defined at the outset of a project so that the absence of primary operations on a class diagram is not misinterpreted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">14.3.4 <b>Operation signatures</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Each operation also has to be specified in terms of the parameters that it passes and returns. The syntax used for an operation is:</p><p class="s13" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">[ <span class="p">&lt;</span>visibility<span class="p">&gt;</span>] <span class="p">&lt;</span>name<span class="p">&gt; </span>‘ (’ [ <span class="p">&lt;</span>parameter-list<span class="p">&gt;</span>] ‘ )’ [ ‘ :’ [ <span class="p">&lt;</span>return-type<span class="p">&gt;</span>] [ ‘ [ ’ <span class="p">&lt;</span>multiplicity<span class="p">&gt; </span>‘ ] ’] [ ‘ { ’ <span class="p">&lt;</span>property-string<span class="p">&gt;</span></p><p class="s13" style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">[ ‘ ,’ <span class="p">&lt; </span>property-string <span class="p">&gt;</span>] * ‘ } ’] ] </p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The part that is mandatory is the name of the operation followed by a pair of brackets. The parameter-list is optional. If included, it is a list of parameter names and types separated by commas:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">&lt;<i>parameter-list</i>&gt; <i>::</i>= &lt;<i>parameter</i>&gt; <i>[ ‘ ,’</i>&lt;<i>parameter</i>&gt;<i>] *</i></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">&lt;<i>parameter</i>&gt; <i>::</i>= <i>[ </i>&lt;<i>direction</i>&gt;<i>] </i>&lt;<i>parameter-name</i>&gt; <i>‘ :’</i></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">&lt;<i>type-expression</i>&gt; <i>[ ‘ [ ’</i>&lt;<i>multiplicity</i>&gt;<i>‘ ]                   ’] [ ‘ </i>=<i>’ </i>&lt;<i>default</i>&gt;<i>] [ ‘ { ’ </i>&lt; <i>property-string </i>&gt; <i>[ ‘ ,’ </i>&lt; <i>property-string </i>&gt;<i>] * ‘ } ’]</i></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark692">An operation’s </a><i>signature </i>is determined primarily by the operation’s name, the number and types of its parameters and the type of the return value if any. The BankAccount class might have a credit() operation that passes the amount being credited to the receiving object and has a Boolean return value. The operation would be shown in the diagram as:</p><p style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">credit(amount: Money): Boolean</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: -14pt;line-height: 155%;text-align: justify;">A credit() message sent to a BankAccount object could be written in a program as: creditOK = accObject.credit(500.00)</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">where creditOK holds the Boolean return value that is available to the sending object when the credit() operation has completed executing. This Boolean value may be tested to determine whether the credit() operation performed successfully. Alternatively, in an object–oriented language like Java the operation would be designed to throw an exception if it failed rather than returning a Boolean, as in the following snippet of code:</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">try{</p><p style="text-indent: 0pt;line-height: 12pt;text-align: right;">accObject.credit(500.00);</p><p style="text-indent: 0pt;line-height: 12pt;text-align: right;">} catch (UpdateException){</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">//some error handling; }</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This uses Java syntax for handling exceptions. An exception is a way of handling errors in a programming language. Exceptions are not shown as part of the operation syntax in UML class diagrams, but can be held in the model.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The UML is a modelling language and does not determine what operations should be shown in a class diagram. It provides the notation to use and suggestions about presentation, but it does not tell the analyst or designer what to include and what not to include.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.3.5 <b>Visibility</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a">The concept of encapsulation was discussed in Chapter </a>4 and is one of the fundamental principles of object-orientation. During analysis various assumptions have been made regarding the encapsulation boundary for an object and the way that objects interact with each other. For example, it is assumed that the attributes (or more precisely the values of the attributes) of an object cannot be accessed directly by other objects but only via get and set operations (primary operations) that are assumed to be available for each attribute. Moving to design involves making decisions regarding which operations (and possibly attributes) are publicly accessible. In other words we must define the encapsulation boundary.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure 14.1 shows the class BankAccount with the types of the attributes specified and the operation parameters defined. The class has the attribute balance, which, we might assume during analysis, can be accessed directly by the simple primary operations getBalance() and setBalance(). However, the designer may decide that the balance should be updated only through the operations credit() and debit() that contain special processing to check whether these transactions should be permitted, to maintain the availableBalance attribute value and to ensure that the transactions are logged in an audit trail. In these circumstances, it is important that changes to the value of the balance attribute can only occur through the debit() and credit() operations. The operation setBalance() should not be publicly available for use by other classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1238" class="a" name="bookmark693">Meyer </a><a href="part23.htm#bookmark733" class="a">(1997) introduces the term ‘secret’ to describe those features that are not available in the public interface. Programming languages designate the non-public parts of a class, which may include attributes and operations, in various ways. The four commonly accepted terms</a><span class="s41">2</span> used to describe <i>visibility </i><a href="part23.htm#bookmark694" class="a">are listed in Fig. </a>14.2 with their UML symbols. An example would be:</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="168" alt="image" src="Image_861.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark694">Figure 14.2 </a><span class="s21">V isibility.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">- balance: Money</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: -14pt;line-height: 155%;text-align: justify;">V isibility may also be shown as a property string, for example: balance: Money {visibility = private}</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark695" class="a">To enforce encapsulation the attributes of a class are normally designated private (Fig. </a>14.3 (a)). The operation setBalance() and others are also designated private to ensure that objects from other classes cannot access them directly and make changes that are not recorded in the audit trail. Private operations can, of course, be invoked from operations in the same class such as debit(). Commonly, complex operations are simplified by factoring out procedures into private operations.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark695" class="a">In </a>Fig. 14.3 (b) the private operations are assigned protected visibility so that subclasses of BankAccount can examine and set the value of the balance and accountName attributes. For example, the debit() operation might be redefined in a JuniorBankAccount subclass. The redefined operation would use getBalance() to access the balance and check that a debit would not result in a negative balance before setting it using setBalance().</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark695" class="a">The attribute nextAccountNumber in Fig. </a>14.3 is an example of a class-scope attribute (indicated by underlining). A class-scope attribute occurs only once and is attached to the class, not to any individual object. In this example nextAccountNumber holds the account number for the next new BankAccount object created. When a new BankAccount is created using the class-scope operation open(), nextAccountNumber is incremented by one. The attribute accountNumber is an example of an instance-scope attribute (hence no underlining). Each BankAccount object has an instance-scope accountNumber attribute, which holds its unique account number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="260" alt="image" src="Image_862.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark695">Figure 14.3 </a><span class="s21">BankAccount class with visibility specified.</span><a name="bookmark696">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="430" height="25" alt="image" src="Image_863.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.4  </a><a href="part4.htm#bookmark4" class="s29">Grouping Attributes and Operations in Classes</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.4  </a><a href="part4.htm#bookmark4" class="s29">Grouping Attributes and Operations in Classes</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.4  </a><a href="part4.htm#bookmark4" class="s29">Grouping Attributes and Operations in Classes</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark697">As well as adding information to the specification of attributes and operations, the designer may decide to change the allocation of attributes and operations to classes that were determined during the analysis activities. This may be done to create more reusable classes, to define standard behaviours that can be reused as interfaces, or to apply design principles that will produce a cleaner design that will require less refactoring later. The techniques the designer might use include the following:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_864.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">checking that responsibilities have been assigned to the right class;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_865.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_866.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">defining or using interfaces to group together well-defined standard behaviours; applying the concepts of coupling and cohesion;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_867.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">applying the Liskov Substitution Principle.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.4.1 <b>Assigning responsibilities</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Certain aspects of the detailed design require special attention in the development of object- oriented systems. These include reuse and assignment of responsibilities to classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark738" class="a" name="bookmark698">One of the arguments for the use of object-oriented languages is that they promote reuse through encapsulation of functionality and data together in classes and through the use of inheritance. This is not just a programming issue, but one that also affects analysis and design. There is a growing recognition of the need to reuse analysis results in object-oriented systems development. Design reuse already takes place at two levels: first through the use of design patterns, which are discussed in detail in </a>Chapter 15; and second by recognizing during design that business classes that have been identified during analysis may be provided by reusing classes that have already been designed within the organization, or even bought in from outside vendors.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1223" class="a">The assignment of responsibilities to classes is an issue that is related to reuse. Larman (2005) highlights this activity as a key task in design. In an object-oriented system, it </a><a href="part23.htm#bookmark699" class="a">is important to assign responsibility for operations to the right classes and there is often a choice. In the FoodCo system, there will be a need to produce invoices for customers that include the calculation of V alue Added Tax (V AT). (V AT is a tax used throughout Europe that is applied at each stage of the supply chain and not just as a purchase tax paid by the final end-user or consumer.) The calculation of V AT could be carried out by one of a number of classes in the model (Fig. </a>14.4):</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 96pt;text-indent: 0pt;text-align: left;"><span><img width="348" height="129" alt="image" src="Image_868.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark699">Figure 14.4 </a><span class="s21">Partial class diagram for FoodCo.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_869.jpg"/></span></p><p style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Invoice—which organizes the total information for the whole sale;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_870.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_871.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">InvoiceLine—which contains the detail of each item sold and to which the tax applies; Product—to which different V AT rates may apply;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_872.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">TaxRate—which carries the details of the percentage that applies for each valid rate.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">If the designer makes the wrong decision, the resulting class will be less reusable and may constrain the design of other classes. For example, if the responsibility for tax calculation is allocated  to  Invoice  or  InvoiceLine,  then  this  has  implications  for  CreditNote  and CreditNoteLine, which may also need to calculate tax. The same code may be copied and pasted from one class to the other, and then if it is changed in one, the programmer may forget to change it in the other. If it is assigned to Product, then it cannot be reused in the Agate</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">project where V AT applies to services as well as products. In this case, it needs to be assigned to TaxRate in order to maximize the reuse that can be made of the classes in this design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.4.2 <b>Interfaces</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">We have talked about the public interface of a class being the set of operations (and possibly attributes) that are visible to instances of other classes. Sometimes it is useful to be able to define a set of operations that must be implemented by different classes if they are to provide a particular standard behaviour. We can model this in UML as an <i>interface</i>.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An interface is a group of related methods with no implementations. Sometimes a designer will want to specify a set of operations that belong together and define a particular behaviour in what is called an interface. The purpose of this is so that classes that implement the interface can  be  guaranteed  to  implement  that  behaviour.  An  example  from  Java  is  the java.lang.Runnable interface, which is used for classes whose instances are intended to be executed by a Thread.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="496" height="465" alt="image" src="Image_873.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark700">Figure 14.5 </a><span class="s21">Interfaces for the Advert class.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark700" class="a">An interface in UML is a group of externally visible (i.e. public) operations. The interface contains no internal structure, it has no attributes, no associations and the implementation of the operations is not defined. Formally, an interface is equivalent to an abstract class that has no attributes, no associations and only abstract operations. Figure 14.5 illustrates two alternative notations for an interface. The simpler of the two UML interface notations is a circle. This is attached by a solid line to the class that realizes the interface. For example, in </a>Fig. 14.5 the Advert class realizes the interface V iewable using this notation, that is, it provides all of the operations specified by the interface (and maybe more).</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some modelling tools show a list of the operations under the circle, though this can usually be suppressed. The line with an open semicircle connecting the Client class to the V iewable interface circle icon indicates that it uses or needs at least one of the operations provided by the interface.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark701">The alternative notation uses a stereotyped class icon. As an interface only specifies the operations and has no internal structure, the attributes compartment is omitted. This notation lists the operations on the diagram. The </a><i>realize </i>relationship, represented by the dashed line with  a  triangular  arrowhead,  indicates  that  the  client  class  (e.g.  Advert)  provides implementations of at least the operations listed in the interface (e.g. Manageable). The dashed arrow from CreativeStaff means that the class uses the operations listed in the interface. The notation used for the realize relationship (the triangular arrowhead) is deliberately reminiscent of the notation for inheritance, as in a sense Advert inherits the operations in the Manageable interface. (Normally only one of these notations would be used in a diagram.) This concept can be implemented using the interface programming language construct in Java or C# .</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.4.3 <b>Coupling and cohesion</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1305" class="a">Yourdon and Constantine </a>(1979) defined a series of criteria for structured design that could be used in breaking systems and programs down into modules to ensure that they are easy to develop and maintain. These criteria concern two issues: <i>cohesion </i>and <i>coupling</i>. Criteria to maximize desirable types of cohesion have as their aim the production of modules—sections of program code in whatever language is used—that carry out a clearly defined process or a group of processes that are functionally related to one another. This means that all the elements of the module contribute to the performance of a single function. Poor cohesion is found when processes are grouped together in modules for other reasons. Examples of poor types of cohesion include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_874.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_875.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">processes that are grouped together for no obvious reason (<i>coincidental cohesion</i>); logically similar processes that are handled together, such as inputs (<i>logical cohesion</i>);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_876.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">processes that happen at the same time, for example when the system initializes (<i>temporal cohesion</i>);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_877.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the outputs of one process being used as inputs by the next (<i>sequential cohesion</i>).</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">By aiming to produce modules that are functionally cohesive, the designer should produce modules that are straightforward to develop, easy to maintain and have the maximum potential to be reused in different parts of the system. This will be assisted if coupling between modules is also reduced to the minimum.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Criteria to minimize the coupling between modules have as their aim the production of modules that are independent of one another and that can be amended without resulting in knock-on effects to other parts of the system. Good coupling is achieved if a module can perform its function using only the data that is passed to it by another module and using the minimum necessary amount of data.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1140" class="a">The concepts of coupling and cohesion can be applied to object-oriented systems development to help enforce encapsulation. Coad and Yourdon </a><a href="part38.htm#bookmark1223" class="a">(1991) suggested several ways in which coupling and cohesion can be applied within an object-oriented approach. </a><a href="part38.htm#bookmark1140" class="a">Larman (2005) also considers the application of these criteria. The criteria can be used within object-orientation during both analysis and design as described below (adapted from Coad </a><a href="part38.htm#bookmark1140">and Yourdon, 1991).</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C oupling</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Coupling describes the degree of interconnectedness between design components and is reflected by the number of links an object has and by the degree of interaction the object has with other objects.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Interaction coupling <span class="p">is a measure of the number of message types an object sends to other objects and the number of parameters passed with these message types. Interaction coupling should be kept to a minimum to reduce the possibility of changes rippling through the</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a">interfaces and to make reuse easier. When an object is reused in another application it will still need to send these messages (unless the object is modified before it is reused) and hence needs objects in the new application that provide these services. This affects the reuse process as it requires groups of classes to be reused rather than individual classes. (In </a>Chapter 8 we introduced the idea of the <i>component </i><a href="part31.htm#bookmark1004" class="a">as the unit of reuse and discuss it further in Chapter </a>20. Components are groups of objects that together provide a clearly defined service.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="249" alt="image" src="Image_878.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark702">Figure 14.6 </a><span class="s21">Inheritance coupling.</span><a name="bookmark703">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Inheritance coupling <a href="part23.htm#bookmark702" class="a">describes the degree to which a subclass actually needs the features it inherits from its base class. For example, in Fig. 14.6(a) the inheritance hierarchy exhibits low inheritance coupling and is poorly designed. The subclass LandV ehicle needs neither of the attributes maximumAltitude and takeOffSpeed nor the operations checkAltitude() and takeOff(). They have been inherited unnecessarily. In this example it would appear that the base class, V ehicle, would perhaps be better named FlyingV ehicle and the inheritance relationship is somewhat suspect. A land vehicle is not a kind of flying vehicle (not normally anyway). A better design is shown in Fig. </a><span class="p">14.6(b). However, many systems developers view designs with a small degree of unnecessary inheritance as being acceptable if the hierarchy is providing valuable reuse and is meaningful. It can be argued that if attributes and operations are inherited unnecessarily it is merely a matter of not using these features in the subclass. However, a subclass with unnecessary attributes or operations is more complex than it needs to be and objects of the subclass may take more memory than they actually need. The real problems may come when the system needs maintenance. The system’s maintainer may not realize that some of the inherited attributes and operations are unused and may modify the system incorrectly as a result. Alternatively the system’s maintainer may use these unneeded features to provide a fix for a new user requirement, making the system even more difficult to maintain in the future. For these reasons, unnecessary inheritance should be kept as low as possible.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C ohesion</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Cohesion is a measure of the degree to which an element contributes to a single purpose. The concepts of coupling and cohesion are not mutually exclusive but actually support each other.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Operation cohesion <a href="part23.htm#bookmark704" class="a">measures the degree to which an operation focuses on a single functional requirement. Good design produces highly cohesive operations, each of which deals with  a  single  functional  requirement.  For  example  in  Fig.  </a><span class="p">14.7  the  operation calculateRoomSpace() is highly cohesive.</span></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Class cohesion <a href="part23.htm#bookmark704" class="a">reflects the degree to which a class is focused on a single requirement. The class Lecturer in </a><span class="p">Fig. 14.7 exhibits low levels of this type of cohesion as it has three attributes (roomNumber, roomLength and roomWidth) and one operation (calculateRoomSpace()) that would be more appropriate in a class Room. The class Lecturer should only have attributes</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">that describe a Lecturer object (e.g. lecturerName and lecturerAddress) and operations that use them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 83pt;text-indent: 0pt;text-align: left;"><span><img width="381" height="143" alt="image" src="Image_879.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark704">Figure 14.7 </a><span class="s21">Good operation cohesion but poor class cohesion.</span><a name="bookmark705">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Specialization cohesion <a href="part23.htm#bookmark706" class="a">addresses the semantic cohesion of inheritance hierarchies. For example in Fig. </a><a href="part23.htm#bookmark707" class="a">14.8 all the attributes and operations of the Address base class are used by the derived classes: the hierarchy has high inheritance coupling. However, it is true neither that a person is a kind of address nor that a company is a kind of address. The example is only using inheritance as a syntactic structure for sharing attributes and operations. This structure has low specialization cohesion and shows poor design. It does not reflect meaningful inheritance in the problem domain. A better design is shown in Fig. </a><span class="p">14.9, in which a common class Address is being used by both the Person and Company classes. All the design criteria explained above may be applied at the same time to good effect.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 98pt;text-indent: 0pt;text-align: left;"><span><img width="341" height="285" alt="image" src="Image_880.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark706">Figure 14.8 </a><span class="s21">Poor specialization cohesion.</span></p><p style="padding-left: 98pt;text-indent: 0pt;text-align: left;"><span><img width="341" height="291" alt="image" src="Image_881.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark707"><span class="s31">Figure 14.9 </span></a>Improved structure using <span class="s89">Address </span>class.<a name="bookmark708">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="501" height="253" alt="image" src="Image_882.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark709">Figure 14.10 </a><span class="s21">Application of the Liskov Substitution Principle.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.4.4 <b>Liskov Substitution Principle</b></p><p style="text-indent: 0pt;text-align: left;"><span><img width="245" height="25" alt="image" src="Image_883.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark711">14.5  </a><a href="part4.htm#bookmark4" class="s29">Designing Associations</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark711">14.5  </a><a href="part4.htm#bookmark4" class="s29">Designing Associations</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark711">14.5  </a><a href="part4.htm#bookmark4" class="s29">Designing Associations</a></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark710">The </a><i>Liskov Substitution Principle (LSP) </i><a href="part23.htm#bookmark709" class="a">is another design criterion that is applicable to inheritance hierarchies. Essentially the principle states that, in object interactions, it should be possible to treat a derived object as if it were a base object. If the principle is not applied, then it may be possible to violate the integrity of the derived object. In Fig. 14.10 objects of the class MortgageAccount cannot be treated as if they are objects of the class ChequeAccount because MortgageAccount objects do not have a debit operation whereas ChequeAccount objects do. The debit operation is declared private in MortgageAccount and hence cannot be used by any other object. Figure </a>14.10 shows an alternative structure that satisfies LSP. Interestingly, this inheritance hierarchy has maximal inheritance coupling, and enforcing the LSP normally produces structures with high inheritance coupling.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">An association between two classes indicates the possibility that links will exist between instances of the classes. The links provide the connections necessary for message passing to occur. When deciding how to implement an association it is important to analyse the message passing between the objects tied by the link.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.5.1 <b>One-to-one associations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark712" class="a">In </a>Fig. 14.11 objects of the class Owner need to send messages to objects of the class Car but not vice versa. This particular association may be implemented by placing an attribute to hold the object identifier (some authors prefer to use the term object reference) for the Car class in the Owner class. Thus Owner objects have the Car object identifier and hence can send messages to the linked Car object. As a Car object does not have the object identifier for the Owner object, it cannot send messages to the Owner object. The owns association is an example of a one-way association: the arrowhead on the association line shows the direction along which it may be navigated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="164" alt="image" src="Image_884.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark712">Figure 14.11 </a><span class="s21">One-way one-to-one association.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">The association end ownedCar is converted to an attribute of the same name that will hold a reference to the particular instance of Car that is owned by the instance of Owner. The ownedCar reference to the Car object is a reference to the Car in memory. It is not a database key (see </a>Chapter 18) or a natural identifier like registrationNumber. With some CASE tools, it is not necessary to place the reference explicitly in the class like this; when the designer generates code from the model, it will automatically add the references for the association ends of all navigable associations.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark713">So before an association can be designed it is important to decide in which direction or directions messages may be sent. (If messages are not sent in either direction along an association, then the need for its existence should be questioned.) Essentially we are determining the navigability of the association.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In general an association between two classes A and B should be considered with the following questions:</p><p class="s25" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">1. <span class="p">Do objects of class A have to send messages to objects of class B?</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">2. <span class="p">Does an A object have to provide some other object with B object identifiers?</span></p><p class="s41" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark734" class="a" name="bookmark714">If either of these questions is answered yes, then A objects need B object identifiers. However, if A objects get the required B object identifiers as parameters in incoming messages, A objects need not remember the B object identifiers. Essentially, if an object needs to send a message to a destination object, it must have the destination object’s identifier either passed as a parameter in an incoming message just when it is required, or the destination object’s identifier must be stored in the sending object. An association that has to support message passing in both directions is a two-way association. A two-way association is indicated with arrowheads at both ends.</a>3<span class="p"> As discussed earlier, it is important to minimize the coupling between objects. Minimizing the number of two-way associations keeps the coupling between objects as low as possible.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.5.2 <b>One-to-many associations</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark715" class="a">In Fig. </a><a href="part23.htm#bookmark716" class="a">14.12, objects of the class Campaign need to send messages to objects of the class Advert but not vice versa. If the association between the classes was one-to-one, the association could be implemented by placing an attribute to hold the object identifier for the Advert class in the Campaign class. However, the association is in fact one-to-many and many Advert object identifiers need to be tied to a single Campaign object. The object identifiers could be held as a simple one-dimensional array in the Campaign object, but program code would have to be written to manipulate the array. Another way of handling the group of Advert object identifiers, which is more amenable to reuse, is to place them in a separate object, a collection object that has operations to manage the object identifiers and that behaves rather like an index of adverts for the Campaign object. This is shown in the class diagram fragment in Fig. </a>14.13. There will be many instances of the collection class, as each Campaign object has its own collection of Advert object identifiers. Notice that the AdvertCollection class has operations that are specifically concerned with the management of the collection. The findFirst() operation returns the first object identifier in the list and the getNext() gets the next object identifier in the list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="426" height="427" alt="image" src="Image_885.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark715">Figure 14.12 </a><span class="s21">Fragment of class diagram for the Agate case study.</span></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="537" height="455" alt="image" src="Image_886.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark716">Figure 14.13 </a><span class="s21">One-to-many association using a collection class.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">When a Campaign object wants to send a message to each of its Advert objects the Campaign object first sends a findFirst() message to the class to get the first object identifier. The Campaign object can now send a message to its first Advert object. The Campaign then uses getNext() to get the next object identifier from the collection class and sends the message to the next Advert object. The Campaign object can then iterate through the collection of object identifiers and send the message to each of the Advert objects in turn.</p><p style="padding-left: 27pt;text-indent: 0pt;text-align: left;"><span><img width="532" height="472" alt="image" src="Image_887.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark717">Figure 14.14 </a><span class="s21">Sequence diagram for </span><span class="s89">listAdverts().</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark717" class="a">Figure </a>14.14 shows the sequence diagram for the interaction that would enable the Campaign object to prepare a list of its adverts with their titles. The Campaign object holds the object identifier of the collection class so that it can send messages to it. As an Advert object does not have the object identifier for the Campaign object to which it belongs, it cannot send messages to the Campaign object. The interaction constraints in listAdverts() use the term ownedAdvert.size(), where ownedAdvert is the name of the attribute (in AdvertCollection) that holds the collection of object identifiers and size() is an OCL function that gives the number of elements in a collection. The opt interaction operator specifies that the interaction fragment will only execute if the constraint is satisfied—in this example, if there is at least one advert associated with the Campaign.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;">The designer may choose to use specific classes like AdvertCollection or may choose to use generic collection classes. The choice may depend on whether a decision has been made about the language in which the application will be developed. For example, both Java and C# have collection classes—in the java.utils package in Java, and the System.Collections namespace in C# —and both have a suitable class in the form of ArrayList. However, the Java class implements the Collection and List interfaces (among others), while the C#  class implements the ICollection and IList interfaces (among others). Both ArrayList classes have add(), indexOf() and remove() methods, but each has methods that are missing in the other, and some key methods, such as the one to return an Iterator or Enumerator to iterate over the elements of the ArrayList, have different names in the two languages, and the Java Iterator and the C#  Enumerator have differently named methods to iterate through the objects in the collection.</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="546" height="102" alt="image" src="Image_888.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark718">Figure 14.15 </a><span class="s21">Template class used for </span><span class="s89">AdvertCollection.</span><a name="bookmark719">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In Java it is also possible to use <i>template classes</i>. A template class is one which has one or more <i>parameterable elements</i><a href="part23.htm#bookmark718" class="a">, which can be bound to particular values in the model. Sticking with our non-language-specific collection classes, we could define them as in </a>Fig. 14.15.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The template class Collection here has two parameters: T, which is unconstrained and could be any class type, and n, which must evaluate to an integer and has a default value of 1. The class AdvertCollection implements Collection, and binds T to the Advert class type and n to 0 (as the association between Campaign and Advert, which this collection class is replacing, has a multiplicity of 0..*). In Java, binding a template class to a type, as in the following code excerpt, which uses ArrayList, creates a type-safe collection class. Trying to add anything but an Advert to the collection will fail.</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">private ArrayList&lt;Advert&gt; items;</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">If the designer is intending to use a persistence framework such as Hibernate or NHibernate to store objects in the database (see Chapter </a>18), the choice of how collection classes are implemented when objects are brought into memory from the database may be determined by the framework. We continue to use non-language-specific collection classes in the rest of the examples in this chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.5.3 <b>M any-to-many associations</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark715" class="a">The design of the many-to-many association work on campaign between CreativeStaff and Campaign (see </a><a href="part23.htm#bookmark720" class="a">Fig. 14.12) follows the principles described above. Assuming this is a two-way association, each Campaign object will need a collection of CreativeStaff object identifiers and each CreativeStaff object will need a collection of Campaign object identifiers. The designed association with the collection classes is shown in Fig. </a>14.16. Both the CreativeStaff and Campaign classes contain an attribute to hold the object identifiers of their respective collection classes.</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="540" height="373" alt="image" src="Image_889.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark720">Figure 14.16 </a><span class="s21">Two-way many-to-many association.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark721">Collection classes can be designed to provide additional support for object navigation. For example, if there is a requirement to find out if an employee works on a campaign with a particular title, a message may be sent from the Creative Staff object to each Campaign object the employee works on to get its title until either a match is found or the end of the collection is reached. Two separate messages are required to access each Campaign object. So, if an employee works on four campaigns, a maximum of eight messages must be sent to find the campaign. In general, if the employee works on </a><i>N </i>campaigns a maximum of 2<i>N </i>messages must be sent.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">An alternative search approach uses a findCampaign() operation in the collection class. This operation may be designed either to access an index in the collection object itself or to take responsibility to cycle through the Campaign objects searching for a title match. In the first case only the findCampaign() message is needed to find the campaign as the collection class indexes the campaigns by title. In the second case the collection object may have to send a maximum of <i>N </i>messages (one for each campaign on which the employee works). So in either case the inclusion of the findCampaign() operation in the collection class reduces the message passing required.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1159" class="a">The management of object identifiers using collection classes may appear to increase appreciably the development effort required. In fact, the opposite is generally the case, as object-oriented languages normally provide collection classes of various types with standard collection management operations. The standard collection classes may offer various forms of indexing. They may also be subclassed to add additional application functionality. For example, Java provides, among others, standard LinkedList, Stack, Hashtable and Dictionary collection classes that may be subclassed to add application-specific behaviour or bound to specific class types to make them type-safe (</a>Deitel and Deitel, 2007).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark722">14.5.4 </a><b>K eeping classes to a minimum</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The association between Campaign and AdvertCollection is one-to-one (commonly the case with collection classes), and this suggests that one implementation strategy is to place the collection class inside the Campaign object. This approach generally produces more complex classes and limits extensibility. However, in this case it is likely that collection class behaviour</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">will largely be provided by a library class as we have described in Section 14.5.2 or by a feature of the development language being used, so the issue of increased complexity may not be so significant. The problem of any reduction in extensibility is also less significant in this case: as only a Campaign object would want to know which Advert objects are tied to it, and any request to access a Campaign’s Adverts would be directed to the Campaign first. So, on balance, placing the collection class inside the Campaign class is a sensible design decision, and using library collection classes where possible maximizes reuse and reduces development effort. Clearly, if another class, apart from Campaign, needs to use the list independently of the Campaign class then it is more appropriate to keep the collection class separate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="219" height="25" alt="image" src="Image_890.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.6  </a><a href="part4.htm#bookmark4" class="s29">Integrity Constraints</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.6  </a><a href="part4.htm#bookmark4" class="s29">Integrity Constraints</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.6  </a><a href="part4.htm#bookmark4" class="s29">Integrity Constraints</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark723">Systems analysis will have identified a series of integrity constraints that have to be enforced to ensure that the application holds data that is mutually consistent and manipulates it correctly. These integrity constraints come in various forms:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_891.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">referential integrity<span class="p">, which ensures that an object identifier in an object is actually referring to an object that exists;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_892.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_893.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">dependency constraints<span class="p">, which ensure that attribute dependencies, where one attribute may be calculated from other attributes, are maintained consistently; </span>domain integrity<span class="p">, which ensures that attributes only hold permissible values.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.6.1 <b>Referential integrity</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a" name="bookmark724">The concept of referential integrity as applied to a relational database management system (see Chapter </a><a href="part38.htm#bookmark1201" class="a">18) is discussed by Howe </a><a href="part23.htm#bookmark715" class="a">(2001). Essentially the same principles apply when considering references between objects. In Fig. </a>14.12 the association manage campaign between  CreativeStaff  and  Campaign  is  two-way,  and  an  object  identifier  called campaignManagerId, which refers to the particular CreativeStaff object that represents the campaign manager, is needed in Campaign. (CreativeStaff needs a collection of Campaign object identifiers to manage its end of the association.) To maintain referential integrity the system must ensure that the attribute campaignManagerId either is null (not referencing any object) or contains the object identifier of a CreativeStaff object that exists. In this particular case the association states that a Campaign must have a CreativeStaff instance as its manager, and it is not correct to have a Campaign with a null campaignManagerId attribute. In order to enforce this constraint, the constructor for Campaign needs as one of its parameters the object identifier of the CreativeStaff object that represents the campaign manager, so that the campaignManagerId attribute can be instantiated with a valid object identifier.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Problems in maintaining the referential integrity of a Campaign may occur during its</p><p class="s41" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark735" class="a" name="bookmark725">lifetime. For instance, the campaign manager, Nita Rosen, may leave the company to move to another job and Nita’s CreativeStaff object will then be deleted.</a>4<span class="p"> Referential integrity is maintained by ensuring that the deletion of a CreativeStaff object that is a campaign manager always involves allocating a new campaign manager. The task of invoking the operation assignManager() is included in the operation to delete a CreativeStaff object, and it will request the object identifier of the new campaign manager. Similarly, any attempt to remove the current campaign manager from a Campaign must always involve allocating the replacement. The multiplicity of exactly one represents a strong integrity constraint for the system. In the example just discussed, it seems to be appropriate that a campaign should always have a manager, even when it has just been created. However, great care should be taken when assigning a multiplicity of exactly one (or in general a minimum of one) to an association, as the consequences in the implemented system can be quite dramatic. Let us imagine that the campaign manager, Nita Rosen, does leave Agate but that there is no replacement campaign manager available. The strict application of the integrity constraint implied by the manage campaign association means that integrity can only be enforced if all the campaigns that Nita managed are deleted. Of course, because each Advert must be linked to a Campaign, all the Advert objects for each of the Campaigns must also be deleted in order to maintain referential</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">integrity. This is an example of a cascade delete: deleting one object results in the deletion of many objects as referential integrity is applied. In the case of Agate, deleting the information about Nita’s campaigns and their adverts would be disastrous. There are two solutions: either the constraint on the association is weakened by changing the cardinality to zero or one, or when Nita leaves a dummy CreativeStaff object is created and allocated as campaign manager to Nita’s campaigns. Although the second solution is a fix, it has the advantage of providing an obvious place-holder, highlighting the problem of unmanaged campaigns but maintaining the integrity constraint. Of course, the minimum of one multiplicity was assigned to the association to reflect company policy that a campaign must always have a manager, so the dummy may not be a viable solution from a business perspective.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.6.2 <b>Dependency constraints</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark695" class="a">Attributes are dependent upon each other in various ways. These dependencies may have been identified during analysis and must now be dealt with during design. A common form of dependency occurs when the value of one attribute may be calculated from other attributes, as we have explained in Section 14.3.2. For instance, a requirement to display the total advertising cost may be satisfied either by storing the value in the attribute totalAdvertCost in the Campaign class or by calculating the value every time it is required. The attribute totalAdvertCost is a derived attribute and its value is calculated by summing the individual advert costs. Placing the derived attribute in the class reduces the processing required to display the total advertising cost as it does not require calculation. On the other hand, whenever the cost of an advert changes, or an advert is either added to or removed from the campaign, then the attribute totalAdvertCost has to be adjusted so that it remains consistent with the attributes upon which it depends. An example of the UML symbol (‘/’) used to indicate that a modelling element (attribute or association) is derived is shown in </a>Fig. 14.3.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In order to maintain the consistency between the attributes, any operation that changes the</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">value of an Advert’s cost must trigger an appropriate change in the value of totalAdvertCost by sending the message adjustCost() to the Campaign object. The operation adjustCost() is an example of a <i>synchronizing operation</i>. The operations that have to maintain the consistency are setAdvertCost() and the Advert destructor. When a new advert is created, the constructor would use setAdvertCost() to set the advert cost. This would invoke adjustCost() and hence ensure that the totalAdvertCost is adjusted. So any change to an Advert’s cost takes more processing if the derived attribute totalAdvertCost is used. Thus one part of the system executes more quickly while another part executes more slowly. Generally, it is easier to construct systems without derived attributes, as this obviates the need for complex synchronizing operations. Derived attributes should only be introduced if performance constraints cannot be satisfied without them. If performance is an issue, then one of the skills needed in design is how to optimize the critical parts of the system without making the other parts of the system inoperable.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Another form of dependency occurs where the value of one attribute is constrained by the</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">values of other attributes. For example, let us assume that the sum of the total advertising cost, the staff costs, the management costs and the ancillary costs must not exceed the campaign’s authorized budget. Any changes to these values must check that the authorized budget is not exceeded by the sum of the costs. If a change to any of these dependent values would cause this constraint to be broken, then some action should be taken. There are two possibilities. Either the system prohibits any change that violates the constraint and an exception is raised, or it permits the change and an exception is raised. It is most likely that the violation of the constraint would occur as a result of an attempt interactively to change one of the constrained values and the exception raised would be a warning message to the user. If it is considered permissible for the constraint to be broken, then all access to or reporting about these values should produce a warning message to the user.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark727" class="a" name="bookmark726">Dependency constraints can also exist between or among associations. One of the simplest cases is shown in Fig. </a>14.17 where the chairs association is a subset of the is a member of association.</p><p style="padding-left: 49pt;text-indent: 0pt;text-align: left;"><span><img width="472" height="189" alt="image" src="Image_894.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark727">Figure 14.17 </a><span class="s21">Constraints between associations.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This constraint is stating that the chair of a committee must be a member of the committee, and it can be enforced by placing a check in the assignChair() operation in Committee to confirm that the Employee object identifier passed as a parameter is already in the collection class of committee members. More complex constraints, which require several associations, may also exist. Derived associations may also be introduced to improve performance if absolutely necessary and, as in the case of derived attributes, synchronizing operations are needed to ensure that the derived links are consistent with the links on which they depend.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">14.6.3 <b>Domain integrity</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Domain integrity is concerned with ensuring that the values an attribute takes are from the appropriate underlying domain. For instance, the attributes from the Cost domain might reasonably be non-negative decimal values with two decimal places. These constraints may be viewed as an extended form of those implied by data types. The necessary integrity checking code is normally placed in the set operations or in any interactive interface that permits the entry of values. Such constraints may have been documented as business rules or in OCL.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="313" height="25" alt="image" src="Image_895.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.7  </a><a href="part4.htm#bookmark4" class="s29">Designing Operation Algorithms</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.7  </a><a href="part4.htm#bookmark4" class="s29">Designing Operation Algorithms</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.7  </a><a href="part4.htm#bookmark4" class="s29">Designing Operation Algorithms</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark728">The design of operations involves determining the best algorithm to perform the required function. In the simplest case, primary operations require little design apart from the inclusion of code to enforce integrity checks. For more complex operations, algorithm design can be an involved process. V arious factors constrain algorithm design:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_896.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_897.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_898.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">the cost of implementation performance constraints requirements for accuracy</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_899.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the capabilities of the implementation platform.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1263" class="a">Generally it is best to choose the simplest algorithm that satisfies these constraints, as this makes the operation easier to implement and easier to maintain. Rumbaugh et al. </a>(1991) suggest that the following factors should be considered when choosing among alternative algorithm designs.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_900.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Computational complexity<span class="p">. This is concerned with the performance characteristics of the algorithm as it operates on increasing numbers of input values. For example, the bubble sort algorithm has an execution time that is proportional to </span>N <span class="p">× </span>N <span class="p">where </span>N <span class="p">is the number of items being sorted.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_901.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Ease of implementation and understandability<span class="p">. It is generally better to sacrifice some performance to simplify implementation.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_902.jpg"/></span></p><p class="s13" style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Flexibility<span class="p">. Most software systems are subject to change and an algorithm should be designed with this in mind.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_903.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Fine-tuning the object model<span class="p">. Some adjustment to the object model may simplify the algorithm and should be considered.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1128" class="a" name="bookmark729">Designing the main operations in a class is likely to highlight the need for lower-level private operations to decompose complex operations. This process is much the same as traditional program design. Techniques such as step-wise refinement (</a><a href="part38.htm#bookmark1305" class="a">Budgen, 1994) or structure charts (Yourdon and Constantine, </a><a href="part9.htm#bookmark171" class="a">1979) may well be used to good effect. UML offers activity diagrams (see </a><a href="part18.htm#bookmark492" class="a">Chapters 5 and </a><a href="part23.htm#bookmark736" class="a">10) as a technique both to document and to design operations. In circumstances where high levels of formality are required in operation design, formal specification techniques such as Z  or V DM may be used.</a><a href="part23.htm#bookmark736" class="s32">5</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Responsibilities identified during analysis may map onto one or more operations. The new operations that are identified need to be assigned to classes. In general, if an operation operates on some attribute value then it should be placed in the same class as the attribute. On occasions, a particular operation may modify attributes in more than one class and could sensibly be placed in one of several classes. In choosing where to locate the operation, one view is that minimizing the amount of object interaction should be a major criterion, while another significant criterion is simplicity. However, in some cases it is not a clear-cut decision.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">During analysis use case realization, control classes are introduced to control the execution of use cases. Typically these control classes may be the best place for operations that are particular to the use case or that have no obvious owning entity class. Some designers may choose to allocate control class responsibility to boundary or entity classes during design to achieve performance or other implementation requirements. However, this results in boundary or entity classes that have less well focused functionality (lower class cohesion) and can make maintenance more difficult. This yet again reflects the trade-offs that have to be made during design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="24" alt="image" src="Image_904.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">14.8  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark730">Class design is concerned with the detailed design of the system and is conducted within the architectural framework and design guidelines specified during system design. The detailed design process involves determining the data types of the attributes, deciding how to implement derived attributes, adding primary operations and defining operation signatures. The designer will decide how best to group attributes and operations in classes, assigning operations appropriately, guided by a series of criteria that incorporate the fundamental principles of coupling and cohesion. Interfaces may be specified. Associations have to be designed to support the message passing requirements of the operations. This involves determining how best to place object references in the classes. The application of integrity constraints is included in the design of operations. Operations have to be designed to enforce these integrity constraints. If derived attributes are included in any of the classes then synchronizing operations are required to maintain their consistency.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:142pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 38pt;text-indent: -29pt;text-align: left;">14.1 <span class="s16">What aspects of the system are added to the class diagram(s) in object-oriented detailed design?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.2  <span class="s16">What levels of visibility may be assigned to an attribute or an operation?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.3 <span class="s16">Why should attributes be private?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.4 <span class="s16">What are primary operations?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.5 <span class="s16">What is a class-scope attribute?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.6 <span class="s16">What does the term ‘interface’ mean in UML?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.7 <span class="s16">How can collection classes be used when designing associations?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.8  <span class="s16">Under what circumstances should a collection of object references be included</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:68pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s16" style="padding-left: 38pt;text-indent: 0pt;line-height: 12pt;text-align: left;">in a class?</p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.9  <span class="s16">How can referential integrity be enforced in an object-oriented system?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.10 <span class="s16">Under what circumstances should derived attributes be used?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">14.11 <span class="s16">Under what circumstances should derived associations be used?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark731">Case Study Work, Exercises and Projects</a></p></td></tr><tr style="height:126pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 56pt;text-indent: -26pt;text-align: left;">14.A <span class="s16">Specify the attribute types and the operation signatures for the class ProductionLine in the FoodCo case study.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 56pt;text-indent: -26pt;text-align: left;">14.B <span class="s16">For each association in which ProductionLine participates allocate object identifiers to design the association.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;text-indent: -26pt;text-align: left;">14.C <span class="s16">Show how referential integrity can be enforced for the associations designed in Exercise 14.B.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">14.D <span class="s16">For an object-oriented programming language of your choice investigate the language features available to support the use of collection classes.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_905.png"/></span></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1263" class="s6">Rumbaugh et al. </a><a href="part38.htm#bookmark1121" class="s6">(1991) and Booch </a><a href="part38.htm#bookmark1128" class="s6">(1994) provide good advice on object design. Budgen </a><a href="part38.htm#bookmark1238" class="s6">(1994) offers descriptions of various design techniques. Meyer </a><a href="part38.htm#bookmark1252" class="s6">(1997) contains a comprehensive discussion of object- oriented software design and provides many interesting </a><a href="part38.htm#bookmark1275" class="s6">insights. Sommerville </a><a href="part38.htm#bookmark1252" class="s6">(2007) and Pressman (2009) both provide detailed discussions of design issues.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_906.png"/></span></p><p class="s1" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1159" class="s3" name="bookmark732">1 A list of Java primitive data types can be found in </a>Deitel and Deitel (2007).</p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark733">2 The precise meaning of the non-public categories of visibility depends on the programming language being used. When a designer is determining the visibility of parts of a model, he or she must be aware of the visibility (or scoping) offered by the implementation environment.</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark734">3  In UML a two-way association may be represented by drawing the association without the navigability arrowheads. However, an association without arrowheads may also represent an undefined association, that is, an association for which navigability is not yet decided.</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark735">4 This is a somewhat simplistic view. When an employee leaves the company the CreativeStaff object would be set to the state Ex-employee. In this case, although the object still exists, it is not appropriate for it to be referenced as a campaign manager.</a></p><p class="s1" style="padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark736">5 Z and V DM are formal languages that can be used to specify a system using mathematical entities such as sets, relations and sequences.</a></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_907.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:350pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark737">LEARNING OBJECTIVES</a><a name="bookmark738">&zwnj;</a></p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_908.jpg"/></span></p></td></tr><tr style="height:63pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;padding-right: 56pt;text-indent: 0pt;text-align: left;">what types of patterns have been identified in software development how to apply design patterns during software development</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the benefits and difficulties that may arise when using patterns.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_909.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="45" alt="image" src="Image_910.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark739">Design patterns provide a means for capturing knowledge about problems and successful solutions in systems design. Experience that has been gained in the past can be reused in similar situations, reducing the effort required to produce systems that are more resilient, more effective and more flexible.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Successful software development relies on the knowledge and expertise of the developer, among other factors. These are built up and refined during the developer’s working life. A systems analyst or software engineer applies potential solutions to development problems, monitors their success or failure and produces more effective solutions on the next occasion. It is in the nature of software development that the same problems tend to recur, though in different contexts. Individual developers may expend a great deal of development time and effort on solving these recurring problems from first principles each time they occur, and the solution that each individual produces may not be the most appropriate that could be achieved. This can result in information systems that are inflexible, difficult to maintain or inefficient or that possess some other undesirable features. This cycle of reinventing the wheel continued partly because there were no effective mechanisms for communicating successful solutions to recurring problems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark611" class="a">Patterns have been introduced in Section 8.5 where we considered analysis patterns in particular, and in </a>Chapter 13 we discussed architectural patterns. We consider further detailed aspects of patterns in this chapter and we focus our attention on some better-known design patterns to illustrate their application. We introduce guidelines for using patterns and explore the advantages and disadvantages of using patterns.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="308" height="24" alt="image" src="Image_911.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.2  </a><a href="part4.htm#bookmark4" class="s29">Software Development Patterns</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.2  </a><a href="part4.htm#bookmark4" class="s29">Software Development Patterns</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.2  </a><a href="part4.htm#bookmark4" class="s29">Software Development Patterns</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark740">15.2.1 </a><b>Frameworks</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Patterns have the potential to be an important aspect of the reuse strategy within an organization. <i>Frameworks </i>also offer opportunities for reuse. There can be confusion between patterns and frameworks but there are important differences. Frameworks are partially</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">completed software systems that may be targeted at a specified type of application: for example, sales order processing. An application system tailored to a particular organization may be developed from a framework by completing the unfinished elements and adding application- and organization-specific elements. This may involve the specialization of classes, the implementation of operations and perhaps the addition of new classes. Essentially a framework is a reusable mini-architecture that provides structure and behaviour common to all applications of this type.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The major differences between patterns and frameworks can be summarized as follows:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_912.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Patterns are more abstract and general than frameworks. A pattern is a description of the way that a type of problem can be solved, but the pattern is not itself a solution.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_913.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Unlike a framework, a pattern cannot be directly implemented in a particular software environment. A successful implementation is only an example of a design pattern.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_914.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Patterns are more primitive than frameworks. A framework can employ several patterns but a pattern cannot incorporate a framework.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">15.2.2 <b>Pattern catalogues and languages</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Patterns are grouped into catalogues and languages. A <i>pattern catalogue </i>is a group of patterns that are related to some extent and may be used together or independently of each other. The patterns in a <i>pattern language </i><a href="part38.htm#bookmark1156" class="a">are more closely related, and work together to solve problems in a specific domain. For example, Cunningham </a>(1995) documented the ‘Check Pattern Language of Information Integrity’, which consists of eleven patterns that address issues of data validation. All were developed from his experience of developing interactive financial systems in Smalltalk.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One of these patterns, Echo, describes how data input should be echoed back to the user after it has been modified and validated by the information system (since Cunningham uses the Model–V iew–Controller structure he talks about this in terms of changes made by the model). Typically, users enter small batches of values and then look at the screen to check that they have been correctly entered. The sequence in which a user can enter data into fields may not be fixed and so validation feedback should be given one field at a time. For example, a user enters a value as 5.236. This might be echoed back by the system as 5.24 (correctly rounded to two decimal places). The user receives direct visual feedback that the value has been accepted and how it has been modified.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">15.2.3 <b>Software development principles and patterns</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1129" class="a" name="bookmark741">Patterns are intended to embody good design practice and hence are based upon sound software development principles, many of which have been identified since the early days of software development and applied within development approaches that are not object- orientated. Buschmann et al. </a>(1996) suggest that the following are the key principles that underlie patterns:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_915.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_916.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_917.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_918.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_919.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_920.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">abstraction encapsulation information hiding modularization separation of concerns coupling and cohesion</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_921.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_922.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_923.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_924.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">sufficiency, completeness and primitiveness separation of policy and implementation separation of interface and implementation single point of reference</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_925.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">divide and conquer (this means breaking a complex problem into smaller, more manageable ones).</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">We have discussed these principles in earlier chapters.</p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">15.2.4 <b>Patterns and non-functional req uirements</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">Patterns address the issues that are raised by non-functional requirements (Chapters </a><a href="part23.htm#bookmark611" class="a">6 and </a><a href="part38.htm#bookmark1129" class="a">13). Buschmann et al. </a>(1996) identify these as the important non-functional properties of a software architecture:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_926.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_927.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_928.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_929.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_930.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_931.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">changeability interoperability efficiency reliability testability reusability.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">These properties may be required for a complete system or a part of a system. For example, a particular set of functional requirements may be seen as volatile and subject to change. The design based on these functional requirements will need to be able to cope with change and to minimize side effects. Another requirement could be that a part of an application must be highly reliable. Again, this requirement must be met by the design.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="395" height="25" alt="image" src="Image_932.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.3  </a><a href="part4.htm#bookmark4" class="s29">Documenting Patterns Pattern Templates</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.3  </a><a href="part4.htm#bookmark4" class="s29">Documenting Patterns Pattern Templates</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.3  </a><a href="part4.htm#bookmark4" class="s29">Documenting Patterns Pattern Templates</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark742">15.3.1 </a><b>Template contents</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Patterns may be documented using one of several templates. The <i>pattern template </i>determines the style and structure of the pattern description, and these vary in the emphasis they place on different aspects of patterns. The differences between pattern templates may mirror variations in the problem domain but there is no consensus as to the most appropriate template even within a particular problem domain. Nonetheless it is generally agreed that a pattern description should include the following elements (at least implicitly).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_933.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Name<a href="part38.htm#bookmark1182" class="a">. A pattern should be given a meaningful name that reflects the knowledge embodied by the pattern. This may be a single word or a short phrase. These names become the vocabulary for discussing conceptual constructs in the domain of expertise. For instance, the names of three of the Gamma design patterns (Gamma et al., 1995), Bridge, Mediator and Flyweight, give an indication of how they </a><span class="p">are intended to work.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_934.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Problem. <span class="p">This is a description of the problem that the pattern addresses (the intent of the pattern). It should identify and describe the objectives to be achieved, within a specified context and constraining forces. For example, one problem might be concerned with producing a flexible design, another with the validation of data. The problem can frequently be written as a question: for example, ‘How can a class be constructed that has only one instance and be accessed globally within the application?’ This question expresses the problem addressed by the Singleton pattern (discussed in Section 15.4.2).</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_935.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Context. <span class="p">The context of the pattern represents the circumstances or preconditions under which it can occur. The context should provide sufficient detail to allow the applicability of the pattern to be determined.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_936.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Forces. <span class="p">The forces of a pattern are the constraints or issues that must be addressed by the solution. These forces may interact with and conflict with each other, and possibly also with the objectives described in the problem. They reflect the intricacies of the pattern.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_937.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Solution. <span class="p">The solution is a description of the static and dynamic relationships among the parts of the pattern. The structure, the participants and their collaborations are all described. A solution should resolve all the forces in the given context. A solution that does not resolve all the forces fails.</span></p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">15.3.2 <b>Other aspects of templates</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A pattern template may be more extensive than the elements described above. Some other features that have figured in pattern templates are:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_938.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_939.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">an example of the use of a pattern that serves as a guide to its application; the context that results from the use of the pattern;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_940.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_941.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">the rationale that justifies the chosen solution; related patterns;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_942.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">known uses of the pattern that validate it (some authors suggest that until the problem and its solution have been used successfully at least three times—the <i>rule of three</i>—they should not be considered as a pattern);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_943.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">a list of aliases for the pattern (‘also known as’ or AKA);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_944.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">sample program code and implementation details (commonly used languages include C++, Java and Smalltalk).</p><p class="s41" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1182" class="a" name="bookmark743">Gamma et al. </a><a href="part38.htm#bookmark1156" class="a">(1995) use a template that differs from that described above. Although very detailed, this does not explicitly identify the forces. Cunningham’s </a><a href="part23.htm#bookmark774" class="a">(1995) ‘Check Pattern Language of Information Integrity’ is described in the Portland Form.</a>1<span class="p"> These variations in template style and structure make it difficult to compare patterns. It can also limit their reusability since it is more difficult to use a pattern that is documented in an unfamiliar template.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="183" height="25" alt="image" src="Image_945.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.4  </a><a href="part4.htm#bookmark4" class="s29">Design Patterns</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.4  </a><a href="part4.htm#bookmark4" class="s29">Design Patterns</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.4  </a><a href="part4.htm#bookmark4" class="s29">Design Patterns</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark744">15.4.1 </a><b>Types of design pattern</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Gamma et al. (1995) present a catalogue of 23 design patterns that are still widely used today. (The four authors are known as the ‘Gang of Four’ and the patterns they describe are sometimes referred to as the GOF patterns or the Gamma patterns.) The GOF patterns are categorized as <i>creational</i>, <i>structural </i>or <i>behavioural </i>to reflect their different purposes. An example of each of these categories is described in the following sections. The scope of a pattern may be primarily at either the class level or at the object level. Patterns that are principally concerned with objects describe relationships that may change at run-time and hence are more dynamic. Patterns that relate primarily to classes tend to be static and identify relationships between classes and their subclasses that are defined at compile-time. The GOF patterns are generally concerned with increasing the ease with which an application can be changed, by reducing the coupling among its elements and maximizing their cohesion. The patterns are based on principles of good design, which include maximizing encapsulation and the substitution of composition for inheritance wherever possible. Using composition as a design tactic produces composite objects whose component parts can be changed, perhaps dynamically under program control, hence resulting in a highly flexible system. Nonetheless, patterns will frequently use both inheritance and composition to achieve the desired result.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><a href="part38.htm#bookmark1129" class="a">Changeability involves several different aspects (</a>Buschmann et al., 1996): maintainability,</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">extensibility, restructuring and portability. Definitions of these terms vary but we use the following.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_946.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Maintainability <span class="p">is concerned with the ease with which errors in the information system can be corrected.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_947.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Extensibility <span class="p">addresses the inclusion of new features and the replacement of existing components with new improved versions. It also involves the removal of unwanted features.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_948.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Restructuring <span class="p">focuses on the reorganization of software components and their relationships to provide increased flexibility.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_949.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Portability <span class="p">deals with modifying the system so that it may execute in different operating environments, such as different operating systems or different hardware.</span></p><p class="s24" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">15.4.2 <b>Creational patterns</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark745">A creational design pattern is concerned with the construction of object instances. In general, creational patterns separate the operation of an application from how its objects are created. This decoupling of object creation from the operation of the application gives the designer considerable flexibility in configuring all aspects of object creation. This configuration may be dynamic (at run-time) or static (at compile-time). For example, when dynamic configuration is appropriate, an object-oriented system may use composition to make a complex object by aggregating simpler component objects. Depending upon circumstances different component objects may be used to construct the composite object and, irrespective of its components, the composite object will fulfil the same purpose in the application. A simple analogy illustrates this. A systems development department in an organization will vary in its composition from time to time. When permanent staff are on holiday contract staff may be employed to perform their roles. This enables the department to offer the same service to the organization at all times.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Creating composite objects is not simply a matter of creating a single entity but also</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">involves creating all the component objects. The separation of the creation of a composite object from its use within the application provides design flexibility. By changing the method of construction of a composite object, alternative implementations may be introduced without affecting the current use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S ingleton pattern</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark746" class="a">As an example we consider the creational pattern, Singleton, which can be used to ensure that only one instance of a class is created. In order to understand the use of the pattern we need to consider the circumstances under which a single instance may be required. The Agate campaign management system needs to hold information regarding the company. For example, its name, its head office address and the company registration details need to be stored so that they can be displayed in all application interfaces and printed on reports. This information should be held in only one place within the application but will be used by many different objects. One design approach would be to create a global data area that can be accessed by all objects, but this violates the principle of information hiding. Any change to the structure of the elements of global data would require a change to all objects that access them. The creation of a Company class overcomes this problem by encapsulating the company attributes (Fig. </a>15.1) and ensuring that they are not public. These attributes are then only accessible to other objects through the operations of the Company object. But there is still a problem with this proposal. An object that wants to use the Company object needs to know the Company object’s identifier so that it can send messages to it. This suggests that the Company object identifier should be globally accessible—but again this is undesirable since it violates information hiding.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 155pt;text-indent: 0pt;text-align: left;"><span><img width="189" height="129" alt="image" src="Image_950.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark746">Figure 15.1 </a><span class="s49">Company </span><span class="s90">class for the Agate case study.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some object-oriented programming languages (including Java and C++) provide a mechanism that enables certain types of operations to be accessed without reference to a specified object instance. These are called <i>class </i>(or <i>static</i>) <i>operations</i>. This mechanism offers a solution to the problem of providing global access without the need to globally define the object identifier. For example, a static operation getCompanyInstance() can be defined in such a way that it will provide any client object with the identifier for the Company instance. This operation can be invoked by referencing the class name as:</p><p style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Company.getCompanyInstance()</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">When a client object needs to access the Company object it can send this message to the Company class and receive the object identifier in reply. The client object can now send a getCompanyDetails() message to the Company object.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: right;"><a href="part23.htm#bookmark747" class="a">There is one further aspect to this design problem. It is important that there should be only one instance of this object. To ensure system integrity the application should be constructed so that it is impossible to create more than one. This aspect of the problem can be solved by giving the Company class sole responsibility for creating a Company object. This is achieved by making the class constructor private so that it is not accessible by another object. The next issue that needs to be addressed is the choice of an event that causes the creation of the company object. Perhaps the simplest approach is to create the Company object at the moment when it is first needed. When the Company class first receives the message getCompanyInstance() this can invoke the Company class constructor. Once the Company object has been created, the object identifier is stored in the class (or static) attribute companyInstance so that it can be passed to any future client objects. When the Company object is first created its attribute values may, for example, be read in from a database or a file. So far we have produced a design for the Company class (</a>Fig. 15.2) that provides a single global point of access via the class operation getCompanyInstance() and that also ensures</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">that only one instance is created.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span><img width="361" height="180" alt="image" src="Image_951.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark747">Figure 15.2 </a><span class="s49">Company </span><span class="s90">class with class-scope operation and attribute.</span></p><p style="padding-top: 9pt;padding-left: 20pt;text-indent: 0pt;line-height: 19pt;text-align: left;">A simple version of the logic for the getCompanyInstance() operation is: If (companyInstance == null)</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: left;">{</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: left;">companyInstance = new Company()</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 12pt;text-align: left;">} return companyInstance</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark748" class="a">The sequence diagram in Fig. </a>15.3 shows the interaction Get company name for display. In this it can be seen that the :RequestingObject receives the object identifer (held in companyInstance) for the Company object in the same way whether the object has just been created or is already in existence.</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="540" height="413" alt="image" src="Image_952.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark748">Figure 15.3 </a><span class="s21">Sequence diagram for the interaction </span><span class="s89">Get company name for display.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark749" class="a">The design may need to accommodate further requirements. Since Agate operates as a separate company in each country (each owned by the same multinational), variations in company law from country to country may necessitate different company registration details to be recorded for each country. This suggests a requirement for different types of Company class each with its own variation of the registration details. The creation of a separate subclass for each style of company registration details provides a solution to this aspect of the problem (</a><a href="part38.htm#bookmark1182" class="a">Fig. 15.4). When the getCompanyInstance() operation is first called, the appropriate subclass is instantiated. If the Company object has not yet been instantiated, its constructor operation can access details of the country (say, held in a CurrentCountry object) to determine which subclass should be instantiated. This could use the Factory Method pattern (Gamma et </a><a href="part38.htm#bookmark1182">al., 1995) to create the appropriate subclass.</a></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="289" alt="image" src="Image_953.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark749">Figure 15.4 </a><span class="s49">Company </span><span class="s90">class with subclasses.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_954.jpg"/></span></p><p style="padding-top: 9pt;padding-left: 51pt;text-indent: -30pt;line-height: 18pt;text-align: left;">This part of the design for the campaign management system now has: a class Company, which is only instantiated once;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_955.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">an instance of this class, which is globally accessible;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_956.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">different subclasses of Company, which are instantiated as needed, depending on run-time circumstances.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">We have described above an application of the Singleton pattern. The pattern is described below in more general language using the key elements of the pattern template that we discussed in Section 15.3.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_957.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Name. <b>Singleton</b><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_958.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Problem. <span class="p">How can a class be constructed that should have only one instance and that can be accessed globally within the application?</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_959.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Context. <span class="p">In some applications it is important that a class has exactly one instance. A sales order processing application may be dealing with sales for one company. It is necessary to have a Company object that holds details of the company’s name, address, taxation reference number and so on. Clearly there should be only one such object. Alternative forms of a singleton object may be required depending upon initial circumstances.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_960.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Forces. <span class="p">One approach to making an object globally accessible is to make it a global variable, but in general this is not a good design solution as it violates information hiding. Another approach is not to create an object instance at all but to use class operations and attributes (called ‘static’ in C++ and Java). However, this limits the extensibility of the model since polymorphic redefinition of class operations is not possible in all development environments (for example C++).</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_961.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Solution. <a href="part23.htm#bookmark750" class="a">Create a class with a class operation getInstance(), which, when the class is first accessed, creates the relevant object instance and returns the object identity to the requesting object. On subsequent accesses of the getInstance() operation no additional instance is created but the object identity of the existing object is returned. A class diagram fragment for the singleton pattern is shown in </a><span class="p">Fig. 15.5.</span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;"><span><img width="402" height="155" alt="image" src="Image_962.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark750">Figure 15.5 </a><span class="s21">Creational patterns—Singleton.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark751">The Singleton pattern offers several advantages but also has some disadvantages.</a></p><p class="s24" style="padding-top: 5pt;padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">It provides controlled access to the sole object instance as the Singleton class encapsulates the instance.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">+ <span style=" color: #000;">The namespace is not unnecessarily extended with global variables.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+  <span style=" color: #000;">The Singleton class may be subclassed. At system start-up, user-selected options may determine which of the subclasses is instantiated when the Singleton class is first accessed.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">+ <span style=" color: #000;">A variation of this pattern can be used to create a specified number of instances if required. </span>– <span style=" color: #000;">Using the pattern introduces some additional message passing. To access the singleton</span></p><p style="padding-left: 17pt;text-indent: 0pt;text-align: left;">instance the class scope operation getInstance() has to be accessed first rather than accessing the instance directly.</p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">–  <span style=" color: #000;">The pattern limits the flexibility of the application. If requirements change, and many instances of the Singleton class are needed, then accommodating this new requirement necessitates significant modification to the system.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">–  <span style=" color: #000;">The Singleton pattern is quite well known and developers are tempted to use it in circumstances that are inappropriate.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark752" class="a">In UML terms a pattern describes a collaboration and the interaction of the participating elements that provide the required functionality. A pattern may be documented as a template collaboration, as shown in Fig. 15.6. In essence a template collaboration is a parameterized collaboration that may be implemented (that is, instantiated) with different classes or objects. The notation describes the pattern in terms of the roles that the participants occupy. In the case of the Singleton pattern there is only one role, Singleton class, and this is occupied by the Company class as in </a>Fig. 15.6.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;"><span><img width="430" height="254" alt="image" src="Image_963.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark752"><span class="s31">Figure 15.6 </span></a>Template collaboration for <span class="s89">Singleton </span>pattern implemented with the class <span class="s89">Company.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">15.4.3 <b>Structural patterns</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark753">Structural patterns address issues concerned with the way in which classes and objects are organized. Structural patterns offer effective ways of using object-oriented constructs such as inheritance, aggregation and composition to satisfy particular requirements. For instance, there may be a requirement for a particular aspect of the application to be extensible. In order to achieve this, the application should be designed with constructs that minimize the side-effects of future change. Alternatively, it may be necessary to provide the same interface for a series of objects of different classes.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C omposite pattern</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It may be appropriate to apply the Composite structural pattern in a design for the Agate case study. In the following example we assume that further work is required to design a multimedia application that can store and play components of an advert.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark754" class="a">Here an advert is made up of sound clips and video clips, each of which may be played individually or as part of an advert. The classes SoundClip and V ideoClip have attributes and operations in common and it is appropriate that these classes are subclassed from MediaClip (Fig. </a><a href="part23.htm#bookmark755" class="a">15.7). However, not all advert clips are primitive (that is, made up of only a single MediaClip). Some consist of one or more sequences of clips, such that each sequence is in turn an aggregation of SoundClip and V ideoClip objects (</a>Fig. 15.8).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><span><img width="386" height="210" alt="image" src="Image_964.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark754">Figure 15.7 </a><span class="s49">MediaClip </span><span class="s90">inheritance hierarchy.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><span><img width="506" height="266" alt="image" src="Image_965.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark755">Figure 15.8 </a><span class="s49">AdSequence </span><span class="s90">aggregation hierarchy.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark775" class="a" name="bookmark756">These two orthogonal</a>2<a href="part23.htm#bookmark757" class="a"> hierarchies can be integrated by treating AdSequence both as a subclass of MediaClip and as an aggregation of MediaClip objects (see </a><span class="p">Fig. 15.9).</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="549" height="442" alt="image" src="Image_966.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark757">Figure 15.9 </a><span class="s21">Integrating the two hierarchies for </span><span class="s89">MediaClip.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark757" class="a">All the subclasses in Fig. </a>15.9 include the polymorphically redefined operation play(). For the subclasses V ideoClip and SoundClip this operation actually plays the object. But for an AdSequence object, an invocation of the play() operation results in it sending a play() message to each of its components in turn. This structure is a straightforward application of the Composite pattern where a MediaClip object and an AdSequence object provide a common interface in part.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark758" class="a">Figure </a><a href="part23.htm#bookmark760" class="a">15.10 shows the template collaboration diagram for the Composite pattern with its roles and types </a><a href="part23.htm#bookmark759" class="a">and Fig. </a><a href="part23.htm#bookmark760" class="a">15.11 shows the allocation of particular classes to the roles. </a><a href="part23.htm#bookmark760">Figure</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark760" class="a">15.12 contains another type of UML diagram, a composite structure diagram. The </a><a href="part23.htm#bookmark761" class="a">top compartment of the diagram references an interaction diagram that describes the interaction and the lower compartment shows the key relationships between the participating elements. A sequence diagram describing the interaction for the operation play() in an AdSequence object is shown in </a>Fig. 15.13. The interaction constraint uses the OCL size() operation to get the size of the collection mediaClipCollection. The Composite pattern is described more generally below:</p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><a name="bookmark760"><span><img width="451" height="268" alt="image" src="Image_967.jpg"/></span></a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark758">Figure 15.10 </a><span class="s21">Template collaboration for </span><span class="s89">Composite Pattern.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="548" height="272" alt="image" src="Image_968.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark759"><span class="s31">Figure 15.11 </span></a>Template collaboration for <span class="s89">Composite Pattern </span>with implementation classes shown.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 130pt;text-indent: 0pt;text-align: left;"><span><img width="258" height="279" alt="image" src="Image_969.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 15.12 <span class="s21">Composite structure diagram for the </span><span class="s89">Composite Pattern.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: 0pt;text-align: left;"><span><img width="412" height="232" alt="image" src="Image_970.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark761">Figure 15.13 </a><span class="s21">Sequence diagram for the interaction </span><span class="s89">Play advert sequence.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_971.jpg"/></span></p><p style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;"><i>Name</i>. <b>Composite</b>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_972.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Problem<span class="p">. There is a requirement to represent whole–part hierarchies so that both whole and part objects offer the same interface to client objects.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_973.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Context<a href="part18.htm#bookmark391" class="a">. In an application both composite and component objects exist and are required to offer the same behaviour. Client objects should be able to treat composite or component objects in the same way. A commonly used example for the composite pattern is a graphical drawing package. Using this software package a user can create (from the perspective of the software package) atomic objects like circle or square and can also group a series of atomic objects or composite objects together to make a new composite object. It should be possible to move or copy this composite object in exactly the same way as it is possible to move or copy an individual square or a circle. See Figs </a><a href="part18.htm#bookmark392" class="a">8.5 and </a><span class="p">8.6 which illustrate a straightforward composition without using the Composite pattern.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_974.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Forces<span class="p">. The requirement that the objects, whether composite or component, offer the same interface suggests that they belong to the same inheritance hierarchy. This enables operations to be inherited and to be polymorphically redefined with the same signature. The need to represent whole–part hierarchies indicates the need for an aggregation structure.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_975.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Solution<a href="part23.htm#bookmark762" class="a">. The solution resolves the issues by combining inheritance and aggregation hierarchies. Both subclasses, Leaf and Composite, have a polymorphically redefined operation anOperation(). In Composite this redefined operation invokes the relevant operation from its components using a simple loop construct (Fig. </a><span class="p">15.14). The Composite subclass also has additional operations to manage the aggregation hierarchy so that components may be added or removed.</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="410" alt="image" src="Image_976.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark762">Figure 15.14 </a><span class="s21">Structural patterns</span><span class="s89">—Composite.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark757" class="a">Further requirements may need to be considered for the Agate example. Perhaps V ideoClip and SoundClip objects must be played in a particular sequence. This can be handled if the aggregate AdSequence maintains an ordered list of its components. This is shown in Fig. </a>15.9 by the {<i>ordered</i><a href="part23.htm#bookmark757" class="a">} property on the aggregation association. Each component object can be given a sequence number, and two components that have the same sequence number are played simultaneously. The operation changeSequence() allows a component MediaClip object to be moved up or down within the sequence of clips in the advertisement (Fig. </a>15.9).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">15.4.4 <b>Behavioural patterns</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Behavioural patterns address the problems that arise when responsibilities are assigned to classes and in designing algorithms. Behavioural patterns not only suggest particular static relationships between objects and classes but also describe how the objects communicate. Behavioural patterns may use inheritance structures to spread behaviour across the subclasses or they may use aggregation and composition to build complex behaviour from simpler components. The State pattern, which is considered below, uses both of these techniques.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S tate pattern</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark562" class="a">Let us examine the Agate case study to determine whether it has features that may justify the application of the State pattern. First, are there any objects with significant state-dependent behaviour? Campaign objects have behaviour that varies according to state; a Campaign object may be in one of four main states, as shown in Fig. </a>11.20 (for simplicity we ignore the substates of the Active state). Clearly a Campaign object’s state changes dynamically as the campaign progresses, thus necessitating changes in the behaviour of the object.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For example, when the FoodCo campaign is planned a Campaign object is created in the Commissioned state. It remains in this state until a campaign budget has been agreed and only then does it become possible to run advertisements, although some preparatory work may be done for the campaign in the meantime. Once a Campaign object enters the Active</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark763" class="a">state, all advert preparation and any other work that is done is subject to an agreed billing schedule. Several operations, for example addAdvert() and calcCosts(), will behave differently depending upon the state of the Campaign object. It would be possible to construct a working version of the software using the design for the Campaign class that is shown in Fig. </a>15.15. However, this would be a complex class that is further complicated by state-dependent operations such as calcCosts(), which would need to be specified with a series of case or if– then–else statements to test the state of the object. It would be simpler to subdivide the operations that have state-dependent behaviour, which in this case would result in four separate  calcCosts()  operations,  one  for  each  state.  The  inclusion  of calcCostsCommissioned(), calcCostsActive() and so on within Campaign would simplify the operation calcCosts(), but the class as a whole would become even more complex.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 71pt;text-indent: 0pt;text-align: left;"><span><img width="414" height="470" alt="image" src="Image_977.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark763"><span class="s31">Figure 15.15 </span></a>The <span class="s89">Campaign </span>class.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="296" alt="image" src="Image_978.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark764"><span class="s31">Figure 15.16 </span></a>State pattern for Agate showing a simplified version of <span class="s89">Campaign </span>class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark764" class="a">Another possibility is to create additional classes, one for each state, so that each holds a state-specific version of the operations, and this is how the State pattern works. A class diagram fragment illustrating this application of the State pattern is shown in Fig. 15.16. Since the subclasses of CampaignState have no attributes specific to a particular Campaign object, it is possible to have only one instance of each in the system. Thus there will be a maximum of four CampaignState objects, one for each state, and the additional overhead of manipulating the objects is unlikely to be significant (</a>Fig. 15.16). These are examples of <i>pure state classes </i>as they contain no attributes. They could be implemented using a variation of the Singleton pattern that ensures one and only one instance of each subclass will exist (this differs from its more usual application of ensuring that there is at most one object for a whole hierarchy).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark765" class="a">Figure </a>15.17 shows some sample Campaign objects linked to their state objects. The object <u>c:Campaign</u> and <u>e:Campaign</u> both have links to the <u>:Active</u> state object. This is a pure state object and has no attributes for any particular campaign and can be used by more than one Campaign object at a time. Any state dependent messages that are received by <u>c:Campaign</u>, for example calcCosts(), will essentially be passed on to the object whose identifier is held in the currentState attribute. In this case, for <u>c:Campaign</u> a calcCosts() message will be sent to the <u>:Active</u> object. If <u>d:Campaign</u> receives a calcCosts() message, this will result in a calcCosts() message being sent to <u>:Completed</u>. The state object that receives the calcCosts() message is determined by the value of currentState without the need for any conditional statements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><span><img width="386" height="211" alt="image" src="Image_979.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark765">Figure 15.17 </a><span class="s21">Some State pattern objects for Agate.</span></p><p style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">The State pattern is described more generally below.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_980.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;"><i>Name</i>. <b>State</b>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_981.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Problem<span class="p">. An object exhibits different behaviour when its internal state changes making the object appear to change class at run-time.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_982.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Context<span class="p">. In some applications an object may have complex behaviour that is dependent upon its state. In other words, the response to a particular message varies according to the object’s state. One example is the calcCosts() operation in the Campaign class.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_983.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Forces<span class="p">. The object has complex behaviour, which should be factored into less complex elements. One or more operations have behaviour that varies according to the state of the object. Typically the operation would have large, multi-part conditional statements depending on the state. One approach is to have separate public operations for each state but client objects would need to know the state of the object so that they could invoke the appropriate operation. For example, four operations calcCostsCommissioned(),   calcCostsActive(),   calcCostsCompleted()   and calcCostsPaid() would be required for the Campaign object. The client object would need to know the state of the Campaign object in order to invoke the relevant calcCosts() operation. This would result in undesirably tight coupling between the client object and the Campaign object. An alternative approach is to have a single public  calcCosts()  operation  that  invokes  the  relevant  private  operation (calcCostsCommissioned() would be private). However, the inclusion of a separate private operation for each state may result in a large complex object that is difficult to construct, test and maintain.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_984.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Solution<a href="part23.htm#bookmark766" class="a">. The State pattern separates the state-dependent behaviour from the original object and allocates this behaviour to a series of other objects, one for each state. These state objects then have sole responsibility for that state’s behaviour. The original object, shown as Context in Fig. </a><span class="p">15.18, delegates responsibility to the appropriate state object. The original object becomes an aggregate of its states, only one of which is active at one time. The state objects form an inheritance hierarchy.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;"><span><img width="523" height="220" alt="image" src="Image_985.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark766">Figure 15.18 </a><span class="s21">Behavioural patterns</span><span class="s89">—State.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">The responsibility for transitions from one state to another may either be taken by the Context class or it may be shared among the State subclasses. If the rules for state changes are volatile and subject to change, it may be better for the current State object to be responsible for the next transition. In this way the current state object always knows all the states into which the object may move next. However, this has the disadvantage of producing dependencies between state subclasses.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark767" class="a">For example, in Fig. </a>15.19 the :Campaign object (the Context object) receives the completeCampaign() message. This results in a completeCampaign() message being sent to</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the current state object, in this case represented by the :Active object. The completeCampaign operation in the Active class then sends the changeState(nextState) message back to the</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark767" class="a">:Campaign object and places the object identifier for the next state object (:Completed) in the currentState attribute. When the :Campaign object next receives a state dependent message, it will be passed on to the :Completed object. In </a>Fig. 15.19 it is assumed that the Active state object already exists. As it is a pure state object, it could be created using the Singleton pattern the first time it is accessed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: 0pt;text-align: left;"><span><img width="412" height="242" alt="image" src="Image_986.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark767">Figure 15.19 </a><span class="s21">Sequence diagram for the interaction </span><span class="s89">Set campaign completed.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark768" class="a">Figure </a><a href="part23.htm#bookmark766" class="a">15.20 shows the template collaboration for the State pattern and the classes allocated to the roles shown in </a>Fig. 15.18.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="541" height="286" alt="image" src="Image_987.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark768">Figure 15.20 </a><span class="s21">Template collaboration for </span><span class="s89">State Pattern.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If the Campaign class was taking responsibility for managing the state, there would a be a nextState()  message  from  the  :Campaign  object  to  itself  when  it  received  the completeCampaign() message.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark769">If it is not appropriate to use pure state classes, then a new state object may have to be created whenever a Context object changes state and the old state object may have to be deleted. This increases processing load for various transactions and may affect performance.</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Use of the State pattern has both advantages and disadvantages, the latter particularly in terms of its possible side-effects on system performance.</p><p class="s24" style="padding-top: 5pt;padding-left: 17pt;text-indent: -11pt;text-align: justify;">+ <span style=" color: #000;">State behaviour is localized and the behaviour for different states is separated. This eases any enhancement of the state behaviour, in particular the addition of extra states.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">+ <span style=" color: #000;">State transitions are made explicit. The state object that is currently active indicates the current state of the Context object.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">+ <span style=" color: #000;">Where a state object has no attributes relevant to a specific Context object it may be shared among the Context objects. This State object is a Singleton!</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">– <span style=" color: #000;">If the State objects cannot be shared among the Context objects, each Context object will have to have its own State object thus increasing the number of objects and the storage requirements for the system.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">– <span style=" color: #000;">State objects may have to be created and deleted as the Context object changes state, thus introducing a processing overhead.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">–  <span style=" color: #000;">Use of the State pattern introduces at least one extra message, the message from the Context class to the State class, thus adding a further processing overhead.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="279" height="24" alt="image" src="Image_988.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.5 </a><a href="part4.htm#bookmark4" class="s29">H ow to U se Design Patterns</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.5 </a><a href="part4.htm#bookmark4" class="s29">H ow to U se Design Patterns</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.5 </a><a href="part4.htm#bookmark4" class="s29">H ow to U se Design Patterns</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark770">When using a pattern the problem that is being addressed and its context must be carefully analysed. Before contemplating the application of patterns within a software development environment it is important to ensure that all members of the team are trained in the use of patterns.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">When a developer identifies a part of the application that may be subject to high coupling, a large, complex class or any other undesirable feature, there may be a pattern that addresses the difficulty. The following issues should be considered before employing a pattern to resolve the problem.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_989.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Is there a pattern that addresses a similar problem?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_990.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_991.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_992.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Does the pattern trigger an alternative solution that may be more acceptable? Is there a simpler solution? Patterns should not be used just for the sake of it. Is the context of the pattern consistent with that of the problem?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_993.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Are the consequences of using the pattern acceptable?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_994.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Are constraints imposed by the software environment that would conflict with the use of the pattern?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part38.htm#bookmark1182" class="a">Gamma et al. </a>(1995) suggest a seven-part procedure that should be followed after an appropriate pattern has been selected in order to apply it successfully.</p><p class="s25" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1. <span class="p">Read the pattern to get a complete overview.</span></p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: left;">2. <span class="p">Study the structure of the pattern, its participants (e.g. classes) and its collaborations in detail.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">3. <span class="p">Examine sample code to review an implementation of the pattern.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">4. <span class="p">Choose names for the classes that relate to the application context.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">5. <span class="p">Define the classes.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">6. <span class="p">Give the operations application-specific names.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">7. <span class="p">Implement operations that perform the necessary responsibilities and collaboration.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark757" class="a">A pattern should not be viewed as a prescriptive solution but rather as guidance on how to find a suitable solution. It is quite likely (in fact almost certainly the case) that a pattern will be used differently in each particular set of circumstances. At a simple level the classes involved will have attributes and operations that are determined by application requirements. Often a pattern is modified to accommodate contextual differences. For example, the inclusion of the changeSequence() operation shown in Fig. </a>15.9 represents a variation on the Composite pattern to allow the sequence of MediaClip objects in AdSequence to be changed. When a developer is considering using a pattern to address a problem this may suggest to the developer some other design solution that is better than using the pattern itself.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">If patterns are going to be used by a developer, then relevant pattern catalogues and languages should be made available and easily accessible. Many patterns are documented on the Internet or on company intranets. It is important to consider the way a pattern is documented so that it is easy for the developer to determine its applicability. The minimum information we suggest to document a pattern is described earlier in Section 15.3. Modelling tool support for patterns has developed and is provided by some vendors. Some tools allow the user to select classes and apply a pattern to them, or to import a pattern template set of classes into a model and rename the classes to fit the application domain.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Software developers may wish to capture their experience in a pattern format and build their own pattern catalogue or language. The process of identifying patterns is known as <i>pattern mining </i>and requires careful validation and management to ensure that the patterns that are captured suggest good solutions to recurring problems. Again, the pattern elements described earlier provide a checklist against which any candidate pattern can be compared.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark771">If a pattern satisfies these criteria, then its quality should be assured via a walkthrough. The most commonly used form of walkthrough for a pattern is known as a pattern writer’s workshop. This involves a small of group of pattern authors who constructively comment upon each other’s patterns. The focus of a workshop helps the participants describe useful patterns effectively.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="371" height="25" alt="image" src="Image_995.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.6  </a><a href="part4.htm#bookmark4" class="s29">Benefits and Dangers of U sing Patterns</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.6  </a><a href="part4.htm#bookmark4" class="s29">Benefits and Dangers of U sing Patterns</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.6  </a><a href="part4.htm#bookmark4" class="s29">Benefits and Dangers of U sing Patterns</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark772">One of the most sought-after benefits of object-orientation is reuse. Reuse at the object and class levels has proved more elusive than was expected in the early days of object-orientation. Patterns provide a mechanism for the reuse of generic solutions for object-oriented and other approaches. They embody a strong reuse culture. Within the design context, patterns suggest reusable elements of design and, most significantly, reusable elements of demonstrably successful designs. This reuse permits the transfer of expertise to less experienced developers so that a pattern can be applied again and again.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Another benefit gained from patterns is that they offer a vocabulary for discussing the problem domain (whether it be analysis, design or some other aspect of information systems development) at a higher level of abstraction than the class and object, making it easier to consider micro-architectural issues and systems architecture as well. Pattern catalogues and pattern languages offer a rich source of experience that can be explored and provide patterns that can be used together to generate effective systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark765" class="a">Some people believe that the use of patterns can limit creativity. Since a pattern provides a standard solution, the developer may be tempted not to spend time on considering alternatives. The use of patterns in an uncontrolled manner may lead to over-design. Developers may be tempted to use many patterns irrespective of their benefits, thus rendering the software system more difficult to develop, maintain and enhance. When a pattern is used in an inappropriate context, the side-effects may be disastrous. For example, the use of the State pattern may significantly increase the number of objects in the application with a consequent reduction in performance. If the concrete state classes are not pure state classes (i.e. they hold attributes), then it will not be possible to share state classes, as is shown in </a><a href="part23.htm#bookmark765">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark765" class="a">15.17. Each context class may need its own state class and the total number of objects </a>could be doubled, resulting in an additional procession load for object creation and deletion as states change.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The introduction of any new approach to software development has costs for the organization. Developers need to spend time understanding the relevant pattern catalogues, they need to be provided with easy access to the relevant catalogues and they need to be trained in the use of patterns. Another aspect of the introduction of patterns is the necessary cultural change. Patterns can only be used effectively in the context of an organizational culture of reuse. Ironically, the introduction of a patterns approach may arouse less opposition to the encouragement of a reuse culture than an attempt to introduce procedures for code reuse. Developers need to think about how to apply a pattern to their current context, and thus there are greater opportunities for individual creativity.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">These issues emphasize that the use of patterns in software development requires care and planning. In this respect patterns are no different from any other form of problem solving: they must be used with intelligence and an awareness of any side-effects. It is also important to appreciate that patterns address only some of the issues that occur during systems development. In no way should patterns be viewed as a ‘silver bullet’ that conquers all problems in systems development.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="25" alt="image" src="Image_996.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">15.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark773">This chapter has considered how patterns can be used in software development. Patterns have been identified in many different application domains and are applicable at many different stages of the software development process. A significant aspect of the growth of interest in patterns is the increased awareness of design issues that follows as a consequence. Patterns represent a important change in the reuse culture in software development. Reuse need no longer be focused solely on elements of code, whether these are individual classes or complex frameworks, but realistically can also include the reuse of analysis or design ideas as described by patterns.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Related patterns are grouped together in catalogues. A pattern language is a group of patterns focused on a particular aspect of a problem domain so that when used together they provide solutions to the problems that arise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:188pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">15.1  <span class="s16">What is the difference between a pattern and a framework and how is each used?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">15.2 <span class="s16">What are the main aspects of changeability?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">15.3  <span class="s16">Why is the class constructor private in the Singleton pattern?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">15.4 <span class="s16">What are the advantages of using the Singleton pattern?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">15.5 <span class="s16">What are the disadvantages of using the Singleton pattern?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">15.6  <span class="s16">What implementation problems may occur when using the State pattern?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">15.7  <span class="s16">What are the differences between a pattern language and a pattern catalogue?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">15.8  <span class="s16">List two general dangers and two general benefits of the use of patterns.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 56pt;text-indent: -29pt;text-align: left;">15.9  <span class="s16">What seven steps are suggested by Gamma et al. for the effective use of patterns?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">15.10 <span class="s16">What are the advantages of using the Composite pattern?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:124pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">15.A <a href="part38.htm#bookmark1182" class="s36">Read the design patterns Bridge and Decorator in </a><span class="s16">Gamma et al. (1995) and rewrite their description using the structure of the template given in Section 15.3.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">15.B <span class="s16">In the FoodCo case study the ProductionLine class might be a candidate for design using the State pattern. Show how a variation of the State pattern could handle this requirement. What benefits and disadvantages are there in applying this solution?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">15.C <span class="s16">Where and how could the Singleton pattern be used in the FoodCo case study? Prepare a design class specification for a suitable Singleton class.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-bottom: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_997.png"/></span></p><p class="s7" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1182" class="s6">Gamma et al. </a><a href="part38.htm#bookmark1129" class="s6">(1995) and Buschmann et al. </a><a href="part38.htm#bookmark1266" class="s6">(1996) are two excellent texts that give important advice concerning software construction and should be on the essential reading list of any software developer. Schmidt et al. </a>(2000) provide a further set of architectural patterns. Even where the patterns they discuss are not directly relevant, there is much to learn from their approach to solving design problems.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1155" class="s6">The ‘Pattern Languages of Program Design’ (known as the PLOP) books (</a><a href="part38.htm#bookmark1293" class="s6">Coplien and Schmidt, 1995; V lissides et al., </a><a href="part38.htm#bookmark1229" class="s6">1996; Martin et al., </a><a href="part38.htm#bookmark1192" class="s6">1998; Harrison et al., </a><a href="part38.htm#bookmark1228" class="s6">2000; Manolescu, </a>2006) catalogue a wide range of patterns for all aspects of software development.</p><p style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="http://hillside.net/" class="s6" target="_blank">The Hillside Group maintains a large body of information about patterns on its website at </a><a href="http://hillside.net/patterns/onlinepatterncatalog.htm" class="s6" target="_blank">http://hillside.net/.   This   site   hosts   an   online   catalogue   of   patterns   at http://hillside.net/patterns/onlinepatterncatalog.htm.</a></p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="http://c2.com/ppr/" class="s6" target="_blank">Further useful patterns are available in the Portland Pattern Repository at </a><a href="http://www-128.ibm.com/developerworks/patterns/" class="s6" target="_blank">http://c2.com/ppr/. IBM Patterns for e-Business can be found at the website </a>http://www-128.ibm.com/developerworks/patterns/.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="http://developer.java.sun.com/developer/technicalArticles/J2EE/patterns/" class="s6" target="_blank">A series of Java related patterns (some architectural and some design) are available at </a>http://developer.java.sun.com/developer/technicalArticles/J2EE/patterns/. Two other more recent texts are <i>Core J2EE Patterns </i><a href="part38.htm#bookmark1101" class="s6">(Alur et al., </a><a href="part38.htm#bookmark1235" class="s6">2003) and Metsker’s </a>(2002) <i>Design Patterns Java Workbook</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_998.png"/></span></p><p class="s1" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark774">1 Named after Portland, Oregon where it originated, this is essentially free-format text.</a></p><p class="s1" style="padding-top: 1pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a name="bookmark775">2 The term literally means ‘at right angles to each other’. It is more loosely used here to describe hierarchies that cannot be directly mapped onto each other.</a></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_999.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:350pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark776">LEARNING OBJECTIVES</a><a name="bookmark777">&zwnj;</a></p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_1000.jpg"/></span></p></td></tr><tr style="height:87pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the importance of good user interface design</p><p class="s16" style="padding-left: 54pt;padding-right: 98pt;text-indent: 0pt;text-align: left;">what is meant by metaphors in human–computer interaction about different approaches to human–computer interaction how to apply the techniques of scenario-based design</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">how standards and the law affect interface design.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_1001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="77" alt="image" src="Image_1002.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark778">Human–computer interaction (HCI) is the discipline of designing effective interaction between people and the information systems that they use; it combines the techniques of psychology and ergonomics with those of computer science. Designing the user interface can be critical in the development of an information system. The interface is what the users see. To them it </a><i>is </i><a href="part23.htm#bookmark814" class="a">the system. Their attitude towards the entire system can be coloured by their experience of the user interface. Before we move on to the design of the classes that make up the user interface in Chapter </a>17, we will address some of the HCI issues that influence the design of the user interface.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This chapter is about the human factors aspects of designing the inputs into and outputs from information systems. The inputs and outputs can be in the conventional form of data entry and enquiry screens and printed reports, or they can take the form of speech recognition, scanners, touch screens, gestures and movements of handheld remote devices. We shall be concentrating on the conventional inputs and outputs used in information systems, although we recognize that the growth in the use of multimedia systems means that even quite conventional business information systems may incorporate multiple media as inputs and outputs.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark779">There are two metaphors that are widely used to represent the user interface: first, the idea that the user is conducting a dialogue with the system, and, second, the idea that the user is directly manipulating objects on screen. Much HCI work in the past has concentrated on producing guidelines for dialogue design, and we include a section on the characteristics of a good dialogue.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is possible to adopt an informal approach to designing the human–computer interaction for a system in which the designer considers the nature of the task that the user is carrying out, the type of user, the amount of training that the user will have undertaken, the frequency of use and the hardware and software architecture of the system. There are more formal approaches available, using structured, ethnographic or scenario-based approaches to HCI design. The scenario-based method is closest to the object-oriented approach that uses use cases to document the requirements for the system.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are a number of international standards for the ergonomics of workstation design and, for European readers, legal obligations for HCI design that are imposed by the European Union’s directive on health and safety requirements for work with display screens. With the growth of the Internet and the use of World Wide Web (WWW) technologies for intranets and access to information systems within organizations, accessibility of user interfaces for people with disabilities has become an important HCI issue. We highlight the legal requirements for accessibility and some of the initiatives that set guidelines to improve the accessibility of browser-based user interfaces.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="167" height="25" alt="image" src="Image_1003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.2 </a><a href="part4.htm#bookmark4" class="s29">U ser Interface</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.2 </a><a href="part4.htm#bookmark4" class="s29">U ser Interface</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.2 </a><a href="part4.htm#bookmark4" class="s29">U ser Interface</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark780">16.2.1 </a><b>What is the user interface?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Users of an information system need to interact with it in some way. Whether they are users of FoodCo’s telesales system entering orders made over the telephone by customers, or members of the public using a touch-screen system to find tourist information, they will need to carry out the following tasks:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1004.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1005.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">read and interpret information that instructs them how to use the system; issue commands to the system to indicate what they want to do;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1006.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">enter words and numbers into the system to provide it with data to work with;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1007.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">read and interpret the results that are produced by the system, either on screen or as a printed report;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1008.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">respond to and correct errors.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It is important to note that these are mostly secondary tasks: they are concerned with using the system, not with the users’ primary objectives. In the examples above, the primary tasks are to take a customer order and to find tourist information. If the system has been designed well, the secondary, system-related tasks will be easy to carry out; if it has not been designed well, the secondary tasks will intrude into the process and will make it more difficult for the users to achieve their primary tasks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">16.2.2 <b>Dialogue metaphor</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark781">In the design of many computer systems, interaction between the user and the system takes the form of a </a><i>dialogue</i>. The idea that the user is carrying on a dialogue with the system is a <i>metaphor</i><a href="part23.htm#bookmark812" class="a">. (A metaphor is a term that is used figuratively to describe something but is not applied literally.) There is no real dialogue in the sense of a conversation between people going on between the user and the computer,</a><span class="s41">1</span><a href="part23.htm#bookmark782" class="a"> but as in dialogues between people, messages are passed from one participant to the other. </a><a href="part23.htm#bookmark783" class="a">Figure 16.1 shows the human–computer dialogue in schematic form. </a>Figure 16.2 describes what is meant by each of the types of message that can be found in this dialogue.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;"><span><img width="388" height="194" alt="image" src="Image_1009.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark782">Figure 16.1 </a><span class="s21">Schematic form of human–computer dialogue.</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="148" alt="image" src="Image_1010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark783">Figure 16.2 </a><span class="s21">Types of messages in human–computer dialogue.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure 16.3 shows a sample screen layout from FoodCo’s existing system, which runs on a mini-computer with displays on dumb terminals. Although this shows only one screen, you can describe it in terms of the dialogue between the user and the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="398" alt="image" src="Image_1011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark784">Figure 16.3 </a><span class="s21">FoodCo customer order entry screen layout with sample data.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1012.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1013.jpg"/></span></p><p style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The user may enter a command by selecting an option from a menu (not shown). The system responds with this data entry screen and automatically displays the Order Date and next Order No.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1014.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The user enters a Customer Code.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1015.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The system responds with the name and brief address of the customer as a confirmation that the correct number has been entered.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">And so on. Such screens may be unfamiliar to many readers, who have only ever experienced windowing interfaces, but used to be the only way of entering data into computer systems and are still widely used in older business systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark785">The dialogue may not take exactly the same form each time that a user enters data into this screen. Sometimes the user may not know the Customer Code and may have to use some kind of index look-up facility, perhaps entering the first few characters of the customer name in order to view a display of customers that start with those characters. Sometimes an order may</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark783" class="a">consist of one line, usually it will consist of more and, if it consists of more than eight, it will be necessary to clear those that have been entered from the screen and display space for a further eight lines to be entered. It also illustrates elements of the interface that support some of the message types listed in </a><a href="part23.htm#bookmark786" class="a">Fig. 16.2. These are described in </a>Fig. 16.4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="270" alt="image" src="Image_1016.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark786">Figure 16.4 </a><span class="s21">Examples of types of messages in human–computer dialogue.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark787" class="a">In the requirements model of the new system for FoodCo, there will be a use case for Enter customer order, as in </a><a href="part23.htm#bookmark788" class="a">Fig. 16.5. This will be supported by a use case description, which may be quite brief early in the project. As the project progresses through further iterations, the use case description will be filled out in more detail. Not all the use cases will be for interactive dialogues: some will be for enquiries and some will be for printed reports. Figure </a>16.6 shows some of the use cases that the FoodCo sales clerks use. For each of these use cases there may be a sequence diagram to show the interaction between the collaborating objects. However, these sequence diagrams will not yet show the details of the interaction between the user and the system at the interface. This will be covered in Section 17.5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 125pt;text-indent: 0pt;text-align: left;"><span><img width="270" height="84" alt="image" src="Image_1017.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark787">Enter customer order</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Enter Customer Code or look up customer in index. For each line of the order, enter Product No. and Q uantity. Calculate Line Price, Tax and totals automatically.</p><p class="s31" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 16.5 <span class="s21">Use case diagram and description for </span><span class="s89">Enter customer order.</span></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="520" height="331" alt="image" src="Image_1018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark788">Figure 16.6 </a><span class="s21">Use case diagram showing use cases used by sales clerks at FoodCo.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">16.2.3 <b>Direct manipulation metaphor</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The other metaphor for the design of the user interface, which has become more widespread in the last few years, is the <i>direct manipulation </i>metaphor. Most people are now familiar with this through the use of GUIs. When you use a software package with this kind of interface you are given the impression that you are using the mouse to manipulate objects on the screen. This metaphor is reflected in the concrete nature of the terms used. You can:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1019.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1020.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1021.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">drag and drop an icon shrink or expand a window push a button</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1022.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">pull down a menu.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark789">(Though many of the metaphors break down if examined too closely. Why would you put an open window on your desktop?) Such interfaces are </a><i>event-driven</i>. Graphical objects are displayed on the screen and the window management part of the operating system responds to events. Most such events are the result of the user’s actions. The user can click on a button, type a character, press a function key, click on a menu item or hold down a mouse button and move the mouse. The design of user interfaces to support this kind of interaction is more complicated than for text-based interfaces using the dialogue metaphor, and is becoming more complicated still with the advent of user interface devices such as the WiiMote for the Nintendo Wii, which the user wields as though it were a tennis racket, golf club, sword or whatever.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark790" class="a">Figure </a>16.7 shows the interface of a Java program to implement the use case Check campaign budget for the Agate case study. In this use case, the user first selects the name of a client from a list box labelled <b>Client</b>. Having selected the client, a list of all active campaigns for that client is placed in the list box labelled <b>Campaign</b>. At this point, no campaign is selected, and the user can click on the arrow at the end of the list box to view the list and select a campaign. When a campaign has been selected, the user can click on the button labelled <b>Check</b>. The program then totals up the cost of adverts in that campaign, subtracts it from the budget and displays the balance as a money value (negative if the campaign is over budget). In this interface design, there is no point in the user selecting a campaign until a client has been selected or clicking the <b>Check </b>button until a client and a campaign have been selected. The designer may choose to disable the <b>Campaign </b>list box until the client has been selected, and disable the button until both client and campaign have been selected. Having checked one campaign, the user may choose a different client, in which case the contents of</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the <b>Campaign </b>list box have to be changed and the button disabled again until a different campaign has been selected. In Section 17.8 we use state machine diagrams to model the state of elements of a user interface like this in order to ensure that we have correctly specified the behaviour of the interface.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="423" height="284" alt="image" src="Image_1023.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark790"><span class="s31">Figure 16.7 </span></a>Interface for the use case <span class="s89">Check Campaign Budget </span>developed in Java.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark790" class="a">Windows like the one in </a>Fig. 16.7 are usually called <i>dialogue boxes </i>in GUI environments. In terms of the metaphors that we have discussed, they combine elements of a dialogue with the user with direct manipulation of buttons and lists.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">16.2.4 <b>Characteristics of good dialogues</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1272" class="a" name="bookmark791">Many authors of books and reports on HCI have produced sets of guidelines to help designers to produce good designs for the user interface. Some such guidelines are specific to certain types of interface. Shneiderman et al. </a><a href="part38.htm#bookmark1180" class="a">(2009) propose five high-level objectives for data entry dialogue design that date back to the original edition in 1986 when most interfaces were text- based. Other authors such as </a>Gaines and Shaw (1983), also writing at a time when text-based interfaces were predominant, have proposed as many as seventeen.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Regardless of whether a system is being developed for a text-based environment or for a GUI environment, there are a number of important general characteristics of good dialogue design. These include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1024.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">consistency</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1025.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">appropriate user support</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1026.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1027.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">adequate feedback from the system minimal user input.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">These are considered in turn below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C onsistency</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A consistent user interface design helps users to learn an application and to apply what they know across different parts of that application. This applies to commands, the format for the entry of data such as dates, the layout of screens and the way that information is coded by the use of colour or highlighting. As an example of a command, if the user has to press function key F2 to save data in one part of the system, then they will expect the key to have the same effect elsewhere in the system. If it does not result in data being saved then they will have made an error. The outcome of this could be that pressing F2 does something else that the user did not expect, or that it does nothing, but the user thinks that they have saved the data</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">and then exits without saving it. Whichever is the case, the user is likely to become annoyed or frustrated at the response of the system. Guidelines in corporate style guides or in those from Microsoft and Apple help to prevent this kind of user frustration. Style guides are discussed in Section 16.2.5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark792">Appropriate user support</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">When the user does not know what action to take or has made an error, it is important that the system provides appropriate support at the interface. This support can be informative and prevent errors by providing help messages, or it can assist the user in diagnosing what has gone wrong and in recovering from their error. Help messages should be context-sensitive. This means that the help system should be able to detect where the user has got to in a dialogue and provide relevant information. In a GUI environment, this means being able to detect which component of the interface is active (or has the <i>focus</i>) and providing help that is appropriate to that part of the interface. The help provided may be general, explaining the overall function of a particular screen or window, or it may be specific, explaining the purpose of a particular field or graphical component and listing the options available to the user. It may be necessary to provide a link between different levels of help so that the user can move between them to find the information they require. The hypertext style of help in Microsoft Windows provides this facility. Help information may be displayed in separate screens or windows, it may be displayed simultaneously in a status line as the user moves through the dialogue or it may be displayed using <i>tooltips </i>that appear as the user positions the cursor over an item. Many web page designers provide help about elements of their pages by displaying messages in the status line at the bottom of the browser window or by displaying a tooltip-style message in a box as the cursor moves over an item on the page.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Error messages serve a different purpose and require careful design to ensure that they</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark793" class="a">inform rather than irritate the user. An error message that tells the user that he or she has just deleted an essential file and then expects the user to click on a button marked OK when it is anything but OK is likely to annoy the user. Error messages should explain what has gone wrong and they should also clearly explain what the user can or should do to recover the situation. This information should be in language that the user can understand. This may mean using jargon from the user’s business that they will recognize and understand rather than using computer jargon. Figure </a>16.8 shows three different error message boxes for the same situation. Only one is really of any help to the user.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;"><span><img width="457" height="302" alt="image" src="Image_1028.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark793">Figure 16.8 </a><span class="s21">Example error messages for the same error.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;">Warning messages can prevent the user from making serious errors by providing a warning or caution message before the system carries out a command from the user that is likely to</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark794" class="a">result in an irreversible action. Warning messages should allow the user to cancel the action that is about to take place. </a>Figure 16.9 shows an example of a warning message.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;"><span><img width="478" height="140" alt="image" src="Image_1029.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark794">Figure 16.9 </a><span class="s21">Example warning message.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Adequate feedback from the system</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark795">Users expect the system to respond when they make some action. If they press a key during data entry, they expect to see the character appear on the screen (unless it is a control command or a function key); if they click on something with the mouse, they expect that item to be highlighted and some action from the system. Users who are uncertain whether the system has noticed their action keep on pressing keys or clicking with the mouse, with the possible result that these further keypresses and clicks are taken by the system to be the response to a later part of the dialogue, with unpredictable results. It is important that users know where they are in a dialogue or direct manipulation interface: in a text-based interface there should be a visible cursor in the current active field; in a GUI environment the active object in the interface should be highlighted. The </a><b>Y es </b><a href="part23.htm#bookmark794" class="a">button in Fig. </a>16.9 is highlighted in this way, and this means that it will respond to the user pressing &lt;Return&gt; on the keyboard.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The system’s response time should be appropriate to the type of user action: responses to data entry keypresses should be instantaneous, while responses to commands in menus or by means of buttons may take longer. If a system response is going to take some time, the system should respond first with some kind of feedback indicating that it is busy. This can be changing the cursor to a different form, or it can be displaying a progress monitor that shows what proportion of the task has been completed. If possible, the user should be given the option of cancelling the command. The purpose of this kind of feedback is to reduce the user’s uncertainty about whether the system has received the input and is doing something about it or is waiting for the next input.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M inimal user input</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Users resent making what they see as unnecessary keypresses and mouse clicks. Reducing unnecessary input also reduces the risk of errors and speeds data entry. The interface should be designed to minimize the amount of input from the user. The user can be helped in this way by:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1030.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;"><a name="bookmark796">using codes and abbreviations;</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1031.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">selecting from a list rather than having to enter a value;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1032.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1033.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1034.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">editing incorrect values or commands rather than having to type them in again; not having to enter or re-enter information that can be derived automatically; using default values.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Some of these have a basis in the psychological aspects of the discipline of HCI. For example, being able to select values from a list rather than having to enter them from memory allows the user to work by recognizing information rather than having to recall it.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is also possible to reduce the amount of input as users become more familiar with a system by providing shortcuts or accelerators, key combinations that the user can use instead of selecting a command from a menu. However, these require the user to remember the key combinations and are less useful for new users, who will find menus easier to use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">16.2.5 <b>Style guides</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In Section 16.2.4 consistency of the interface has been highlighted as one of the characteristics of good dialogue design. Some organizations provide standard guidelines for the design of user interfaces. One way in which standardization of user interface design has come about is through the domination of the PC market by Microsoft. Microsoft produces a book of guidelines <i>The Windows Interface Guidelines for Software Design </i><a href="part38.htm#bookmark1239" class="a">(Microsoft, </a>1997) that lays down the standards to which developers must adhere if they are to be granted Windows certification. A more recent book is <i>Developing User Interfaces Microsoft for Windows </i><a href="part38.htm#bookmark1232" class="a">(McKay, </a>1999). Similar guidelines are available from Apple for the Apple Macintosh operating system—<i>Macintosh Human Interface Guidelines </i><a href="part38.htm#bookmark1108" class="a">(Apple, </a>1996). The effect of such guidelines is apparent in the similarity of many applications from different sources that make use of toolbars, status bars and dialogue boxes with buttons and other graphical components placed in similar positions. The benefit of this similarity for users is that different applications will look similar and behave in similar ways. This means that users can transfer their knowledge of existing applications to a new one and make inferences about the way that the new one will respond to certain types of user interaction.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Guidelines for user interface design are usually referred to as <i>style guides</i>, and large</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark784" class="a">organizations with many different information systems produce their own style guides for the design of systems to ensure that all their applications, whether they are produced in-house or by outside software companies, conform to a standard set of rules that will enable users quickly to become familiar with a new application. Figure </a>16.3 reflects the use of an existing style guide in FoodCo. The layout of the screen with standard heading information at the top, the use of bold text to highlight prompts and labels, the position of the information about function keys and the use of specific function keys for particular commands are all standards within FoodCo for the design of text-based screens. This is important, as it means that a user can be confident that pressing function key F2 in any data entry screen will save the data on the screen.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The use of style guides and the characteristics of a good dialogue relate to dialogue and interface design in general. In the next part of this chapter, we consider how to ensure that the user interface is appropriate to the specific application for which it is being designed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="350" height="25" alt="image" src="Image_1035.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.3  </a><a href="part4.htm#bookmark4" class="s29">Approaches to U ser Interface Design</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.3  </a><a href="part4.htm#bookmark4" class="s29">Approaches to U ser Interface Design</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.3  </a><a href="part4.htm#bookmark4" class="s29">Approaches to U ser Interface Design</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark797">16.3.1 </a><b>Informal and formal approaches</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">There are many different ways of designing and implementing the elements of the user interface that support the interaction with users. The choices that the designer makes will be influenced by a number of factors. These include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1036.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1037.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">the nature of the task that the user is carrying out; the type of user;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1038.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1039.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">the amount of training that the user will have undertaken; the frequency of use;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1040.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the hardware and software architecture of the system.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark798" class="a">These factors may be very different for different systems. They are listed in Figure </a>16.10 for the FoodCo telesales system and a tourist information system for mobile PDAs and smartphones. Systems that are used by members of the public are very different from information systems used by staff. The Internet and Mobile Internet have made information systems available to people who are unlikely to receive training in using these systems, and who may have no experience of information systems in business settings.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="343" alt="image" src="Image_1041.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark798">Figure 16.10 </a><span class="s21">User interface design factors for two systems.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This way of comparing the two systems and identifying factors that affect their design is very informal. More formal and methodical approaches to the analysis of usability requirements have been developed by researchers in the discipline of HCI. These approaches can be categorized under three headings:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1042.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1043.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1044.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a name="bookmark799">structured approaches ethnographic approaches scenario-based approaches.</a></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">These approaches are very different from one another. However, they all carry out three main steps in HCI design:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1045.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1046.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1047.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">requirements gathering design of the interface interface evaluation.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark800" class="a">Each of these approaches has similar objectives in each of these main steps. Typical objectives are shown in </a>Fig. 16.11. However, they differ in the ways that they set out to achieve these objectives. This is described below.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="276" alt="image" src="Image_1048.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark800">Figure 16.11 </a><span class="s21">Steps in HCI design and objectives in each step.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S tructured approaches</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Structured approaches to user interface design were developed in response to the growth in the use of structured approaches to systems analysis and design during the 1980s. Structured analysis and design methodologies have a number of characteristics. They are based on a model of the systems development lifecycle, which is broken down into stages, each of which is further broken down: for example, into steps that are broken down into tasks. Specific analysis and design techniques are used, and the methodology specifies which techniques should be used in which step. Each step is described in terms of its inputs (from earlier steps), the techniques applied and the deliverables that are produced as outputs (diagrams and documentation). These approaches are more structured than the simple waterfall model of the lifecycle, as they provide for activities being carried out in parallel where possible rather than being dependent on the completion of the previous step or stage. Typically such structured approaches use data flow diagrams to model processes in the system and take a view of the system that involves decomposing it in a top-down way. Structure charts or structure diagrams are used to design the programs that will implement the system.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Proponents of structured approaches argue that they have a number of benefits.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1049.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">They make management of projects easier. The breakdown of the project into stages and steps makes planning and estimating easier, and thus assists management control of the project.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1050.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">They  provide  for  standards  in  diagrams  and  documentation  that  improve understanding between the project staff in different roles (analyst, designer and programmer).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1051.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">They improve the quality of delivered systems. Because the specification of the system is comprehensive, it is more likely to lead to a system that functions correctly.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Advocates of structured approaches to HCI believe that similar benefits can be brought to HCI by adopting structured approaches. These approaches assume that a structured approach to analysis and design of a system is being used and that a structured approach to the HCI design can take place at the same time and be integrated to some extent into the project lifecycle. Two examples of such approaches are discussed briefly below.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1052.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1127" class="a">STUDIO (STructured User-interface Design for Interface Optimization) developed with KPMG Management Consulting in the UK (</a>Browne, 1994)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1053.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1227" class="a">The RESPECT User Requirements Framework developed for the European Union Telematics Applications Programme by a consortium of Usability Support Centres (</a>Maguire, 1997)</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Structured approaches make use of diagrams to show the structure of tasks and the allocation of tasks between users and the system. They also make extensive use of checklists in order to categorize the users, the tasks and the task environments. Evaluation is typically carried out by assessing the performance of the users against measurable usability criteria. STUDIO is used here as an example of a structured approach.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark801" class="a">STUDIO is divided into Stages, and each Stage is broken down into Steps. The activities undertaken in each of the Stages are shown in Figure </a>16.12. STUDIO uses a number of techniques such as:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1054.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">task hierarchy diagrams</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1055.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1056.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">knowledge representation grammars task allocation charts</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1057.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">state machines.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1191" class="a">It is not possible to provide examples of all of these here. Statecharts in STUDIO are similar to UML state machines and based on the work of </a><a href="part23.htm#bookmark784" class="a">Harel (1988). Examples of UML state machines applied to user interface design are included in Section 17.7. A sample task hierarchy diagram </a><a href="part23.htm#bookmark802" class="a">for Take an Order is shown in </a><a href="part23.htm#bookmark784" class="a">Fig. 16.13</a><a href="part23.htm#bookmark784">. This diagram applies to the order entry screen of Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">16.3. The diagram is read from top to bottom and left to right. In it, the boxes with a small circle in the top right-hand corner are selections, only one of which will take place each time an order is taken; the box with an asterisk in the top right-hand corner is an iteration, which will take place usually more than once.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="234" alt="image" src="Image_1058.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark801">Figure 16.12 </a><span class="s21">Summary of activities in each Stage of STUDIO.</span></p><p style="padding-left: 27pt;text-indent: 0pt;text-align: left;"><span><img width="531" height="480" alt="image" src="Image_1059.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark802">Figure 16.13 </a><span class="s21">Task hierarchy diagram for </span><span class="s89">Take an Order.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a" name="bookmark803">Structured approaches may involve evaluation of the user interface designs in a laboratory situation. This reflects the need to have operational measures of usability that can be tested and used to assess the effectiveness of the design. These operational measures are derived from objectives that were gathered during the requirements analysis phase of the project described in Chapter </a>6. Examples include measures of how quickly users learn to use the system, error rates and time taken to complete tasks.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Serco Usability Services, which emerged out of the National Physical Laboratory in the UK, one of the partners in the consortium that produced the RESPECT methodology, has a usability laboratory in which interface designs are tested with users under laboratory conditions. One criticism of this approach is that people do not use systems under laboratory conditions, they use them in busy offices, noisy factories or crowded public spaces. Usability tests conducted in laboratories lack <i>ecological validity</i>. This means that they do not reflect the real conditions in the environment in which the systems will be used. As an alternative to laboratory-based usability studies, ethnographic approaches to the establishment of usability requirements, and to the testing of those requirements, have been proposed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Ethnographic approaches</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The term ‘ethnography’ is applied to a range of techniques used in sociology and anthropology and reflects a particular philosophy about how scientific enquiry should be carried out in these disciplines. Researchers who employ an ethnographic method seek to involve themselves in whatever situation they are studying. They believe that only by doing this and becoming part of that situation can they truly understand and interpret what is happening. Ethnographic methods belong to a wide range of <i>qualitative </i>research methods. (Q ualitative means ‘concerned with the quality of something’ and is usually taken to be the opposite of <i>quantitative</i>, which means</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1188" class="a">‘concerned about the quantity of something’. Q uantitative methods typically rely on statistics to draw conclusions.) </a>Hammersley and Atkinson (1995) provide a definition of ethnography:</p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 109%;text-align: justify;">In its most characteristic form it involves the ethnographer participating, overtly or covertly, in people’s daily lives for an extended period of time, watching what happens, listening to what is said, asking questions—in fact, collecting whatever data are available to throw light on the issues that are the focus of the research.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In HCI this means that the professional charged with carrying out the user interface design spends time with the users immersed in their everyday working life. Only by spending time in this way can the real requirements of the users be understood and documented. Ethnographic methods also emphasize that different users interpret their experience of using systems subjectively, and it is this subjective interpretation that the HCI professional must understand rather than assuming that the system can be assessed objectively.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some HCI methods are criticised for failing to capture information about the context in which people are using systems, by focusing on the user and their tasks. Ethnographic approaches attempt to answer this criticism by the professional experiencing the daily working life of the people who will be the users of the system so that it can be better designed to meet their needs. Some structured approaches have also attempted to respond to the criticism about failing to take context into account, typically by adding some kind of contextual analysis questionnaire to the battery of checklists that they use.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark804">There is no one ethnographic approach that covers the three steps in user interface development: requirements gathering, design of the interface and interface evaluation. There are a number of approaches that can be classed as ethnographic, although their originators may use particular terms to describe their approaches.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1299" class="a">Contextual enquiry is an approach developed by John Whiteside and others at Digital Equipment Corporation (Whiteside et al., </a>1988). It is used to carry out evaluation of the usability of a system in the users’ normal working environment. The aim of contextual enquiry is to get as close to the users as possible and to encourage them to develop their interpretation of the system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1187" class="a">Participative or co-operative design and evaluation involve users actively in the design and evaluation of the user interface of systems (Greenbaum and Kyng, </a>1991). The social and political issues in the workplace that affect the use of systems are part of the material that is captured by these approaches.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Ethnographic approaches use a range of techniques to capture data: interviews, discussions, prototyping sessions and videos of users at work or using new systems. These data are analysed from different perspectives to gain insights into the behaviour of the users.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">V ideo is also used in other approaches, particularly in laboratory-based usability studies. Analysis of video can be particularly time-consuming.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S cenario-based approaches</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1130" class="a">Scenario-based design has been developed by John Carroll and others (Carroll, </a>1995). It is less formal than the structured approaches but more clearly defined than most ethnographic approaches. Scenarios are step-by-step descriptions of a user’s actions that can be used as a tool in requirements gathering, interface design and evaluation. Use cases are similar to scenarios, and Carroll’s book includes chapters by Ivar Jacobson and Rebecca Wirfs-Brock, who have developed use cases and responsibility-based approaches to modelling interaction in object-oriented analysis and design. Of the three approaches discussed here, scenario- based design fits best with use case modelling.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark805" class="a">Scenarios can be textual narrative describing a user’s actions or they can be in the form of storyboards (a series of pictures that depict those actions), video mockups or even prototypes. Figure </a><a href="part9.htm#bookmark222" class="a">16.14 shows a scenario that describes the actions of Peter Bywater from Agate when he demonstrates how he creates notes following the interview used as a case study example at the end of </a>Chapter 6.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="240" alt="image" src="Image_1060.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark805">Figure 16.14 </a><span class="s21">Scenario describing Pete Bywater of Agate adding a new note.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark806" class="a">Scenarios can be used like this in requirements gathering to document the actions that a user carries out in their current system. They can also be used to document ideas about how the user would see themselves using the new system. This is called envisioning the design. Alternative scenarios describing different approaches to the design can be compared by the designers and the users. Figure </a>16.15 shows a scenario describing how a staff member at Agate might use the new system to create a new note about an advert.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="238" alt="image" src="Image_1061.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark806">Figure 16.15 </a><span class="s21">Scenario describing how a user might add a note in the new system.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1130" class="a">For evaluation of the system, more detailed scenarios are prepared so that the actual system can be compared against the expectations that the designer has of how the user will interact with it. </a>Carroll (1995) claims that scenarios can be used in more than just these three ways. He lists the following roles for scenarios:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1062.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1063.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1064.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">requirements analysis user–designer communication design rationale</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1065.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1066.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1067.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">envisionment software design implementation</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1068.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1069.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">documentation and training evaluation</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1070.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1071.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">abstraction team building.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Two of these are worth further comment: user–designer communication and design rationale.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">In </a>Chapter 6 we pointed out that the diagrams used by systems analysts and designers are used to communicate ideas, among other things. Information systems professionals need to communicate with the end-users of the systems that they are developing. Scenarios provide a means of communication that can be used by professionals and end-users to communicate about the design of the users’ interaction with the system. They are simple enough that users can produce them without the need for the kind of training that they would need to understand class diagrams, for example. Scenarios can be used with use cases. The use cases can provide a description of the typical interaction; scenarios can be used to document different versions of the use case: for example, to document what happens when a user is adding a new note but is not authorized to work on the project they try to add it to. Use cases are concerned with the functionality offered by the system, while scenarios focus on the interaction between the user and the system.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Scenarios can be supported by additional documentation to justify design decisions that</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1130" class="a">have been taken. Carroll </a>(1995) calls these design justifications <i>claims</i><a href="part23.htm#bookmark807" class="a">. The designer can document  the  reasoning  behind  alternative  designs,  explaining  the  advantages  and disadvantages of each. </a><a href="part23.htm#bookmark806" class="a">Figure 16.16 shows some claims for the scenario in </a>Fig. 16.15. These usability claims from design can be checked during evaluation of the software or of prototypes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="198" alt="image" src="Image_1072.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark807">Figure 16.16 </a><a href="part23.htm#bookmark806" class="s33">Claims for the design scenario in </a><span class="s21">Fig. 16.15.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1130" class="a">Scenario-based design can result in large volumes of textual information that must be organized and managed so that it is easily accessible. There is a document management task to be undertaken that requires a rigorous approach to control different versions of scenarios and to cross-reference them to claims and feedback from users. Developers run the risk of delaying implementation while they work through and document alternative scenarios for different parts of the system. Rosson and </a>Carroll (1995) present one way to try to prevent this happening. They use a computer-based tool to develop and document their scenarios and to develop working models of the scenarios in Smalltalk as they go along. This allows them to document software implementation decisions at the same time, and they propose that there are benefits to recording design decisions and software implementation decisions together in this way.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">These three types of approach have been presented as though they were very separate. However, there are elements that they have in common. Some structured approaches have attempted to take on board the criticisms that they fail to address the context in which people work and use computer systems. Ethnographic methods may use the same data-gathering techniques as other approaches, and may be used to provide information that can be used as the basis for drawing up scenarios. What they all share is a concern to enhance the usability of information systems and a recognition that usability issues must be integral to the design of computerized information systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark808">16.3.2 </a><b>Achieving usability</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">People often talk about how <i>user-friendly </i><a href="part38.htm#bookmark1270" class="a">a piece of software is, but it is often very difficult to tell what it is they mean by this. As a concept it is very vague. Usability may seem like a similar concept, but the HCI community has developed definitions of usability that can be used to test a piece of software. Shackel </a>(1990) produced definitions of four criteria that were originally developed in the 1980s.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1073.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Learnability<span class="p">—how much time and effort is needed to achieve a particular level of performance.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1074.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Throughput<span class="p">—the speed with which experienced users can accomplish tasks and the number of errors made.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1075.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Flexibility<span class="p">—the ability of the system to handle changes to the tasks that users carry out and the environment in which they operate.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1076.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Attitude<span class="p">—how positive an attitude is produced in users of the system.</span></p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">In Chapter </a>6 we mentioned the International Organization for Standardization (ISO) definition of usability as ‘the extent to which specified users can achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use’. These criteria can be used in conjunction with the users’ acceptance criteria documented during requirements gathering to assess how easy a software product is to use. Some of these can be quantified: for example, we can count the number of errors made by staff at FoodCo using the new system and compare that with the number of errors made with the old system and the objectives that they have set for the new system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Sometimes conflicts will exist between different criteria and between usability criteria and other design objectives, and the designers will have to make compromises or trade-offs between different objectives. In particular, increasing flexibility is likely to conflict with the objective of developing the system at a reasonable cost.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Whatever approach is taken to engineering usability into the design of a software system, it is important to evaluate whether the objectives have been achieved. All three of the approaches mentioned above apply some form of evaluation to test the usability of prototypes or the final system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="337" height="25" alt="image" src="Image_1077.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.4  </a><a href="part4.htm#bookmark4" class="s29">Standards and Legal Req uirements</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.4  </a><a href="part4.htm#bookmark4" class="s29">Standards and Legal Req uirements</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.4  </a><a href="part4.htm#bookmark4" class="s29">Standards and Legal Req uirements</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark809">In Section 16.2.5 we discussed style guides, which set standards for the design of user interfaces. Style guides like these determine the use of standard layouts, colour and function keys and the overall appearance of the system. The International Organization for Standardization has produced standards that have a broader impact on the use of computer systems. ISO 9241 is an international standard for the ergonomic requirements for work with visual display terminals, including both hardware and software, which has been updated in 2008 and 2009 to include guidance on areas such as accessibility and tactile and haptic interfaces. The standard covers physical aspects of the user’s workstation (including positioning of equipment and furniture), the design of the computer equipment and the design of the software systems. ISO 14915-2002 is a further standard, entitled ‘Software ergonomics for multimedia user interfaces’, which gives recommendations for and guidance on the design, selection and combination of interactive user interfaces that integrate and synchronize different media. These standards are intended to ensure the quality of systems and to prevent local standards becoming barriers to free trade.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In the European Union (EU), this has been taken one step further and the EU Council</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">issued a directive on 29 May 1990 that has the force of law for member states. In the UK, for example, this directive has been implemented in the Health and Safety (Display Screen Equipment) Regulations 1992. Under these regulations all workstations must now comply with certain minimum requirements, and employers have a duty in law to ensure the health and safety of employees using display screen equipment.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The regulations provide a number of definitions:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1078.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;text-align: center;">display screen equipment—any alphanumeric or graphic display screen;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1079.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1196" class="a">user—an employee who habitually uses display screen equipment as a significant part of his or her normal work (see table of criteria in Health and Safety </a><a href="part38.htm#bookmark1196">Executive, 2003);</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1080.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">operator—self-employed person as above;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1081.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">workstation—display screen equipment, software providing the interface, keyboard, optional accessories, disk drive, telephone, modem, printer, document holder, work chair, work desk, work surface or other peripheral item and the immediate work environment around the display screen equipment.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The definition of display screen equipment excludes certain types of equipment, such as equipment in the cab of a vehicle, cash registers and some portable equipment.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As well as covering the physical equipment that is used by the user, the regulations cover environmental factors such as position of equipment, lighting, noise, heat and humidity in the workplace. Employers are required to:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1082.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1083.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">analyse workstations to assess and reduce risks; take action to reduce risks identified;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1084.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1085.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">ensure workstations meet the requirements of the regulations; plan the work activities of users to provide breaks;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1086.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">provide eyesight tests for users;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1087.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">provide corrective appliances for eyes if required;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1088.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">provide training relevant to health and safety issues and workstations;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1089.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">provide information to employees about health and safety risks and measures taken to reduce them.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The analysis of workstations in order to reduce risks includes analysis of the software, and the guidelines published to assist employers to meet their responsibilities state the following requirements.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Employers must take into account the following principles in designing, choosing, commissioning and modifying software and in designing tasks for people that require them to use display screen equipment.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1090.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">The software that is used must be suitable for the task.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1091.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The software must be easy to use and able to be adapted to the level of knowledge or experience of the operator or user.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1092.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The employer is not allowed to use any kind of quantitative or qualitative checking facility without the knowledge of the operators or users.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1093.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Systems must give feedback to operators or users about the performance of the systems that they are using.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1094.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Systems must display information for users both in a format and at a pace that are adapted to the operators or users.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1095.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The principles of software ergonomics must be applied, particularly to the way that people process data.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Clearly the effect of this is to require employers, and so also software developers, to demonstrate that they are applying good HCI practice in the way that they design software.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="http://www.osha.gov/" class="a" target="_blank">Many countries in the world have regulations in place to promote good practice in workstation use. The USA is a significant exception to this. The Occupational Safety and Health Administration (OSHA) has proposed rules designed to prevent musculo-skeletal disorders caused by poor work design, bad posture and repetitive activities and covering workstation design and layout. These were rejected by Congress, backed by industry lobbyists. However, this is the exception rather than the rule in developed countries and there is  plenty  of  online  material  on  the  subject,  including  the  OSHA’s  own  website, </a>http://www.osha.gov, which provides advice on good workstation design.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One area where the United States does have some strong legislation is in the area of access to information technology by people with disabilities. The Americans with Disabilities Act (1990) ensures equal opportunity for persons with disabilities in employment, State and local government services, public accommodations, commercial facilities and transportation.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Because so many services are now delivered, booked or accessed electronically, and so much work involves the use of IT, this has had an impact on the design of information systems, and US businesses have improved the accessibility of their systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1161" class="a">In the UK, the Disability Discrimination Acts (1995 and 2005) have, since 1999, required that service providers take reasonable steps to change practices that make it unreasonably difficult for disabled people to make use of their services. This requirement is defined in the Code of Practice (</a>Disability Rights Commission, 2006).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Access to information systems by people with disabilities has improved in many countries, driven by the expansion of the Internet and by legislation. The World Wide Web Consortium runs the Web Accessibility Initiative to develop guidelines and techniques for improving the accessibility of material on the Internet.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="25" alt="image" src="Image_1096.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">16.5  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark810">System designers must take account of the requirements of the people who will use their software if they are to reduce errors and maximize the satisfaction of the users with the system. The user interface can be viewed as part of a dialogue between the user and the system and there are a number of characteristics of good dialogue design that can be used to ensure that the user is supported by the interface and assisted in carrying out their primary task.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is possible to apply an informal approach to determining characteristics of the users, the task and the situation that will affect the interface design, or to apply a more formal approach using structured, ethnographic or scenario-based techniques or some combination of these. The main aim of this is to produce software that can be demonstrated to meet the usability requirements of the people who will use it. This may be done in order to ensure compliance with international standards or it may be to meet legal requirements in some countries.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark811">Review Questions</a></p></td></tr><tr style="height:270pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">16.1  <span class="s16">Think of a computerized information system that you use regularly. This could be a library system, an automated teller machine (ATM) that you use to get cash, a database that you use in your work or any other system that you are familiar with. Write down which elements of the interface support the five tasks listed at the start of Section 16.2.1.</span></p><p class="s35" style="padding-top: 1pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">16.2 <span class="s16">For each of the elements of the interface that you have listed in Q uestion 16.1, write down your ideas about how they could be improved.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">16.3  <span class="s16">What is the difference between the dialogue and direct manipulation metaphors?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">16.4 <span class="s16">Make a list of direct manipulation metaphors that are used in a GUI that you are familiar with. Are there any metaphors that do not work as you might expect?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">16.5  <span class="s16">What are the four characteristics of good dialogues described in Section 16.2.4?</span></p><p class="s16" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;"><a href="part23.htm#bookmark794" style=" color: #006793; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10.5pt;">16.6 </a><a href="part23.htm#bookmark794" class="s36">Figure </a>16.9 shows the <b>Y es </b>button in a dialogue highlighted. What do you think is the risk associated with making this the active button by default?</p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 12pt;text-indent: -29pt;text-align: left;">16.7 <a href="part23.htm#bookmark798" class="s36">For the system that you wrote about in Q uestion 16.1, note down information relevant to the design factors in </a><span class="s16">Fig. 16.10.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">16.8  <span class="s16">List as many differences as you can think of between structured, ethnographic and scenario-based approaches.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">16.9  <span class="s16">Make your own list of what you think the advantages and disadvantages could be of structured, ethnographic and scenario-based approaches.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:24pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">16.A <span class="s16">Using a user interface that you are familiar with as an example, try to identify</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:300pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s16" style="padding-left: 36pt;padding-right: 22pt;text-indent: 0pt;text-align: justify;">features that you think might be part of the style guidelines for that user interface. This could be a GUI, a website or even a mobile phone.</p><p class="s35" style="padding-top: 1pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">16.B <span class="s16">Using the four criteria for good dialogues discussed in Section 16.2.4, evaluate an application that you use regularly. Identify the ways in which it meets these criteria and the ways in which it does not meet the criteria. Suggest ways in which it could be improved.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">16.C <a href="part9.htm#bookmark222" class="s36">Write a scenario to describe what is done when Rik Sharma of FoodCo starts to plan staff allocation, based on the interview transcript in Exercise 6.B (</a><span class="s16">Chapter 6). (Make sure that you concentrate on what he does and not on what is done by other staff at other times.)</span></p><p class="s35" style="padding-top: 1pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">16.D <span class="s16">For the system that you wrote about in Q uestion 16.1, identify measurable objectives that could be used to measure how usable that system is. (You may like to start by thinking about how long it takes you to use it and how many errors you make.)</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">16.E <span class="s16">Find out whether there are any legal requirements on software designers to comply with legislation that covers ergonomics or HCI in your country. Write a short report to summarize these requirements as though you were an analyst reporting to your manager on this legislation.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">16.F <a href="http://www.w3.org/WAI/" class="s36" target="_blank">Look at the World Wide Web Consortium’s website on access for users with disabilities at </a><span class="s16">http://www.w3.org/WAI/. Identify some of the practical recommendations. Choose a website (perhaps one you have developed yourself) and evaluate it against these criteria. Write a short report summarizing what improvements need to be made.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_1097.png"/></span></p><p class="s7" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1124" class="s6">Many computer science and information systems courses include HCI as a subject. If you have not come across HCI before and want to find out more, there are a number of suitable textbooks, such as Booth </a><a href="part38.htm#bookmark1271" class="s6">(1989), </a><a href="part38.htm#bookmark1124" class="s6">Sharp et al. </a><a href="part38.htm#bookmark1281" class="s6">(2007), </a><a href="part38.htm#bookmark1124" class="s6">Stone et al. (2005) </a><a href="part38.htm#bookmark1162" class="s6">and </a><a href="part38.htm#bookmark1124" class="s6">Dix et al. (2003). A classic text in this area </a><a href="part38.htm#bookmark1272" class="s6">is Shneiderman et al. </a>(2009), which has been updated to cover graphical user interfaces in more detail since its first publication.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;">Style guidelines are available from some of the largest companies in the industry. Links are available to the online versions of these in the book’s website.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1127" class="s6">For a structured method for user interface design Dermot Browne’s book (Browne, </a><a href="part38.htm#bookmark1202" class="s6">1994) provides a step-by-step approach to user requirements analysis, task analysis, usability and interface design. Browne also uses Harel state machines to model the behaviour of the interface in a more thorough way than many authors. Horrocks </a><a href="part38.htm#bookmark1130" class="s6">(1999) provides another view of how to use state machines in interface design. Carroll </a><a href="part38.htm#bookmark1261" class="s6">(1995) provides a good coverage of scenario-based methods and is very practical in approach, while Rosson and Carroll </a>(2002) provide a more comprehensive view.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="http://www.osha.gov/" class="s6" target="_blank">In the UK, The Stationery Office (TSO) publishes a booklet that explains the requirements of the Display Screen Regulations. This book’s website includes links to other resources on health and safety and workstation ergonomics. Australian and Canadian government organizations provide a good starting point for investigating standards and legislation. The US OSHA also has a good website, </a>http://www.osha.gov, with guidelines and checklists for ergonomic workstation design.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="http://www.w3.org/WAI/" class="s6" target="_blank">One of the best overview sites on access to information systems for people with disabilities is the World Wide Web Consortium’s Web Accessibility Initiative (</a>http://www.w3.org/WAI/), which has links to information on legislation in a number of countries.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_1098.png"/></span></p><p class="s1" style="padding-top: 7pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a name="bookmark812">1 Although speech recognition and text to speech systems now make voice input and output possible, even if it is not yet a true dialogue.</a></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="206" alt="image" src="Image_1099.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:350pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark813">LEARNING OBJECTIVES</a><a name="bookmark814">&zwnj;</a></p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_1100.jpg"/></span></p></td></tr><tr style="height:99pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">what we mean by the presentation layer</p><p class="s16" style="padding-left: 54pt;padding-right: 110pt;text-indent: 0pt;text-align: left;">how prototyping can be applied to user interface design how to add boundary classes to the class model</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">how to model boundary classes in sequence diagrams</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">how design patterns can be applied to the design of the user interface</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">how to model the control of the user interface using state machine diagrams.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_1101.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="93" alt="image" src="Image_1102.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark595" class="a" name="bookmark815">In Chapter </a>12 we introduced the three-tier system architecture. The presentation layer in this architecture contains the boundary classes that handle the interface with the user—usually windows and reports—or with other systems. We shall be concentrating here on interaction with the human user. We can use the techniques and diagrams of UML to model the user interface by adding detail to the boundary classes in the class model. These classes handle the user interface and allow us to design business (or entity) classes that do not contain details of how they will be presented. This enables the reuse of the business classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark777" class="a">Prototyping can be used to try out different interface designs by producing sample window layouts, which can be evaluated with users as we described in </a>Chapter 16. Prototypes and the eventual finished design of the user interface will use classes from reusable class libraries such as the Java Abstract Windowing Toolkit (AWT). The UML notation for packages and for package dependency can be used to show how class diagrams can reference classes from such libraries and how boundary classes can be placed in separate packages. The window layouts can be modelled as classes if required, but this is not always necessary unless the behaviour of the interface or of graphical objects in the user interface is the subject of the application being developed.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark418" class="a">The sequence diagrams developed in Chapter </a>9 can be extended to include the detail of interaction with the boundary classes, and the model of the boundary classes is developed iteratively as we increase our understanding of the interaction.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark816">Patterns can be used to provide generic models for the way that the interaction will work. Many systems written in Smalltalk use the Model–V iew–Controller (MV C) architecture, which separates the model (domain or business classes) from classes that handle the interaction between user and system.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark525" class="a">The dynamic behaviour of the user interface is modelled with state machine diagrams. UML state machines were used in </a>Chapter 11 to model the response of objects to events that take place during their lifetimes and to show how they change state as time passes. The same notation can be used to show the state of the user interface and how it responds to events</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">such as mouse clicks on buttons or the entry of text into data entry screens. A state machine for the control class that manages the user interface for one use case is developed and alternative versions are presented.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="360" height="25" alt="image" src="Image_1103.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.2  </a><a href="part4.htm#bookmark4" class="s29">Architecture of the Presentation Layer</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.2  </a><a href="part4.htm#bookmark4" class="s29">Architecture of the Presentation Layer</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.2  </a><a href="part4.htm#bookmark4" class="s29">Architecture of the Presentation Layer</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part16.htm#bookmark291" class="a" name="bookmark817">In </a><a href="part23.htm#bookmark611" class="a">Chapter 7 the idea of boundary classes was introduced, and in </a><a href="part23.htm#bookmark818" class="a">Chapter 13 a layered model of the system was presented. The three-tier architecture is a common way to separate out user interface classes from the business and application logic classes and from mechanisms for data storage. There are a number of reasons for doing this, and these are shown in </a>Fig. 17.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="292" alt="image" src="Image_1104.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark818">Figure 17.1 </a><span class="s21">Reasons for separating business and user interface classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark964" class="a">This is not to say that classes should contain no means of displaying their contents to the outside world. It is common practice to include in each class a print() (or a toString()) method that can be used to test the classes before the presentation layer has been developed. Such methods typically take an output stream (a file or a terminal window) as a parameter and produce a string representation of their attributes on that stream. This enables the programmer to check the results of operations carried out by classes without needing the full system in place. (See </a>Chapter 19 for more on testing.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark611" class="a" name="bookmark819">The three-tier architecture was discussed in Section 13.5.2. Different approaches to object- oriented development use different names for the layers of the three-tier architecture. The Unified Process uses the terms boundary, control and entity classes for the three types of classes and these are the terms that we have used. Developers using Smalltalk to implement systems have for many years adopted a similar approach using the MV C approach that was described in </a>Chapter 13. In the MV C approach a system is divided into three components:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1105.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Model<span class="p">—the classes that provide the functionality of the system</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1106.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">View<span class="p">—the classes that provide the display to the user</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1107.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Controller<span class="p">—the classes that handle the input from the user and send messages to the other two components to tell them what operations to carry out.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Whatever approach is chosen in a particular project, all these approaches share the objective of keeping the behaviour of the interface separate from the behaviour of the classes that provide the main functionality of the system. To use the anthropomorphic style of some authors about object-oriented systems, the entity classes ‘know’ nothing about how they will be displayed.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Taking a three-tier architectural approach does not necessarily mean that the different types of classes will end up running on different machines or even that they will be completely separate. It is useful to distinguish between the logical architecture of the system and the physical architecture. The physical architecture may combine layers of the logical architecture on a single physical platform or it may split logical layers across physical systems. If you are designing an AJAX application, some of the responsibilities for control will be located in the JavaScript classes, together with the boundary classes, while other control responsibilities may be located in classes on a server together with entity classes. In a distributed system, the entity classes may exist on different servers and the control classes would pull the data together from these different sources in order to deliver it to the boundary classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">For the Agate system, we are going to keep the boundary, control and entity classes separate. The boundary classes will run on the users’ machines, while the control classes will be located on servers, and the entity classes will initially be on local servers but may later be distributed in different offices. (We shall discuss mechanisms for achieving this in Chapters </a><a href="part31.htm#bookmark964" class="a">18 and </a>19.)</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">In the next four sections, we shall develop the boundary classes by:</p><p class="s25" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1. <span class="p">prototyping the user interface</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2. <span class="p">designing the user interface classes</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">3. <span class="p">modelling the interaction involved in the interface</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">4. <span class="p">modelling the control of the interface using state machines.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="296" height="24" alt="image" src="Image_1108.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.3  </a><a href="part4.htm#bookmark4" class="s29">Prototyping the U ser Interface</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.3  </a><a href="part4.htm#bookmark4" class="s29">Prototyping the U ser Interface</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.3  </a><a href="part4.htm#bookmark4" class="s29">Prototyping the U ser Interface</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark102" class="a" name="bookmark820">Prototyping was discussed in Chapter </a><a href="part9.htm#bookmark222" class="a">3 as an approach to the development lifecycle and in Chapter 6 as a way of helping to establish what the requirements for a system are. In Chapter 6 we used it to produce models of the user interface. The UML models we have produced </a>so far have been analysis and design diagrams; they are rather like an architect’s drawings—they represent what the finished product will be capable of but they do not really show how it will look. A prototype is a model that looks, and to some extent behaves, like the finished product, but is lacking in certain features; it is more like an architect’s scale model of a new building.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are different kinds of prototype that can be built. A prototype that only provides a model of the user interface is one example of a <i>horizontal prototype</i>. It is horizontal because it deals with one layer of the layered architecture of the system. A <i>vertical prototype </i>takes one subsystem of the whole system and develops it through each layer: user interface, business classes, application logic and data storage. A horizontal prototype need not only deal with the user interface; there may be circumstances where it is more important to prototype the middle tier in order to test whether an innovative aspect of the system functionality works correctly.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Another distinction is made between those prototypes that are developed further and eventually, by an iterative process, become part of the finished system, and those prototypes that are simply used to test out design ideas and are then thrown away after they have served their purpose. This second kind of prototype is known as a <i>throwaway prototype</i><a href="part23.htm#bookmark821" class="a">. A throwaway prototype can be built using any programming language that is suitable for the purpose. </a><a href="part23.htm#bookmark821">Figure</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark821" class="a">17.2 shows a prototype of the user interface for Agate that was created in a matter of </a>minutes using Microsoft V isual Basic. Although this application will be developed in Java, a visual programming environment such as V isual Basic or Delphi can be used to produce prototypes of the user interface. In fact, the Java prototype examples used in the book took no more time than the V isual Basic examples, as they were produced in a Java visual programming environment.</p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="449" height="270" alt="image" src="Image_1109.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark821"><span class="s31">Figure 17.2 </span></a>V isual Basic prototype of the <span class="s89">Check Campaign Budget </span>interface.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark777" class="a">V isual programming environments can be used to develop prototypes of the user interface to applications. These can be shown to the users and used, for example, in conjunction with techniques from scenario-based design (described in Chapter </a>16) to agree with users how they will interact with the user interface. In this way, prototypes can be used to design the interaction between the system and the user and establish a set of guidelines for how this interaction will take place.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Because visual programming environments are so easy to use, developers are often tempted to develop applications from the outside in: starting with the interface and linking the functionality to the visual components that appear on the screen. Without thorough analysis of the business requirements for the system, this can lead to a blurring of the distinction between the presentation layer and the business classes and application logic. Applications developed in this way often have a large amount of program code associated with interface objects such as buttons. This program code should be an operation of a control class or of one or more entity classes. If it is linked to a button it cannot be reused in the same way as if it is carefully encapsulated in a class. Typically, the programmer then needs to reuse the code in another window and copies and pastes the code to another button in the new window; then when a change is made to the code linked to one button it may not be copied to the code linked to the second button and discrepancies creep into the system. This is not to say that it is not possible to develop good applications in visual environments; the important thing is that a thorough analysis should have been carried out first and the business objects and application logic should be kept separate from the visual components.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark821" class="a">Prototyping can be used to try out alternative approaches to the same use case. In the example screen layout shown in Fig. </a>17.2 we have assumed that the users will select first a client and then a campaign from dropdown lists. There are many possible alternatives to this. Three of these are:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1110.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">to use a separate look-up window for each class;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1111.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">to allow the user to enter part of a name (for example, of a client) and for a list of close matches to be returned;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1112.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">to use a tree structure which shows the instances of clients and campaigns in a tree- like hierarchy.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark822" class="a">Prototyping allows us to experiment with these approaches and build models which the users can try out for themselves. Figures </a><a href="part23.htm#bookmark823" class="a">17.3 and </a>17.4 show screenshots of prototypes based on two of these different ways of handling the look-up process.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark777" class="a">The choice of how the look-up in this use case is handled on screen will be determined by the style guidelines that were discussed in </a>Chapter 16. It is important that style guidelines are</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">agreed before development starts; prototyping can be used during design to try out various different interface styles and to get the users’ agreement on which style will be followed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"><span><img width="368" height="208" alt="image" src="Image_1113.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark822">Figure 17.3 </a><span class="s21">Prototype developed in Delphi using TreeV iew control.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 79pt;text-indent: 0pt;text-align: left;"><span><img width="402" height="299" alt="image" src="Image_1114.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark823">Figure 17.4 </a><span class="s21">Prototype developed in V isual Basic showing separate look-up window.</span></p><p style="padding-left: 80pt;text-indent: 0pt;text-align: left;"><a name="bookmark826"><span><img width="389" height="344" alt="image" src="Image_1115.jpg"/></span></a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark824">Figure 17.5 </a><a href="part23.htm#bookmark823" class="s33">Use of the same style of look-up as in </a><span class="s21">Fig. 17.4 in a different use case.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark824" class="a">Whichever style is adopted here will be adopted in other use cases in which the user needs to be able to look up clients from a list. The same approach will also be adopted in all use cases in which the user looks up any kind of class. For example, Fig. </a><a href="part23.htm#bookmark823" class="a">17.5 shows the same method as in </a>Fig. 17.4 being used to look up campaigns for a particular client in the use case for Add a concept note.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="204" height="25" alt="image" src="Image_1116.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.4  </a><a href="part4.htm#bookmark4" class="s29">Designing Classes</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.4  </a><a href="part4.htm#bookmark4" class="s29">Designing Classes</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.4  </a><a href="part4.htm#bookmark4" class="s29">Designing Classes</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark826" class="a" name="bookmark825">The next step is to design the classes that will provide the user interface. The use case for Check Campaign Budget is used as an example. At the simplest level, there will be an object that provides an interface onto the functionality of this use case. This could be a dialogue window like the one shown in </a><a href="part23.htm#bookmark828" class="a">Fig. 17.6 (in the foreground). The analysis collaboration for this use case is shown in </a>Fig. 17.7.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 70pt;text-indent: 0pt;text-align: left;"><span><img width="415" height="282" alt="image" src="Image_1117.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark827">Figure 17.6 </a><span class="s21">Dialogue window for the use case </span><span class="s89">Check Campaign Budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 89pt;text-indent: 0pt;text-align: left;"><span><img width="365" height="74" alt="image" src="Image_1118.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark828">Figure 17.7 </a><span class="s21">Collaboration for the use case </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark828" class="a">In the simple analysis collaboration in Fig. </a><a href="part23.htm#bookmark829" class="a">17.7 we have not shown the class Client because it does not participate in the main functionality of the use case. In order to calculate what is left in the budget for a campaign we do not need the client object. However, in order to find the right campaign we do need the client: we home in on the right campaign in the context of the particular client. We need to be able to list all the clients and display them in the first dropdown. Once the client has been selected, we then need to list all the campaigns for that client in the second dropdown. In the approach that we have taken in this user interface design, using dropdowns rather than separate dialogue windows, we may want to add further control classes to the collaboration: one to list the clients and the other to list the campaigns. This is shown in </a>Fig. 17.8.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark823" class="a">If we had adopted the user interface style of Figs </a><a href="part23.htm#bookmark824" class="a">17.4 and </a><a href="part23.htm#bookmark830" class="a">17.5, then we should have separate user interface classes for each of these, and the collaboration would look like </a><a href="part23.htm#bookmark830">Fig. 17.9.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span><img width="372" height="258" alt="image" src="Image_1119.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark829">Figure 17.8 </a><span class="s21">Extended collaboration for the use case </span><span class="s89">Check campaign budget.</span></p><p style="padding-left: 80pt;text-indent: 0pt;text-align: left;"><span><img width="389" height="258" alt="image" src="Image_1120.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark830">Figure 17.9 </a><span class="s21">Revised collaboration for the use case </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark829" class="a">We will work with the collaboration of Fig. </a><a href="part23.htm#bookmark831" class="a">17.8. We shall treat instances of the boundary class CheckCampaignBudgetUI as single objects. We may not want to be concerned about the objects that make it up. In reality, this window may well be an instance of a subclass of a class such as JDialog that is available in a library of user interface classes, and it may contain a number of components: buttons, labels, dropdowns and a textbox. This can be shown in a class diagram, as in </a><a href="part23.htm#bookmark832" class="a">Fig. 17.10 (JComboBox is the Java Foundation Classes (JFC) Swing term for  a  dropdown  list).  The  composition  associations  represent  the  fact  that  the CheckCampaignBudgetUI is made up of instances of the other classes. (Alternatively, this can be represented as a class with attributes for each of the components. This is shown in </a><a href="part23.htm#bookmark832">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark832" class="a">17.11 and makes it easier to draw a class diagram for the boundary classes.) The </a><a href="part23.htm#bookmark833" class="a">component classes  that  are  used  here  all  come  from  the  Java  Swing  GUI  classes.  The CheckCampaignBudgetUI class is dependent on the classes in Swing, and this can be shown using packages in a class diagram, as in </a>Fig. 17.12.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="182" alt="image" src="Image_1121.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark831">Figure 17.10 </a><span class="s21">Class diagram showing dialogue components.</span></p><p style="padding-left: 141pt;text-indent: 0pt;text-align: left;"><span><img width="227" height="177" alt="image" src="Image_1122.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark832">Figure 17.11 </a><span class="s21">Class for dialogue window showing dialogue components as attributes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"><span><img width="357" height="98" alt="image" src="Image_1123.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark833">Figure 17.12 </a><span class="s21">Class diagram to show dependency between classes in different packages.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The « import»  stereotype on the dependency shows that it will be necessary to import the classes from this Swing package in order to make them available to be used with the classes in the Application Windows package. How this is done will depend on the language that is used for implementation. In Java it is done simply with a line of code:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">import javax.swing.*;</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: -14pt;line-height: 149%;text-align: justify;">In C# this is done with a using statement, for example: using System.WinForms;</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1244" class="a">We have used the « import» stereotype as it is now part of the UML Infrastructure Specification (OMG, </a>2009a).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="324" alt="image" src="Image_1124.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark834">Figure 17.13 </a><span class="s21">Class diagram showing Swing components with their package name.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark834" class="a">Figure </a>17.13 illustrates how classes from other packages can be shown in the class diagram by adding the pathname of the package, using two colons as a separator, to the name of the class. The Java Swing package is only one example of this. Most object-oriented programming languages or development environments are provided with <i>class libraries </i>that contain many of the classes that are needed to build a working system. Microsoft, for example, provides the Windows Forms library, which includes all the classes such as buttons and text fields that are required to build a Windows interface to an application. These classes are grouped together and provided in what UML terms ‘packages’. This is an example of the reuse that is claimed as a benefit of object-oriented systems. These user interface classes, whether in Java or C#  or another language, have been implemented by other developers and can be reused in many new applications.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark834" class="a">If the application being designed is mainly concerned with the behaviour of the objects in the interface itself—for example a drawing package, a modelling tool or an application with a strong visual element—then it may be advisable to model the user interface using a class diagram as shown in Fig. </a><a href="part23.htm#bookmark832" class="a">17.13. In most applications in which the user interface will display text and numbers, it is not necessary to produce a model of the classes that make up the interface. It may be useful to show them in the style of Fig. </a>17.11 in a class diagram in a separate package. Note that there are not normally associations among the classes in the interface package in the way that there are associations between entity classes in the domain model. However, there may be transient links between instances of these classes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="430" height="25" alt="image" src="Image_1125.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.5  </a><a href="part4.htm#bookmark4" class="s29">Designing Interaction with Seq uence Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.5  </a><a href="part4.htm#bookmark4" class="s29">Designing Interaction with Seq uence Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.5  </a><a href="part4.htm#bookmark4" class="s29">Designing Interaction with Seq uence Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark517" class="a" name="bookmark835">The sequence diagram for the use case Check campaign budget in </a><a href="part23.htm#bookmark836" class="a">Fig. 10.4 did not show the boundary or control classes, but concentrated on the operations of the entity classes. We have shown it again in Fig. </a><a href="part18.htm#bookmark368" class="a">17.14. The communication diagram of Fig. </a>A3.8 showed the boundary and control classes, and we shall now elaborate the interaction in more detail.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="525" height="383" alt="image" src="Image_1126.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark836">Figure 17.14 </a><span class="s21">Sequence diagram for use case </span><span class="s89">Check campaign budget.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark829" class="a">We need to add the boundary and control classes of the collaboration in Fig. </a><a href="part23.htm#bookmark830" class="a">17.8 to this sequence diagram. (If we had adopted the design from </a><a href="part23.htm#bookmark837" class="a">Fig. 17.9, then we would need to add three boundary classes rather than one.) Rather than trying to draw the entire sequence diagram in one go, we shall build up the interaction step by step. We are assuming here that it is an instance of the control class CheckCampaignBudget that is created first and that this creates a new instance of the CheckCampaignBudgetUI class to handle the user interface. As soon as it has created the boundary class, the control class needs to have the first dropdown populated with the names of all the clients, so it creates an instance of the control class ListClients and requests it to pass back the client names to the boundary class, passing it a reference to the boundary class in the message (ccbUI). The instance of ListClients sends the message addClientName(name) repeatedly to the boundary class until it has finished. It then returns control to the CheckCampaignBudget instance and destroys itself. The main control class can now enable the boundary class, allowing the user to select a particular client. This is shown in </a>Fig. 17.15.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="537" height="327" alt="image" src="Image_1127.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark837">Figure 17.15 </a><span class="s21">First part of detailed interaction for use case </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We have shown the names of return values and parameters in this diagram to illustrate what is happening. For example, the instance of CheckCampaignBudget needs to have a reference to the instance of CheckCampaignBudgetUI(ccbUI) so that it can pass it to the instance of ListClients. This enables :ListClients to send the addClientName message directly to :CheckCampaignBudgetUI. When :CheckCampaignBudgetUI is created, it is passed a reference to the control class instance :CheckCampaignBudget(this). In this way, it will be able to send messages back to the main control class when it needs to notify it of events.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark838" class="a">Instances of :CheckCampaignBudgetUI need to be able to respond to the message addClientName(name). Many other boundary classes will need to allow the user to select a client from a dropdown, for example AddConceptNoteUI. We shall want to reuse ListClients in all the use cases where a list of clients has to be displayed in a boundary class, but cannot expect ListClients to know about all the different boundary classes to which it could send the message addClientName(name). We can use an interface to specify the operations that all these boundary classes must respond to. (See Section 14.4.2 for an explanation of interfaces.) We could define the interface ClientLister, and all the boundary classes that need to display a list of clients will realize it, as CheckCampaignBudgetUI does in </a>Fig. 17.16.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Design of other use cases may identify other operations that must be part of this interface: for  example,  clearAllClientNames()  or  removeClientName(name).  The  operation addClientName(name) must be implemented by program code in the class definition for</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark839" class="a">CheckCampaignBudgetUI. For example, in Java it may be as in Fig. </a>17.17 (with much code not shown).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One of the important features of this design is that any object that wants to manipulate the list of clients in the boundary object must do so through operations. We could change the design of the boundary class so that it displayed the list of clients in a scrolling list (a JList in Java  Swing).  We  would  then  have  to  change  the  Java  program  that  implements CheckCampaignBudgetUI, but we would not have to change the classes that use it, because the interface remains the same. (Other object-oriented languages use slightly different ways of achieving the same thing, but the principle is the same.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;"><span><img width="468" height="224" alt="image" src="Image_1128.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark838">Figure 17.16 </a><span class="s49">ClientLister </span><span class="s90">interface.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"><span><img width="500" height="170" alt="image" src="Image_1129.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark839">Figure 17.17 </a><span class="s21">Possible Java definition of </span><span class="s89">addClientName(name).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark837" class="a">Note that in </a><a href="part23.htm#bookmark840" class="a">Fig. 17.15 we have not shown what the ListClients control class instance does to get the names of all the clients. This level of detail can be hidden in this diagram. UML 2.0 introduces the notation of interaction uses to allow fragments of sequence diagrams to be reused in other diagrams. Figure </a><a href="part23.htm#bookmark868" class="a">17.18 shows what happens when an instance of ListClients receives a listAllClients message. At this stage of the design we have not addressed how clients are to be stored in a database, so this is left vague. Design of the data storage is covered in </a>Chapter 18.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1259" class="a">Rosenberg and Scott </a>(1999) use control classes as placeholders for operations that may later be assigned to other classes. This technique could be used in this example, where the ListClients control class may become part of some other class that handles the database access for the Client class. This approach can help in preventing an object-oriented system from ending up with a lot of classes like ListClients that are little more than wrappers for one or two operations, and more like programs than objects. On the other hand, this can break the architectural layering of the system, as the classes in the data storage layer will need to know about classes in the presentation layer.</p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="459" height="314" alt="image" src="Image_1130.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark840">Figure 17.18 </a><span class="s49">listAllClients() </span><span class="s90">operation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark841" class="a">Returning to the sequence diagram for this collaboration, the next event that will take place is that the user will select a client from the dropdown that has been populated with clients by the processes that we have just described. When a particular client has been selected, then the list of campaigns in the boundary class must be populated with only those campaigns in the database that belong to that client. This is shown in </a>Fig. 17.19.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="547" height="314" alt="image" src="Image_1131.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark841">Figure 17.19 </a><span class="s21">Second part of interaction for use case </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark837" class="a">Part of this sequence diagram is similar to the one in </a>Fig. 17.15. We would apply the same design principles to this, with a CampaignLister interface, which must also be implemented by CheckCampaignBudgetUI. The interaction is slightly different, as we need to pass the client to ListCampaigns so that it knows which client’s campaigns to display. We can model the interaction within the boundary class in more detail if we wish.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark842" class="a">When the instance of CheckCampaignBudgetUI is created it will add the instance of JComboBox, clientComboBox, to itself and register an interest in events from the user that affect clientComboBox. (A JComboBox is a dropdown list.) In Java, for example, this means that CheckCampaignBudgetUI must implement the ItemListener interface. When an event takes place, such as the user selecting a client in the dropdown, :CheckCampaignBudgetUI will be sent a message itemStateChanged(evt), with the data associated with the event passed in the parameter evt. If the source of the event is clientComboBox, then it should notify the control class by sending it the clientSelected message. </a>Figure 17.20 shows this interaction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;"><span><img width="455" height="211" alt="image" src="Image_1132.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark842">Figure 17.20 </a><span class="s21">Detail of Swing component interaction for use case </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark841" class="a">At this point in the interaction, the user could either select a campaign from the list of campaigns or could select another client from the client list. In the latter case, then the interaction of </a><a href="part23.htm#bookmark843" class="a">Fig. 17.19 could take place again. With the design as it is at present, this would result in the campaigns for the newly selected client being added onto the list of campaigns already in the dropdown. This is clearly incorrect, and this is where the interface needs an operation to clear the list: clearAllClientNames() was suggested for the ClientLister interface. The equivalent clearAllCampaignNames() is shown in </a>Fig. 17.21.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark844" class="a">If the user does select a campaign, then the button checkButton should be enabled, and if the user clicks that, then the budget for the selected campaign should be calculated and displayed in the textfield. This is shown in Fig. </a>17.22. We have not shown all the parameters and return values in this diagram, as it is very easy to clutter up such a diagram with additional text.</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="547" height="314" alt="image" src="Image_1133.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark843">Figure 17.21 </a><span class="s21">Revised second part of interaction for use case </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="358" alt="image" src="Image_1134.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark844">Figure 17.22 </a><span class="s21">Final part of interaction for use case </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the same way as we did not show the detail of the interaction within the boundary class on the earlier diagrams, we have left the detail of how :CheckCampaignBudgetUI will get the values from the dropdowns and set the value of the textfield out of this diagram. This provides us with a clean interface, and :CheckCampaignBudget need know nothing of the internal workings of the boundary class. The display of the budget amount could be changed from a textfield to a label, or even digital speech, but the control class only needs to know that the boundary class will respond appropriately to the setBudget message.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="#bookmark840">There may be many places in the system where the same patterns of interaction as in Figs</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part23.htm#bookmark840" class="a">17.18 </a><a href="part23.htm#bookmark842" class="a">and </a><a href="part23.htm#bookmark840" class="a">17.20 take place. Rather than producing separate interaction sequence </a><a href="part23.htm#bookmark840">diagrams</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">for all of these, we may choose to produce some generic sequence diagrams that show the pattern of interaction that is expected to take place when objects are listed in a dropdown or when an item is selected from a list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><span><img width="515" height="491" alt="image" src="Image_1135.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark845">Figure 17.23 </a><span class="s21">Revised class diagram showing </span><span class="s89">CheckCampaignBudgetUI.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark845" class="a">We can further extend the class diagram with the operations that have been identified for our boundary class. </a>Figure 17.23 shows this for the CheckCampaignBudgetUI class. The code that manages the interface is the implementation of an operation of CheckCampaignBudgetUI that is invoked by the control class. It also shows the interfaces that it must realize, both some that are specific to this application and one that is part of the Java Abstract Window Toolkit (AWT) event handling model, which is used by Java Swing.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark846" class="a">Boundary classes include reports as well as screen displays, and reports can be shown in interaction diagrams as well. The simplest form of report is produced by opening an output stream to a device such as a printer. In this case each object that is to be printed out can be sent the message to print itself with a reference to the output stream as a parameter. This is shown in Fig. </a>17.24 for a simple report of all clients, where a control class co-ordinates the printing of the report. (We have used communication diagrams for the following diagrams to show how they can be used for this kind of design as well.) If the user is required to enter parameters, for example selecting a client in order to print a report of all campaigns for that client, then a dialogue of some sort will also be required.</p><p style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><span><img width="494" height="203" alt="image" src="Image_1136.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark846"><span class="s31">Figure 17.24 </span></a>Report design in which the <span class="s89">Client </span>formats its own data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="515" height="310" alt="image" src="Image_1137.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark847">Figure 17.25 </a><span class="s21">Report design in which a boundary class formats the data.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark846" class="a" name="bookmark848">In the simple solution of Fig. </a><a href="part23.htm#bookmark847" class="a">17.24, the instances of Client are responsible for formatting themselves for output to the printed report. An alternative solution is to design a boundary class to handle the formatting of the attributes of one or more instances of one or more classes. This solution is shown in </a>Fig. 17.25.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The decision as to which of these approaches is best will depend on the development environment being used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Control classes to manage the user interface like this are not always necessary. In Java applets, the Applet class can handle both the presentation and the control. In some applications, for example real-time applications where the attributes of objects are changing and those changes need to be reflected in different views of the data, it may be better to use a design based on the MV C style of developing applications, which is discussed in Section 17.7.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="251" height="25" alt="image" src="Image_1138.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.6  </a><a href="part4.htm#bookmark4" class="s29">Class Diagram Revisited</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.6  </a><a href="part4.htm#bookmark4" class="s29">Class Diagram Revisited</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.6  </a><a href="part4.htm#bookmark4" class="s29">Class Diagram Revisited</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark833" class="a" name="bookmark849">The boundary classes can be added to the class diagram. They can be shown in a single diagram for the Agate Boundary package (com::agate::boundary) (see Fig. </a>17.12) or in separate diagrams, grouped by type or subsystem. The buttons and other classes that are used to make these interface classes need not be shown in the diagrams. However, all the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">boundary classes in the application will have a package dependency to the package where the buttons and other classes are held.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There may be some commonality among boundary classes that can be abstracted out into an inheritance hierarchy. For example, all dialogue boxes that are concerned with printed reports may have a standard set of buttons, <b>Print</b>, <b>Cancel </b>and <b>Select Printer</b>, and radio buttons for <b>Portrait </b>and <b>Landscape</b><a href="part23.htm#bookmark823" class="a">. These buttons and the associated event-handling mechanisms could be placed in a generic PrintDialog superclass, from which all other report dialogue boxes could inherit this functionality. If we had chosen the design for the lists of clients and campaigns that required a separate dialogue box for each, as in Figs </a><a href="part23.htm#bookmark824" class="a">17.4, </a><a href="part23.htm#bookmark830" class="a">17.5 and </a><a href="part23.htm#bookmark850" class="a">17.9, then we would need to add a LookupDialog class which would be the parent of all look-up dialogues in the system. This is in turn a subclass of the JDialog class from the Java Swing package. The JDialog class is also the superclass of PrintDialog, the parent of all dialogues used to run reports. Figure </a>17.26 shows the beginnings of a possible inheritance hierarchy based on this approach. Note that LookupDialog and PrintDialog are both abstract classes: there will never be instances of either.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 70pt;text-indent: 0pt;text-align: left;"><span><img width="416" height="215" alt="image" src="Image_1139.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark850">Figure 17.26 </a><span class="s21">Beginnings of an inheritance hierarchy for possible dialogue classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="299" height="25" alt="image" src="Image_1140.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.7  </a><a href="part4.htm#bookmark4" class="s29">U ser Interface Design Patterns</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.7  </a><a href="part4.htm#bookmark4" class="s29">U ser Interface Design Patterns</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.7  </a><a href="part4.htm#bookmark4" class="s29">U ser Interface Design Patterns</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark738" class="a" name="bookmark851">We have suggested that in an application of this sort generic patterns of interaction can be documented for the design of the user interface and the boundary classes. It is also possible to use standard design patterns as we discussed in </a>Chapter 15.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark595" class="a">The MV C architecture is the classic object-oriented pattern for designing the user interface. It has been mentioned more than once in this chapter and was described in Chapter </a>12. The Model class is the business object, the V iew is its presentation to the user and the Controller defines how the user interface responds to the user’s actions.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark842" class="a">Java uses MV C in the user interface by means of the EventListener subinterfaces and EventObject subclasses. There are a number of subclasses of EventObject for different types of event, such as MouseEvent for mouse events and ItemEvent for checkboxes and lists, and different subinterfaces of EventListener to handle them (such as MouseListener, ItemListener and ActionListener). We used this mechanism to handle the event when the user selects a client in Fig. </a>17.20. Because it involves a dropdown list (a JComboBox), we use ItemEvent and ItemListener.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Any class that implements the ItemListener interface must implement the method itemStateChanged(); this means that it must include code so that its instances can respond appropriately to the message itemStateChanged(ItemEvent) whenever they receive it. Any class that implements ItemListener can register its interest in the events that affect an instance of certain user interface components, such as the Choice and the Menu classes. This is done by sending the message: AddItemListener(ItemListener) to an instance of one of these classes. It adds the new instance of ItemListener to a list it keeps of all the ItemListeners it must notify of any events. Then when the Menu is selected or the Choice is changed, it sends</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the message itemStateChanged() to each of the objects in its list and passes them an ItemEvent object as a parameter.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark852" class="a">Each of the objects that receives the message can then inspect the ItemEvent object and decide whether it is interested in that particular event and whether it needs to take some action in response. The action could be to notify other classes of the event, particularly if the class that is implementing the ItemListener interface is a control class. This is shown in Fig. </a>17.27. The use of the interface mechanism in Java means that the user interface component does not need to know the actual class of the class that implements ItemListener; as long as it implements the interface it will know what to do when it is sent the itemStateChanged() message.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 61pt;text-indent: 0pt;text-align: left;"><span><img width="452" height="275" alt="image" src="Image_1141.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark852"><span class="s31">Figure 17.27 </span></a>Java <span class="s89">ItemListener </span>response to an external event.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1182" class="a">Gamma et al. </a>(1995) describe the MV C architecture in terms of three patterns: the Observer, the Composite and the Strategy design patterns.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1142.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <i>Observer pattern </i>provides a mechanism for decoupling business objects from their views. It is based on a publish–subscribe model. There are two main types of objects: Observers, which are the V iew objects, and Subjects, which are the business objects. Observers can subscribe to a subject and ask to be notified of any changes to the subject. When a change takes place in the subject, it publishes information about the changes to all the observers that have subscribed to it. This is the basis of the Observer–Observable approach adopted in Java 1.1 (and later versions of Java). The Observer pattern is the core of the MV C architecture, but two other patterns also apply.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1143.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark853">The </a><i>Composite pattern </i><a href="part23.htm#bookmark831" class="a">provides a means to structure objects into whole–part hierarchies. Most windowing interfaces use this approach to form composite views made up of smaller components. The class diagram of </a>Fig. 17.10 shows this kind of composite structure. The Composite pattern is a way of structuring views to include nested views. For example, a graphical display may represent the same model in two different views, a graph and a table of numbers that may be nested within another view.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1144.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <i>Strategy pattern </i>offers a way of defining a family of algorithms, encapsulating each one and making them interchangeable. This allows the strategy to vary independently of client objects that use it. In MV C one controller can be replaced by another. For example, an on-screen calculator could be designed and built initially to respond to mouse clicks on the buttons on the screen. The controller for the calculator detects mouse clicks and notifies the internal application objects and the</p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">view objects about these mouse events. Later the calculator could be modified to respond instead to keypresses on the computer numeric keypad, or to both mouse clicks and keypresses. The controller object can be replaced without having any impact on the application objects.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Design patterns provide a way of reusing design experience and best practice. Separating the concerns of the user interface and the control of interaction from the business application objects is a proven technique to produce good designs and maximize the opportunities for reuse of the classes that are designed and developed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="416" height="24" alt="image" src="Image_1145.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.8  </a><a href="part4.htm#bookmark4" class="s29">M odelling the Interface U sing State M achines</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.8  </a><a href="part4.htm#bookmark4" class="s29">M odelling the Interface U sing State M achines</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.8  </a><a href="part4.htm#bookmark4" class="s29">M odelling the Interface U sing State M achines</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark831" class="a" name="bookmark854">State machines can be used to model the rules that control how the user interface responds to events. In </a><a href="part23.htm#bookmark826" class="a">Fig. 17.10 we showed the classes that make up the user interface for the use case Check campaign budget in the Agate project. That diagram shows the static structure of the interface, but it provides no information about how it will behave in response to the user. The sequence diagrams developed in Section 17.5 and the prototype in </a>Fig. 17.6 provide additional information, but they tell us nothing about the permitted states of the interface. The sequence diagrams show the sequential view of the user working through the fields on the screen from top to bottom, but it is in the nature of GUI interfaces that the user can click on interface objects out of sequence. So what happens if the user clicks on the <b>Check </b><a href="part18.htm#bookmark525" class="a">button before a client and a campaign have been selected? The user may choose to check more than one budget. What happens if they select a different client—how does that affect the other fields where data has already been selected? All these issues can be modelled using a state machine diagram. State machines were introduced in Chapter </a><a href="part38.htm#bookmark1127" class="a">11, and were used there to model the way that events affect instances of a class over its lifetime. They are used to model shorter timescales in designing the control of real-time systems. They can also be used to model the short-term effects of events in the user interface. Browne </a><a href="part38.htm#bookmark1202" class="a">(1994) uses state machines in this way to model the user interface as part of the STUDIO methodology. Horrocks </a>(1999) uses state machines in a more rigorous way than Browne in his user interface–control–model (UCM) architecture and relates the use of state machines to coding and testing of the user interface. Browne’s approach leads to a bottom-up design of the interface, assembling state machines for components into a complete model of an interface; Horrocks develops his state machines in a top-down way, successively introducing nested substates where they are necessary. We are using Horrocks’s approach in what follows.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">For the example that follows, we are using the original design for the user interface with</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part23.htm#bookmark826" class="a">dropdowns for Client and Campaign, as in the prototype of </a>Fig. 17.6.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As a design principle in our user interfaces, we want to prevent users from making errors wherever possible rather than having to carry out a lot of validation of data entry in order to pick up errors that have been made. One way of doing this is to constrain what users can do when they are interacting with the interface. For example, in the Check campaign budget user interface it makes no sense to click the <b>Check </b>button until both a client and a campaign have been selected. Rather than check whether a client and campaign have been selected every time the button is clicked, we can choose only to enable the button when we know that both have been selected. To do this we need to model the state of the user interface and it is this that we model using state machines. This process involves five tasks.</p><p class="s25" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1. <span class="p">Describe the high-level requirements and main user tasks.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">2. <span class="p">Describe the user interface behaviour.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">3. <span class="p">Define user interface rules.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">4. <span class="p">Draw the state machine (and successively refine it).</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">5. <span class="p">Prepare an event–action table.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1202" class="a">We have simplified Horrocks’s approach here. His book (Horrocks, </a>1999) provides a full and clear exposition of this approach.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">1 . Describe the high-level requirements and main user tasks</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The requirement here is that the users must be able to check whether the budget for an advertising campaign has been exceeded or not. This is calculated by summing the cost of all the adverts in a campaign, adding a percentage for overheads and subtracting the result from the planned budget. A negative value indicates that the budget has been overspent. This information is used by a campaign manager.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">2 . Describe the user interface behaviour</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">There are five active elements of the user interface: the <b>Client </b>dropdown, the <b>Campaign </b>dropdown, the <b>Budget </b>textfield, the <b>Check </b>button and the <b>Close </b><a href="part23.htm#bookmark826" class="a">button. These are shown in </a>Fig. 17.6.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The <b>Client </b>dropdown displays a list of clients. When a client is selected, their campaigns will be displayed in the <b>Campaign </b>dropdown.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The <b>Campaign </b>dropdown displays a list of campaigns belonging to the client selected in the <b>Client </b>dropdown. When a campaign is selected the <b>Check </b>button is enabled.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">The <b>Budget </b>textfield displays the result of the calculation to check the budget. The <b>Check </b>button causes the calculation of the budget balance to take place. The <b>Close </b>button closes the window and exits the use case.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">3 . Define user interface rules</p><p class="s18" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">U ser interface objects with constant behaviour</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1146.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The <b>Client </b>dropdown has constant behaviour. Whenever a client is selected, a list of campaigns is loaded into the <b>Campaign </b>dropdown.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1147.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The <b>Budget </b>textfield is initially empty. It is cleared whenever a new client is selected or a new campaign is selected. It is not editable.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1148.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The <b>Close </b>button may be pressed at any time to close the window.</p><p class="s18" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">U ser interface objects with varying behaviour</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1149.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <b>Campaign </b>dropdown is initially disabled. No campaign can be selected until a client has been selected. Once it has been loaded with a list of campaigns it is enabled.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1150.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <b>Check </b>button is initially disabled. It is enabled when a campaign is selected. It is disabled whenever a new client is selected.</p><p class="s18" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Entry and exit events</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1151.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The window is entered from the main window when the Check Campaign Budget menu item is selected.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1152.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When the <b>Close </b>button is clicked, an alert dialogue is displayed. This asks ‘Close window? Are you sure?’ and displays two buttons labelled <b>OK  </b>and <b>Cancel</b>. If <b>OK </b>is clicked the window is exited; if <b>Cancel </b>is clicked then it carries on in the state it was in before the close button was clicked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">4 . Draw the state machine</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark855" class="a">At the top level, there are three states the application can be in. It can be in the Main Window (and we are assuming that this is modelled in detail elsewhere), in the Check Budget Window or in the Alert Dialogue. </a>Figure 17.28 shows these top-level states.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Horrocks uses the convention of names of buttons in single quotes to represent button press events. We have used that notation here for the values that will be returned from the alert dialogue, but have used operation signatures for the other events, as we want to be able to check them against the sequence diagrams.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark856" class="a">Within the Check Budget Window state, there are different substates of the user interface that must be modelled. Initially, no client is selected; then the user can select a client. </a><a href="part23.htm#bookmark856">Figure</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark856" class="a">17.29 shows the resulting two states. Because there will be actions associated with the </a>user selecting a different client, we have shown the clientSelected() event returning to the Client Selected state if it occurs again.</p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark858"><span><img width="373" height="177" alt="image" src="Image_1153.jpg"/></span></a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark855">Figure 17.28 </a><span class="s21">Top-level states</span><span class="s12">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;"><span><img width="406" height="114" alt="image" src="Image_1154.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark856">Figure 17.29 </a><span class="s21">Client selection states within the state </span><span class="s89">Check Budget Window.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 70pt;text-indent: 0pt;text-align: left;"><span><img width="416" height="115" alt="image" src="Image_1155.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark857">Figure 17.30 </a><span class="s21">Campaign selection states within the state </span><span class="s89">Client Selected.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark857" class="a">Similarly, once the interface is in the Client Selected state, it can be in either the substate where a campaign has not yet been selected or the substate where a campaign has been selected. These two states are shown in </a>Fig. 17.30.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If the user interface is in the Campaign Selected state, then if the <b>Check </b><a href="part23.htm#bookmark858" class="a">button is pressed, the result will be displayed in the textfield, which will initially be blank. This is shown in </a><a href="part23.htm#bookmark858">Fig. 17.31.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark859" class="a">These various state machines can be combined and nested within the top-level state for the Check Budget Window. This is shown in </a>Fig. 17.32.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note the use of the <i>deep history indicator </i>where the ‘Cancel’ event returns control from the Alert Dialogue to the Check Budget Window. The H* in a circle shows that when that transition takes place, it will return to the exact same state that it was in before the transition to the Alert Dialogue state, however far down in the nested hierarchy of states it was. This works like a memory. The state of the user interface before the closeButtonClicked() event is recorded, and the ‘Cancel’ event returns it back to that recorded state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 73pt;text-indent: 0pt;text-align: left;"><span><img width="420" height="114" alt="image" src="Image_1156.jpg"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 17.31 <span class="s21">Display of result states within the state </span><span class="s89">Campaign Selected.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="536" height="534" alt="image" src="Image_1157.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark859">Figure 17.32 </a><span class="s21">Combined state machine with nested states.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark859" class="a">Horrocks’s approach has some notational differences from the UML standard. He numbers his states (as in </a><a href="part23.htm#bookmark860" class="a">Fig. 17.32), because the numbers of the states can be stored as the values of the state variables that hold the information about the current state of the system. He also explicitly names the state variables in square brackets. </a><a href="part23.htm#bookmark859" class="a">Figure 17.33 shows an example of this notation. Using explicit state variables and numbers for states will help in coding the implementation of this design, and the numbered states make the production of the event– action table simpler. </a><a href="part23.htm#bookmark861" class="a">Figure 17.32 is slightly more complicated than it needs to be. States 2 and 4 have no real meaning; they can be treated as no more than a grouping of the enclosed substates to keep the number of states and transitions down. Figure </a><a href="part23.htm#bookmark862" class="a">17.34 is a simplification. The simplified state machine has been used to prepare the event–action table in </a>Fig. 17.35.</p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;"><span><img width="447" height="155" alt="image" src="Image_1158.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark860">Figure 17.33 </a><span class="s21">State variable and numbered states.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="537" height="509" alt="image" src="Image_1159.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark861">Figure 17.34 </a><a href="part23.htm#bookmark859" class="s33">Simplified version of state machine in </a><span class="s21">Fig. 17.32.</span></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="339" alt="image" src="Image_1160.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark862"><span class="s31">Figure 17.35 </span></a>Event<i>–</i><a href="part23.htm#bookmark861" class="s33">action table for </a>Fig. 17.34.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">5 . Prepare an event– action table</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">UML state machine notation allows you to label transitions and states with actions. On a transition the action can be an action of the object itself or it can involve a message being sent to another object. Within states, <i>entry </i>and <i>exit actions </i>can be documented, as well as <i>do actions </i>that are carried out continuously while the object is in that state and <i>event actions </i>that are carried out if a particular event occurs while the object is in that state (as explained in Section 11.3).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The use of these actions on state machine diagrams can make them very cluttered and difficult to read, especially if there are also guard conditions on the transitions as well as actions. UML allows you to put actions both on transitions and on states, although some authors on the subject suggest that you use either actions on transitions or actions on states, but not both.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark525" class="a">For complex state machines, rather than displaying the actions in the state machine as in Chapter </a>11, an alternative is to list the actions in a table. This is an event–action table. From the point of view of the programmer, this table will be easier to use than a state machine labelled with actions. It should also make it easier to validate the state machine and to test the code once it has been implemented.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The event–action table lists the following values in columns:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1161.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1162.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">the current state of the object being modelled the event that can take place</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1163.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the actions associated with the combination of state and event</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1164.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">the next state of the object after the event has taken place; if more than one state variable is used, these are shown in separate columns.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part23.htm#bookmark861" class="a">Figure 17.35 shows an event–action table for the state machine of </a>Fig. 17.34.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We can now use this information to revisit the sequence diagrams. Indeed, if we know what the names of the messages or operations in the sequence diagrams are, we can use them in the event–action table instead of the natural language descriptions of the actions.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark837" class="a">If we examine the first sequence diagram from </a>Fig. 17.15, we can see that we need some additional operations to be shown in the sequence diagram. The sequence diagram shows the boundary class being created, the <b>Client </b>dropdown being loaded and the window being enabled, but we have not explicitly disabled the <b>Campaign </b>dropdown and the <b>Check </b><a href="part23.htm#bookmark863" class="a">button. </a>Figure 17.36 shows these additional operations.</p><p style="padding-left: 27pt;text-indent: 0pt;text-align: left;"><span><img width="532" height="391" alt="image" src="Image_1165.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark863">Figure 17.36 </a><span class="s21">Revised sequence diagram for first part of interaction.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark840" class="a">We can apply the same approach to the sequence diagram of Fig. </a><a href="part23.htm#bookmark864" class="a">17.18, which shows what happens when the client is selected, and thus the transition from State 1 to State 2. This is shown in </a>Fig. 17.37.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="547" height="314" alt="image" src="Image_1166.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark864">Figure 17.37 </a><span class="s21">Revised sequence diagram for second part of interaction.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If the names of the events and operations have already been decided, because the sequence diagrams have been produced and the operations of classes have been designed, then the event–action table can list them using these names. For example, in the transition</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part23.htm#bookmark862" class="a">from State 1 to State 2 in Fig. </a>17.35, the event would be called clientSelected(), and the actions would be:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">ListCampaigns(); CheckCampaignBudgetUI.clearAllCampaignNames(); ListCampaigns.listCampaigns(); CheckCampaignBudgetUI.enableCampaignList();</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark844" class="a">Working through the design of the interface in this way will lead to the addition of more operations  to  the  class  diagram  in  Fig.  </a>17.22.  For  example,  the  operation disableCheckButton() needs to be added to CheckCampaignBudgetUI, and the operations enableCampaignList()  and  disableCampaignList()  need  to  be  added  to  the  interface CampaignLister and to CheckCampaignBudgetUI.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="25" alt="image" src="Image_1167.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">17.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark865">Designing the interface objects requires us to model three important aspects of the interface. First, we need to determine the classes of the objects that will participate in the interaction with the user and decide on how we will reuse interface classes that are available in class libraries. The choice of interface objects will depend on the style guidelines that have been adopted for the system. These classes are shown in class and package diagrams. Second, we need to model the interaction with the user in sequence or collaboration diagrams. The way that the interaction is modelled will depend on the architecture that has been chosen for the system. The three-tier architecture and the Model–V iew–Controller architecture separate the boundary objects from the entity and control objects using well-defined methods. Third, we need to model the state of the interface to ensure that we understand how the interface will respond to events and what sequences of events are permitted. We use state machine diagrams to do this.</a><a name="bookmark866">&zwnj;</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">While carrying out these three modelling tasks, we can draw on design patterns to inform</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">the way in which we select the interface classes and design the interaction between them and the business classes. Prototyping can be used to build models of the interface and test how it will work. Users should be involved in this process to ensure that the interface meets their requirements and to validate the analysts’ understanding of their requirements for how tasks should be carried out.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:243pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">17.1  <span class="s16">Why should the user interface classes be kept separate from the business classes and application logic?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.2 <span class="s16">Explain the difference between vertical and horizontal prototyping.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.3 <span class="s16">What is meant by a throwaway prototype?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.4  <span class="s16">What does the « import» stereotype mean?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.5  <span class="s16">What role does each element of the Model–V iew–Controller architecture play?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">17.6  <span class="s16">What else do we use state machine diagrams for, apart from modelling the state of interface objects?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.7  <span class="s16">What are the five steps in preparing a state machine to model a user interface?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.8 <span class="s16">What information is held in an event–action table?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.9  <a href="part23.htm#bookmark847" class="s36">Convert the communication diagram of </a><span class="s16">Fig. 17.25 into a sequence diagram.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.10 <a href="part23.htm#bookmark852" class="s36">Convert the communication diagram of </a><span class="s16">Fig. 17.27 into a sequence diagram.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 56pt;text-indent: -29pt;text-align: left;">17.11 <span class="s16">What are the differences between the MV C and Java EventListener approaches?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.12 <a href="part23.htm#bookmark863" class="s36">Convert the sequence diagram of </a><span class="s16">Fig. 17.36 into a communication diagram.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">17.13 <a href="part23.htm#bookmark864" class="s36">Convert the sequence diagram of </a><span class="s16">Fig. 17.37 into a communication diagram.</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:19pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-left: 10pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:255pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">17.A <span class="s16">Decide how you will handle the interaction between the user and the system for the use case Record problem on line for FoodCo. Draw a prototype user interface design.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">17.B <span class="s16">Draw a sequence diagram to include the interface objects that are needed for your prototype in Exercise 17.A.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">17.C <span class="s16">Draw a class diagram to show the classes that are used in the prototype from Exercise 17.A.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 22pt;text-indent: -26pt;text-align: justify;">17.D <span class="s16">Extend your class diagram from Exercise 17.C to show the superclasses of the interface classes.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">17.E <span class="s16">If you are familiar with a class library, such as the Java AWT, Java Swing, Microsoft Windows Forms or Ruby, then try to determine how your interface classes relate to classes in that class library.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">17.F <span class="s16">Produce a prototype for the use case Record problem on line using a language or visual programming environment with which you are familiar.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">17.G <span class="s16">Draw a state machine diagram for the interface to the use case Record problem on line to model the behaviour of your prototype developed in Exercise 17.F.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">17.H <span class="s16">Update your sequence diagram from Exercise 17.B to make sure that it reflects the state machine diagram of Exercise 17.G.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_1168.png"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part38.htm#bookmark1182" class="s6">The MV C architecture is explained in a number of books, particularly books that use Smalltalk as a programming language. </a>Gamma et al. (1995) specifically explain it in terms of patterns.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: right;"><a href="part38.htm#bookmark1127" class="s6">The Java EventListener event model was introduced into Java in V ersion 1.1. (V ersion 1.0 used a less efficient model.) There are a number of these EventListener interfaces for different kinds of events. Most introductory Java programming books explain them. The Swing classes can also use the MV C approach. Few books on object-oriented analysis and design provide much detail on state machines, and those that do often provide simple models of telephone systems as examples rather than user interfaces. Browne </a><a href="part9.htm#bookmark102" class="s6">(1994) is one of the few authors who seriously applies state machine diagrams to user interface design. Although he does not use the UML notation, his diagrams in Chapter </a><a href="part38.htm#bookmark1202" class="s6">3 are similar enough to provide a clear idea of how they can be used to model the detail of user interface interaction. Horrocks (1999) applies a more rigorous software engineering approach to the use of state machines to </a><a href="part38.htm#bookmark1189" class="s6">design interfaces. Browne’s approach is bottom-up, while Horrocks’s is top-down. Both use the state machine notation that was originally developed by Harel </a>(1987). For a more recent view of state machines from</p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part38.htm#bookmark1190" class="s6">Harel, see </a>Harel and Politi (1998), which presents the STATEMATE approach.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_1169.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:350pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark867">LEARNING OBJECTIVES</a><a name="bookmark868">&zwnj;</a></p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_1170.jpg"/></span></p></td></tr><tr style="height:87pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the different ways of storing persistent objects</p><p class="s16" style="padding-left: 54pt;padding-right: 110pt;text-indent: 0pt;text-align: left;">the differences between object and relational databases how to design data management objects</p><p class="s16" style="padding-left: 54pt;padding-right: 45pt;text-indent: 0pt;text-align: left;">how to extend sequence diagrams to include data management objects how frameworks are used to map classes to database tables.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_1171.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="77" alt="image" src="Image_1172.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark869">Real information systems require </a><i>persistent </i>data: data that continues to exist even when the system is not active, and data that is stored so that it can be shared between many users in different places and at different times. If you have to design the storage of data, one of the first decisions is whether to store it in files or in a database. A database is a more likely solution, as it provides a set of tools for storing data, but there are some things that simple files of various types are good at: holding configuration data is one example.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Using a database management system (DBMS) offers a number of advantages over files, and there is a further decision to make: whether to use an <i>object </i>DBMS, which should require minimum effort to take objects in programs and store them in the database; or whether to use a <i>relational </i>database, in which case the objects will have to be mapped to tables in the database. Many organizations already have relational DBMSs, so the designer of an object- oriented system can be constrained by the organization’s existing investments in hardware and software and have to use a relational database management system (RDBMS) to store data. <i>Normalization </i>can be used to design tables for a relational database. Alternatively there are rules of thumb that can be applied to convert a class diagram to a suitable set of tables.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark870">Designing for an object DBMS will have a minimal impact on the design model. Commercial and open-source products exist that can take plain objects in Java or C# and store them in the database. With some extra work, usually in configuration, such databases can be set up to minimize the work required of the programmer.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is possible to build your own framework for storing objects in a relational database, but few designers or programmers would do this, as there are standards such as the Java Persistence API and Java Data Objects and many products that implement these standards, that mean that you should never have to design your own persistence framework.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Databases don’t necessarily run on a single computer or in a single location, and there are different ways of distributing data across multiple machines, although designing for distributed databases is an advanced topic beyond the scope of this book.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="149" height="25" alt="image" src="Image_1173.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.2  </a><a href="part4.htm#bookmark4" class="s29">Persistence</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.2  </a><a href="part4.htm#bookmark4" class="s29">Persistence</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.2  </a><a href="part4.htm#bookmark4" class="s29">Persistence</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark871">18.2.1 </a><b>Req uirement for persistence</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">For some applications the data that is created or used while the application is running is not required after the application terminates. This applies mainly to simple applications: an example would be the on-screen calculators provided with GUI operating systems. Such data is called <i>transient data</i>.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Most applications, however, need to store data between one execution of the program and the next. In some cases, the data that is stored is secondary to the operation of the application. When you use a browser, one of the first things that happens as it loads is that it reads data from files that describe the user’s preferences and record the last websites visited. The ability to store user settings and to configure applications in this way is an important factor in their usability, but it is not their primary purpose: a browser still works if the user’s preferences and history are not available.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In the case of information systems, storing data is a primary requirement. Businesses and other organizations rely on their information systems to record data about other organizations, people, physical objects and business events and transactions. The data entered into such a system today will be required in the future; operations being carried out on data today rely on data that was stored in the past. Computerized information systems have replaced systems based on paper in files and ledgers, and must provide the same relatively permanent storage that is provided by paper-based systems. In most organizations, it is also important that data can be shared between different users. Data in the memory of a particular computer is not normally accessible to multiple users. It must be written away to some kind of shared data storage system so that other users can retrieve it when they require access to it.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This is what we mean by <i>persistent data</i>. It is data that must be stored in a secondary data storage system, not just in computer memory, that must be stored after the program that creates or amends it stops running and that usually must be available to other users. Information systems also use transient data: for example, the results of calculations or lists of objects that are required for a particular purpose such as printing a report, but that are not required permanently and can be destroyed after they have been used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In an object-oriented system, we are concerned with both <i>persistent objects </i>and <i>transient objects</i>. Persistent objects are those that must be stored using some kind of storage mechanism, while transient objects will be erased from memory after they have been used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark872">18.2.2 </a><b>Overview of storage mechanisms</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Ultimately all data in computer systems is stored in files of some sort. In Section 18.3, we explain the different kinds of file organizations and access methods that are available, and the purposes that files are used for. However, most information systems use a database management system of some sort in which to store their data. Database management systems provide a layer of abstraction that hides from the programmer the fact that the data is stored in files. If the database is a relational database, then the user of the database sees tables containing data. Each table may relate to part of a file, to a single file or to many files, but that is not important to the user of a relational database (who may be a designer or programmer). The way that the database stores tables in files is important to the database administrator, who has to be concerned with where the data is stored, taking backups and so on. If the database is an object database, then the programmer sees objects and links between them. Again these objects will be stored in files of some sort, but the designer or programmer does not need to know the details.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In an object-oriented system, a database of some sort is the most likely way of providing</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">persistent storage for objects. However, it is possible to store objects in files. Most object- oriented languages provide mechanisms for converting objects into a form that can be written out to a file—<i>serializing </i>them—and for reading them back into memory from a file. This is unlikely to provide an efficient mechanism for a business information system. However, files can be used for many other storage purposes in object-oriented systems. They can be used to hold data that is transferred in from other systems, and in Section 19.6 we discuss the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">conversion of data from a system that is being replaced. Files can also hold configuration information, and in Section 18.3.5 we provide an example of how files can be used to localize the Agate system so that text items such as labels, button captions and menu entries are displayed in the language of the country where the application is being used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The choice of database management system will have a significant impact on the work that is required of the systems designers. If an object database is used, then there should be little work involved in designing the way that objects are stored. If a relational database is used, then more work is involved. In Section 18.5 we describe two approaches to converting classes to tables and, in Section 18.8, we describe some ways of designing persistence frameworks. In Section 18.8.4 we explain the tools and frameworks that are available to automate the process of mapping classes to tables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.2.3 <b>Architecture for persistence</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Part of the process of system architecture design is to determine how the requirements for the storage of persistent data will be met by the system. There may be trade-offs to be made between the requirements for a new system and the existing hardware and software that is available. Many organizations also have corporate standards for the database management systems that they use, and these will influence the architecture of a new system and the design of data storage.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark873" class="a">Existing systems may have a different architecture from the one proposed for a new system, but there may be parts of the existing system that can be reused. This is often the case with databases, as organizations often have existing business systems and wish to use the data from those existing systems in new ways. If the new system is to be developed in an object-oriented language, it may be necessary to create a layer in the architecture that wraps the existing data so that it looks like objects even if it is stored in a relational database. This is shown in Fig. </a>18.1. An example of an existing system like this might use SQ L-Server as its database and V isual Basic for the existing client programs. The V isual Basic client programs access the data in the database using ODBC (Open Database Connectivity) and SQ L (Structured Q uery Language). The new system might use Java applications for the presentation layer, and Java components for the business logic layer and for the data access layer. The Java components would provide a wrapper around the rows of data in the relational database, so that they appeared as objects to the business logic layer. The data access layer would probably still use ODBC—or in this case JDBC (Java Database Connectivity)—and SQ L to connect to the database, but the objects used to access the data could be reused in other applications. If the data access layer is well designed, it may be possible later to replace the old client–server application by adding to the presentation and business logic layers and reusing the data access layer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="179" alt="image" src="Image_1174.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark873">Figure 18.1 </a><span class="s21">Layered architecture for existing and new systems sharing an existing relational database.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For the architect designing the persistent storage of a system there are a number of questions to be answered.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1175.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Are there parts of the system where storage in files is appropriate?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1176.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Is the system truly an object-oriented system or a simple database system with a GUI user interface? For simple systems, it is possible to write programs in an object- oriented language such as C#  or Java, which provide a front-end to a database. The front-end could connect to the database using ODBC or JDBC and treat the data purely as rows of data in tables, without using any entity objects. We are not taking this approach here, as it is not appropriate for our case studies.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1177.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Will the system use an existing DBMS or is there freedom to choose an appropriate DBMS? If an existing system is to be used, it will constrain the system design in some ways, but, as we have shown above, it is possible to use a more flexible layered architecture to replace a client–server system while retaining the same DBMS.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1178.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Will the system use a relational DBMS? If a relational DBMS is to be used then classes must be mapped to tables. This can be done using tools that automate this process, or by designing the tables and a suitable mechanism to fetch data from the database and assemble it into objects, and to save the objects back into the database when required.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1179.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Will the system use an object DBMS? If an object DBMS is to be used, then work on designing the persistence mechanisms is likely to be much simpler.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1180.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark874">What is the logical layering of the system? A layered architecture is likely to be more flexible, separating the user interface, the business logic and the access to and storage of data.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1181.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">What is the physical layering of the system? More than one logical layer can reside on the same machine: for example, the business logic and the data access can be on the same server. In large systems, there may be more than one machine providing the services of a single layer, for example several web-servers handling the presentation layer, which connect to two machines running the business logic, which connect to a single database server. If an application is delivered over the Internet or a company intranet, then much of the presentation layer will reside on the web server, where Active Server Pages (ASP), Java Server Pages (JSP) or some other related technology will be used to construct the web pages dynamically and deliver them to the client’s browser.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1182.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">What is the distribution of the system? It is conventional for the presentation layer to be located on many client machines, but, if the entity objects and the business logic are located on multiple machines, then the system must be designed to use a distributed DBMS to make it possible for clients to transparently access the objects they need to connect to in order to provide the functionality of the system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1183.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">What protocols will be used to connect between layers of the system, particularly in a distributed architecture? Language- or operating system-specific protocols such as Java’s Remote Method Invocation (RMI) or Microsoft’s .NET Framework can be used but restrict the design to implementation on certain platforms. Open standards such as CORBA or web services which use XML (Extensible Markup Language) make it possible to build component-based systems that are not tied to particular platforms.</p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Building large, distributed systems is beyond the scope of this book, but in the rest of this chapter we explain some of the mechanisms that can be used to design persistence into an object-oriented system, and we start with the simplest—files.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="158" height="24" alt="image" src="Image_1184.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.3  </a><a href="part4.htm#bookmark4" class="s29">File Systems</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.3  </a><a href="part4.htm#bookmark4" class="s29">File Systems</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.3  </a><a href="part4.htm#bookmark4" class="s29">File Systems</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark875">The simplest means of persistent storage available for computerized information systems uses files. Most users of personal computers are familiar with the idea of files. Word-processors and spreadsheets store their data in files; browsers download them from websites where they are stored. At the simplest level, a file is a stream of bytes of data stored on some physical medium. In most cases, files are stored magnetically by adjusting the magnetic properties of</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the surface layer of a disk or tape. Files can also be stored optically on CD-ROMs and other optical storage systems or electronically in special kinds of memory, such as the flash memory used in palmtops and USB memory devices. However, the user is normally shielded from the physical implementation of the file system by the operating system of the computer or by a programming language, which provides high-level functions to create files, store data in them and retrieve that data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.3.1 <b>File and record structures</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark876">Programming languages, and in some cases operating systems, also impose a structure on files. This structure breaks a file up into individual records, each of which groups together a number of fields representing the data that is to be held in the file. In the same way as each object contains a number of attributes, each one of which holds a particular kind of data about the object, each field in a record holds a particular kind of data about whatever it is that the record describes. For example, each record in a simple address book file would have fields to contain a name, lines of the address, city, postcode and telephone number. Records in files can take different forms, described below.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1185.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Fixed length<span class="p">—Each record is made up of a number of fields, each of which has a fixed length in bytes. If the data in a particular field does not fill it, the field is padded out with special characters (often spaces). Each record is of the same, fixed length and it is possible to skip from the beginning of one record to the beginning of the next by jumping that fixed number of bytes ahead.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1186.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Variable length<span class="p">—Each record is made up of a number of fields, each of which may have a maximum length but has a minimum length of zero bytes. Fields are usually separated or delimited by a special character that would not appear in the data. Records may also be delimited by a special character. The length of each record may also be stored at the start of the record, making it possible to skip to the beginning of the next record by jumping that variable number of bytes ahead.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1187.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Header and detail<span class="p">—Records may be of two types: each transaction recorded consists of a header record, followed by a variable number of detail records. This approach can be used with many business documents, such as orders, invoices and delivery notes that have a variable number of lines on them. Each record will contain a record type field. The number of detail records may be held in the header so that it is possible to tell where the next header record starts.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1188.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Tagged data<span class="p">—The data may have a complex structure, as in object-oriented systems, and it may even be necessary to hold objects of different classes in the same file. Every object and attribute may be tagged with some kind of description that tells a program reading the file what the type of each item is. This approach is used for data in files that use Hypertext Markup Language (HTML) and Extensible Markup Language (XML).</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Some systems store information about the structure of the file in a data dictionary and this may be held in a separate file or at the start of the data file itself. This makes it possible to write programs which can read the data out of any file that uses this format: the program first reads the data dictionary information and configures itself to read the appropriate data structures from the rest of the file.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">As well as having alternative ways in which the data can be structured within files, files can have different types of organization, can be accessed in different ways and can serve different purposes in a system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">18.3.2 <b>File organization</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">There are three ways in which files can be organized: serial, sequential and random.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1189.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Serial organization<span class="p">—Each record in the file is written onto the end of the existing records in the file. If a record is to be deleted, the file must be copied from the start</span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">up to the deleted record, which is skipped, and then the rest of the file is copied back to the disk.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1190.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark877">Sequential organization</a><span class="p">—In the basic form of sequential organization, each record is written to the file in some pre-determined order, usually based on the value of one of the fields in each record, such as an invoice number. Records must be deleted in the same way as for serial files. Each record must be added to the file in its appropriate place and, if it is necessary to insert a record into a file, the file is copied up to the point where the record is to be inserted, the new record is written to the file and then the rest of the file is copied.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1191.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Random organization<span class="p">—The term random is a poor way of describing the organization of random files, as the organization is really anything but random. The records are added to the file by means of precise algorithms that allow records to be written and read directly without having to read through the rest of the file. What this means is that if you choose any record </span>at random<span class="p">, it should be possible to access it more or less straightaway without searching through the file. The algorithm usually converts a key field of each record into an address in the file that can be reached directly.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">18.3.3 <b>File access</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Depending on the file organization chosen, different ways of accessing the data in the files are available to the designer. The main ones are serial, index-sequential and direct.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">S erial access</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Serial and basic sequential files can only be accessed serially. To find a particular record, it is necessary to read through the file, record by record, until the required record is located.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Index-sequential access</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Access to sequential files can be improved by maintaining an index on the field that is used to order the data in the file (the key). Index-sequential files are used where it is necessary to read the file sequentially, record by record, and to be able to go straight to a particular record using its key. The indexing mechanism used for index-sequential files dates back to the time when mainframe operating systems made it possible to allocate the particular disks, cylinders and tracks where a file would be stored.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Records are stored sequentially within blocks (areas of the disk that have a defined size). Enough blocks are allocated to the file for the total anticipated number of records. Records are written into blocks in key order, but the blocks are not filled up from the start of the file; rather, records are distributed evenly across the blocks, leaving space for new records in each block.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The index on the file can be dense or sparse. In a dense index, there is an entry for every key with a pointer to the first record in the file with that key (there may be more than one). In a sparse index, there is an entry for the last record in each data block. To find a record, a program reads through the index until it finds a key value greater than the value of the key it is searching for. It then jumps to the block pointed to by that index entry and reads through it until it finds the required record.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">To support large files, there may be two or more levels of index. For example, there may be a master index and a series of block indexes. The master index holds the value of the key field of the last record in each block index. Each block index holds the value of the key field of the last record of each block in a set of blocks. To find a record by its key, the master index is read until a key value is found that is greater than or equal to the key of the record being sought. This makes it possible to go to the block index for that record. The block index is then read until a key value is found that is greater than or equal to the key of the record being sought. This makes it possible to go to the block in which the record is held. The records in the block are then read sequentially until the desired record is found. A similar approach is taken in order to add records to an index-sequential file. The block in which the record is located is identified using the index, then the records in the block are read into memory and copied to the disk up to the point that the new record is to be inserted, the new record is written into the block, and then the rest of the records in the block are copied back to the block. The index may also need to be updated. Eventually some blocks will fill up, and it will be necessary to write some</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark878" class="a">records into special overflow blocks. The addresses of the overflow blocks will be held in the blocks that have overflowed. Performance tuning of such files involves resizing them so that there are more blocks in the file and no records have to be stored in overflow blocks. </a><a href="part23.htm#bookmark878">Figure</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="#bookmark878">18.2 shows the organization of data and indexes in an index-sequential file.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><span><img width="503" height="386" alt="image" src="Image_1192.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark878">Figure 18.2 </a><span class="s21">Schematic of indexes and data in an index-sequential file ordered by surname.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Index-sequential files have the advantage over sequential files that records can be read and written more quickly, although there is a storage overhead associated with maintaining the indexes. Compared to direct access, which is described next, there is also the overhead of the time taken to access the indexes before the data is reached.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Direct access</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark879">Direct access methods rely on the use of algorithms to convert the values of key fields in the records to addresses in the file. (The term random access is sometimes used.) The first and simplest of these is </a><i>relative addressing</i>. This access method requires the use of fixed length records and successive positive integers as keys. If each record is 200 bytes long, then record 1 will start at byte 1 of the file, record 2 at byte 201, record 3 at byte 401 and so on. It is possible to calculate the position of any record in the file by subtracting 1 from its key, multiplying the result by the size of the records and adding 1. Each record can be read directly by reading from that point in the file.</p><p class="s13" style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Hashed addressing <a href="part23.htm#bookmark880" class="a">is the second approach. This can use keys of any form. As with indexed sequential files, a fixed number of blocks is initially allocated to the file. This is usually a prime number of blocks, as this helps to achieve a more even spread of records into blocks. The key is then hashed to determine to which block a particular record will be allocated. The hashing function is an algorithm that takes an ASCII string and converts it to an integer. There are many approaches. A simple approach is to take the characters in the string and convert them to their ASCII values (for example, ‘A’ is 65). These ASCII values are summed together. The sum is divided by the number of blocks in the file and the remainder or modulo gives the number of the block in the file into which that record will be placed, starting at block 0. If a block fills up, then an additional block will be used as overflow, and its address will be held in the block that the record would have been stored in. Figure </a><span class="p">18.3 shows the organization of a</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">hashed direct access file and the calculation of a simplified version of the hashing algorithm based on just three characters of the key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="324" alt="image" src="Image_1193.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark880">Figure 18.3 </a><span class="s21">Organization of a sample hashed direct access file.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Improving access</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark881">There are a number of ways of improving access to data in files. Files with a random organization can normally only be accessed directly or serially (for example, to copy the file), so it is not possible to read through them sequentially in an order based on key fields. However, it is possible to add two extra fields to each record containing the key values of the next record and the previous record in sequence (a linked list). This makes it possible to read through the records sequentially, but adds a considerable overhead when a record is added or deleted.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A common way of improving access to a file is to add a secondary index. This is a similar approach to that used in adding an index to an index-sequential file. It is used when there is a requirement either to access records in a file based on the values in some field other than the key field (for example, to find address records by postal code or zipcode) or to provide sequential access to a random file, by building an index of sequential keys. A separate file is created in which the keys are the values from the indexed field (for example, the postal code) in all the records in the main file. Each record also contains either the keys or the block addresses of each of the records that contain that indexed field. This kind of index is known as an <i>inverted file</i>. There are various structures that can be used for indexes, such as B-trees, which have different benefits—in terms of speeding up retrieving records—and different disadvantages—in terms of adding an overhead to updates to the file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.3.4 <b>File types</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">We have seen that as well as files that hold data, there can also be files that hold indexes to the data in the main files. Other types of files may be required in a file-based system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1194.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Master files<span class="p">—hold the essential, persistent data records for the system. In transaction-processing systems the master files are updated with details of transactions that are recorded in transaction files. Master files usually require some kind of direct access so that records can be updated quickly.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1195.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Transaction files<span class="p">—record business transactions or events that are of interest to the organization and that are used to update records in master files. In a banking</span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">system, transactions that take place when customers withdraw cash from an automatic teller machine (ATM) may be recorded in a transaction file. At the end of the day, the transaction file is processed in order to update all the accounts of customers who have withdrawn cash.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1196.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Index files<span class="p">—used to speed up access to records in master files, as described above. There are many index file structures that can be used, and the choice of index structure will depend on the nature of the data and the type of access required.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1197.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Temporary files or work files<span class="p">—During the course of processing data, it may be necessary to create a temporary file that is used to hold the results of one process before it is used in another process. For example, it may be necessary to sort records into a particular order so that a report can be produced; a work file containing the records in the correct order would be produced and then deleted once the report had been created. When you use applications that print your work in the background (while you get on with another task), then they are using spool files to hold the printed output that is sent to the printer. These spool files are deleted when they have been printed.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1198.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Backup files<span class="p">—may be direct copies of master files or transaction files that are held on the system and that allow the data to be restored if the originals are destroyed or corrupted. Alternatively, they may be files with a special structure that can be used to reconstruct the data in the system.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1199.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark882">Parameter files</a><span class="p">—Many programs need to store information about items of data of which there is only one record. These are typically system settings, such as the name and address of the company using the software, and configuration information, such as the currency format to be used to print out money values or the format to be used for printing the date. Parameter files hold this kind of information.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In a project that uses files to store data, part of the role of the designer is to choose the appropriate file organization and access method for the storage of all the objects in the system. In most cases, objects will need to be stored and retrieved using some kind of object identifier and direct access files will be required. However, there may be requirements for all the objects of a particular type to be retrieved from the file in sequence, which may indicate the need for an organization that supports sequential access, or for the addition of an index. Some object- oriented languages provide mechanisms for streaming objects out to a serial file. This is the case with both Smalltalk and Java. Java, for example, contains two classes called ObjectOutputStream and ObjectInput-Stream that can be used to write objects together with information about their class to a disk file and read them back again.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Many organizations use DBMSs to hold data. In their systems, there will be no need for designers to make decisions about the physical file structures used to provide persistent storage for objects. However, there are still situations where files are the appropriate mechanism for storing data in an application. In the next section we present one example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.3.5 <b>Example of using files</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In the Agate system, one of the non-functional requirements is that the application can be customized for use in different countries with different languages. This means that all the prompts that are displayed in windows, labels on buttons and menus, and error and warning messages cannot be written into the classes in the presentation layer as string literals. For example, if a user interface class was implemented in Java using string literals, the line of code to create a cancel button would look like this:</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Button cancelButton = new Button (&quot; Cancel&quot; );</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">To use the program in French, someone would have to go through finding all the strings like this and translating them. Then there would be two versions of the program, and any changes would have to be made in both. This is unmanageable with just two languages, let alone several. In Java, it is possible to use the class java.util.Locale to hold information about the current locale in which an application is running. This includes information about the language,</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the country and a variant value, for example ‘fr’ for French, ‘FR’ for France. When France changed to the Euro as its currency in January 2002, the variant value could have used the string ‘EURO’, but that is no longer necessary, as there is no longer an alternative currency. For an application running in French in Canada, the language code ‘fr’ and the country code ‘CA’ would be required.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Another Java class, java.util.ResourceBundle, uses the locale information to hold objects in memory, each of which is associated with a key value. It can load these objects from a file, and the name of the file is made up of the name of the resource and the language, country and variant codes. So for a resource called UIResources, designed to hold the values for all the prompts  and  labels,  there  could  be  different  versions  called  UIResources_fr_FR, UIResources_en_UK, and UIResources_en_US, for France, the United Kingdom and the USA, respectively.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark883">When the user interface class is instantiated, it needs to find out its locale and then load the correct resources into memory with a line of Java like this:</a></p><p class="s93" style="padding-top: 9pt;padding-left: 23pt;text-indent: 0pt;line-height: 63%;text-align: left;">resources = <span class="p">ResourceBundle.getBundle</span></p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(&quot; UIResources&quot; ,currentLocale);</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Then the code to set up the cancel button becomes the following:</p><p style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;line-height: 15pt;text-align: left;">Button cancelButton = <span class="s97">new Button</span></p><p style="padding-left: 129pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(resources.getString(&quot; Cancel&quot; ));</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The resource file is made up of records, each of which is on a separate line, with an equals sign to separate the key from the associated string, for example:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Cancel = Annuler OK = OK</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">File = Fichier</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark964" class="a">for the French version. When the application is deployed, either the installation routine must install the correct resource files on the machines that will be running the user interface classes, or a full set of files must be deployed, and the appropriate one will be chosen at runtime. (See </a>Chapter 19 for more detail about implementation and deployment.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="311" height="25" alt="image" src="Image_1200.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.4 </a><a href="part4.htm#bookmark4" class="s29">Database M anagement Systems</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.4 </a><a href="part4.htm#bookmark4" class="s29">Database M anagement Systems</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.4 </a><a href="part4.htm#bookmark4" class="s29">Database M anagement Systems</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark884">18.4.1 </a><b>Files and databases</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Files are appropriate for simple programs and for storing data that does not need to be shared and updated by many users. During the 1960s systems were built using files to store data; since the 1970s most large commercial systems have used databases of some sort to hold their data and, more importantly, DBMSs to organize and manage the tasks associated with storing and providing effective access to large volumes of data.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Using files to store data can result in a number of problems.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1201.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As the number of applications grows, the number of different files grows. Some of these files may hold the same data for different applications in different formats and so data is duplicated, taking up unnecessary storage space. This is known as redundancy.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1202.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">There is the risk that the updates to data in different applications will not be synchronized: for example, a customer address may be changed in one file but not in another, leaving the data inconsistent.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1203.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Each application must contain its own mechanisms for storing the data in its set of files. If the data changes or the way that it is stored has to be changed, then each program within an application that accesses that data must be amended. This makes it difficult to add new programs to an application that use some of the same data but also need to store additional data.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1204.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As business requirements change, users may want to access the data in new ways: for example, to produce a report combining data from different applications. This cannot be implemented without considerable programming effort.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark885" class="a">The first step towards resolving these problems is to analyse the storage requirements of different applications across the organization and to build an enterprise database that contains all the data from different applications. Each application then uses a subset of this database for its own requirements. The second step is to use a DBMS to organize and manage the data and to decouple the storage mechanisms from the application programs. The aim of using a DBMS is to separate the details of the way that data is stored physically from the way that it is used in application programs. This is achieved by producing a logical model of the data that is independent of the demands of applications and that could be stored in different ways in the database. This is known as the Three-schema Architecture. Figure </a>18.4 shows the Three- schema Architecture. The external schema represents the ways in which data is used in application programs. The conceptual schema is a logical model of the data and is independent both of the external schema and of the details of how the data will be stored. The physical organization of the data is to be found in the internal schema, which defines the files used to store the data. The aim of this approach is to isolate the application programs from the details of how any particular item of data is stored. This is central to the way that relational DBMS work. Design for relational DBMSs is described in more detail in Section 18.5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 89pt;text-indent: 0pt;text-align: left;"><span><img width="365" height="163" alt="image" src="Image_1205.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark885">Figure 18.4 </a><span class="s21">The Three-schema Architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note that just using a DBMS does not necessarily eliminate the problems of redundancy and inconsistency described above. Many organizations end up with different databases for different applications with redundant and inconsistent data in some databases, and many large organizations find that Microsoft Access databases proliferate as end-users develop their own mini-applications.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">DBMSs provide more than just a means of storing data that can be shared across many applications. They provide tools and features that can be used to manage the data.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1206.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Data definition language (DDL)<span class="p">. The DDL is used to specify the data that is held in a database management system and the structures that are used to hold it.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1207.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Data manipulation language (DML)<span class="p">. The DML is used to specify updates and retrievals of the data in the DBMS. Structured Q uery Language (SQ L) is the de facto standard for both DDL and DML in relational databases.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1208.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Integrity constraints<span class="p">. Constraints can be specified to ensure that the integrity of the data is maintained.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1209.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark886">Transaction management</a><span class="p">. Updates to the database can be specified as </span>transactions <span class="p">in which all of the updates to different objects must succeed. If one update cannot be successfully made to the database, all the updates must be stopped, so that the database returns to a consistent state. The entire transaction is </span>rolled back<span class="p">, which means that it is not committed to the database, and updates that had already been processed are cancelled. Transactions depend on a process called </span>two-phase commit<span class="p">, in which each update is prepared and checked to see that it will succeed. Only when it is known that all updates will succeed is the data finally committed to</span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the database. A simple example would be if you have a current account and a savings account with the same bank and you make an online transfer between your two accounts. You would be unhappy if the update to reduce the balance of the source account was successful, but the addition to the balance of the target account failed! Both must be successful or the whole transaction must be stopped.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1210.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Concurrency<span class="p">. Many users can simultaneously use the database and update its contents.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1211.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Security<span class="p">. Access to the data in the database can be controlled, and permissions granted to different users for different levels of access (for example in SQ L, select, insert, update and delete).</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1212.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Tuning of storage<span class="p">. Tools can be used to monitor the way that data is accessed and to improve the structures in the internal schema in order to make the access more efficient. These changes can then be made without having any impact on the application programs.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">As mentioned above, these structures in the internal schema will be files. An important feature of a DBMS is that the kind of file used, the access methods and the indexes that are held on the file are hidden from users of the DBMS (typically application programmers) and can be changed without affecting the programs that use that data.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">These changes to the database do not happen automatically. For large systems a database administrator (DBA) must be employed to manage the database and to ensure that it is running efficiently. The DBA will be responsible for controlling the data dictionary that defines the conceptual schema of the database, for controlling access to data and for tuning the performance of the database. For smaller systems a DBA will not be needed, but someone will need to be responsible for managing the database.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In summary, the use of a DBMS based on the Three-schema Architecture has a number of advantages over the use of files to store data for an information system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1213.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">The use of a conceptual schema can eliminate unnecessary duplication of data.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1214.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Data integrity can be ensured by the use of integrity constraints and transaction management techniques.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1215.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Changes to the conceptual schema, the logical model, should not affect the application programs, provided the external schema used by the application programs does not have to be changed.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1216.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Changes to the internal schema, the physical storage of the data, have no impact on the conceptual schema and should not affect the application programs, except perhaps positively in enabling them to access data more efficiently. Compromises may have to be made between the needs of different application programs.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1217.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Tools are available for tuning the performance of the database, for the back-up and recovery of data and to control security and access to data by multiple simultaneous users.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">However, the use of DBMS may also have disadvantages for organizations that decide to go down this route.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1218.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1219.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">There is a cost associated with investing in a large DBMS package. There is a running cost involved in employing staff to manage the DBMS.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1220.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">There will be a processing overhead in converting data from the database to the format required by the application programs.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark887">The most widely used type of DBMS is the relational DBMS. For object-oriented systems one might hope to be able to use an object DBMS. However, in many situations, organizations have an existing relational DBMS and new object-oriented applications must share that enterprise database. A relational database with C++, C#  or Java as the application development language is still more common than an object DBMS.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">18.4.2 <b>Types of DBM S</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The three main types of database that we are concerned with here are relational, object and hybrid object-relational.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Relational databases</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1142" class="a">The idea of relational databases was first suggested by Codd </a><a href="part38.htm#bookmark1105" class="a">(1970). His proposal was followed by considerable research effort that led to the development of commercial relational database management systems (RDBMS) during the 1970s. However, it was not until 1986 that the American National Standards Institute published the first SQ L standard based on this work (ANSI, </a>1986). SQ L (Structured Q uery Language) is now the standard language for relational databases and provides both DDL and DML capabilities.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark888">Relational databases have a theoretical foundation in set theory and their operations are defined in terms of the </a><i>relational algebra</i>, a mathematical specification of the operations that can be carried out on <i>relations</i>. The essence of the relational model is to eliminate redundancy from data and to provide the simplest possible logical representation of that data. This is achieved by means of a series of steps that can be applied in analysing the data and that result in normalized data. This normalized data is held in relations or tables. This process simplifies a complex data structure until it can be held in a series of tables. Each table is made up of <i>rows </i>of data. Each row contains attribute values that are organized in <i>columns</i>. Each column contains data values of the same attribute type. The data in each row must be distinct and can be uniquely identified by some combination of attribute values in that row. Each attribute value in the table must be <i>atomic</i><a href="part23.htm#bookmark889" class="a">, that is, it may not contain multiple values or be capable of being broken down further. Figure </a><a href="part23.htm#bookmark929" class="a">18.5 shows the conventional form for representing tables on paper. In existing RDBMSs, all data structures must be decomposed into this kind of two-dimensional table.</a><a href="part23.htm#bookmark929" class="s32">1</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;"><span><img width="444" height="290" alt="image" src="Image_1221.jpg"/></span></p><p class="s31" style="padding-top: 10pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark889">Figure 18.5 </a><span class="s21">Conventional representation of a table.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The weakness of current implementations of RDBMSs lies in the fact that objects in object- oriented systems do not fit easily into this model. They can be broken down into tables, as is shown in Section 18.4, but there is a processing overhead associated with breaking them down and reconstructing them. References to other objects (represented by associations in the class diagram) must also be maintained when an object is stored in a relational database, and restored when it is retrieved. And, even if the associated object is not itself in memory, some mechanism must be created to allow it to be referenced and to be sent messages. Tables in RDBMSs are linked to one another by common attribute values (foreign keys), whereas objects are linked to one another by references or pointers. Data in relational DBMSs is processed in sets, while data in object DBMSs must be navigated through, following links from object to object.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark890">Relational DBMSs are currently the most widely used type of DBMS. They are based on a sound mathematical theory, they have been developed over a number of years, they are robust and they are efficient and flexible for the kind of data that they are designed to handle. The best known is probably Access; others include Oracle, SQ L-Server, DB2, Informix, Ingres, Progress and Sybase. The growth of Linux has also led to the availability of free and open source databases such as MySQ L and PostgreSQ L.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Object databases</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark891" class="a">In contrast, objects in an object-oriented system are not flat, two-dimensional structures. Each object may contain other objects nested within it. For example, a SalesOrder object could contain an Address object that contains its own attributes, and a Collection of OrderLine objects, each of which is made up of two attributes. An example of this is shown in Fig. </a>18.6 with a SalesOrder object with its class definition in UML notation. Object database management systems (ODBMSs) have been developed to handle complex objects of this sort. Part of the motivation for the development of ODBMSs has been the growth in the number of applications that use complex data structures. These include multimedia applications, in which objects such as sounds, images and video clips are not easily represented in tables, and applications such as computer aided design packages in which the designer may want to deal with different levels of abstraction: for example, treating a subassembly in terms of its behaviour as a subassembly, in terms of the individual chips or in terms of the components such as logic gates that make up those chips. ODBMSs provide services that make it possible to store complex objects of this type. Examples of ODBMSs include V ersant Object Database, db4objects, JADE and ObjectStore. Section 18.6 includes an example using db4objects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;"><span><img width="430" height="440" alt="image" src="Image_1222.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark891"><span class="s31">Figure 18.6 </span></a>Composite <span class="s89">SalesOrder </span>object with equivalent UML class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Object-relational databases</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark892">Object-relational databases combine the simplicity and efficiency of relational databases with the ability of object databases to store complex objects and to navigate through the</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">associations between classes. The SQ L standard is being updated to allow the relational model to incorporate many features of object-oriented systems such as user-definable abstract data types, inheritance and operations. The open source product PostgreSQ L is probably the most well-known hybrid DBMS. Oracle now includes some hybrid features. In what follows we shall focus on relational and object databases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="509" height="25" alt="image" src="Image_1223.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.5  </a><a href="part4.htm#bookmark4" class="s29">Designing for Relational Database M anagement Systems</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.5  </a><a href="part4.htm#bookmark4" class="s29">Designing for Relational Database M anagement Systems</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.5  </a><a href="part4.htm#bookmark4" class="s29">Designing for Relational Database M anagement Systems</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark893">18.5.1 </a><b>Relational databases</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark894">RDBMSs have been in use since the 1970s. They use mature technology and are robust. It is common for an object-oriented system to be built to use a relational DBMS. Relational databases hold data in flat two-dimensional tables, whereas classes may have complex nested structures with objects embedded within other objects. If it is necessary to use an RDBMS to provide the storage for a system built using an object-oriented programming language, then it will be necessary to flatten the classes into tables in order to design the storage structures. When the system requires an instance of a class from the database, it will have to retrieve the data from all the tables that hold parts of that object instance and reconstruct it into an object. When a complex object instance has to be stored, it will have to be taken apart and parts of it will be stored in different tables. The designer of such a system has to decide on the structure of the tables to use to represent classes in the database. It should be emphasized that it is only the attribute values of object instances that are stored in an RDBMS; operations are implemented in the programming language used.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">There are two ways in which classes can be converted to tables in a relational database.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">The first, normalization, is suitable for decomposing complex objects into tables. It is used in systems that are not object-oriented to design the structure of tables in databases. It can also be used during object design to simplify large complex objects that are not cohesive. The second approach is based on a series of rules of thumb that can be applied to classes in a class diagram to produce a set of table structures. In this section, we describe these two approaches and, in Section 18.6, we discuss the impact that this will have on the design of classes in the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.5.2 <b>Data modelling and normalization</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In order to store the objects from an object-oriented system in a relational database, the objects must be flattened out. <i>Normalization </i><a href="part23.htm#bookmark784" class="a">is an approach that is also used to convert the complex structures in business documents into tables to be stored in a relational database. A typical example of its use would be to design a set of tables to hold the data in a sales order like the FoodCo example in Fig. </a>16.3. How then do we apply normalization? Normalization is based on the idea of <i>functional dependency</i>.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For two attributes, A and B, A is functionally dependent on B if for every value of B there is exactly one value of A associated with it at any given time.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Attributes may be grouped around functional dependencies according to the rules of normalization to produce normalized data structures that are largely free of redundancy. There are five normal forms of normalized data. The data is free of redundancy in fifth normal form. For practical purposes it is usually adequate to normalize data into third normal form. Normalization is carried out in a number of steps, and we shall apply these to an example from the Agate case study.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark895" class="a">Analysis  activity  during  a  further  iteration  has  identified  a  class  called InternationalCampaign, which is a kind of campaign that runs in more than one country, and the attribute values of two instances of this class are shown in </a>Fig. 18.7. As stated earlier, we may wish to decompose this class into simpler classes because it is not cohesive or we may need to decompose it into table structures for storage using an RDBMS. The same approach is used in both cases. Here we are applying normalization as part of the design for a relational database.</p><p style="padding-left: 46pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="459" alt="image" src="Image_1224.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark895"><span class="s31">Figure 18.7 </span></a>Example <span class="s89">InternationalCampaign </span>objects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The first step is to remove any calculated values (derived attributes). The attribute locationCount is a derived attribute. It is the number of locations associated with any one international campaign and can be calculated when an instance of InternationalCampaign is instantiated.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We  now  create  a  relation  that  is  said  to  be  in  unnormalized  form.  Each InternationalCampaign is uniquely identified in this system by its campaignCode. This is the <i>primary key </i><a href="part23.htm#bookmark896" class="a">attribute. Figure </a>18.8 shows the data from these instances in a table. Each InternationalCampaign is represented in a single row. Note that there are multiple values in some of the columns in each row. These relate to the locations where the campaign will run and the manager in each location.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="152" alt="image" src="Image_1225.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark896">Figure 18.8 </a><span class="s21">Table for sample International Campaigns.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A table is in <i>first normal form </i><a href="part23.htm#bookmark897" class="a">(1NF) if and only if all row/column intersections contain atomic </a><a href="part23.htm#bookmark896" class="a">values. The table in </a><a href="part23.htm#bookmark897" class="a">Fig. 18.8 </a><a href="part23.htm#bookmark897">does not conform to this criterion and must be redrawn as in Fig.</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark897" class="a">18.9. These multiple values are often known as </a><a href="part23.htm#bookmark897" class="s40">repeating groups</a><a href="part23.htm#bookmark897">.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="247" alt="image" src="Image_1226.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark897">Figure 18.9 </a><span class="s21">Revised table for International Campaigns without repeating groups.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The campaignCode no longer uniquely identifies each row in the table. Each row is identified by a combination of campaignCode and locationCode. These attributes form a candidate <i>primary key </i>for the table.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The data values have been flattened out into a two-dimensional table and could now be stored in a relational database as they are. However, there is redundancy that we want to eliminate from the data. If redundant data is held in the database, there is the risk that values will not be updated correctly. For example, if Martina Duarte’s telephone extension number changes, the system must ensure that it is correctly updated in every row in which it appears. This is inefficient and prone to error.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The next step is to convert these relations to <i>second normal form </i><a href="part23.htm#bookmark898" class="a">(2NF). A relation is in 2NF if and only if it is in 1NF and every non-key attribute is fully dependent on the primary key. Here the attribute campaignTitle is only dependent on campaignCode, and locationName is only dependent on locationCode. (These are sometimes called ‘part-key dependencies’.) The other attributes are dependent on the whole primary key. (Remember A is dependent on B if for every value of B there is exactly one value of A associated with it at a given time.) </a><a href="part23.htm#bookmark898">Figure</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="#bookmark898">18.10 shows the creation of two new relations Campaign and Location.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="271" alt="image" src="Image_1227.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark898">Figure 18.10 </a><span class="s21">2NF tables.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The next step is to convert the tables to <i>third normal form </i><a href="part23.htm#bookmark899" class="a">(3NF). A relation is in 3NF if and only if it is in 2NF and every attribute is dependent on the primary key and not on another non- key  attribute.  Campaign  and  Location  are  in  3NF,  but  in  InternationalCampaign-2, locationMgrTel is dependent on locationMgr and not on the primary key. Figure </a>18.11 shows the tables in 3NF with the addition of a new table called LocationManager.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="260" alt="image" src="Image_1228.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark899">Figure 18.11 </a><span class="s21">3NF tables.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;"><span><img width="309" height="190" alt="image" src="Image_1229.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark900">Figure 18.12 </a><a href="part23.htm#bookmark899" class="s33">Entity–relationship diagram for tables of </a><span class="s21">Fig. 18.11.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark900" class="a">These relations can be shown in a diagram using the notation of entity–relationship diagrams, which are often used to represent the logical structure (conceptual schema) of relational databases. Note that this is not part of the UML notation. Figure </a><a href="part23.htm#bookmark899" class="a">18.12 shows the relations of Fig. </a>18.11 as an entity–relationship diagram. Some UML CASE tools can also produce entity–relationship diagrams, and some can generate the SQ L statements to create the tables.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark901" class="a">If we examine the attributes of these relations, we may come to the conclusion that InternationalCampaign was not a very well analysed class in the first place. It should perhaps be a subclass of Campaign. LocationManager appears to be nothing more than CreativeStaff with an association to International Campaign. We also require a new class called Location with an association to InternationalCampaign. However, if we simply create associations between  CreativeStaff  and  InternationalCampaign  and  between  Location  and InternationalCampaign, it will not be possible to tell which manager is managing the campaign in which location. There is presumably also an association between StaffMember (the superclass of CreativeStaff) and Location, but we should not rely on that to find out which Location  an  InternationalCampaign  is  running  in,  as  the  member  of  staff  who  is LocationManager could move offices. In Figure </a>18.13, we have added a new class</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">LocationManagement, to relate a particular instance of CreativeStaff to a particular instance of Location and a particular instance of InternationalCampaign. Association ends are shown as attributes, but collection classes have not been added.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="526" height="474" alt="image" src="Image_1230.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark901">Figure 18.13 </a><span class="s21">Excerpt from class diagram for </span><span class="s89">InternationalCampaign.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;"><a href="part23.htm#bookmark901" class="a">The classes in Fig. </a>18.13 raise a number of questions that should have been addressed during the analysis of requirements. Some of these are listed below.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1231.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Does each campaign have a location? Is this the main location for an international campaign?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1232.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Does each member of staff work in a location?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1233.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Are there different versions of adverts for different locations?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1234.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">How are international campaigns costed? What currencies are used?</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark902">You can probably think of others. In an iterative lifecycle, it is acceptable to be raising these issues in early iterations. In a traditional Waterfall Lifecycle, these issues should have been resolved during the analysis stage, but in reality may not have been.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.5.3 <b>M apping classes to tables</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1125" class="a">An alternative approach to that provided by normalization is to follow a set of guidelines for how to map the classes and multiplicities in the class diagram to tables in a relational database design. A summary of the patterns that can be applied to this mapping can be found in Brown and Whitenack (1996). The following guidelines are derived </a><a href="part38.htm#bookmark1263" class="a">from </a><a href="part38.htm#bookmark1125" class="a">Rumbaugh et al. (1991) and </a>Brown and Whitenack (1996).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1235.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Classes with a simple data structure. These classes become tables.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1236.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Object identifiers become primary keys. A unique identifier is generated for every object and can be used as a primary key in the relational table in which it is held. (V arious schemes are available that guarantee a unique id for every object.)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1237.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Classes that contain an instance of another class as an attribute. A separate table should be created for the embedded class. Objects of the embedded class should be allocated a unique object identifier. The object identifier should replace the embedded object in the table for the container class as a foreign key.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1238.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Classes that contain collections. Allocate an object identifier to the class held in the collection. This class will be represented by a table. Create a separate table that contains two columns. The first holds the object identifiers of the objects that contain the collection; the second holds the object identifiers of the objects that are held in the collection.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1239.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">One-to-many associations can be treated like collections.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1240.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Many-to-many associations become separate tables. Create a table that contains two columns. Each row contains a pair of object identifiers, one from each object participating in the association. (These are like two collections.)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1241.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One-to-one associations are implemented as foreign key attributes. Each class gains an extra attribute in which to hold the object identifier of the associated object.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">(A <i>foreign key </i><a href="part23.htm#bookmark899" class="a">is used in relational databases to create the relationships between tables. In the InternationalCampaign-3 table in Fig. </a>18.11, locationCode is an example of a foreign key. Objects do not have keys, and this is why object identifiers are allocated to them. It may be possible to use an attribute that will have a unique value in each instance of a class as a foreign key.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">When a relational database is used, collection classes that exist only to provide access to a set of objects of the same class need not be part of the data that is stored in tables. If it is necessary to iterate through every instance of a particular class, this can be done by selecting every row from the table.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Inheritance poses more of a problem. There are three alternative ways of mapping an inheritance hierarchy to relational database tables.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1242.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Only implement the superclass as a table. Attributes of subclasses become attributes of the superclass table and hold null values where they are not used. This approach is most appropriate where subclasses differ from their superclass more in behaviour than in attributes. A type attribute is required to indicate which subclass each row represents.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1243.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Only implement the subclasses as tables. The attributes of the superclass are held in all the subclass tables. This only works if the superclass is abstract and there will be no instances of it.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1244.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Implement all the classes (both superclass and subclasses) as separate tables. To retrieve the data for a subclass, both its own table and the table of its superclass must be accessed. Again, a type attribute may be required in the superclass table.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The solution that is chosen may depend on the requirements of the particular application or may be constrained by the use that will be made of the data in the database by other applications.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark899" class="a">This brings us to a further aspect of relational databases: data is added to and retrieved from them using SQ L statements. SQ L provides both the DDL and DML for relational </a><a href="part23.htm#bookmark903" class="a">databases. Figure </a><a href="part23.htm#bookmark899" class="a">18.14 shows the SQ L statements necessary to create the tables of </a><a href="part23.htm#bookmark899">Figs</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark900" class="a">18.11 and </a><a href="part23.htm#bookmark899" class="a">18.12 </a><a href="part23.htm#bookmark899">in Oracle generated by the CASE tool from the storage class diagram.</a></p><p style="padding-left: 87pt;text-indent: 0pt;text-align: left;"><span><img width="378" height="362" alt="image" src="Image_1245.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark903">Figure 18.14 </a><a href="part23.htm#bookmark899" class="s33">SQ L statements to create tables of </a><a href="part23.htm#bookmark900" class="s33">Figs 18.11 and </a><span class="s21">18.12.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark904" class="a">Figure </a>18.15 shows an SQ L statement that finds all the international campaigns with the locationName ‘Hong Kong’. Typically this kind of query would be written as a procedure with a variable in place of the string ‘Hong Kong’, and the variable would be replaced with a parameter value when the procedure was invoked, allowing the same query procedure to be reused to find campaigns in any location.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="501" height="96" alt="image" src="Image_1246.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark904">Figure 18.15 </a><span class="s21">SQ L statement to find campaigns running in Hong Kong.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There is a design decision to be made in deciding where to place the responsibility for this kind of requirement.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1247.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This SQ L statement could be executed and only data for those objects that are required would be returned from the database. This replaces the interaction to select the relevant objects modelled in a sequence diagram with functionality provided by the DBMS.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1248.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark905">Alternatively, the data from all these tables could be retrieved from the database and used to instantiate the objects in the system. Each International Campaign object could then be sent a message to check whether it includes the Location ‘Hong Kong’. This will involve it sending a message to each associated Location object. This is more object-oriented, but will take a longer time to execute.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1249.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The third alternative is to retrieve data from each table in turn, as though navigating through the structure of the class diagram, first the International Campaign then each of the Locations for that InternationalCampaign. This approach requires use of indexes on the tables to make access possible in a reasonable time.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark964" class="a">This kind of design decision trades off the pure object-oriented approach against the efficiency of the relational database. In order to retrieve this data into objects in a programming language such as Java, the SQ L statements must be embedded in the program. In Chapter </a>19, we present examples of how this can be done using JDBC (Java Database Connectivity). During design, we have to decide which classes have the responsibility for accessing the database. In Section 18.8 we describe two different approaches to this design decision and show how they can be modelled in UML. However, before we address how we can model the database management responsibilities of the system, we need to consider object DBMSs and what they have to offer the designer as an alternative to relational DBMSs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="481" height="25" alt="image" src="Image_1250.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.6  </a><a href="part4.htm#bookmark4" class="s29">Designing for Object Database M anagement Systems</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.6  </a><a href="part4.htm#bookmark4" class="s29">Designing for Object Database M anagement Systems</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.6  </a><a href="part4.htm#bookmark4" class="s29">Designing for Object Database M anagement Systems</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark906">18.6.1 </a><b>Object databases</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Object DBMSs differ from current relational DBMSs in that they are capable of storing objects with all their complex structure. It is not necessary to transform the classes in the design model of the system in order to map them to storage objects. As you might expect, using an object database maintains the seamlessness that is claimed for object-oriented systems right through to the storage of objects in the database. Designing for an object database will have a minimal impact on the design of the system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1131" class="a">The standard for object databases was originally set by the Object Data Management Group (ODMG) and is currently available in V ersion 3.0 (Cattell et al., </a><a href="part23.htm#bookmark907" class="a">2000). The standard defines both the Object Definition Language (ODL) and the Object Manipulation Language (OML) for object databases. The ODL is similar to the DDL elements of SQ L for relational databases but allows objects to maintain their complex structure: objects can contain other objects, including collections, as attributes. Figure </a><a href="part23.htm#bookmark900" class="a">18.16 shows the ODL definition of the InternationalCampaign, StaffMember and CreativeStaff classes based on Fig. </a>18.12 but with the StaffIntCampaignList as an embedded attribute of CreativeStaff. Note also that the client contact association with Client is shown as a one-to-one association to illustrate the syntax.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="494" height="428" alt="image" src="Image_1251.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark907"><span class="s31">Figure 18.16 </span></a>ODL for <span class="s89">InternationalCampaign, StaffMember </span>and <span class="s89">CreativeStaff.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">However, in 2001 the ODMG was disbanded and the work that had been done on the standard was submitted to the Java Community Process (JCP) in response to Java Specification Request (JSR) 12, the Java Data Objects (JDO) Specification V ersion 1.0. This has subsequently been replaced by JDO 2.0 in response to JSR 243; JDO provides an abstract API for Java programs to access databases that is independent of the underlying database technology. The mapping between the Java classes and the structures in the database is set up in an XML configuration file. Mapping tools are explained in Section 18.8.4.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Individual ODBMSs do not necessarily conform to the ODMG standard, although some may provide a JDO-compliant API. Not all object databases require the developer to use ODL, and there are a number of ways of querying the database, most of which are extensions to the programming language. As an example here, we use db4o (Database For Objects) by V ersant, which is available for Java and .NET under the GPL (General Public Licence).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">At its simplest, db4o will work with existing Java classes: they do not require any special code adding to them, although, for more sophisticated uses of the database, classes do require either to implement the com.db4o.ta.Activatable interface or the compiled classes must be run through an enhancer that changes the byte code.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark908" class="a">Figure </a>18.17 shows the class Client with Address and StaffMember linked to it by the association roles address and staffContact, and with Java constructors and get and set methods. Note that only primary operations (see Section 14.3.3) are shown here.</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="752" alt="image" src="Image_1252.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark908"><span class="s31">Figure 18.17 </span></a>Class diagram excerpt showing primary operations for <span class="s89">Client, Address </span>and <span class="s89">StaffMember.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;"><a name="bookmark909">It is possible to store objects like this in a way that stores associated objects simply by opening a connection to the database, for example,</a></p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">String filename = new String(&quot; AgateDB.db4o&quot; ); ObjectContainer db = Db4o.openFile(filename);</p><p style="padding-top: 6pt;padding-left: 20pt;text-indent: -14pt;line-height: 149%;text-align: left;">and calling db.store(Object);</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">where Object is an object instance in the program.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark910" class="a">Figure </a>18.18 shows some example code in Java that creates a Client, an Address and a StaffMember, links them together and stores them in the database. For the developer, this is about as seamless as it gets. There is no creating a database, no creating tables with appropriate columns, no mapping attributes in the classes to columns in the database, no special database manipulation language to learn.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The method retrieveClientsByContact() illustrates three important points. First, it is possible to use Q uery By Example (Q BE) to retrieve objects: an object of the class StaffMember is populated with the values that are to be looked up in the database, and used to retrieve data. This query works just as well if the staffNo is set to zero, or if the staffName is set to null, though one of the attributes must have a value, otherwise all instances of StaffMember and the Client they are linked to will be retrieved. Second, no special coding is necessary to retrieve the Client linked to the StaffMember: there is no attribute in StaffMember to link it through a collection class to Client, so if the StaffMember is the staffContact for more than one Client, all those clients will be retrieved. Third, in storing the Client in the database, the associated StaffMember and Address are stored transparently.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This is clearly a simple example, and for a commercial system, an architect or system designer would want to be confident that the database is capable of handling the volumes of data required and performing as fast as specified by the non-functional requirements. However, db4o provides support for a number of features, which can be switched on relatively easily by configuring the database before connecting to it: transparent activation, transparent persistence and transactions. These are explained briefly here.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1253.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Transparent activation<span class="p">. When a group of objects are joined together by links, and are retrieved for the database, the DBMS needs to know how far down the chain of links it should go. This can be configured in db4o, or transparent activation can be used. Transparent activation means that if the DBMS finds an object that is activatable, it does not retrieve it from the database, but waits to see if it is needed. If an operation references an operation or attribute of that object, it transparently retrieves it from the database and brings it into memory. This is effectively the same as the proxy pattern described in Section 18.8.3.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1254.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Transparent persistence<span class="p">. When a complex group of interrelated objects is in memory, and some are updated and some are not, it can be difficult to keep track of which ones must be saved to the database, and which ones haven’t changed and don’t need to be saved. Transparent persistence manages this for the developer.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1255.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Transactions<span class="p">. A transaction is a group of updates to multiple objects that must be persisted to the database on an all or nothing basis. If one of the updates fails, all the others must be rolled back.</span></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span><img width="517" height="757" alt="image" src="Image_1256.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark910">Figure 18.18 </a><span class="s21">Example Java code to store objects in db4o.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark911">The structure of the class diagram will require minimal changes to be used with an object database.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Although object DBMSs make it easier to map an object-oriented design straight to a database, there is one area where the seamlessness breaks down. Apart from very simple operations, such as those to insert new values or to do simple arithmetic, ODL and hence object databases do not support the storage of operations in the database. Operations must still be implemented in an object-oriented programming language such as Java or C++.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="232" height="25" alt="image" src="Image_1257.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.7  </a><a href="part4.htm#bookmark4" class="s29">Distributed Databases</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.7  </a><a href="part4.htm#bookmark4" class="s29">Distributed Databases</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.7  </a><a href="part4.htm#bookmark4" class="s29">Distributed Databases</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark912">Before we consider how to design the classes that handle data management for a database that is not object-oriented, it is worth briefly considering the issue of distributed databases.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In a simple system, objects can be stored on the local machine in a database, brought into the memory of the machine and sent messages to invoke their operations before being saved back to the database and removed from memory. Alternatively, in an n-tier architecture, objects are stored on a database server, and the client sends data or requests to an application server, the objects are brought into the memory of the application server, sent messages to invoke processing, and saved back to the database. Data is sent back to the client machine to display to the user.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">However, there are some situations where either by design or for historic reasons, data is held in a number of databases in different locations and processed by multiple processors. There are a number of possible architectures that may have to be taken into account when designing the database. Four of them are discussed here to different levels of detail:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1258.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1259.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1260.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">parallel database systems multi-database systems distributed database systems</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1261.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">replicated or mobile database systems.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Parallel database systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Parallel databases are designed to handle large volumes of transactions—more than a single processor can handle—and are distributed across multiple processors or computers. Typically these processors are located in the same multi-processor machine, or the computers are located together in a cluster linked by a high-speed network. The data may be held in disks that are local to each processor or on a storage area network (SAN). The transaction processing load may be spread across the different processors by a load-balancer. Oracle Real Application Clusters (RAC) is an example of a clustered system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Organizations usually adopt parallel database systems to provide scalability (the ability to create a database system that is larger than a single machine could handle, and that can grow as volumes of data and transactions grow), fault tolerance (individual processors in the cluster can fail, but processing will continue) and load balancing (the ability to spread the load evenly across the cluster of processors). High transaction volume applications, such as on-line stores, or high data volume applications, such as data warehouses, are the kind of application that uses database clusters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M ulti-database systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark913">Multi-database systems usually reflect a situation where, for historical reasons, the data that an organization needs to operate is held in multiple different databases in different locations, and possibly from different vendors. While some applications may need to access data from several of these databases, there are still applications that are local to each database and are updating data in their own database without regard for the other databases. Often there is data duplication with, for example, customer data being held in a customer relationship management system and the sales ledger.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this situation, an additional layer of database management software is installed over these databases. This software creates a conceptual schema for the data that cuts across multiple databases, and a mapping is created between this schema and the conceptual schemas of the underlying databases. So a table in this conceptual schema may contain columns that are held in different physical databases in different locations. The mapping software presents a consolidated conceptual schema on which external schemas can be built for different applications, and handles the transactional updates to the underlying databases. Sybase Enterprise Connect Data Access is an example of a package that performs this role.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Organizations adopt a multi-database system where there are many existing databases, possibly at different sites, and new applications need to access the data in these underlying databases as though it were in a single database.</p><p class="s26" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Distributed database systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Distributed database systems are designed to create a database that is distributed across multiple locations. Each part of a distributed database in a different location is called a <i>fragment</i>. In order to give each location in the organization rapid access to data that it needs, the data is split across multiple sites. If an application in one location needs data that is managed elsewhere, either that data may be replicated on the application’s local database, or the distributed database management system (DDBMS) will transparently fetch the data from a remote site.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The data may be fragmented horizontally, with all data for each location held in that location (for example, all UK customers held in the UK database while all US customers are held in the US database); or it can be fragmented vertically, with data for different business functions held in different locations (for example, all customer data held in the sales office, while stock data is held in the warehouse database); or it can be fragmented by a combination of these techniques.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A DDBMS holds local information about the data that it holds in a data dictionary or data catalogue, and a global catalogue holds information about the location of other data in other databases. To the application that requires the data, the location of data is irrelevant. The application makes requests to the local instance of the DDBMS, and if it doesn’t have the data, it will transparently fetch it from another database.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The Open Group has developed and maintains the Distributed Relational Database Architecture (DRDA) as an interoperability standard for distributed databases. IBM’s DB2 DBMS is an example of a DRDA-compliant DDBMS.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Organizations adopt distributed database systems where there is a case for data to be held locally for performance reasons, but some functions within the organization require access to data from other business functions or geographical locations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Replicated or mobile database systems</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The growth of mobile applications and other applications that must run on a client, that need to share data, but that connect to the central DBMS over unreliable or intermittent network connections, has led to the associated growth in database software that replicates data between databases, typically between one central database and many smaller client databases.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Mobile applications that run on mobile phones or personal digital assistants (PDAs) are typical users of replicated databases. Web-based applications are fine where connectivity over the Mobile Internet is good, but in remote areas, or those where reception of mobile signals is poor, the user is cut off from their application. If the connection is lost, the user can’t record a delivery, place an order, or do whatever the application was designed to do. One solution to this is to write an application that runs on the PDA or mobile device with its own local database. The application reads from and updates the local database, and whenever there is a good connection to the central system, the data is replicated: data that is needed on the PDA, such as latest prices, stock availability or the next job, is transferred to the PDA, and data that has been updated on the PDA, such as new orders or delivery confirmations, is transferred to the central database.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Sybase SQ L Anywhere is an example of a product that replicates data between mobile devices and a central database or between databases. Most large DBMSs provide replication capabilities between instances of the same DBMS for disaster recovery.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Organizations adopt replication for mobile applications when it is critical that the application always has access to the data that it needs and the web-based style of application is therefore unsuitable. Database replication is also used as part of a distributed DBMS—to make some data that is managed on remote sites available locally—and to provide back-up databases hosted on a disaster recovery system, that enable an organization to continue operating if the primary data centre is damaged or disconnected from power or the network.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark914" class="a">Figure </a>18.19 shows schematic views of the architecture of each of these four types of database system.</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="536" height="404" alt="image" src="Image_1262.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark914">Figure 18.19 </a><span class="s21">Schematic views of different types of distributed database.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="353" height="25" alt="image" src="Image_1263.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.8 </a><a href="part4.htm#bookmark4" class="s29">Designing Data M anagement Classes</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.8 </a><a href="part4.htm#bookmark4" class="s29">Designing Data M anagement Classes</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.8 </a><a href="part4.htm#bookmark4" class="s29">Designing Data M anagement Classes</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark915">18.8.1 </a><b>Layered architecture</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In designing the boundary classes, one of our aims has been to keep them separate from the control and entity classes. In designing the presentation layer we isolated the entity classes in the system from the way that they are presented on screen and in reports and documents. We did this in order to maximize the reusability of the classes. Our aim is to do the same with the data storage layer. Classes are less reusable if they are tightly coupled to the mechanisms for storing instances in a file system or database. We also want to decouple the entity classes from the business logic.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">What are the options for locating the operations that handle the tasks of storing and retrieving objects?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1264.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1265.jpg"/></span></p><p class="s25" style="padding-top: 6pt;padding-left: 70pt;text-indent: -64pt;text-align: left;">1. <span class="p">We could add operations to each class to enable objects to save and store themselves. This reduces reusability. Each class must now contain code to implement the operations that couple the class to the particular data storage mechanism used. This breaches the idea of cohesion. Each business class should contain operations that are relevant to the behaviour of instances of that class. Data storage methods belong in a data storage class.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1266.jpg"/></span></p><p style="padding-left: 70pt;text-indent: 0pt;line-height: 106%;text-align: left;">If an object is not currently instantiated, how can we send it a message to invoke an operation to load itself?</p><p class="s25" style="padding-left: 19pt;text-indent: -13pt;text-align: justify;">2. <span class="p">We can get around this last problem by making the storage and retrieval operations class- scope methods rather than instance-scope methods (static methods in Java or static member functions in C++).</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1267.jpg"/></span></p><p style="padding-left: 70pt;text-indent: 0pt;line-height: 112%;text-align: justify;">This still suffers from the first two problems listed above for option 1. The class is less reusable and lacks cohesion.</p><p class="s25" style="padding-top: 3pt;padding-left: 19pt;text-indent: -13pt;text-align: left;">3.  <span class="p">All persistent objects in the system could inherit methods for storage from an abstract superclass—PersistentObject for example, rather than Object in Java.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1268.jpg"/></span></p><p style="padding-left: 70pt;text-indent: 0pt;line-height: 112%;text-align: left;">This has the effect of strongly coupling existing classes to the PersistentObject superclass, so all business classes end up inheriting from a utility class.</p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">4.  <span class="p">Where we have introduced collection classes into the design to manage collections of</span></p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">objects, we could make these collection classes responsible for storing and retrieving object instances.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1269.jpg"/></span></p><p style="padding-left: 70pt;text-indent: 0pt;line-height: 112%;text-align: justify;">This is closer to a solution. The collection classes are design artefacts—not part of the business classes in the system. However, we may wish to reuse the design, and we are coupling it to the storage mechanisms.</p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">5. <span class="p">We could introduce into the system separate classes, whose role is to deal with the storage</span></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">and retrieval of other classes. This is the database broker approach.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1270.jpg"/></span></p><p style="padding-left: 70pt;text-indent: 0pt;line-height: 112%;text-align: justify;">This solution fits the layered architecture. These classes are part of the data storage layer.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1271.jpg"/></span></p><p style="padding-left: 70pt;text-indent: 0pt;line-height: 112%;text-align: justify;">The data storage classes are decoupled from the business classes. The business classes will contain nothing that indicates how they are to be stored. The same business classes can be reused unchanged with different storage mechanisms.</p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">6. <span class="p">We could limit the number of new data storage classes to one. Different instances of this</span></p><p style="padding-left: 19pt;text-indent: 0pt;text-align: justify;">class would be created with attributes to hold the names of tables or files that are to be used to store and retrieve instances of their associated classes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1272.jpg"/></span></p><p style="padding-left: 70pt;text-indent: 0pt;line-height: 112%;text-align: justify;">This parameterized version is more difficult to set up and more difficult to implement.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1273.jpg"/></span></p><p style="padding-left: 70pt;text-indent: 0pt;line-height: 112%;text-align: justify;"><a name="bookmark916">It requires some part of the system outside the database broker class to know what parameters to set for each instance that is created.</a></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1223" class="a">Option 5 is the approach that is favoured by most developers of object-oriented systems. It involves the use of a number of patterns. Larman </a>(2005) describes it in some detail as a <i>persistence framework</i>, the main feature of which is the use of <i>database brokers </i>or <i>database mappers</i>, which mediate between the business classes and the persistent storage and which are responsible for storing and retrieving objects. However, we shall first describe the use of option 3—inheritance from a persistent superclass—before looking at option 5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.8.2 <b>PersistentObject superclass</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1168" class="a">A simple approach to the design of data storage classes is to design an abstract superclass PersistentObject that encapsulates the mechanisms for an object of any class to store itself in and retrieve itself from a database. Eriksson and Penker </a><a href="part23.htm#bookmark917" class="a">(1998) use this approach in order to keep their example case study application simple and independent of any vendor’s DBMS. The PersistentObject superclass implements operations to get an object by object identifier, to store, delete and update objects, and to iterate through a set of objects. These operations are implemented in terms of two abstract operations, to write and read objects, that must be implemented by each subclass that inherits from the PersistentObject superclass. This is shown in </a><a href="part38.htm#bookmark1168" class="a">Fig. 18.20 (adapted from </a>Eriksson and Penker, 1998).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark917" class="a">This approach also uses an aspect of option 2, as the getObject() operation is a class- scope method rather than an instance-scope method (as are the others underlined in the class diagram of </a>Fig. 18.20).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The PersistentObject hides some of the detail of the implementation of the data storage from the business objects in the application. However, they must implement the write() and read() operations and this will limit their reusability.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark918" class="a">This approach does have the benefit of limiting the changes that will be made to sequence diagrams. Messages that have been shown being sent to object instances to select an instance or to iterate through a set of instances can be shown as being sent to the class rather than the instances. Figure </a>18.21 shows an example of this for the use case Get number of campaigns for location. We have shown the class Location using a constructor Location() to make the particular instance :Location available. While the object instance is being created in</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">memory for this instance of the collaboration, strictly speaking it already exists as an object and is just being <i>materialized </i>from the database.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;">However, the use of a persistent superclass is unlikely to be robust enough for business applications and a more sophisticated approach, such as the database broker, must be used.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.8.3 <b>Database broker framework</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The database broker framework separates the business objects from the data storage implementation. The classes that provide the data storage services will be held in a separate package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 137pt;text-indent: 0pt;text-align: left;"><span><img width="245" height="523" alt="image" src="Image_1274.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark917">Figure 18.20 </a><span class="s21">Excerpt from class diagram to show inheritance from </span><span class="s89">PersistentObject.</span></p><p style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span><img width="434" height="242" alt="image" src="Image_1275.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 112%;text-align: left;"><a name="bookmark918"><span class="s31">Figure 18.21 </span></a>Sequence diagram for <span class="s89">Get number of campaigns for location </span>showing <span class="s89">Location </span>retrieving (or materializing) an instance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 70pt;text-indent: 0pt;text-align: left;"><span><img width="423" height="131" alt="image" src="Image_1276.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s49" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark919"><span class="s31">Figure 18.22 </span></a>Location <span class="s90">and </span>LocationBroker <span class="s90">classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: 0pt;text-align: left;"><span><img width="412" height="241" alt="image" src="Image_1277.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark920"><span class="s31">Figure 18.23 </span></a>Sequence diagram for <span class="s89">Get number of campaigns for location </span>showing <span class="s89">LocationBroker</span></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">retrieving an instance of <span class="s89">Location.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark919" class="a">Our objective here is to separate the data storage mechanisms completely from the business classes. For each business class that needs to be persistent, there will be an associated database broker class that provides the mechanisms to materialize objects from the database and dematerialize them back to the database. A simple form of this is shown in Fig. </a><a href="part23.htm#bookmark738" class="a">18.22 for the Location class. The LocationBroker is responsible for the storage and retrieval of Location object instances. In order to ensure that there is only ever one LocationBroker instance, we can use the Singleton pattern (see </a>Chapter 15). This means that we use a class-scope operation, but only to obtain an instance of the LocationBroker that can</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark918" class="a">be used subsequently to access the database. The sequence diagram involving the LocationBroker is very similar to that of </a><a href="part23.htm#bookmark920" class="a">Fig. 18.21, and is shown in Fig. </a>18.23. (Note that this diagram does not show the creation of the instance of LocationBroker.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1223" class="a">Each persistent class in the system will require a broker class, so it makes sense to create a superclass that provides the services required by all these broker classes. Larman </a><a href="part23.htm#bookmark921" class="a">(2005) suggests two levels of generalization. At the top of his hierarchy is an abstract Broker class that provides the operation to materialize an object using its object identifier. This is then subclassed to produce different abstract classes of brokers for different kinds of storage: for example, one for a relational database and one for a file system. Finally, the appropriate broker is subclassed into the concrete classes for each persistent class in the system. A simplified version of this inheritance hierarchy is shown in </a>Fig. 18.24.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 106pt;text-indent: 0pt;text-align: left;"><span><img width="326" height="254" alt="image" src="Image_1278.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark921">Figure 18.24 </a><span class="s21">Simplified version of inheritance hierarchy for database brokers.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 70pt;text-indent: 0pt;text-align: left;"><span><img width="415" height="228" alt="image" src="Image_1279.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s98" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark922">Figure 18.25 </a><span class="p">RelationalBroker </span><span class="s94">class and classes from other packages.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark922" class="a">In the Agate case study, we could use JDBC to link the Java programs to a relational database. This will require the use of classes from the java.sql package, in particular: Connection, which is used to make a connection to the database; Statement, which is used to execute SQ L statements; and ResultSet, into which the results of SQ L Select statements are placed (we can then iterate through the ResultSet retrieving each row in turn and extracting the values from each column). An appropriate driver will also be required. </a>Figure 18.25 shows the associations between the RelationalBroker abstract class and these other classes. The figure shows the Oracle JDBC driver; to access a database such as Access via a link from JDBC to ODBC, the appropriate driver would be sun::jdbc::odbc::JdbcOdbcDriver.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark814" class="a">The dependencies between the application classes and those in other packages can be shown using packages in a package diagram, as for the classes in the presentation layer in </a><a href="part23.htm#bookmark833" class="a">Chapter 17, </a><a href="part23.htm#bookmark923" class="a">Fig. 17.12. This is shown in </a>Fig. 18.26.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 106pt;text-indent: 0pt;text-align: left;"><span><img width="326" height="217" alt="image" src="Image_1280.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark923">Figure 18.26 </a><span class="s21">Class diagram showing packages for database brokers package.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This simple framework using database broker classes can be extended to deal with some of the problems that remain.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1281.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The most important problem concerns the way in which persistent objects maintain references to other objects. If the LocationBroker retrieves an instance of Location, what happens when an operation of the Location requires it to send a message to one of its IntCampaigns? The IntCampaign will not necessarily have been retrieved from the database. The same applies to the many other operations that involve collaboration between objects.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1282.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The second problem concerns the ability to manage transactions in which a number of objects are created, retrieved from the database, updated and deleted.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Two extensions to the database broker framework can be used to resolve these problems. The first uses the Proxy pattern to provide proxy objects for those objects that have not yet been retrieved from the database. The second uses caches to hold objects in memory and keep track of which have been created, updated or deleted.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1182" class="a">The Proxy pattern (Gamma et al., </a>1995) provides a proxy object as a placeholder for another object until it is required. In this case, we can use proxies for each business class to link to where there is an association with another object or objects. If no message is sent to the associated objects, then the proxy does nothing. If a message is sent then the proxy asks the relevant database broker to retrieve the object from the database and, once it has been materialized, the proxy can pass the message directly to it. Subsequently, messages can be sent directly to the object by the proxy, or the proxy can replace the reference to itself in the object that sent the message with a reference to the real object. For this to work, the proxy must hold the object identifier of the object that it is a placeholder for. When the object itself is retrieved from the database, the object identifier is effectively transformed into a reference to the object itself. The proxy class must also implement the same interface as the real class so that it appears to other objects as if it is the real thing.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Caches can be combined with this approach. The database broker can maintain one or more caches of objects that have been retrieved from the database. Each cache can be implemented as a hashtable, using the object identifier as the key. Either a single cache is maintained and some mechanism is used to keep track of the state of each object, or six caches can be maintained:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1283.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">new clean cache—newly created objects</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1284.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1285.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1286.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">new dirty cache—newly created objects that have been amended new deleted objects—newly created objects that have been deleted old clean cache—objects retrieved from the database</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1287.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1288.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">old dirty cache—retrieved objects that have been amended old deleted objects—retrieved objects that have been deleted.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">As objects are changed, the broker must be notified so that it can move them from one cache to the other. This can be achieved using the Observer–Observable pattern: the object implements Observable, and the broker inherits from Observer.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">When the transaction is complete, the broker can be notified. If the transaction is to be committed, the broker can process each object according to which cache it is in:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1289.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1290.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">new clean cache—write to the database new dirty cache—write to the database</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1291.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1292.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">new deleted objects—delete from the cache old clean cache—delete from the cache</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1293.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">old dirty cache—write to the database</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1294.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">old deleted objects—delete from the database.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark924" class="a">The cache or caches can be used by the proxy object to check whether an object is already available in memory. When it receives a message, the proxy can ask the broker for the object. If it is in a cache, the broker will return a reference to it directly; if it is not in the cache, the broker will retrieve it. Figure </a>18.27 shows the associations between the broker class, the caches and the proxy.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="335" height="297" alt="image" src="Image_1295.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark924">Figure 18.27 </a><span class="s21">Extension of the database broker framework to include caches and proxies.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="#bookmark925">The collaboration between these classes can be seen in the communication diagram in Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="#bookmark925">18.28, which represents the following interaction.</a></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;"><span><img width="534" height="318" alt="image" src="Image_1296.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark925">Figure 18.28 </a><span class="s21">Communication diagram showing proxy, broker and cache objects collaborating to retrieve an object instance.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A Location object is in memory with an IntCampaignProxy object as a placeholder for the real IntCampaign object that runs in that Location. In order to print a list of campaigns, the title of the IntCampaign object is required.</p><p class="s25" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1.1 <span class="p">The :Location sends the message getTitle to the :IntCampaignProxy.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1.2 <span class="p">The :IntCampaignProxy checks whether the :IntCampaign is in memory.</span></p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1.3  <span class="p">It is not, so it then requests the object by object identifier from the broker</span></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 12pt;text-align: left;">:IntCampaignBroker.</p><p class="s25" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">1.4 <span class="p">The :IntCampaignBroker checks if the object is in a :Cache.</span></p><p class="s25" style="padding-left: 24pt;text-indent: -18pt;text-align: left;">1.5 <span class="p">It is not, so the :IntCampaignBroker retrieves the object from the database and returns it to the :IntCampaignProxy.</span></p><p class="s25" style="padding-left: 24pt;text-indent: -18pt;text-align: left;">1.6  <span class="p">The :IntCampaignProxy sends the getTitle message to the :IntCampaign object and returns the result to the Location.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This may appear to be overkill, but it enables us to maintain our objective of decoupling the business classes from the data storage mechanisms that are provided by the classes in the persistence framework. This should make it possible to migrate the data storage to a different platform without having an impact on the business classes or the application logic, simply by replacing the database broker class with the broker for a different database.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">18.8.4 <b>U sing a data management product or framework</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In the previous two sections, we have considered ways of designing a persistence mechanism yourself. However, this is not necessary, as there are a number of products and frameworks available that provide a persistence mechanism for you. We have included the previous section in order to give an idea of what is involved in developing a persistence framework. We shall consider two standards-based approaches that will handle the mapping of objects to relational database tables, and the frameworks in the Java 2 Enterprise Edition (J2EE) that handle persistent objects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark926">Object– relational mappings</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1214" class="a">The standard for object–relational mapping in the Java world is Java Data Objects (JDO), which was mentioned in Section 18.6. A number of products are available that implement this standard. JDO 2 is defined in the JDO Specification, currently at V ersion 2.2 (JCP, </a><a href="part38.htm#bookmark1258" class="a">2008), while Roos </a>(2003) describes how JDO 1.0 works in a more readable form.</p><p style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">To produce persistence-capable classes using JDO involves the following steps.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1297.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1298.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Write and compile the Java classes that are required to be persistence-capable. Write an XML <i>persistence descriptor </i>file to describe various properties of these classes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1299.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Run an <i>enhancer </i>program that reads the persistence descriptor and processes the compiled  Java  classes  to  add  operations  that  implement  the  interface PersistenceCapable.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1300.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Run a program that generates the SQ L necessary to create the database tables to hold the persistent classes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1301.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Create the database tables.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1302.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Write the application to use a JDO PersistenceManagerFactory to provide a PersistenceManager to persist and retrieve instances of the enhanced classes. (The PersistenceManagerFactory must be passed a set of properties that define the connection to the database that will be used.)</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Different JDO implementations work in slightly different ways but all conform to the standard API. The persistence descriptor for a class can be very simple, essentially just defining the class as persistent, or can contain a number of elements that define properties of the way the class is persisted such as the primary key to be used.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">JDO handles transactions, cacheing and queries using JDO Q uery Language (JDOQ L). It can also be used to provide persistence for EJBs in a Java Enterprise Edition (JEE) application server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">J ava Persistence API</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Enterprise Java Beans (EJBs) have provided a mechanism for creating enterprise Java applications that run in an application server. In EJB2, container managed persistence (CMP) provided a persistence mechanism for EJBs. However, the EJB framework in Java 2 Enterprise Edition (J2EE) was considered by many people to be too heavyweight and complicated a framework. The latest version, EJB3, incorporated a new mechanism for persisting Java classes to a relational database by mapping the structure of the classes to the tables in the database, as described earlier in this chapter. This framework is the Java Persistence API (JPA), and although it is documented in the JEE standard, it has effectively been broken out of the JEE environment and can be used as a generic persistence mechanism for Java programs using the standard edition. As such it works with plain Java objects.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are two ways of using JPA. The first uses an XML file that defines the mappings between classes and their attributes and tables and columns in the database. The second uses Java annotations—special tags that can be added to Java code since Java 5, which are processed when the class is compiled and used to add behaviours to classes.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark908" class="a">The minimum that is required to create persistent classes is that they should be annotated or included in the mapping file, and the attribute that is to be used as the primary key to retrieve data from the table is also marked. A simple Java annotations example for the Client class of </a>Figure 18.17 would be as follows:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: left;">import javax.persistence.*;</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;">… @Entity</p><p style="padding-left: 29pt;text-indent: -8pt;text-align: left;">public class Client { @Id</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">private int clientNo;</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Implementations of JPA provide default values for mappings, so would typically map the Client class to a table called CLIENT, and the clientNo attribute to a primary key column called CLIENTNO. To change these default mappings, the programmer simply adds additional annotations, such as @Table and @Column.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Using JPA is simpler than JDO, as it is not necessary to use an XML persistence descriptor file if the classes are annotated, and it is not necessary to enhance the compiled classes,</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">unless certain functionality is required. To produce persistence-capable classes using JPA involves the following steps.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1303.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">Write and compile the Java classes that are required to be persistence-capable.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1304.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Run a program that generates the SQ L necessary to create the database tables to hold the persistent classes, or create the SQ L manually.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1305.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Create the database tables.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1306.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Write  the  application  to  use  a  JPA  EntityManagerFactory  to  provide  an EntityManager to persist and retrieve instances of the enhanced classes. (The EntityManagerFactory must be configured with a set of properties that define the connection to the database that will be used.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="24" alt="image" src="Image_1307.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">18.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark927">The design of persistent storage for object-oriented systems is not straightforward. For simple systems, it is possible to use files to store the objects. However, commercial systems require a more robust and sophisticated approach so that objects can be shared between applications and users. Database management systems provide the facilities to build robust, commercial- strength information systems and offer a number of advantages. Object DBMS can be used and will have a less significant impact on the design of the classes in the system than if a relational DBMS is used. However, many organizations have an existing investment in a relational DBMS and it may be necessary to build the system to use this database. In this case it is necessary to design tables, either by normalizing object instances or by following a set of guidelines for mapping classes and associations to tables. To decouple the business objects from the persistent storage mechanism, a persistence framework can be designed that can be extended to handle the resolution of object identifiers into references to real objects and that can use caches to manage transactions involving multiple objects.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The design of the persistent data storage mechanisms should ideally be carried out in</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark681" class="a">conjunction with the object design activities of </a>Chapter 14. If an object DBMS is being used, it will probably have little impact on the design of classes. If a relational DBMS is being used, the simplest approach is to use a mapping framework based on either JDO or JPA. It should not be necessary to build your own persistence framework.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark928">Review Questions</a></p></td></tr><tr style="height:236pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">18.1  <span class="s16">Give one example each of a persistent and a transient object.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">18.2  <span class="s16">Explain the difference between different types of file organization and file access.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">18.3  <span class="s16">Of the different kinds of record type listed in Section 18.3.1 suggest which would be most appropriate for storing complex nested objects. Explain the reasons for your choice.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">18.4 <span class="s16">Outline the advantages and disadvantages of using a DBMS over developing an application using files.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">18.5  <span class="s16">What is the key difference between a relational DBMS and an object DBMS?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">18.6  <span class="s16">List in your own words the three steps used in going from an unnormalized relation to a relation in third normal form.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 12pt;text-indent: -29pt;text-align: left;">18.7 <span class="s16">What are the three ways of mapping the classes in an inheritance hierarchy to tables?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">18.8 <span class="s16">What is meant by OML and ODL?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">18.9  <span class="s16">What is the difference between a multi-database and a distributed database?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">18.10 <span class="s16">Explain what is meant by (i) a broker and (ii) a proxy.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="588" height="9" alt="image" src="Image_1308.png"/></span></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:19pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-left: 10pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:231pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 19pt;text-indent: -26pt;text-align: left;">18.A <span class="s16">Find out what you can about localization mechanisms in a programming language or environment such as Java or .NET. What use do they make of files?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;text-indent: -26pt;text-align: left;">18.B <a href="part9.htm#bookmark234" class="s36">Normalize the data in the Agate invoice in </a><span class="s16">Fig. 6.1. (Remember to remove the calculated values first.)</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 56pt;text-indent: -26pt;text-align: left;">18.C <a href="part23.htm#bookmark784" class="s36">Normalize the data in the FoodCo sales order entry screen of </a><span class="s16">Fig. 16.3. (Remember to remove the calculated values first.)</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;text-indent: -26pt;text-align: left;">18.D <a href="part23.htm#bookmark715" class="s36">Use the guidelines in Section 18.5.3 to decide on the tables necessary to hold the classes of </a><span class="s16">Fig. 14.12.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">18.E <span class="s16">Find information about a relational DBMS and an object DBMS and write a short report comparing the features they offer.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;text-indent: -26pt;text-align: left;">18.F <a href="part23.htm#bookmark840" class="s36">Extend the sequence diagram of Fig. </a><span class="s16">17.18 to show the use of a proxy class and database broker.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">18.G <span class="s16">Redraw your answer to Exercise 18.F as a communication diagram.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">18.H  <a href="part23.htm#bookmark925" class="s36">Draw communication diagrams similar to </a><span class="s16">Fig. 18.28 to show what happens (i) when the IntCampaign is already in memory, and (ii) when it is in one of the caches.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_1309.png"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1142" class="s6">Codd’s </a>(1970) paper on relational databases was reprinted in the 25th Anniversary issue of the <i>Communications of the ACM</i>, which is more likely to be available in a library (1983, 26(1) pp. 64–69). This 25th Anniversary issue is well worth looking at for other papers by some of the greats of computer science.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1273" class="s6">Silberschatz, Korth and Sudarshan </a><a href="part38.htm#bookmark1201" class="s6">(2005) provide a good overview of database theory. Howe </a><a href="part38.htm#bookmark1148" class="s6">(2001) explains normalization in detail. </a>Connolly and Begg (2010) provide a good overview with strong sections on distributed and object databases.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1225" class="s6">Loomis </a><a href="part38.htm#bookmark1167" class="s6">(1995) deals with background to object databases and the functionality they offer, whereas Eaglestone and Ridley </a>(1998) present the ODMG standard and provide a worked example case study using O<span class="s99">2</span>.</p><p class="s7" style="padding-left: 15pt;text-indent: 0pt;text-align: justify;"><a href="http://www.db4o.com/" class="s6" target="_blank">db4o is available from </a>http://www.db4o.com/.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="http://java.sun.com/jdo/index.jsp" class="s6" target="_blank">Roos (2003) explains Java Data Objects. The JDO 2.0 standard is being developed under the auspices of  JSR  243  and  information  is  available  on  the  Sun  Microsystems  website (</a>http://java.sun.com/jdo/index.jsp).</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;">There are links to the web pages of the standards bodies—ANSI, ISO, ODMG and OMG—and to the web pages of various database providers in the website for this book.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_1310.png"/></span></p><p class="s1" style="padding-top: 7pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: left;"><a href="part38.htm#bookmark1158" class="s3" name="bookmark929">1 Date and Darwen </a>(1998) argue that the relational model can handle complex data types, but it is the way that relational DBMSs have been implemented that leads to their inability to handle these data types.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_1311.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part22.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part24.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>

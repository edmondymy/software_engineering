<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>A5. Agate Ltd Case Study—Design</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part30.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part32.htm">Next &gt;</a></p><h2 style="padding-top: 12pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark930">Agate Ltd</a><a name="bookmark931">&zwnj;</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="155" height="25" alt="image" src="Image_1312.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark578" class="a" name="bookmark932">In this chapter we show how part of the analysis model presented in Chapter </a><a href="part23.htm#bookmark595" class="a">A4 has been modified by the activities of design. The design activities have been concerned with finalizing the software architecture, designing the entity classes, their attributes, operations and associations, designing the boundary classes and the human–computer interaction, designing the mechanisms used for data storage, and designing the control classes. These activities have been explained in </a><a href="part23.htm#bookmark868" class="a">Chapters 12 to </a>18.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The following sections include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1313.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1314.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">package diagrams to illustrate the overall software architecture class diagrams to illustrate the classes in the design model</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1315.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1316.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">sequence diagrams to illustrate the interaction between instances of classes a state machine for the control of the user interface.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="156" height="25" alt="image" src="Image_1317.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.2  </a><a href="part4.htm#bookmark4" class="s29">Architecture</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.2  </a><a href="part4.htm#bookmark4" class="s29">Architecture</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.2  </a><a href="part4.htm#bookmark4" class="s29">Architecture</a></p><p class="s41" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark935" class="a" name="bookmark933">The architecture of the system (shown in Fig. </a><a href="part31.htm#bookmark961" class="a">A5.1) has been designed to use Java Remote Method Invocation (RMI) for communication between the client machines and the server.</a>1<a href="part23.htm#bookmark814" class="a"> Control classes have been split into two layers. First, there are the control classes that reside on the client machines (in the package Agate Control Client) and manage the interaction between users and the boundary classes. These control classes are essentially those that were designed in Chapter </a><span class="p">17. Second, there are control classes that reside on the server. These control classes handle the interaction between the business logic of the application and the entity classes (and the associated data management classes). This helps to decouple the layers: the only communication between the clients and the server will be the communication between the client and server control classes, using RMI.</span><a name="bookmark934">&zwnj;</a></p><p style="padding-left: 97pt;text-indent: 0pt;text-align: left;"><span><img width="352" height="554" alt="image" src="Image_1318.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark935">Figure A5.1 </a><span class="s21">Package diagram for software architecture.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark863" class="a">Not all control classes will have versions on both the clients and the server. For example, the ListClients and ListCampaigns classes in Figs </a><a href="part23.htm#bookmark864" class="a">17.36 and </a><a href="part31.htm#bookmark949" class="a">17.37 could just exist on the server, where they will have more immediate access to the entity and data management classes. One consequence of this will be visible in the sequence diagrams, where these two classes will no longer be passed references to the boundary class as a parameter, but will return their results to the control class on the client machine, which will set the values in the boundary class. This is shown in </a><a href="part31.htm#bookmark950" class="a">Figs A5.11 and </a>A5.12.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">On the server, we are using JDBC, and we will map the classes to relational database tables. A design based on the Broker pattern will be used to handle this.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="197" height="25" alt="image" src="Image_1319.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.3  </a><a href="part4.htm#bookmark4" class="s29">Sample U se Case</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.3  </a><a href="part4.htm#bookmark4" class="s29">Sample U se Case</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.3  </a><a href="part4.htm#bookmark4" class="s29">Sample U se Case</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark814" class="a" name="bookmark936">For the purpose of this case study chapter we are going to present the design of one use case Check campaign budget, for which the boundary and control classes were designed in </a><a href="part23.htm#bookmark814">Chapter 17.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Figure A5.2 shows the design of the user interface for this use case. In the first iteration, we are not concerned with adding the extensions to the use case that handle printing of the campaign summary and campaign invoice.</p><p style="padding-left: 86pt;text-indent: 0pt;text-align: left;"><span><img width="381" height="229" alt="image" src="Image_1320.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark937">Figure A5.2 </a><span class="s21">Prototype user interface for </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="183" height="25" alt="image" src="Image_1321.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.4  </a><a href="part4.htm#bookmark4" class="s29">Class Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.4  </a><a href="part4.htm#bookmark4" class="s29">Class Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.4  </a><a href="part4.htm#bookmark4" class="s29">Class Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark939" class="a" name="bookmark938">The packages on the architecture diagram have been named in a way that will allow us to use the Java package notation for classes. So, for example, the boundary classes will be in the package Agate::Boundary. This is the first package that we are illustrating here, and the classes we are concerned with are shown in </a>Fig. A5.3.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="535" height="471" alt="image" src="Image_1322.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark939">Figure A5.3 </a><span class="s21">Relevant classes in the package </span><span class="s89">Agate::Boundary.</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">The  boundary  class  CheckCampaignBudgetUI  will  implement  the  two  interfaces CampaignLister and ClientLister. Note that some of the operations that were included in the class CheckCampaignBudgetUI, such as getSelectedClient(), have been moved into the interfaces, as it is thought that they will apply to any class that implements these interfaces.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark940" class="a">Because the control class CheckCampaignBudget will now be split, the version that resides on the client machines (now called CheckCampaignBudgetClient) must be able to respond to the messages addCampaignName() and addClientname(). We have used interfaces for this, because they have to be sent messages remotely by the control classes on the server. This is shown in </a>Fig. A5.4. Note also that this class will need to hold a reference to the version of itself that exists on the server. We have not shown the full package name in the class diagram, but the   attribute   ccbRemote   will   in   fact   be   an   instance   of Agate::Control::Server::CheckCampaignBudgetRemote. In fact, there will be an instance of Agate::Control::Server::CheckCampaignBudgetServer on the server, and for the object on the client  to  communicate  with  it  via  RMI  it  will  have  to  implement  the  interface Agate::Control::Server::CheckCampaignBudgetRemote. If ListCampaigns and ListClients only exist on the server, then they will also be in the same package and will implement the interfaces ListCampaignsRemote and ListClientsRemote.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><span><img width="429" height="314" alt="image" src="Image_1323.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark940">Figure A5.4 </a><span class="s21">The class </span><span class="s89">Agate::Control::Client::CheckCampaignBudgetClient.</span></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="432" alt="image" src="Image_1324.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark941">Figure A5.5 </a><span class="s21">Relevant classes in the package </span><span class="s89">Agate::Control::Server.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">All the classes that communicate via RMI will need to inherit from the Java RMI package. Rather than being subclasses of the default Java class Object, they will need to be subclasses of java.rmi.server.UnicastRemoteObject.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark941" class="a">In Fig. </a><a href="part31.htm#bookmark940" class="a">A5.5 we have shown the control classes that reside on the server and the remote interfaces that they must implement. Although we have not shown the full package names, the references to ClientListerRemote and CampaignListerRemote are to the interfaces in the package Agate::Control::Client, shown in </a>Fig. A5.4.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark942" class="a">The entity classes that collaborate in this use case are Client, Campaign and Advert. They are shown in a first draft design in </a><a href="part23.htm#bookmark868" class="a">Fig. A5.6. However, this design will only work for the kind of application where all the objects are in memory. We need to be able to deal with the process of materializing instances of these classes from the database and, when required, materializing their links with other object instances or collections of object instances. For example, when a particular Client is materialized, we do not necessarily want to re-establish its links with all its Campaigns and the instance of StaffMember that is its staffContact. The Broker pattern, which we discussed in Chapter </a>18, is a way of making it possible to materialize the objects that are linked to other objects only when they are required.</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="485" alt="image" src="Image_1325.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark942">Figure A5.6 </a><span class="s21">First draft design of some classes in the package </span><span class="s89">Agate::Entity::Domain.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark943" class="a">In order to achieve this, we can replace the references to the arrays of linked objects with references to the various subclasses of Broker, for example ClientBroker, CampaignBroker and AdvertBroker. Since these are still private attributes, they cannot be referred to directly by other objects and their values can only be obtained by calling one of the operations of the object in which they are contained. The result of this is shown in </a>Fig. A5.7.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark738" class="a">The broker subclasses could use the Singleton pattern (see Chapter </a><a href="part31.htm#bookmark944" class="a">15). If this is done, then the design of the operations to return sets of whatever objects they are acting as brokers for will have to be carefully designed to handle concurrent requests from different clients. Alternatively, there could be multiple instances of brokers, and they could be created and destroyed as required, or there could be a pool of brokers available in the server, and when an object needs a broker of a certain type, it would request one from the pool. </a>Figure A5.8 shows the brokers that we are interested in for this use case. We have not used the Singleton pattern in this design.</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><span><img width="545" height="476" alt="image" src="Image_1326.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark943">Figure A5.7 </a><span class="s21">Second design of some classes in the package </span><span class="s89">Agate::Entity::Domain.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="299" alt="image" src="Image_1327.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark944">Figure A5.8 </a><span class="s21">Broker classes in the package </span><span class="s89">Agate::Entity::DataManagement.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">These brokers will also be used directly by the control classes, for example, when they need to obtain a list of all the objects of a particular class in the system. The brokers have been shown with attributes in which to hold references to the objects necessary for connecting</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark962" class="a" name="bookmark945">to the database and issuing queries. We have also assumed that having obtained a list of results, a broker may store it internally in a collection class and allow client objects to iterate through the list of results using an enumerator.</a><a href="part31.htm#bookmark962" class="s32">2</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The brokers will be in the package Agate::Entity::DataManagement, together with any other necessary classes to handle the connection to the database. (In this design we are not using proxies or caches, in order to keep it relatively simple.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark946" class="a">The final piece of design necessary to enable the interaction of this use case realization to take place concerns how the control objects on the client machine will obtain references to control objects on the server. For this, we shall use the Factory pattern. A Factory class creates instances of other classes and returns a reference to the new instance to the object that requested it. This is shown in </a>Fig. A5.9.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 156pt;text-indent: 0pt;text-align: left;"><span><img width="194" height="104" alt="image" src="Image_1328.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark946">Figure A5.9 </a><span class="s21">Factory class in the package </span><span class="s89">Agate::Control::Server.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">So an instance of the control class CheckCampaignBudgetClient on the client machine will request a Factory on the server to provide it with a reference to an instance of CheckCampaignBudgetServer. The Factory will create this instance and pass back a reference to it via the RMI connection with the client. From that point onwards, the client object can make direct requests to the control object on the server. When it is finished with it, it can destroy it, or ask the Factory to destroy it.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In a more sophisticated design, the Factory could hold a pool of already instantiated control classes ready for use. When a client requests an instance of a particular control class, the Factory will take one from the pool if it is available. When the client is finished with the instance, the Factory can put it back into the pool. We are not using pooling in this design, but it is an approach that is commonly used to improve the performance of servers to prevent delays while instances are created and destroyed on demand.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In this design the control class on the server has only one method. This class Agate::Control::Server::CheckCampaignBudgetServer could be designed to hold the business logic for checking the budget of a campaign, but we have taken the decision to leave the responsibility for calculating whether or not the budget is overspent in the Campaign class. There is a case for giving this responsibility to the control class; then, if the business logic changes, it only has to be updated in the control class. However, this makes the entity objects little more than data stores.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark947" class="a">Figure </a><a href="part31.htm#bookmark939" class="a">A5.10 </a><a href="part31.htm#bookmark946" class="a">shows the package diagram with the classes (but not the interfaces) from Figs A5.3 to </a><a href="part31.htm#bookmark939" class="a">A5.9</a><a href="part23.htm#bookmark611" class="a">. Note that we have not used value objects, which we discussed in </a><a href="part31.htm#bookmark939" class="a">Chapter </a><a href="part23.htm#bookmark668" class="a">13 and showed in </a>Fig. 13.24.</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="532" height="510" alt="image" src="Image_1329.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark947">Figure A5.10 </a><span class="s21">Package diagram showing classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="217" height="25" alt="image" src="Image_1330.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.5 </a><a href="part4.htm#bookmark4" class="s29">Seq uence Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.5 </a><a href="part4.htm#bookmark4" class="s29">Seq uence Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.5 </a><a href="part4.htm#bookmark4" class="s29">Seq uence Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark951" class="a" name="bookmark948">Figures A5.11 to </a><a href="part23.htm#bookmark814" class="a">A5.13 show the sequence diagrams from </a>Chapter 17 revised to take account of the splitting of the control objects and the addition of the Factory class. The package names of objects are also shown.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Although we show the control class on the client as able to directly connect to the instance of ControllerFactory on the server, in reality it would have to request a reference to this object from a naming service or registry on the server: for example, a running instance of the Java rmiregistry.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark952" class="a">In </a>Fig. A5.14 we show the interaction between the control class, the brokers and the entity classes. Note how the broker classes perform the tasks involved in retrieving instances or sets of instances from the database.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We have used a simple approach for obtaining the adverts linked to a particular campaign, by having the broker return an array of Adverts. As mentioned above, this could return an enumerator so that the control class could iterate through the collection of Adverts.</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="343" alt="image" src="Image_1331.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark949">Figure A5.11 </a><span class="s21">First sequence diagram for </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="353" alt="image" src="Image_1332.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark950">Figure A5.12 </a><span class="s21">Second sequence diagram for </span><span class="s89">Check campaign budget.</span></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="307" alt="image" src="Image_1333.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark951">Figure A5.13 </a><span class="s21">Third sequence diagram for </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="248" alt="image" src="Image_1334.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark952">Figure A5.14 </a><span class="s21">Sequence diagram for the operation </span><span class="s89">checkCampaignBudget().</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A string named query has been passed to the selectByQ uery() operation of the AdvertBroker. The exact format of this will depend on how the object-relational database mapping is set up. If the uniqueID attributes are used in the database as foreign keys, then the SQ L statement will be something like:</p><p style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">SELECT * FROM adverts WHERE adverts.campaignID = ‘123456789’;</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">and the ID of the particular campaign is added into the query string before it is passed to the broker.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="192" height="24" alt="image" src="Image_1335.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.6  </a><a href="part4.htm#bookmark4" class="s29">Database Design</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.6  </a><a href="part4.htm#bookmark4" class="s29">Database Design</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.6  </a><a href="part4.htm#bookmark4" class="s29">Database Design</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark954" class="a" name="bookmark953">Figure </a><a href="part31.htm#bookmark943" class="a">A5.15 shows the SQ L to create the tables to map to the classes in Fig. </a>A5.7. The indexes are required to ensure that it is possible quickly to retrieve all the campaigns linked to a client or all the adverts linked to a campaign. A character field has been used to hold the</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">unique ID for each object. We are assuming that some mechanism will be used to generate these, but have not detailed it here. An alternative would be to use long integer values.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;"><span><img width="523" height="570" alt="image" src="Image_1336.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark954"><span class="s31">Figure A5.15 </span></a>SQ L to create tables for the classes <span class="s89">Client, Campaign </span>and <span class="s89">Advert.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="179" height="25" alt="image" src="Image_1337.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.7 </a><a href="part4.htm#bookmark4" class="s29">State M achines</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.7 </a><a href="part4.htm#bookmark4" class="s29">State M achines</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">A5.7 </a><a href="part4.htm#bookmark4" class="s29">State M achines</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part31.htm#bookmark956" class="a" name="bookmark955">Figure </a><a href="part31.htm#bookmark957" class="a">A5.16 shows the event–action table for the state machine of Fig. </a><a href="part23.htm#bookmark814" class="a">A5.17. This state machine is the same as the one shown in </a>Chapter 17.</p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="325" alt="image" src="Image_1338.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark956">Figure A5.16 </a><a href="part31.htm#bookmark957" class="s53">Event–action table for </a><span class="s49">Fig. A5.17.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><span><img width="483" height="439" alt="image" src="Image_1339.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="213" height="25" alt="image" src="Image_1340.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark958">A5.8  </a><a href="part4.htm#bookmark4" class="s29">Activities of Design</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark958">A5.8  </a><a href="part4.htm#bookmark4" class="s29">Activities of Design</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark958">A5.8  </a><a href="part4.htm#bookmark4" class="s29">Activities of Design</a></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark957">Figure A5.17 </a><span class="s21">State machine for control of the user interface in </span><span class="s89">Check campaign budget.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part31.htm#bookmark959" class="a">The activities in the design workflow are shown in the activity diagrams of Figs </a><a href="part31.htm#bookmark960" class="a">A5.18 and </a>A5.19.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 46pt;text-indent: 0pt;text-align: left;"><span><img width="480" height="533" alt="image" src="Image_1341.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark959">Figure A5.18 </a><span class="s21">Activity diagram for the design workflow.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark960" class="a">In order to keep the diagram simple, we have shown the flow of activities in Fig. </a>A5.19 without dependencies on the products that are used and created. Although we have shown a flow through the activities from top to bottom, there will inevitably be some iteration through this workflow even within a major iteration.</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;"><span><img width="357" height="296" alt="image" src="Image_1342.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark960">Figure A5.19 </a><span class="s21">Detailed activity diagram for the design workflow.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="179" height="4" alt="image" src="Image_1343.png"/></span></p><p class="s1" style="padding-top: 7pt;padding-left: 13pt;text-indent: -7pt;line-height: 112%;text-align: justify;"><a name="bookmark961">1 To meet the non-functional requirements relating to the distribution of the system, we will need a more complex architecture than this. The eventual solution will probably involve Java 2 Enterprise Edition (J2EE) and Enterprise Java Beans (EJB), and will require the use of application server software. For now we are presenting a design that is not so dependent on an application server, the design for which is beyond the scope of this book.</a></p><p class="s1" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark962">2 A mechanism for working through a collection dealing with each object in turn.</a></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_1344.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:351pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark963">LEARNING OBJECTIVES</a><a name="bookmark964">&zwnj;</a><a name="bookmark965">&zwnj;</a></p></td><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_1345.jpg"/></span></p></td></tr><tr style="height:99pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;padding-right: 208pt;text-indent: 0pt;text-align: left;">how to draw component diagrams how to draw deployment diagrams</p><p class="s16" style="padding-left: 54pt;padding-right: 98pt;text-indent: 0pt;text-align: left;">the tasks that must be carried out in testing a new system how to plan for data to be converted from an existing system</p><p class="s16" style="padding-left: 54pt;padding-right: 45pt;text-indent: 0pt;text-align: left;">the alternative ways of introducing a new system into an organization the tasks that are undertaken as part of system maintenance and review.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_1346.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="93" alt="image" src="Image_1347.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark966">Implementation is concerned with the process of building the new system. This involves writing program code, developing database tables, testing the new system, setting it up with data, possibly transferred from an old system, training users and eventually switching over to the new system.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Implementation might be considered outside the scope of analysis and design. However, in projects that use rapid application development techniques, the distinction between different roles tends to break down. Analysts in particular may have a role during implementation in dealing with system testing, data conversion and user training. In other organizations staff may be employed in specialist roles to carry out these tasks. UML diagrams can be used to plan and document the implementation of the software.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">A range of different software packages are required for implementation: for example, languages and database management systems. It is important to keep track of the relationship between different elements of the system such as source code files, object code files and software libraries. It is also important to maintain standards in the software development process: classes, objects and variables should be named in ways that make their purpose clear to others and make it possible to trace from analysis through design to code; programs should be self-documenting and well-structured.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark967">UML provides two diagrams that can be used to document the implementation of a system. </a><i>Component diagrams </i>are used to document dependencies between the different elements of the system. They can also be combined with <i>deployment diagrams </i>to show how the software components relate to the physical architecture of the system. For a large system these diagrams may be an unwieldy way of documenting the implementation and it may be simpler to use tables of information using a spreadsheet.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The testing of a new system is an essential part of implementation and includes testing of individual components, subsystems and the complete system. A major task when a new system is introduced is to take data from an existing system or systems and transfer it into the new system. The existing data may be held on paper or in a computerized information system</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">that is being replaced. Temporary staff may have to be employed during the changeover to the new system. They and the existing staff will require training in how to use the system, and user documentation will have to be produced. There are four different strategies for the introduction of a new system into an organization. These different approaches are appropriate to different circumstances, and each has its own advantages and disadvantage. Even after a system has been implemented there is work to be done in maintaining it and updating it as requirements change.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="255" height="25" alt="image" src="Image_1348.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.2  </a><a href="part4.htm#bookmark4" class="s29">Software Implementation</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.2  </a><a href="part4.htm#bookmark4" class="s29">Software Implementation</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.2  </a><a href="part4.htm#bookmark4" class="s29">Software Implementation</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark968">19.2.1 </a><b>Software tools</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1222" class="a">The implementation of a system will require a range of tools. Ensuring that these are available in compatible versions and with sufficient licences for the number of developers who will be using them is part of the project management role. The Rational Unified Process (Kruchten, 2004) adds an Environment Discipline to those of the generic Unified Process. The purpose </a>of the Environment Discipline is to support the development organization with appropriate processes and tools. Many such tools have been designed and developed to make the work of the system developer easier. In this section we describe each in turn.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M odelling tools</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Modelling tools (sometimes known as computer-aided software engineering (CASE) tools) allow the analysts and designers to produce the diagrams that make up their models of the system. Modelling tools were discussed in detail in Section 3.8 There are now many modelling tools that support UML notation. If they have been implemented to use the UML XML Metadata Interchange format (XMI), it is possible to exchange models between different vendors’ tools. The repository for the project should also be maintained using the modelling tool to link the textual and structured descriptions of every class, attribute, operation, state and so on to its diagrammatic representation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">To ensure that the implementation accurately reflects the design diagrams, it may be possible to generate code in one or more programming languages from the models in the modelling tool. Modelling tools exist that generate code for languages such as V isual Basic, C++, C#  and Java. Some support the generation of SQ L statements to create relational database tables to implement data storage, and the generation of Enterprise Java Beans (EJB) and XML schemas. Some modelling tools provide support for reverse engineering from existing code to design models. When this is combined with code generation it is known as round-trip engineering.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark969">C ompilers, interpreters, debuggers and run-time support</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Whatever the language being used, some kind of compiler or interpreter will be required to translate the source code into executable code. C++ must be compiled into object code that can be run on the target machine. Smalltalk is interpreted, each command is translated as the program executes. Java is compiled into an intermediate bytecode format and requires a run- time program to enable it to execute. For applets, this run-time program is provided in the web browser, otherwise it is provided by the program called simply java or java.exe. C#  can be compiled into bytecode in Microsoft Intermediate Language (MSIL) format for .NET applications. Developers also require the use of debugging tools that allow them to analyse problems in the code by stopping execution at breakpoints and examining the contents of variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">V isual editors</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Graphical user interfaces can be extremely difficult to program manually. Since the advent of</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">V isual Basic, visual development environments have been produced for a wide range of languages. These enable the programmer to develop a user interface by dragging and dropping visual components onto forms and setting the parameters that control their</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark222" class="a">appearance in a properties window. All the user interface examples in Chapters </a><a href="part23.htm#bookmark777" class="a">6, </a><a href="part23.htm#bookmark814" class="a">16 and </a>17 were produced in this way.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Integrated development environment</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">Large projects involve many files containing source code and other information such as the resource files for prompts in different human languages discussed in Chapter </a>18. Keeping track of all these files and the dependencies between them, and recompiling all those that have changed as a project is being built is a task best performed by software designed for that purpose. Integrated development environments (IDEs) incorporate a multi-window editor, mechanisms for managing the files that make up a project, links to the compiler so that code can be compiled from within the IDE and a debugger to help the programmer step through the code to find errors. An IDE may also include a visual editor to help build the user interface and a version control system to keep track of different versions of the software. Some also include modelling tools that either allow the developer to model in UML or provide UML visualizations of the code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C onfiguration management</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Configuration management tools keep track of the dependencies between components and the versions of source code and resource files that are used to produce a particular release of a software package. Each time a file is to be changed, it must be checked out of a repository. When it has been changed it is checked in again as a new version. The tool keeps track of the versions and the changes from one version to the next. When a software release is built, the tool keeps track of the versions of all the files that were used in the build. To ensure that an identical version can be rebuilt, other tools such as compilers and linkers should also be under version control.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some such tools are simple and easily available such as CV S and RCS, while others are for large-scale distributed projects and require full-time administrators. Web interfaces are available for some, and these make it possible to check items in and out over the Internet for work on Open Source software or distributed development.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are standard protocols for version control software, which make it possible for users of editors, IDEs and CASE tools to check items out and in from within the tool.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark970">C lass browsers</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In an object-oriented system, a browser provides a visual way of navigating the class hierarchy of the application and the supporting classes to find their attributes and operations. Smalltalk- 80 was the first language to provide this kind of browsing capability. Some IDEs now provide it. The Java Application Programming Interface (API) is documented in HTML and can be browsed with a web browser.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C omponent managers</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1004" class="a">Chapter </a>20 discusses how software reuse can be achieved through the development of reusable components. Component managers provide the user with the ability to search for suitable components, to browse them and to maintain different versions of components.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Database management system</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part23.htm#bookmark868" class="a">A large-scale DBMS will consist of a considerable amount of software. If it supports a client– server mode of operation, there will be separate client and server components as well as all the tools discussed in Section 18.2.6. To use ODBC or JDBC will require software installed on the client. For any database, special class libraries or Java packages may be required on the client either during compilation or at run-time or both. The object database db4o includes an enhancer that can be used to process Java class files to make them Activatable. Using object– relational mapping tools such as those based on JDO (see Chapter </a>18) also requires the use of post-processors that change compiled classes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Application containers</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">With the growth of web-based applications, much software now runs in <i>containers </i>of some sort. For web applications that are not part of larger enterprise applications, this may be a web</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">container such as Tomcat, while large-scale enterprise applications are now often developed to run in application servers such as IBM’s WebSphere or Red Hat’s JBoss. These provide a framework within which classes can be implemented as EJBs and deliver the business logic of the system. Lightweight containers such as Spring provide a framework for applications built of plain Java objects that can be ‘wired together’ using configuration files.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Testing tools</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Automated testing tools are available for some environments. What is more likely is that programmers will develop their own tools to provide harnesses within which to test classes and subsystems according to company standards. Section 19.3 covers testing in more detail.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Installation tools</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Anyone who has installed commercial software on a Windows PC or a Mac or used a package manager on Linux will have experienced one of these tools, which automate the creation of directories, the extraction of files from archives and the setting up of parameters or registry entries. To do this they maintain the kind of information that can be modelled using component and deployment diagrams (see Sections 19.3 and 19.4). In our experience, uninstallation tools do not work as well!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">C onversion tools</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark971">In most cases data for the new system will have to be transferred from an existing system. Whereas once the existing system was usually a manual system, most projects nowadays replace an existing computerized system, and data will have to be extracted from files or a database in the existing system and reformatted so that it can be used to set up the database for the new system. There are packages that provide automated tools to extract data from a wide range of systems and format it for a new system.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Documentation generators</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In the same way that code can be generated from the diagrams and documents in a CASE tool, it may be possible to generate technical and user documentation. In Windows there are packages that can be used to produce files in Windows Help format. Java includes a program called javadoc that processes Java source files and builds HTML documentation in the style of the API documentation from special comments with embedded tags in the source code. C# uses special XML tags embedded in comments to generate documentation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">19.2.2 <b>Coding and documentation standards</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark171" class="a">Even one person developing software on his or her own is likely to find at some point that they cannot remember the purpose of a class, an attribute or an operation in a program. On any project in which people collaborate to develop software, agreed standards for the naming of classes, attributes, operations and other elements of the system are essential if the project is not to descend into chaos. (See also </a>Chapter 5 and Section 13.8.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Naming standards should have been agreed before the analysis began. In this book we have tried to conform to a typical object-oriented standard.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1349.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Classes are named with an initial capital letter. Words are concatenated together when the class name is longer than one word. Capital letters within the name show where these words have been joined together: for example SalesOrderProxy.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1350.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Attributes are named with an initial lower case letter. The same approach is taken as for classes by concatenating words together: for example customerOrderRef.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1351.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Operations are named in the same way as attributes: for example getOrderTotal().</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">There are other standards. In C++ one convention is to use <i>Hungarian </i>notation: all member variable (attribute) names are prefixed by an abbreviation that indicates the type of the member variable: for example, b for a Boolean, i for an integer, f for a float, btn for a button and hWnd for a handle to a window object. This can be particularly useful in languages that are not strongly typed, like Smalltalk, as it helps to enforce the consistent use of the same variable for the same purpose by different developers.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Consistent naming standards also make it easier to trace requirements through from analysis through design to implementation. This is particularly important for class, attribute and operation names.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1119" class="a">Not everything in a program can be deduced by reading the names of classes, attributes and operations. Beveridge </a>(1996) in a book on Java programming gives five reasons for documenting code.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1352.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Think of the next person. Someone else may be maintaining the code you have written.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1353.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Your code can be an educational tool. Good code can help others, but without comments complicated code can be difficult to understand.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1354.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a name="bookmark972">No language is self-documenting. However good your naming conventions, you can always provide extra help to someone reading your code.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1355.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">You can comply with the Java coding standards. Your documentation will be in the same hypertext format as the Java API documentation.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1356.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">You can automate its production. The javadoc program is discussed below. It generates HTML from your comments.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">(The comments about Java apply just as well to other languages.) Standards should be enforced for the way that comments are added to a program. This should include a block at the start of each class source file (or header file in C++) that describes the purpose of the class and includes details of its author and the date on which it was written. The amendment history of the source file can be included in this block. Every operation should begin with a comment that describes its purpose. Any obscure aspect of the code should be documented with a comment. If you are developing in Java, you can use the javadoc conventions to generate HTML documentation for your classes. You can embed HTML tags and javadoc tags in the comments, and javadoc will also use its own special tags to add information about the author and version to the HTML. The javadoc tags include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1357.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1358.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">@see classname—‘See also’ hypertext link to the specified class @version text—‘V ersion’ entry</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1359.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">@author name—‘Author’ entry.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">C#  uses XML tags embedded in comments in the code to generate documentation. The recommended tags include:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1360.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">&lt;see cref=” classname” /&gt;—Link to the specified class</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1361.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">&lt;seealso cref=” classname” /&gt;—Cross-reference to a &lt;see&gt; link</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1362.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">&lt;summary&gt;text&lt;/summary&gt;—Summary description.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">As well as technical documentation, there will be a need for user documentation that will be required for training users and for them to refer to once the system is in use. Standards need to be agreed with the users for the format of this documentation, which may be produced by analysts or by specialist technical authors.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="229" height="24" alt="image" src="Image_1363.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.3  </a><a href="part4.htm#bookmark4" class="s29">Component Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.3  </a><a href="part4.htm#bookmark4" class="s29">Component Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.3  </a><a href="part4.htm#bookmark4" class="s29">Component Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a" name="bookmark973">Component diagrams are used to show the logical or physical software components that make up a system. We have already introduced component diagrams in </a>Chapter 8. The notation and use of component diagrams has changed in UML 2.0. A distinction has been made between components and <i>artefacts</i><a href="part38.htm#bookmark1136" class="a">. Artefacts are new in UML 2.0 and are used in deployment diagrams (see Section 19.4). They are used to represent development artefacts that were previously represented by components. In UML 2.0 components are specifically used to represent modular software units with a well-defined interface. They can be logical or physical components, so component diagrams can be used to model either the abstract, logical view of the components in a system or subsystem or the actual physical components that are deployed. Cheesman and Daniels </a>(2001) make a clear distinction between different forms of component.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1364.jpg"/></span></p><p class="s13" style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Component Specification<span class="p">—specification of a modular software unit in terms of its behaviour (interfaces)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1365.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Component  Implementation<span class="p">—deployable  implementation  of  a  component specification</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1366.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1367.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Installed Component<span class="p">—a copy of an implementation in a runtime environment </span>Component Object<span class="p">—an instance of an installed component that actually carries out the specified behaviour.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">They also define a <i>Component Interface </i>as the set of behaviours that can be offered by a component object.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;"><a href="part31.htm#bookmark974" class="a">Dependencies between components can be shown in a component diagram, as in </a><a href="part31.htm#bookmark974">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark974" class="a">19.1. However, they are more commonly shown using the notation used </a><a href="part18.htm#bookmark401" class="a">in </a><a href="part31.htm#bookmark974" class="a">Fig. 8.10, in </a><a href="part31.htm#bookmark975" class="a">which the required interface of one component is ‘wired up’ to the provided interface of another component. An example of this is shown in </a>Fig. 19.2, where the Production scheduler provides a Scheduling interface and requires a Planning interface, which is provided by the Staff planner component. These wiring connections can also be shown as dependency arrows between the required and provided interfaces, but the ball and socket view is clearer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 130pt;text-indent: 0pt;text-align: left;"><span><img width="256" height="134" alt="image" src="Image_1368.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark974">Figure 19.1 </a><span class="s21">Dependency between high-level components.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;"><span><img width="455" height="57" alt="image" src="Image_1369.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark975">Figure 19.2 </a><span class="s21">Wiring connection between required and provided interfaces.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark976" class="a">The interfaces of components can be shown connected to ports. Ports are small rectangles drawn on the edge of the component. Where an interface is connected to a port, it means that the component delegates responsibility for the behaviour associated with that interface to a subcomponent or object within it. This is shown in Fig. </a><a href="part31.htm#bookmark977" class="a">19.3, and Fig. </a>19.4 illustrates the internal structure of a component with the delegation dependencies and the connections between the internal subcomponents.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span><img width="300" height="57" alt="image" src="Image_1370.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark976">Figure 19.3 </a><span class="s21">Component with ports.</span></p><p style="padding-left: 49pt;text-indent: 0pt;text-align: left;"><span><img width="471" height="194" alt="image" src="Image_1371.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark977">Figure 19.4 </a><span class="s21">Delegation of interfaces to subcomponents within a component.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="232" height="25" alt="image" src="Image_1372.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.4  </a><a href="part4.htm#bookmark4" class="s29">Deployment Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.4  </a><a href="part4.htm#bookmark4" class="s29">Deployment Diagrams</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.4  </a><a href="part4.htm#bookmark4" class="s29">Deployment Diagrams</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark978">The main implementation diagram provided by UML is the </a><i>deployment diagram</i>. Deployment diagrams are used to show the configuration of run-time processing elements and the software artefacts and processes that are located on them. They are made up of <i>nodes </i>and <i>communication paths</i><a href="part31.htm#bookmark979" class="a">. Nodes are typically used to show computers, and the communication paths show the network and protocols that are used to communicate between nodes. Nodes can be used to show other processing resources such as people or mechanical resources. Nodes are drawn as 3D views of cubes or rectangular prisms, and the simplest deployment diagrams show just the nodes connected by communication paths as in </a>Fig. 19.5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"><span><img width="369" height="78" alt="image" src="Image_1373.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark979">Figure 19.5 </a><span class="s21">Simple deployment diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark979" class="a">Deployment diagrams can show either types of machine or particular instances as in Fig. 19.5, where </a><a href="part31.htm#bookmark979" class="s40">swift </a><a href="part31.htm#bookmark979" class="a">is the name of a PC. Deployment diagrams can be shown with </a><a href="part31.htm#bookmark980" class="a">artefacts within the nodes to indicate their location in the run-time environment. </a>Figure 19.6 shows that the AgateClient.jar artefact will be deployed onto PC Client and AgateServer.jar will be deployed onto a server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="403" height="138" alt="image" src="Image_1374.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark980">Figure 19.6 </a><span class="s21">Deployment diagram with artefacts.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: left;"><a href="part31.htm#bookmark981" class="a">The relationship between components and artefacts can be shown using a « manifest» dependency. Figure </a>19.7 shows this for the Agate Client component and the AgateClient.jar artefact.</p><p style="padding-left: 137pt;text-indent: 0pt;text-align: left;"><span><img width="238" height="168" alt="image" src="Image_1375.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark981">Figure 19.7 </a><span class="s21">Relationship between a component and an artefact.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Nodes can represent <i>execution environments </i>as well as processing <i>devices</i>, and can be stereotyped as either in order to distinguish between them. A device is a kind of composite node that consists of other devices or nodes. An execution environment is an environment into which executable components can be deployed as artefacts. A typical example would be a J2EE application server. Artefacts can have <i>deployment specifications </i>associated with them. A deployment specification is a set of properties that define the parameters necessary for the execution of an artefact on a node. A <i>deployment descriptor </i><a href="part31.htm#bookmark979" class="a">is an artefact that represents a deployment </a><a href="part31.htm#bookmark982" class="a">specification. Figure </a><a href="part31.htm#bookmark979" class="a">19.8 illustrates these diagram elements. Note that in </a><a href="part31.htm#bookmark979">Figs</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark980" class="a">19.5 and </a><a href="part31.htm#bookmark979" class="a">19.6 the nodes shown are node types, whereas </a><a href="part31.htm#bookmark982" class="a">in </a><a href="part31.htm#bookmark979" class="a">Fig. 19.8, an instance of a node </a>is shown. The same conventions are used as for classes and objects, with a colon and underlining to indicate the instance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 158pt;text-indent: 0pt;text-align: left;"><span><img width="181" height="275" alt="image" src="Image_1376.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark982">Figure 19.8 </a><span class="s21">Device containing an execution environment with an artefact and a deployment specification.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If you try to show all the artefacts of a system in deployment diagrams, the diagrams are likely to become very large or difficult to read. They can serve the purpose of communicating information about the location of key components to other members of the team or to users. Indeed, most computer professionals will have drawn an informal diagram like this at some time in their working lives to show where different parts of a system are to be located. Deployment diagrams show the physical architecture of the system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If you intend to use component and deployment diagrams to illustrate general principles about the way that the new system will be structured, then they are fine as a diagramming technique. However, if the aim of drawing these diagrams is to provide a complete specification of the dependencies between components at compile-time and run-time and the location of all software components as artefacts in the implemented system, then this may be one of those cases where a picture is not worth a thousand words. Even for a relatively simple</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">system that involves multiple nodes, keeping track of all these dependencies and documenting which components have to be on which machines is not a trivial task. For large systems, it is next to impossible. For most systems, this information may be easier to maintain in a tabular format, and a spreadsheet, a database or a configuration management tool may be the best way of doing this.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark983" class="a">Component diagrams can be replaced by a table that shows a list of all the software components down the rows and the same list across the top of the columns. It may be best to keep up to three tables (depending on the language used) for compile-time, link-time and run- time dependencies. For each case where a component is dependent on another, place a mark where the row of the dependent component intersects with the column of the component on which it is dependent. A simple example of this is shown in </a>Fig. 19.9.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="203" alt="image" src="Image_1377.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark983">Figure 19.9 </a><span class="s21">Excerpt from example table to show artefact dependencies.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark985" class="a" name="bookmark984">In the same way, deployment diagrams can be replaced by a table that lists components down the rows and either types of machines or particular instances across the top of the columns. A mark is entered in the row–column intersection for every component that has to be on a particular machine or type of machine. If the exact location of components in a directory structure is important, then that location can be entered into the table. This is shown in </a><a href="part31.htm#bookmark985">Fig.</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark985" class="a">19.10. Later this will form the basis of the information required for installing software </a>onto users’ machines for testing and eventual deployment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="148" alt="image" src="Image_1378.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark985">Figure 19.10 </a><span class="s21">Excerpt from example table to replace deployment diagram.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some configuration management and software build tools also make it possible to store this kind of information and use it to automate the building and deployment of software.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="189" height="25" alt="image" src="Image_1379.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.5  </a><a href="part4.htm#bookmark4" class="s29">Software Testing</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.5  </a><a href="part4.htm#bookmark4" class="s29">Software Testing</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.5  </a><a href="part4.htm#bookmark4" class="s29">Software Testing</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark986">Testing of software is necessary to ensure that it meets the requirements, both to check that the software complies with the requirements (verification), and to check that it has been written correctly and effectively (validation). The distinction between verification and validation is</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">described as: verification checks that the right software has been written; validation checks that the software has been written right. In an iterative project, testing takes place throughout the phases of the project, and is supported by quality assurance processes to review analysis and design models and documents as they are produced. Testing should always be carried out in a test system—a copy of the system used for testing—and never in the live system!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">19.5.1 <b>Who carries out the testing?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1114" class="a">One view of testing is that it is too important to be left to the programmers who have developed the software for the system. This is not meant as a criticism of programmers but reflects the fact that it is important that testing is carried out by someone whose assessment of the software will be objective and impartial. It is often difficult for programmers to see the faults in the program code that they have written. An alternative view is provided by Extreme Programming (XP) (</a>Beck, 2004). XP is an approach to rapid application development in which programmers are expected to write test harnesses for their programs before they write any code. Every piece of code can then be tested against its expected behaviour and if a change is made it can easily be retested. XP is explained in Section 21.6.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some organizations employ specialist software testers. The following paragraph is an excerpt from an advertisement in the British computer press for a post as a tester:</p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 109%;text-align: justify;">A leading financial institution has an opportunity for a systems tester to work on a business critical project. Testing throughout the project lifecycle, you will liaise closely with developers and team leaders to implement test cases and organize automated testing scripts. All testing is organized within a fully automated environment. With a background in testing you will have strong business acumen …</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">However, not all organizations can afford the luxury of specialist testers. Often the analysts who carried out the initial requirements analysis will be involved in testing the system as it is developed. The analysts will have an understanding of the business requirements for the system and will be able to measure the performance of the system against functional and non- functional requirements.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark987">The people responsible for testing will use their knowledge of the system to draw up a test plan. This will specify what is to be tested, how it is to be tested, the criteria by which it is possible to decide whether a particular test has been passed or failed and the order in which tests are to take place. Based on their knowledge of the requirements, they will also draw up sets of test data values that are to be used.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The other key players in the process of testing new software are the eventual users of the system or their representatives. Users may be involved in testing the system against its specification, and will almost certainly take part in final user acceptance tests before the system is signed off and accepted by the clients. If a use-case-driven approach to testing is used, the use cases are used to provide scenarios to form the basis of test scripts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">19.5.2 <b>What is tested?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In testing any component of the system, the aim is to find out if its requirements have been met. One kind of testing seeks to answer the following questions:</p><p class="s21" style="padding-top: 6pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Does it do what it’s meant to do?</p><p class="s21" style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">Does it do it as fast as it’s meant to do it?</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is equivalent to asking ‘Never mind how it works, what does it produce?’ and is known as <i>black box </i>testing because the software is treated as a black box. Test data is put into it and it produces some output, but the testing does not investigate how the processing is carried out. Black box testing tests the quality of performance of the software. It is also necessary to check how well the software has been designed internally. This second kind of testing seeks to answer the following question:</p><p class="s21" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Is it not just a solution to the problem, but a <i>good </i>solution?</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is equivalent to asking ‘Never mind what it’s for, how well does it work?’ and is known as <i>white box </i>testing because it tests the internal workings of the software and whether the software works as specified. White box testing tests the quality of construction of the software.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In a project where reusable components are bought in, it may not be possible to apply white box testing to these components, as they may be provided as compiled object code. However, some suppliers will supply source code as well as compiled code, and there is a growing Open Source movement that makes this possible. As an aside, some organizations require, as part of their software contracts, that source code is placed in <i>escrow</i>. This means that a copy of the source code is lodged with a third party, usually a lawyer or a trade association, so that it is available to the client if the software company goes out of business. By this means the client ensures that they will be able to maintain and enhance the software even if its original developers are no longer able to.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Ideally, testers will use both white box and black box testing methods together to ensure:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1380.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1381.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1382.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">completeness (black box and white box) correctness (black box and white box) reliability (white box)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1383.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">maintainability (white box).</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">However, the aim of any kind of testing is always to try to get the software to fail—to find errors</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">—rather than to confirm that the software is correct. For this reason the test data should be designed to test the software at its limits, not merely to show that it copes acceptably with routine data.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Testing can take place at as many as five levels:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1384.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1385.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1386.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1387.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1388.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">unit testing integration testing subsystem testing system testing acceptance testing.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In an object-oriented system, the units are likely to be individual classes. Testing of classes should include an initial <i>desk check</i>, in which the tester manually walks through the source code of the class before compilation. The class should then be compiled, and the compilation should be clean with no errors or warnings. To test the running of a class the tester will require some kind of test program (the term <i>harness </i><a href="part18.htm#bookmark492" class="a">is often used) that will create one or more instances of a class, populate them with data and invoke both instance operations and class operations. If pre-conditions and post-conditions have been specified for operations, as suggested in Chapter </a>10, then the operations that have been implemented will be tested to ensure that they comply with the pre-conditions and that the post-conditions are met when they have completed. State machine diagrams can be used to check that classes are conforming to the behaviour in their specification.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1004" class="a">It may be difficult to test classes in isolation. For the reasons that are discussed in Chapter 20 on reuse, most classes are coupled in some way to other classes in the system. Unit </a><a href="part23.htm#bookmark777" class="a">testing merges into integration testing when groups of classes are tested together. The obvious test unit at this point is either the use case to test the system from the user’s perspective or the component to test the correct working of components and the interaction between components. The interaction between classes or components can be tested against the specification of the sequence diagrams, timing diagrams and communication diagrams. User interface classes and data management classes will also have to be tested in conjunction with the classes in the application logic layer. If scenario-based design has been used (see Chapter 16), then the scenarios can form the basis for testing scenarios in which a use case can </a>be tested against a typical business situation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Use cases that share the same persistent data should be tested together. This kind of testing should check that applications work correctly when multiple clients are accessing the database and that transactional database updates are carried out correctly. This is one form of subsystem testing in which the subsystems are built around different business functions that make use of the same stored data.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If significant changes are made to a system, then some of the tests must be run again to ensure that the changes have not broken existing functionality. This is <i>regression testing</i>.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">Testing is sometimes described as taking place at three levels.</p><p class="s100" style="padding-top: 3pt;padding-bottom: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Level</p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1389.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1390.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1391.jpg"/></span></p><p class="s100" style="padding-top: 8pt;padding-bottom: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Level</p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1392.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1393.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1394.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s100" style="padding-top: 9pt;padding-bottom: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark988">Level</a></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1395.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;line-height: 6pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1396.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">Tests individual modules (e.g. classes or components). Then tests whole programs (e.g. use cases).</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Then tests whole suites of programs (e.g. the Agate application).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">Also known as alpha testing or verification. Executes programs in a simulated environment. Particularly tests inputs that are:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1397.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1398.jpg"/></span></p><p style="padding-left: 56pt;text-indent: 0pt;line-height: 106%;text-align: left;">negative values when positive ones are expected (and vice versa) out of range or close to range limits</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1399.jpg"/></span></p><p style="padding-left: 56pt;text-indent: 0pt;line-height: 12pt;text-align: left;">invalid combinations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">Also known as beta testing or validation. Tests programs in live user environment:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1400.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1401.jpg"/></span></p><p style="padding-left: 56pt;text-indent: 0pt;line-height: 106%;text-align: left;">for response and execution times with large volumes of data</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1402.jpg"/></span></p><p style="padding-left: 56pt;text-indent: 0pt;line-height: 12pt;text-align: left;">for recovery from error or failure.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A final stage of testing is <i>user acceptance testing</i>, during which the system is evaluated by the users against the original requirements before the client signs the project off. Documentation produced during requirements capture and analysis will be used to check the finished product, in particular use case scenarios and non-functional requirements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">19.5.3 <b>Test documentation</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark990" class="a" name="bookmark989">Thorough testing requires careful documentation of what is planned and what is achieved. This includes the expected outcomes for each test, the actual outcomes and, for any test that is failed, details of the retesting. </a>Figure 19.11 shows part of a test plan for the Agate case study. It shows details of each test and its expected outcomes. The results of the actual tests will be documented in a separate, but similar, format, with columns to show the actual result of each instance of each test and the date when each test was passed, and to document problems. Many organizations have standard forms for these documents or may use spreadsheets or databases to keep this information. The advantage of using a spreadsheet or database is the ability to produce reports that show what percentage of tests are complete. If requirements are held in a database, it is possible to link requirements to the tests that show whether they have been met and thus to provide a mechanism for tracing through from the original requirements to functionality in the finished system.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="336" alt="image" src="Image_1403.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark990">Figure 19.11 </a><span class="s21">Excerpt from test plan for Agate.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Testers should also watch out for unexpected results. Interaction between different operating systems can often cause unanticipated problems with different conventions for newline characters or case sensitivity of filenames. Problems such as these should be reported as bugs and recorded in a fault reporting package for action by the developers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="188" height="25" alt="image" src="Image_1404.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.6  </a><a href="part4.htm#bookmark4" class="s29">Data Conversion</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.6  </a><a href="part4.htm#bookmark4" class="s29">Data Conversion</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.6  </a><a href="part4.htm#bookmark4" class="s29">Data Conversion</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark991">Data from existing systems will have to be entered into a new system when it is introduced. The organization may have a mixture of existing manual and computerized systems that will be replaced by the new system. The data from these systems must be collated and converted into the necessary format for the new system. The timing of this will depend on the implementation strategy that is used (see next section), but it is likely to be a costly task, involving the use of staff time, the employment of temporary staff or the use of software to convert data from existing computer systems. These costs should have been identified in any cost–benefit analysis that was carried out at the inception of the project.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If data is being collated from existing manual systems, it may be necessary to gather it from different sources. Data may be stored in different files, on index cards, in published documents, such as catalogues, or in other paper-based systems. If this data is going to be entered manually into the new system by users keying it in, then the designers should draw up paper forms that can be used to collate the information so that it is all in one place when it is keyed in. Some data will only ever be entered when the system is started up: for example, codes that are used in the system and will not be altered. Special data maintenance windows may be required for this kind of one-off activity.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Data from existing computer systems will have to be extracted from existing files and databases and reformatted to be usable with the new system. This provides an opportunity to clean up the data: removing out-of-date records and tidying up the values that are stored. Address and telephone number fields of existing systems are likely to have been abused or misused by users. The work of converting the data may be done by using special programs written by the developers of the system, by employing consultants who specialize in this kind of work or by using commercial software that is capable of reading and writing data in a variety of formats; some packages are capable of working out the format of an unknown file.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The tasks involved in data conversion can be summarized as follows:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1405.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1406.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">creating and validating the new files, tables or database checking for and correcting any format errors</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1407.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">preparing the existing data for conversion:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1408.jpg"/></span></p><p style="padding-left: 101pt;text-indent: 0pt;text-align: left;">verifying the existing data for correctness</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1409.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1410.jpg"/></span></p><p style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">resolving discrepancies between data items from different sources collating data in special forms for input</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1411.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1412.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 50pt;line-height: 106%;text-align: left;">obtaining specially written programs to convert and enter the data importing or inputting the data</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1413.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">verifying the data after it has been imported or input.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark992">All the converted data may have to be ready for entry into the new system to meet a tight deadline, or it may be possible to enter it over a period of time. It is best to convert relatively static data such as product information and customer details first and leave dynamically changing files of information such as orders or other business transactions until last. It may be that only open orders should be taken over into the new system. If historic data is kept in the old system, then this system may have to be maintained for a period of time after the start of the new system in order to answer queries about past transactions. The implementation strategy will determine the timescale for conversion.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Always carry out a trial data conversion exercise with the test system before doing it for real. One of the authors was involved in converting data from one stock and manufacturing system to another. In both packages (from the same supplier) the Part ID field was case- sensitive. However, in that same supplier’s data conversion software all alphabetic characters in Part IDs were converted to upper case. Because upper and lower case letters were used to distinguish major and minor subassemblies of the same product, this caused problems that would have delayed the implementation if the error in the data conversion program had not been identified well before the planned implementation date.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="324" height="24" alt="image" src="Image_1414.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.7 </a><a href="part4.htm#bookmark4" class="s29">U ser Documentation and Training</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.7 </a><a href="part4.htm#bookmark4" class="s29">U ser Documentation and Training</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.7 </a><a href="part4.htm#bookmark4" class="s29">U ser Documentation and Training</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark993">19.7.1 </a><b>U ser manuals</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">As well as preparing the technical documentation for the system, analysts or specialist staff in the role of technical authors will be involved in producing manuals for end-users. The technical documentation will be required by the system manager and other staff responsible for running the system and by staff who have to maintain the system. Ordinary users of the system, who will be using it to carry out their daily work tasks, require a different kind of documentation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Users will require two kinds of manual. During training they will need training materials that are organized around the tasks that they have to carry out with the new system. Online computer-based training materials can be developed so that users learn the tasks in a staged way. These may be in the form of self-study tutorials that users can work through independently of any formal training that is provided.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The users will also need a reference manual that they can refer to while they are using the system. The reference manual should be a complete description of the system in non-technical language. Many software companies employ technical authors to write manuals in language that users can understand. The manual should be organized for ease of use. This involves the author understanding how the user will carry out their tasks and the kind of problem that they will face. The manual should be organized around the users’ tasks, and should be supplemented with a comprehensive index based on the terms that the users will be familiar with, rather than the technical terms used by the system developers. Particular attention should be paid to exceptional circumstances and not just routine tasks.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The reference manual may be replicated in the online help so that the users can refer to it while they are using the system. However, it should also be available as a paper manual that the users can refer to if there is a problem with the system, or on a CD-ROM that can be loaded onto a separate machine.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark994">19.7.2 </a><b>U ser training</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Temporary staff and existing staff will have to be trained in the tasks that they will carry out on the new system. Specialist trainers or analysts are likely to be involved in the design of the training programme, the development of training materials, the planning of the training sessions and the delivery of the training itself.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Training programmes should be designed with clear learning objectives for the trainees. They will be using the system and it is important that the training is practical and geared to the tasks that they will be performing. If it is too theoretical or technical, they will not find it useful. Training should be delivered ‘just in time’—when the users need it—as they will forget much of what they are told within a short space of time, so training delivered even a few weeks before it is required is likely to be wasted. Online computer-based training using video and audio materials that users can refer to when they need it is likely to be of most use. If formal training sessions are used, then trainees should be given learning tasks to take away and carry out in their workplace. This implies that they will be allocated adequate time for training—skimping on training in order to save money is likely to be counter-productive. Staff will not get the best out of the system and are likely to become frustrated if they do not understand how to work the system. It is often worth following up after users have started using a new system to check that they are using it correctly and identify needs for refresher training.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="265" height="25" alt="image" src="Image_1415.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.8  </a><a href="part4.htm#bookmark4" class="s29">Implementation Strategies</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.8  </a><a href="part4.htm#bookmark4" class="s29">Implementation Strategies</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.8  </a><a href="part4.htm#bookmark4" class="s29">Implementation Strategies</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark995">There are four main strategies for switching over to the new system:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1416.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1417.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1418.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1419.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">direct changeover parallel running phased changeover pilot project.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part31.htm#bookmark996" class="a">Figure </a>19.12 shows three of these changeover strategies in diagram form. Each of them has its advantages and disadvantages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 49pt;text-indent: 0pt;text-align: left;"><span><img width="471" height="308" alt="image" src="Image_1420.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark996">Figure 19.12 </a><span class="s21">Changeover strategies.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Direct changeover</p><p class="s13" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Direct changeover <span class="p">means that on an agreed date users stop using the old system and start using the new system. Direct changeover is usually timed to happen over a weekend to allow some time for data conversion and implementation of the new system. This does not mean</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">that everything happens in a couple of days, as preparatory work will have been carried out in advance. The advantages and disadvantages of this approach are:</p><p class="s24" style="padding-top: 5pt;padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">The new system will bring immediate business benefits to the organization, so should start paying for itself straight away.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">It forces users to start working with the new system, so they will not be able to undermine it by using the old system.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">+ <span style=" color: #000;">It is simple to plan.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">−  <span style=" color: #000;">There is no fallback if problems occur with the new system.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">−  <span style=" color: #000;">Contingency plans are required to cope with unexpected problems.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">−  <span style=" color: #000;">The plan must work without difficulties for it to be a success.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark997">Direct changeover is suitable for small-scale systems and other systems where there is a low risk of failure, such as the implementation of established package software.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Parallel running</p><p class="s13" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Parallel running <span class="p">allows the existing system to continue to run alongside the new system. The advantages and disadvantages of this approach are:</span></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">+ <span style=" color: #000;">There is a fallback if there are problems with the new system.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">+ <span style=" color: #000;">The outputs of the old and new systems can be compared—so testing can continue.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">−  <span style=" color: #000;">There is a high cost as the client must pay for two systems during the overlap period, and this includes the staffing necessary to enter information into the old system as well as the new.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">−  <span style=" color: #000;">There is a cost associated with comparing the outputs of the two systems.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">−  <span style=" color: #000;">Users may not be committed to the new system as it is easier to stick with the familiar system.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Parallel running should be used in situations where there is a high level of risk associated with the project and the system is central to the business operations of the organization.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Phased changeover</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In a <i>phased changeover</i>, the system is introduced in stages. The nature of the stages depends on the subsystems within the software, but introduction into one department at a time may be appropriate. The advantages and disadvantages are:</p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;">+ <span style=" color: #000;">Attention can be paid to each individual subsystem as it is introduced.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: left;">+ <span style=" color: #000;">If the right subsystems can be chosen for the first stages, then a fast return on investment can be obtained from those subsystems.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a name="bookmark998">+ </a><span style=" color: #000;">Thorough testing of each stage can be carried out as it is introduced.</span></p><p class="s24" style="padding-left: 17pt;text-indent: -11pt;text-align: justify;">−  <span style=" color: #000;">Disaffection and rumour can spread through the organization ahead of the implementation if there are problems with the early phases.</span></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">−  <span style=" color: #000;">There can be a long wait before the business benefits of later stages are achieved.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Phased changeover is suitable for large systems in which the subsystems are not heavily dependent on one another. The different phases can be introduced on a geographical basis or by department. Phased changeover works well with an iterative and incremental development approach.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Pilot project</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A variation on phased changeover is the use of a <i>pilot project </i>approach. This involves trialling the complete system in one department or on one site. The decision on extending the system to the rest of the organization depends on the success of the pilot scheme. The pilot project can be used as a learning experience, and the system can be modified on the basis of the practical experience in the pilot project. As such, pilots are suitable for smaller systems, or packaged software, as it is unlikely that a large-scale system will be developed and then introduced in a way that makes its full-scale implementation dependent on the success of a pilot.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Although we have included information about implementation strategies at this late stage in the book, it is important to stress that liaison with operational staff about a new system and</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">planning for its implementation should begin early in the development lifecycle. Adopting an iterative approach, in which incremental deliveries of software may occur from the start of the construction phase, means that the necessary infrastructure to run and support the new system has to be in place before the transition phase. It also means that planning for implementation of the new system must be based on a gradual migration from existing manual processes or an existing system.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">New systems often mean new or changed business processes, and changing business processes may mean changes to organizational structures in the functional business departments within the organization. Staff may be assigned to change management roles in order to ensure that process and organizational changes are planned and that they deliver the benefits that were claimed for them when the project was justified in cost–benefit terms.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="254" height="25" alt="image" src="Image_1421.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.9 </a><a href="part4.htm#bookmark4" class="s29">Review and M aintenance</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.9 </a><a href="part4.htm#bookmark4" class="s29">Review and M aintenance</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.9 </a><a href="part4.htm#bookmark4" class="s29">Review and M aintenance</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark999">19.9.1 </a><b>The next steps</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1004" class="a" name="bookmark1000">The work of analysts, designers and programmers does not stop after a system has been implemented. There is a continuing requirement for staff to work on the new system. First, it is important that the organization reviews both the ‘finished’ product and the process that was undertaken to achieve it. This may be for contractual reasons, in order to check that the product meets requirements. However, there is a growing recognition of the need for organizations to learn from experience and to record and manage the organizational knowledge that results from this learning. If there were any problems during the lifetime of the project, then these should be reviewed and conclusions drawn about how they might be avoided in the future. The amount of time spent on different tasks during the project can be used as the basis for metrics to estimate the amount of time that will be required for similar tasks in future projects. Second, it is unlikely that the system will be working perfectly according to the users’ requirements, and further work will have to be done. Third, in an object- oriented project, the design should be reviewed to identify candidate components for future reuse, although as we suggest later in this chapter, planning for reuse should begin in the early stages of a project. Identifying reusable software components is not an activity to be left until the completion of the project. This subject is covered in </a>Chapter 20.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">19.9.2 <b>The review process and evaluation report</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The review process will normally be carried out by the systems analysts who have been involved in the project from the start, although it is possible to involve outside consultants in the process for an impartial view. They will normally be supported by representatives of users and user management. The various stakeholders who have invested time, money and commitment in the project will all have an interest in the content of the evaluation report. The report can be very detailed or can provide an overview evaluation—like everything else in the project, there will be a cost associated with producing it. The report’s authors should consider the following areas.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1422.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Cost–benefit analysis<span class="p">. The evaluation should refer back to criteria that were set for the project at its inception. It may not be possible to determine whether all the benefits projected in the cost–benefit analysis have been achieved, but most of the costs of development, installation, data conversion and training will have been incurred and can be compared with the projections.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1423.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Functional requirements<span class="p">. It is important to check that the functional requirements of the system have been met. Clearly, this is something that should have been taking place throughout the lifetime of the project, but a summary can now be produced. Any actions that were taken to reduce the functional requirements, perhaps to keep the project within budget or on schedule, should be documented for future action under the heading of maintenance. If large areas of functionality were removed to bring the project in on schedule or within budget, a new project should be</span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">considered. Major bugs should similarly be documented if they have emerged since the implementation of the new system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1424.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Non-functional requirements<span class="p">. The system should be reviewed to ensure that it meets the  targets  for  non-functional  requirements  that  were  documented  during requirements analysis. It is now possible to assess whether quantitative objectives for learnability, throughput, response times or reduction of errors have been achieved.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1425.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">User satisfaction<span class="p">. Both quantitative and qualitative evaluations of the users’ satisfaction with the new system can be undertaken, using questionnaires or interviews or both. The results should be treated carefully, as users can pick on quite minor problems or be influenced in their views of the finished product by experiences during the project.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1426.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Problems and issues<span class="p">. As stated above, this is an important part of the evaluation process. Problems that occurred during the project should be recorded. These problems may have been technical or political, and it is important to handle the political issues with tact. Including a section criticizing unco-operative users or obstructive user management will mean that some readers take no notice of the rest of the report. Solutions to problems should also be included in the report, as should an indication of who should be acting on the learning from this part of the process.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1427.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Positive experiences<span class="p">. It is all too easy to focus on the negative aspects of a completed project. It is worth recording what parts of the project went well and to give credit to those responsible.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1428.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Quantitative data for future planning<span class="p">. The evaluation report provides a place in which to record information about the amount of time spent on different tasks in the project, and this information can be used as the basis for drawing up future project plans. The quantitative data should be viewed in the light of the problems and issues that arose during the project, as the amount of time spent on a difficult task that was being tackled for the first time will not necessarily be an accurate predictor of how much time will be required for the same task in the future.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1429.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Candidate components for reuse<span class="p">. If these have not already been identified during the project itself, then they should be identified at this stage. There will be different issues to be addressed, depending on whether the project has been carried out by in-house development staff or external consultants. For in-house projects, the reuse of software components should be viewed as a process of recouping some of the investment made and being able to apply those reusable elements of the system in future projects. For projects undertaken by external consultants, it may highlight legal issues about who owns the finished software that should have been addressed in the contract at the start of the project.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1430.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Future developments<span class="p">. Any requirements for enhancements to the system or for bugs to be fixed should be documented. If possible, a cost should be associated with each item. Technical innovations that are likely to become mature technologies in the near future and that could be incorporated into the system in an upgrade should also be identified.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1431.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Actions<span class="p">. The report should include a summary list of any actions that need to be undertaken as a result of carrying out the review process, with an indication of who is responsible for carrying out each such action and proposed timescales.</span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The end of a project provides a good opportunity for managers of the development staff to review performance on the project as part of a separate review process, the results of which are not necessarily in the public domain. This may feed into staff appraisal procedures and can affect the payment of bonuses, promotion prospects and staff development issues. The latter can include the choice of the next project for a member of staff to work on, their training needs, or opportunities to manage or act as a mentor to less experienced staff.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">19.9.3 <b>M aintenance activities</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">V ery few systems are completely finished at the time that they are delivered and implemented, and there is a continuing role for staff in ensuring that the system meets the users’ requirements. As well as maintenance of the system, there will be a need for support of users: providing initial and on-going training, particularly for new staff; improving documentation; solving simple problems; implementing simple reports that can be achieved using SQ L or OQ L without the need for changes to the system software; documenting bugs that are reported; and recording requests for enhancements that will be dealt with by maintenance staff. In large organizations these tasks are often handled by a helpdesk that supports all the organization’s systems, and it may be appropriate for a member of the development team to join the helpdesk staff either temporarily or permanently. Whether or not this happens, helpdesk or support staff will need to be provided with training so that they can support the new system.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Maintenance involves more significant amendments to a system once it is up and running.</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Maintenance may be required for a number of reasons.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1432.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">There will almost certainly be bugs in the software that will require fixing. The use of object-oriented encapsulation should mean that it is easier to fix bugs without creating knock-on problems in the rest of the system. It is sometimes suggested that bug-fixing involves spending as much time fixing bugs that were introduced by the previous round of maintenance as it does in fixing bugs in the original system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1433.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In an iterative lifecycle, parts of the system may be in use while further development is undertaken. Subsequent iterations may involve maintaining what has already been developed.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1434.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Users request enhancements to systems virtually from day one after implementation. Some of these will be relatively simple, such as additional reports, and may be dealt with by support staff, while others will involve significant changes to the software and will require the involvement of a maintenance team. Often these user requests will reflect the fact that until the system is running and users have a chance to see what it can do, it is difficult for them to have a clear idea of what their requirements are.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1435.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In some cases, changes in the way that the business operates or in its environment, for example new legislation, will result in the need for changes to the system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1436.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">There is a growing expectation that systems will be built as a collection of loosely coupled services (service-oriented architecture), and that business processes will be assembled by linking these services together with a business process management tool. The reason for this is to allow the business users to change their processes and link the services together in new ways. Such changes may result in the need to make changes to the implementation of services.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1437.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Similarly, changes in the technology that is available to implement a system may result in the need for changes in that system.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1438.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Disasters such as fires that result in catastrophic system failure or loss of data may result in the need for maintenance staff to be involved in restoring the system from data back-ups. Procedures for handling disastrous system failure should be put in place before disasters take place.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In each of these cases, it is necessary to document the changes that are required. In the same way as it is necessary to have a system in place during a project for handling users’ requests for changes to the requirements (a change control system), it is necessary to have a system for documenting requests for changes and the response of the maintenance team. This should include the following elements.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1439.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Bug reporting database<span class="p">. Bugs should be reported and stored in a database. The screen forms should encourage users to describe the bug in as much detail as possible. In particular, it is necessary to document the circumstances in which the bug occurs so that the maintenance team can try to replicate it in order to work out the cause.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1440.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Requests for enhancements<span class="p">. These should describe the new requirement in a similar amount of detail. Users should rate enhancements on a scale of priorities so that the maintenance team can decide how important they are.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1441.jpg"/></span></p><p class="s13" style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Feedback to users<span class="p">. There should be a mechanism for the maintenance team to feed back to users on bug reports and requests for enhancements. Assuming that bugs affect the agreed functionality of the system, users will expect them to be fixed as part of the original contract or under an agreed maintenance contract. The maintenance team should provide an indication of how soon each bug will be fixed. Enhancements are a different matter. Depending on the contractual situation, enhancements may be carried out under a maintenance contract or they may be subject to some kind of costing procedure. Significant enhancements may cost large amounts of money to implement. They will require the same kind of assessment as the original requirements. They should not be left to maintenance programmers to implement as they see fit, but should involve managers to authorize the expenditure and analysts and designers to ensure that the changes fit into the existing system and do not have repercussions on performance or result in changes to subsystems that affect others. This process itself may incur significant costs just in order to work out how much an enhancement will cost to implement. Significant enhancements should therefore be regarded as mini projects in their own right and involve the professional skills of project managers, analysts and designers.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1442.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Implementation plans<span class="p">. The maintenance team will decide how best to implement</span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">changes to the system, and this should be carried out in a planned way. For example, significant additions to a class that affect what persistent data is stored in the database will require changes to the database structure and may also require all existing instances of that class to be processed in order to put a value into the new attribute. This will probably have to take place when the system is not being used: for example, over a weekend. Enhancements to the system may fall into one of four categories: those to be made at no cost; those that will be made at a cost to be agreed with the client; those that will be held over until a major upgrade to the software is made and that will be part of a future version; and those that cannot or will not be made in the foreseeable future.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1443.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Technical and user documentation<span class="p">. Amendments to a system must be documented in exactly the same way as the original system. Diagrams and repository entries must be updated to reflect the changes to the system. If this is not done, then there will be a growing divergence between the system and its technical documentation; this will make future amendments all the more difficult, as the documentation that maintenance analysts consult will not describe the actual system. Clearly, user documentation, training and help manuals as well as online help must all be updated.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">In large organizations with many systems, staff in the information systems department may spend more time on maintenance of existing systems than they do on development of new systems. There is a growing movement for organizations to <i>outsource </i>their maintenance. This means handing over the responsibility for maintenance of a system to an external software development company under a contractual agreement that may also involve the provision of support. Some companies now specialize entirely in maintaining other people’s software.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The other impact of the growth of the maintenance task is that the time will come when a system is such a burden in terms of maintenance that a decision must be made about its replacement. The review process that takes place at this stage may lead to the inception of a new project and to the systems development lifecycle starting again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="141" height="24" alt="image" src="Image_1444.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.10  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.10  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">19.10  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1001">The implementation of a new system involves a large number of different types of software package that are used to produce and to support the finished system. Component diagrams and deployment diagrams are the two UML implementation diagrams that can be used to document the software components and their location on different machines in the system. For large, complex installations, these diagrams may become unwieldy, and a table format in a spreadsheet or database may be easier to maintain.</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">Analysts and designers may have a role during the implementation stage in maintaining system and user documentation and in providing user training. They may also plan and carry out testing, plan for data conversion from existing systems and assist the project management in planning the appropriate implementation strategy for the system. In larger organizations, these tasks may be carried out by staff in specialist roles.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">After a new system has been implemented, it is customary and advisable to carry out a post-implementation review. This will result in the production of an evaluation report to stakeholders that will measure the success of the project and identify issues and problems from which the organization should learn. Typically the evaluation report will include the following sections:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1445.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1446.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1447.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1448.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Cost–benefit analysis Functional requirements Non-functional requirements User satisfaction</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1449.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1450.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1451.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Problems and issues       Q uantitative data for future planning Opportunities for reuse</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1452.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1453.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Future developments Actions.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">New systems rarely work exactly as expected, and maintenance must be carried out in order to ensure that the system is bug-free and meets users’ requirements. Procedures must be put in place for the maintenance team (project manager, analysts, designers and programmers) to document the process and the changes that are made.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:286pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 38pt;padding-right: 56pt;text-indent: -29pt;text-align: left;">19.1  <span class="s16">List the different categories of software packages that may be used in developing a system.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">19.2 <span class="s16">What development packages have you used and which categories do they fall into?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">19.3  <span class="s16">What is the difference between an artefact and a component?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">19.4  <span class="s16">Draw a component diagram to show two components wired together with required and provided interfaces.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">19.5 <span class="s16">Draw a deployment diagram with artefacts to show the run-time dependency between a Java class file, the java.exe run-time program and the Java classes in a class library stored in a zip file.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 21pt;text-indent: -29pt;text-align: justify;">19.6 <span class="s16">Draw a deployment diagram to show how a web browser and web server are located on different machines and the communication protocol they use.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: justify;">19.7  <span class="s16">List five tests that you would carry out on the FoodCo use case Start Line Run.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">19.8  <span class="s16">List the sections that you would include in a post-implementation evaluation report and explain the content of each section.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">19.9  <span class="s16">What is the difference between maintenance work carried out to fix bugs and work carried out to add requested enhancements to a system?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 12pt;text-indent: -29pt;text-align: left;">19.10 <span class="s16">Why should decisions about enhancements not be left to maintenance programmers?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">19.11 <span class="s16">What tasks do maintenance staff undertake?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="bookmark1002">Case Study Work, Exercises and Projects</a></p></td></tr><tr style="height:39pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">19.A <span class="s16">Draw a component diagram for a program that you have written.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">19.B  <span class="s16">Find out about the library system in your school, college, university or local</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:190pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s16" style="padding-left: 36pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">library. Draw a deployment diagram to show the physical hardware architecture.</p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">19.C <span class="s16">The FoodCo system will have a database on a central server and PCs in different offices that access that server. Draw a deployment diagram to show this architecture.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">19.D <span class="s16">There are commercial packages to automate the installation of software such as InstallShield for Windows and RPM for Red Hat Linux. Investigate how these packages maintain information about what artefacts must be installed on a machine.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">19.E <span class="s16">Read the user manual or online help for a software package that you use. What examples can you find of good practice and bad practice in what has been written? How would you improve it?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">19.F <span class="s16">What would you include in the screen layouts for users to fill out for bug reports and enhancement requests? Produce a draft design for each of these two layouts.</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_1454.png"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1159" class="s6">Implementation takes us on into areas that are outside the scope of this book. There are a number of excellent books on Java implementation, for example Deitel and Deitel </a><a href="part38.htm#bookmark1171" class="s6">(2007). Wutka’s book on Java 2 Enterprise Edition (2001) gives a clear idea of the techniques involved in building J2EE systems. There are now many books available on .NET, for example Fedorov </a>(2002) or the various books by Deitel and Deitel.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;">Many modelling tools now offer a wide range of functionality, including integration with configuration management tools, built-in IDEs for programming, code generation and reverse engineering, object- relational mapping tools, software metrics and deployment tools. V endor websites are the best starting point for understanding what is on offer.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_1455.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:363pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark1003">LEARNING OBJECTIVES</a><a name="bookmark1004">&zwnj;</a><a name="bookmark1005">&zwnj;</a></p></td><td style="width:77pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_1456.jpg"/></span></p></td></tr><tr style="height:87pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s16" style="padding-left: 54pt;padding-right: 197pt;text-indent: 0pt;text-align: left;">why reuse is regarded as important some of the problems with reuse</p><p class="s16" style="padding-left: 54pt;padding-right: 65pt;text-indent: 0pt;text-align: left;">how to plan systems development to achieve reuse of components the different techniques for obtaining and managing reuse</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">how to design a reusable component.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_1457.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="77" alt="image" src="Image_1458.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark138" class="a" name="bookmark1006">Reusable software has been one of the objectives of developers for many years. In </a><a href="part18.htm#bookmark378" class="a">Chapter 4 reusability was discussed as one of the reasons for adopting object-oriented development techniques and programming languages, in Chapter </a><a href="part23.htm#bookmark611" class="a">8 inheritance and composition were discussed as two techniques that facilitate the development of reusable components and in Chapter </a>13 we highlighted reusability as one of the characteristics of a good object-oriented design. In this chapter we focus on how object-oriented software can be reused. In particular we look at the idea of <i>componentware</i>—software packaged into components that can be reused as part of other systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">We discuss approaches to developing component-based software: we raise issues concerning planning for reuse during the project and consider how to package software to make it reusable. We discuss an example of industrial strength componentware and present an example from the case studies used in this book which demonstrates how software can be designed and packaged for reuse. The use of web services as a way of achieving reuse is growing and we discuss the development of web services and service-oriented architecture. Chapter 22 on the book’s website addresses the project management issues associated with planning for reuse.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="156" height="24" alt="image" src="Image_1459.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.2  </a><a href="part4.htm#bookmark4" class="s29">Why Reuse?</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.2  </a><a href="part4.htm#bookmark4" class="s29">Why Reuse?</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.2  </a><a href="part4.htm#bookmark4" class="s29">Why Reuse?</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1007">Early moves to produce reusable software include the development of reusable libraries of functions in languages such as Fortran or C making it possible for programmers to save time and effort by reusing others’ work. The growth of V isual Basic as a programming language was aided by the availability of controls that could be bought off the shelf and incorporated into applications to provide functionality that would be difficult for the less experienced programmer to develop—and in any case, why reinvent the wheel? Object-oriented languages have always been promoted as significantly enabling the reuse of software and, when Java was released in</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">the mid 1990s, part of the hype surrounding the language was the ability to download and reuse services as Applets over the Internet. Why then is reuse regarded as so important?</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The arguments for reuse are partly economic, partly concerned with quality and partly about business flexibility.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1460.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If some of the requirements of a project can be met by models or software components that have been developed on a previous project or are bought in from an outside supplier, then the time and money spent producing those models or code is saved, although the saving will be partly offset by the cost of managing a catalogue of reusable models or code or of paying to buy them from elsewhere. In 2005 Standard Life, a British mutual insurance company, claimed to have achieved savings of £2m by creating a culture of reuse and the supporting tools. From a collection of 246 reusable services, 123 had been reused in 253 separate instances of reuse.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1461.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="part38.htm#bookmark1213" class="a">If a developer can reuse a design or a component that has been tested and proved to work in another application, then there is a saving in the time spent to test and quality assure the component. Jacobson et al. </a>(1997) cite IBM as an example of a company that has invested in software reuse and that has reuse support centres that maintain a library of 500 zero-defect components in Ada, PL/X and C++. In 2004, IBM adopted Logidex from LogicLibrary as its component repository.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1462.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">From the point of view of business users of information systems, reuse is not such a critical issue (although it has an impact on cost). In a dynamic business world, organizations need to be able to respond to a changing environment by changing business processes. The ability to recombine information system components or services in new ways to create new business processes or adapt existing ones is important to business stakeholders.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Developers of object-oriented systems are often end-users of reusable components, when they use packages, libraries, classes or controls in their chosen development environment. However, object-oriented systems have not achieved the level of reuse that was expected of them in terms of generating reusable components that can be applied again within the same organization. There are a number of reasons for this; some are technical and some are concerned with organizational culture.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1463.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Inappropriate choice of projects for reuse<span class="p">. Not all organizations or projects within those organizations are necessarily suitable to take advantage of or act as sources of reusable components.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1464.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1008">Planning for reuse too late</a><span class="p">. If reuse is appropriate, it is something that needs to be planned for even before a project starts, not an afterthought. By the time a project has been completed, it is likely that anything that might have been reusable will have been designed in such a way that it cannot easily be extracted from the rest of the system. To achieve reuse, the organization needs to be structured to support it, with the people and tools in place to make it possible.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1465.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The level of coupling between different classes in an object-oriented design<span class="p">. Many people have thought of classes as the unit of reuse in object-oriented developments. However, when we come to design classes for different systems, it may be possible to identify similar classes that could be developed in a way that makes them of use in more than one system, but, more often than not, the implementations of these classes will include attributes and associations that tie them into other classes in the particular application of which they are a part. This means that reuse needs to be at a more coarse-grained level than classes, typically components or services.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1466.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The platform dependence of reusable components<span class="p">. Most components are built to run on  a  particular  platform.  Although  Java  provides  a  measure  of  platform independence at run-time and CORBA makes it possible to connect together components on different platforms, interoperability can still be an issue. One of the</span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">attractions of the web services standards is that they allow services on different platforms to be connected together using a standard protocol.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1467.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The  lack  of  standards  for  reusable  components<span class="p">.  This  has  changed  with developments in the technology of repositories in which to store components and services and with the introduction of standards such as the Object Management Group’s Reusable Asset Specification (RAS) for managing software and metadata assets and the W3C’s SOAP (Simple Object Access Protocol) for web services. In the following sections, we will address each of these issues.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">20.2.1 <b>Choice of project</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Not all projects are necessarily suitable for the development of reusable components. The two main factors that influence this are the nature of the business within which the software development  is  taking  place  and  the  maturity  of  the  organization’s  object-oriented development.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1213" class="a">Jacobson et al. </a>(1997) identify four kinds of software business, which they suggest are suitable candidates for developing reusable components. In all of these they talk of the organization developing a Reuse-driven Software Engineering Business (RSEB).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1468.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Organizations where creating an RSEB improves the business processes within the organization:  large  organizations  with  a  considerable  information  systems infrastructure and a portfolio of projects to support business activities.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1469.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Organizations producing hardware products that contain embedded software: they cite Hewlett-Packard and Ericsson as examples of this type of organization.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1470.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Consultancy companies and software houses that develop software for external clients that have outsourced their information systems development: particularly those which target particular vertical markets (companies in the same kind of business).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1471.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Developers of software products, such as Microsoft, where reusable components can be applied across a large product range and where end-users can also benefit from the interoperability of software through mechanisms such as the .Net framework.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1009">Small, one-off projects in small organizations are unlikely to bring significant benefits from building reuse into the software development lifecycle. Large organizations with a significant portfolio of systems are beginning to see benefits from reuse through the adoption of a service- oriented architecture. By wrapping existing systems behind a service faç ade and building new applications as a set of loosely coupled services with a Business Process Management (BPM) layer above them that combines the services to support business processes, they are achieving both reuse and flexibility.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If we consider our two case study companies, we have to ask whether they would fall into any of the categories listed. Although both of them are developing systems to support their business activities, are they large enough and with enough potential projects to justify taking a reuse-driven approach to these projects? Building the organizational structures to support reuse costs money, and that expense is only justified if it can be recouped by savings on other projects. In both cases, they do not have a developed information systems department and we would probably have to say that they are not going to benefit from developing an RSEB.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If, however, an outside consultancy company is doing the development for both Agate and FoodCo, then there are a number of areas where reuse may be applicable. A software company looking at the two systems would identify areas such as managing information about staff that are common to both. If the software company specializes in a vertical market—media and advertising or food manufacturing—then there are going to be parts of the software systems that can be reused elsewhere. Indeed, if the software company has already introduced a reuse-driven approach to its business, the systems for Agate and FoodCo could be developed from a range of existing components tailored to the specific requirements of these companies.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">20.2.2 <b>Organizational structure</b></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1213" class="a">Jacobson et al. </a><a href="part31.htm#bookmark1010" class="a">(1997), based on experience at Hewlett-Packard, describe organizations as typically going through six stages of development of a reuse culture. At each stage some benefit is to be gained, but it is unlikely that an organization can leap from a situation in which there is no reuse of design models or software taking place to one in which there is a complete organizational culture of reuse and the structures and tools are in place to support the consistent reuse of components in a way that brings the kind of business benefits that were mentioned earlier. The six stages are shown in </a>Fig. 20.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="304" alt="image" src="Image_1472.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1010">Figure 20.1 </a><span class="s21">Jacobson’s six stages of reuse.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: right;"><a href="part38.htm#bookmark1099" class="a">Allen and Frost </a>(1998) argue that, despite moves to client–server and three-tier architectures, most software development organizations still have an application mind-set, and software is developed for individual applications, even within the same organization, without regard for reuse. (Many professional developers would counter this with the argument that they have always developed reusable libraries of code.) This may even be a step backwards from the developments of the 1970s and 1980s when the growth of corporate databases under the central control of database administrators meant that at least the data model was likely to be consistent across the whole organization. The development of web services and interest in Service Oriented Architecture is rekindling the interest in software reuse in large organizations. To gain the benefits of an RSEB requires an incremental process of change within the organization, involving: technical champions to argue the technical case and develop the software architecture; management champions who believe in the business benefit and will provide the support and investment to allow the change to take place; pilot projects to kick- start the process; education and training of developers to enable them to understand the process; and the development of support structures within the organization. Of these, the first is the most critical: to achieve effective reuse, the elements of the software architecture must</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: justify;"><a name="bookmark1011">be common across different systems.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One of the most significant requirements for support structures is that if developers are to use reusable components in their code they need some way of finding out what components are available and what their specifications are. This requires software tools to manage a repository of components and staff to maintain the components in the repository and to document them.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1099" class="a">Allen and Frost </a><a href="part31.htm#bookmark1012" class="a">(1998) place a repository at the centre of their model of the development process for reusable components. Figure </a>20.2 shows this with the two complementary processes: sowing reusable components during development and harvesting reusable components for reuse in other projects. The Select Perspective has evolved since then into</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">three workflows concerned with supplying, managing and consuming components and is described in more detail in Section 20.3.1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 114pt;text-indent: 0pt;text-align: left;"><span><img width="299" height="229" alt="image" src="Image_1473.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1012">Figure 20.2 </a><a href="part38.htm#bookmark1099" class="s33">The SELECT Perspective service-based process (adapted from </a><span class="s21">Allen and Frost, 1998).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">20.2.3 <b>Appropriate unit of reuse</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a">In Chapter </a>8 we talked about components as the unit of reuse, and we have used the term throughout this chapter so far. However, we have not yet defined what we mean by a component in this context.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">If we again consider the case studies, there is a need for a Client or Customer class both in the Agate system and in the FoodCo system. During analysis, these two classes may look very similar, but, as we move into design, the associations between these classes and others in their system will be resolved into specific attributes. The Agate Client class will have attributes to link it to Campaigns while the FoodCo Customer class will be linked to SalesOrders. If the development of both systems is being carried out by the same software company, then it requires a novel style of project management and organization to recognize this commonality in two different projects. If the commonality is recognized, then there is no guarantee of successful reuse unless a suitable architecture is developed that will support the reuse of the common elements of the Client class and allow them to be tailored to the requirements of the individual systems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For example, either a Client class can be obtained from elsewhere and subclassed differently for each project, or a Client class can be written that is domain-neutral and then subclassed for each different project. This inheritance-based approach also helps to solve a problem that is common with software that is tailored to the needs of different customers of the software house: it clearly separates those parts of the class that are common to all users from those that have been tailored to specific needs. This helps with the installation of upgrades and prevents the changes made for one customer being implemented for all customers.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">However, even if we can reuse the Client class in both applications by extending its functionality through inheritance, there are going to be other aspects of the Client class that we may or may not want to take through into another system. These include control classes and the business logic associated with the management of clients, related boundary classes and the mechanisms that manage the persistent storage of instances of Client in some kind of database. So can we reuse the class on its own?</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1099" class="a">Allen and Frost </a>(1998) argue that the class is the wrong level of granularity at which to apply reuse. They argue that reuse should take place at the level of components rather than classes. Their definition of a component states that:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1474.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">a component should be executable code;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1475.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">component functionality should only be accessible through a consistent published interface;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1476.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the interface should include an interaction standard and the component should be connectable to other components.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1213" class="a">However, this view of a component as executable code limits the types of reuse that can be made of a component. </a>Jacobson et al. (1997) have a much less restrictive definition:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1477.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">a component is any artefact produced during systems development constructed to be reusable.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1013">This definition is more useful, as it does not limit the developer to only considering executable code for reuse. The intermediate products of the development lifecycle—use case model, analysis model, design model, test model—can all be considered as candidates for reuse. There are two outcomes from this view.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1478.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">First, we may choose to reuse as components subsystems that provide more functionality than just a single class. For example, again both Agate and FoodCo have requirements to manage information about employees. Rather than developing two separate systems that handle staff, grades, staff development and so on, we may aim to produce a single reusable subsystem that can be used in both companies’ systems.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1479.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Second, we may choose to reuse intermediate products. For example, if we have an existing subsystem to manage staff, we could reuse some of the use cases and related boundary, control and entity classes, but choose to leave out others. Tracing through from the analysis model to the design and test models of the system, we should also be able to reuse elements of these models.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Essentially, we are dealing here with the difference between black-box and white-box reuse. Allen and Frost are suggesting a black-box model in which the contents of the components are not visible to the consumer; Jacobson et al. are suggesting a white-box model in which the internals of the component are visible, giving more flexibility to the consumer about how they make use of the component.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part18.htm#bookmark378" class="a">Jacobson et al. also make the point that there are different mechanisms for reusing components. In Chapter </a>8 we discussed the use of inheritance and composition as mechanisms for reuse. However, using inheritance to subclass existing classes is not the only mechanism for reuse and, if the class is not the unit of reuse, then other mechanisms must be used. Jacobson et al. suggest the following:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1480.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">inheritance</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1481.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">the « include» relationship between use cases</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1482.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1483.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">extensions and extension points in use cases and classes parameterization, including the use of template classes</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1484.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1485.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">building applications by configuring optional components into systems generation of code from models and templates.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The last two are development processes rather than specific design structures and make reuse easier to achieve. To this list we must add the use of loosely coupled services along the lines of web services, which are the basis of service-oriented architectures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">20.2.4 <b>Component standards</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">If we are talking about black-box reuse, then the potential for reuse depends on the software mechanisms for reusable components. If we want to consider white-box reuse, then the potential depends on the mechanisms for exchanging software models. In the latter case, UML is clearly a candidate for exchangeable, reusable software models, especially if modelling tool vendors implement the XMI (XML Metadata Interchange). In the former case, then we are dependent on the developers of programming languages and software development infrastructure to deliver appropriate tools to the development community to enable them to develop reusable components.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1014" class="a">A number of programming languages and development environments provide mechanisms by which developers can package software into components. </a>Figure 20.3 lists some of these.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This table shows that the search for ways of promoting reuse through some kind of modular architecture is not new in the software development industry. Reuse has been an objective that has driven the design of programming languages and has informed the development of programming styles. However, the potential for developing reusable components has been increased by five factors:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="318" alt="image" src="Image_1486.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1014">Figure 20.3 </a><span class="s21">A sample of languages and development environments with mechanisms for reuse.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1487.jpg"/></span></p><p style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the development of CORBA as a standard for interoperability of components written in different languages and running on different platforms;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1488.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the promotion of Java as an object-oriented language with relatively straightforward mechanisms for producing software in packages to deliver different services;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1489.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the growth of the Internet and the World Wide Web, which has made it possible for people to make their software components easily available to a wide marketplace of potential consumers;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1490.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1491.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">the spread of web services accessed using the SOAP protocol over networks, which may be private within an organization or public for business-to-business exchanges; the availability of the Reusable Asset Specification (RAS), which provides a standard format for packaging up the artefacts associated with a reusable component, including specification, design, code, executables and metadata that makes it possible to search for components in a catalogue.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part31.htm#bookmark1014" class="a">The platform independence of Java and CORBA makes them different from the other languages and environments shown in </a>Fig. 20.3.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark1015">However, web services provide even greater interoperability between components running on different platforms. The Universal Description, Discovery and Integration (UDDI) standard provides a way for potential clients of services to search for services in a registry and connect to them dynamically at run-time. The descriptions of the services are provided in Web Services Description Language (WSDL), an XML language, which defines the input and output parameters of the services and their location on the network. The use of web services makes it possible to create components in different languages that can interoperate and do not require the use of a CORBA Object Request Broker (ORB) in order to do this. Many businesses are also wrapping functionality of legacy systems in web services to make it possible to reuse their functionality in conjunction with new systems.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Microsoft .NET also defines extensions to Microsoft’s Portable Executable (PE) format so that metadata is stored with the bytecode in Microsoft Intermediate Language (MSIL)</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">executables, allowing them to provide information about the services they offer in response to requests in the correct format. However, this does not provide the same degree of interoperability as languages such as Java, which are platform-independent. However, the MONO project, which is porting the Microsoft run-time environment to other platforms such as Linux, is increasingly successful. The Reusable Asset Specification (RAS) from OMG promises to make it easier to support reuse within an organization by standardizing the way in which information about reusable components and the executables for the components can be stored in a repository by producers and located in a catalogue by potential consumers. There are an increasing number of products that support this standard.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">However, the existence of CORBA, Java, web services, .NET and RAS does not guarantee that effective reuse of components will take place. A strategy needs to be put in place within the organization to ensure that reuse is built into the systems development lifecycle.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="294" height="25" alt="image" src="Image_1492.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.3  </a><a href="part4.htm#bookmark4" class="s29">Planning a Strategy for Reuse</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.3  </a><a href="part4.htm#bookmark4" class="s29">Planning a Strategy for Reuse</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.3  </a><a href="part4.htm#bookmark4" class="s29">Planning a Strategy for Reuse</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1014" class="a" name="bookmark1016">In some organizations, reuse may just be about making use of reusable components from elsewhere, using the kinds of mechanisms that are listed in Fig. </a>20.3. In others, reuse will be about the kind of organizational change that we discussed in Section 20.2.2. In the rest of this section we describe two approaches to the introduction of a reuse strategy and then in Section</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">20.4 give an example of a commercially available reusable component package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">20.3.1 <b>The SELECT Perspective</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1099" class="a">Allen and Frost </a>(1998) first described the SELECT Perspective approach to the development of reusable components. At the level of practical techniques, this includes guidelines for the modelling of business-oriented components and for wrapping legacy software in component wrappers. They distinguish between reuse at the level of component packages, which consist of executable components grouped together, and service packages, which are abstractions of components that group together business services. The focus of this approach is to identify the services that belong together and the classes that implement them. Service classes in a single package should have a high level of internal interdependency and minimal coupling to classes in other packages.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1106" class="a">The SELECT Perspective has been updated by Apperly et al. </a>(2003), who define the process in terms of three workflows.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1493.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Supply<span class="p">—delivers and maintains components. Participants negotiate requirements with consumers, and design, construct and test the components. This may entail the wrapping of legacy systems as services.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1494.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Manage<span class="p">—deals  on  the  one  hand  with  acquiring,  certifying  and  publishing components and on the other with locating and retrieving components for reuse.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1495.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Consume<span class="p">—delivers solutions to stakeholders based on components produced by the suppliers. Ensures component specifications are aligned to business needs.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1017" class="a">These three workflows are shown in </a><a href="part31.htm#bookmark1018" class="a">Figs 20.4, </a><a href="part31.htm#bookmark1019" class="a">20.5 and </a>20.6.</p><p style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><span><img width="438" height="349" alt="image" src="Image_1496.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1017">Figure 20.4 </a><a href="part38.htm#bookmark1106" class="s33">SELECT Perspective Supply workflow (adapted from </a><span class="s21">Apperly et al., 2003).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="517" height="418" alt="image" src="Image_1497.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1018">Figure 20.5 </a><a href="part38.htm#bookmark1106" class="s33">SELECT Perspective Manage workflow (adapted from </a><span class="s21">Apperly et al., 2003).</span></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="403" height="422" alt="image" src="Image_1498.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1019">Figure 20.6 </a><a href="part38.htm#bookmark1106" class="s33">SELECT Perspective Consume workflow (adapted from </a><span class="s21">Apperly et al., 2003).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">20.3.2 <b>Reuse-driven Software Engineering Business (RSEB)</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1211" class="a">Jacobson et al. (1997) describe an approach to developing reusable software components that is rooted in Jacobson’s OOSE and Objectory (Jacobson et al., </a>1992) and that uses the notation of UML V ersion 1.0. The approach is based on practical experience within Ericsson and Hewlett-Packard.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Unlike Allen and Frost, who consider components as executables or as packages of executables designed to deliver a particular service, Jacobson et al. consider reuse in terms of any of the work products of systems development. This means that models that are produced before the finished program code are candidates for reuse, and that artefacts other than classes, for example use cases, can be reused. However, the key point of this approach is that the design of systems to make use of reusable components requires an architectural process right from the start. And that means changing the way the business operates.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1212" class="a" name="bookmark1020">In order to transform the business into a reuse business, Jacobson et al. also draw on another book from the same stable. Jacobson et al. </a>(1995) explain an approach to business process re-engineering that is based on OOSE and Objectory. The task of developing a reuse business is a re-engineering task that can be modelled using object-oriented business engineering and that leads to the development of systems to support the RSEB. Jacobson et al. suggest that the end result is a business consisting of the following competence units: requirements capture unit, design unit, testing unit, component engineering unit, architecture unit and component support unit. These competence units are groupings of staff with particular skill-sets and the business data and documents for which they are responsible.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The emphasis in RSEB is to design an architecture for systems that supports reuse from the start. This is done through three engineering processes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1499.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Application Family Engineering <span class="p">(AFE) is an architectural process that captures the requirements for a family of systems and turns them into a layered architecture, consisting of an application system and a supporting component system.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1500.jpg"/></span></p><p class="s13" style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Component System Engineering <span class="p">(CSE) is the process of focusing on the requirements for the component system and developing the use cases, analysis models and design for reusable components to support application development.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1501.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Application System Engineering <span class="p">(ASE) is the process of developing the requirements for applications and developing the use cases, analysis models and design to produce application software that makes use of the reusable component systems developed by CSE.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1021">The lifecycle for this kind of project is an iterative one. The engineering processes can run concurrently, with the emphasis changing as the project progresses. Model elements in the component systems are exposed to those in the application systems through faç ades. The Faç ade pattern is explained in Section 20.5. Jacobson et al. use the Faç ade pattern to organize components in packages and then expose those components to other packages. (We take a slightly different approach in Section 20.5.)</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="379" height="24" alt="image" src="Image_1502.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.4  </a><a href="part4.htm#bookmark4" class="s29">Commercially Available Componentware</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.4  </a><a href="part4.htm#bookmark4" class="s29">Commercially Available Componentware</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.4  </a><a href="part4.htm#bookmark4" class="s29">Commercially Available Componentware</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1022">Until recently, most commercially available components took the form of utilities or graphical user interface components. The best example of this is the wide variety of controls that are available for use with Microsoft V isual Basic. Originally these were supplied as add-ins in the form of .vbx files, which could be included in the V isual Basic toolbar in the same way as the built-in controls, or in the form of OLE (Object Linking and Embedding) objects, which allowed the functionality of other software packages such as word-processors to be embedded in applications. With the introduction of ActiveX, based on the Microsoft COM architecture, these add-ins are now available as .ocx files. If you look through the catalogue of a good software supplier that sells development tools, you will find pages of ActiveX controls that can be used in your applications and that provide the developer with the possibility of building a wide range of different functions into their software without having to reinvent the wheel. Examples include:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1503.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1504.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">serial communications computer-aided design</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1505.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1506.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">project management including Gantt charts spreadsheets</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1507.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">scientific charts</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1508.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">barcode reading and printing.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The use of standardized mechanisms to access the functionality of these controls has meant that other software companies can also write interfaces to them, although they are mainly used in V isual Basic or V isual C++ and C# .</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">For applications written in Java, however, there is another mechanism that can be used: the JavaBean. JavaBeans (or just Beans) are components written in Java that typically combine a graphical element with the functionality to support it. Beans support the Component–Container model in the Java Abstract Windowing Toolkit (AWT), which means that Beans that encapsulate access to particular domain objects can be added into applications in the same way as other visual components can be added to the applications. In the Java Platform Enterprise Edition (JEE), Enterprise Java Beans (EJBs) are the standard way of implementing business logic in a Java-based application server, and provide entity beans to encapsulate domain objects and their business logic as well as session beans that act in a way similar to control objects in the MV C model. Persistent storage of data in Java has been simplified since EJB 3.0 with the use of the Java Persistence API (JPA), which replaces Container Managed Persistence (CMP).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Most of these add-in controls provide generic capabilities rather than reusable components for particular types of business operations. However, commercial componentware to deliver business functionality has not developed in the same way as components for user interface functions such as producing charts. There are examples of suppliers producing reusable</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">components for business functions such as through IBM’s WebSphere range of products for e- business development.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1023" class="a">IBM’s SanFrancisco project originally provided distributed, server-based components for different types of business processes. SanFrancisco used a layered architecture (shown in Fig. 20.7). The Foundation layer provided a programming model to support distributed </a>transactions, and used a set of distributed object services and utilities written entirely in Java. It also provided an optional GUI framework written using JavaBeans. The Common Business Objects layer implemented general purpose business objects, together with the facts and rules required for any business application. This included business objects such as company, business partner, address and calendar. Four components were originally provided in the Core Business Processes layer. These were:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="277" alt="image" src="Image_1509.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1023">Figure 20.7 </a><a href="part38.htm#bookmark1205" class="s33">Layered architecture of the SanFrancisco project (adapted from </a><span class="s21">IBM, 1998).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1510.jpg"/></span></p><p style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">general ledger</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1511.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1512.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">accounts receivable and accounts payable warehouse management</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1513.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">order management.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">These were built using design patterns, many of which were discovered as the project developed, and provided support for electronic commerce. IBM now makes them available to business partners as Business Components for WebSphere Application Server.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="220" height="25" alt="image" src="Image_1514.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.5  </a><a href="part4.htm#bookmark4" class="s29">Case Study Example</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.5  </a><a href="part4.htm#bookmark4" class="s29">Case Study Example</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.5  </a><a href="part4.htm#bookmark4" class="s29">Case Study Example</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1024">A common feature of many applications is the need to control the access of members of staff to the different programs that make up a system. A non-functional requirement both for Agate and for FoodCo is to restrict access of staff to the use cases that they are permitted to use. This requirement can be summarized as follows.</a></p><p class="s12" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;line-height: 109%;text-align: justify;">Each program in the system will be represented by a use case in the use case diagram. One or more actors will be associated with each use case, and each actor may be associated with more than one use case. A member of staff will fill the role of one or more actors, and each actor will be represented by one or more members of staff. Each actor will be given access rights to use specific use cases (programs). A member of staff may only use those use cases (programs) for which one of the actor roles they fill has been given an access right.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This non-functional requirement in the context of the main systems can be viewed as the basis for functional requirements in a security subsystem. This subsystem is a potential candidate for</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1025" class="a">the development of a reusable component. Figure </a><a href="part31.htm#bookmark1026" class="a">20.8 shows the use cases for this subsystem. It can be modelled in a class diagram in the same way as the business classes that meet the functional requirements of the system. </a><a href="part31.htm#bookmark1027" class="a">Figure 20.9 shows the initial domain class diagram for this requirement. Two association classes, ActorRole and AccessRight, have been included in the class diagram, as it was initially thought that there might be some data associated with the creation of links between instances, for example the date that an access right was given, or the type of access right (read/write/update). However, further discussion with users and analysis of the requirements indicates that this is likely to make the subsystem more complicated than it needs to be, so they have been removed from Fig. </a>20.10, which shows the analysis class diagram.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="498" height="373" alt="image" src="Image_1515.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1025">Figure 20.8 </a><span class="s21">Use case diagram for security requirement.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;"><span><img width="477" height="278" alt="image" src="Image_1516.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1026">Figure 20.9 </a><span class="s21">Initial domain class diagram for security requirement.</span></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;"><span><img width="523" height="352" alt="image" src="Image_1517.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1027">Figure 20.10 </a><span class="s21">Analysis class diagram for security requirement with responsibilities.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">There are many design alternatives for this part of the system. The particular design alternative that we choose will affect the detailed design of this subsystem. If we look at it as though we are the software company developing software for both Agate and FoodCo, some of the alternatives are as follows.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1518.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="part31.htm#bookmark1025" class="a">Do we design this subsystem with a set of boundary and control classes to support the use cases in </a>Fig. 20.8?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1519.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Can we reuse the existing StaffMember class in the business domains of Agate and FoodCo (and any other companies with similar systems)? We do not really want to have to set up data about staff members in two places.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1520.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">What happens if we do reuse the StaffMember class in the business domain and then want to use this security subsystem to support a system that does not have StaffMember as an entity class?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1521.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If this security subsystem is to be implemented for all the application software we develop, then we are going to have to make some classes in the software (presumably the control classes) aware of the interface to this subsystem. How do we extend these control classes: rewrite them, extend them or subclass them?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1522.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">How do we provide persistent data storage for this subsystem? Does it have its own storage mechanisms or will it use the same storage mechanisms as whatever application it is supporting?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1523.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">What parts of this subsystem are we going to make visible to other applications? Are we going to make all the classes visible or are we going to provide a single interface?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">We might choose to design the system so that when a user starts running the application, they are prompted for their name or login and a password. Alternatively, if they are required to log into a network anyway, the software could obtain the user’s login from the network operating system. Each time a user starts a new use case in the main application, the application will need to check with the security classes whether that user is authorized to use that particular use case.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The security requirement is not part of the business requirements of the domain applications, and we want to reuse the security software in other applications, so it makes sense to separate these classes from the rest of the software and put them in a package of their own. The security classes will require their own boundary classes, to allow the actors</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1025" class="a">shown in </a><a href="part31.htm#bookmark1028" class="a">Fig. 20.8 to carry out the use cases. These will run on client computers and will be in a separate package within the overall security package. They will have dependencies on other packages that provide these services, such as the Java AWT. We have created two packages for control classes, one for classes that will run on the clients and control the boundary classes and one for control classes that will run on the server. These control classes will have a dependency on the core security classes. Figure </a>20.11 shows these package dependencies. We have also shown a package to represent a business application that will be using the services of the security package to authenticate users. It is arguable whether this should have a dependency on the server control classes or on some kind of client package that hides the implementation. Whatever approach we take, we want to provide a clean interface to the functionality of the security subsystem for developers to use. It should be possible to design and implement a separate security client, which uses the interface to the security server control classes. Also, programmers should have a straightforward API to the authorization service—the use case Check user authorization.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><span><img width="506" height="318" alt="image" src="Image_1524.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1028">Figure 20.11 </a><span class="s21">Package diagram showing security classes and dependencies.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One way of doing this would be to replace the control classes in the Security Server Control Classes package with a single control class. This will make it easier for developers to reuse the package, and application programmers only need to know the API of this one class. However, that would lead to a single class with no attributes and a large number of operation implementations. An alternative approach is to leave the control classes as they are and to create a Faç ade class that has the operations from the control classes within the subsystem but does not contain their implementation.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part23.htm#bookmark738" class="a">This approach is based on a design pattern, called the Faç ade pattern. (See </a><a href="part38.htm#bookmark1182" class="a">Chapter 15 for more on design patterns.) The Faç ade pattern is a Gang of Four structural pattern (Gamma et</a><a href="part23.htm#bookmark738" class="a"> al., 1995) and using the format from </a><a href="part38.htm#bookmark1182" class="a">Chapter </a><a href="part38.htm#bookmark1182">15 is described as:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1525.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: left;"><i>Name</i>. <b>Façade</b>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1526.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1527.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Problem<span class="p">. How can a simple interface be constructed for a complex subsystem? </span>Context<span class="p">. A subsystem may provide different elements of functionality using several classes or objects. These classes or objects may each have dependencies with the rest of the system. Each may be accessed directly resulting in a complex set of interfaces between the subsystem and the rest of the system. This complexity reflects high levels of coupling with the rest of the system and makes development, maintenance and reuse more difficult.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1528.jpg"/></span></p><p class="s13" style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Forces<span class="p">. It is desirable to decouple the subsystem from the rest of the system. This can be achieved by introducing an intermediate class to handle the interactions with the rest of the system. However, this interface management class introduces additional message passing which, for real-time systems, might cause performance issues.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1529.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Solution<a href="part38.htm#bookmark1248" class="a">. Create a separate class to act as gatekeeper for the subsystem, the Faç ade class. All access to the subsystem is via the Faç ade which sends messages on to the appropriate objects in the subsystem. This decouples the subsystem by exposing a single interface class. The Faç ade hides the complexity and the implementation of the subsystem and is essentially applying Parnas’ </a><span class="p">(1972) information hiding dictum at the subsystem level.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1029" class="a">The structure of the Faç ade pattern is shown in Fig. </a><a href="part31.htm#bookmark1030" class="a">20.12. We could use this structure to add a single class, called SecurityManager, which provides the API to the functionality in the security package. Or we could add two separate Faç ade classes, one for the management of the security subsystem (adding staff members etc.), and one for the authorization service used by business applications. This is shown in the class diagram in Fig. </a>20.13. We have added other operations that will be required in order to support the use cases for maintaining the information in the subsystem: for example, to list all the actors for a particular use case.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="293" alt="image" src="Image_1530.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1029">Figure 20.12 </a><a href="part38.htm#bookmark1182" class="s33">Structure of Faç ade pattern (adapted from </a><span class="s21">Gamma et al., 1995, p.187).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1031" class="a">The control classes in the Security Server Control Classes package can probably be designed to be Singletons (see Section 15.4.2). </a>Figure 20.14 shows the control classes in this package.</p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"><span><img width="370" height="360" alt="image" src="Image_1531.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1030">Figure 20.13 </a><span class="s21">Class diagram showing Faç ade classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="544" height="408" alt="image" src="Image_1532.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1031">Figure 20.14 </a><span class="s21">Class diagram showing control classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The security package, either needs to make use of whatever data storage mechanisms are used in the application with which it is supplied or it needs to have its own mechanism for persistent storage. The simplest approach, that makes the package as reusable as possible, is to provide the security package with its own persistence mechanism. We can use an object-</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">oriented database management system such as db4o to provide a persistence mechanism without having to worry about brokers and proxies. (Alternatively, given the relatively small volumes of data that are involved, it is possible for the persistence to be provided by using a system of files. If the data is to be stored in simple files, then it should be encrypted before storage. An encryption package could be added.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1032" class="a">In the design in Fig. </a>20.15 we have added collection classes to provide entry points from the control classes to the lists of Actors, UseCases and Staff Members. We have also added hashtables as collection classes to implement the associations between the classes. Adding a link between a UseCase and an Actor means adding the Actor to the UseCase.actors hashtable and adding the UseCase to the Actor.usecases hashtable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="515" height="652" alt="image" src="Image_1533.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1032">Figure 20.15 </a><span class="s21">Design class diagram showing collection classes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The collection classes support operations that have been added to the faç ade class and the control classes. The intention of this is that it should be easy to display in a dialogue box a list of all the Actors that currently have AccessRights to a particular UseCase etc. They are also</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">necessary to check the authorization of staff members for particular use cases by working through the list of actors for a particular staff member, and for each actor checking whether that actor has an access right to the use case.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1033" class="a">Figure </a><a href="part23.htm#bookmark868" class="a">20.16 shows package diagram showing dependencies of the security package. For persistent storage of the objects in the security package, we can use db4o (introduced in Chapter </a>18), which requires minimal changes to the classes in order to enable them to be stored in an object-oriented database.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="547" height="409" alt="image" src="Image_1534.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1033"><span class="s31">Figure 20.16 </span></a>Package diagram showing dependencies of the <span class="s89">security </span>package.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1033" class="a">All the operations that update the database will require a reference to a db4o database and must take place in the context of a transaction. The dependencies on db4o Database and Transaction classes are also reflected in the dependencies of </a>Fig. 20.16.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1033" class="a" name="bookmark1034">If we use Java Remote Method Invocation (RMI) to allow client packages to connect to the security package, then we also require the dependency on the Java RMI package, which is also shown in Fig. </a>20.16. We have also shown the faç ade packages in a separate faç ade package.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Clearly, the security package itself should not be accessible to unauthorized users, so there will be a requirement for the security package to use its own services to restrict access to the developers of the system, who will set up the associations between use cases and actors, and to the system manager who will authorize staff within the company to use particular use cases by linking them to specific actor roles.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1035" class="a">The Security component will provide an interface to the Agate Server component that allows it to check security authorizations, as shown in </a>Fig. 20.17.</p><p style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="181" alt="image" src="Image_1535.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1035"><span class="s31">Figure 20.17 </span></a>Component diagram showing dependency on the <span class="s89">Security </span>component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1036" class="a">The security package could be implemented in Java, compiled and stored in Java Archive (.jar) files. This can be shown in a deployment diagram, as in Fig. </a>20.18, which shows the dependency of the Agate server classes (also stored in a .jar file) on the SecurityManager.jar. This component can be used in both the Agate and FoodCo projects and in other future projects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="403" height="181" alt="image" src="Image_1536.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1036"><span class="s31">Figure 20.18 </span></a>Deployment diagram showing the <span class="s89">SecurityManager.jar </span>artefact.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="164" height="25" alt="image" src="Image_1537.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.6  </a><a href="part4.htm#bookmark4" class="s29">Web Services</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.6  </a><a href="part4.htm#bookmark4" class="s29">Web Services</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">20.6  </a><a href="part4.htm#bookmark4" class="s29">Web Services</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1169" class="a" name="bookmark1037">As discussed earlier the use of web services is an increasingly important way of achieving software reuse. Web services need to exhibit some properties that are different from components not implemented as web services. </a>Erl (2004) suggests that they should adhere to the following principles:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1538.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1539.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1540.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1541.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">reusable autonomous loosely coupled composable</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1542.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">hiding implementation logic</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1543.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1544.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">having a formal contract that explicitly defines how they interact discoverable</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1545.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">stateless.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The first five of these design principles should be followed by all components, while the last three relate particularly to web services. We have already described how WSDL provides a way to define the way that web services interact and how the UDDI is one mechanism for discovering available web services. For components that are not implemented as web services, interfaces would not be defined using WSDL and discoverability is not normally an issue that needs to be addressed. The key difference, and one that is important when deciding</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">how to implement a service, is that wherever possible web services should be stateless. A web service should maintain the minimum amount of information regarding the activity it is performing and should operate consistently.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Sommerville (2007) suggests three stages for the development of web services:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1546.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">candidate service identification <span class="p">which is concerned with selecting the most appropriate services for implementation;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1547.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">service design <span class="p">which addresses the design of both the logical and WSDL service interfaces;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1548.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">service implementation and deployment <span class="p">where the service is constructed, tested and deployed.</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1170" class="a">When identifying the most appropriate web services it is helpful to consider the three main categories that </a>Erl ( 2005) identifies:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1549.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;text-align: justify;">utility services that provide a general service such as currency conversion;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1550.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">business services that provide specific business functionality, like reserving a book at a university library;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1551.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">process services that provide a more general business service, such as on-line enrolment at university which involves registering for a programme of study, choosing classes to attend and paying fees.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1275" class="a">Erl also categorizes web services as entity or task oriented. An entity-oriented service relates to a business entity such as a bank account. A task-oriented service deals with a business activity such as applying for a bank loan. To select suitable web services for implementation Sommerville </a>(2007) suggests a series of questions that developers should ask themselves. The issues that need to be considered include the following.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1552.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">How independent is the service?  <span class="p">If the service is dependent on the availability of other services then its availability to be used by other systems may be constrained.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1553.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1554.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Does the service need to maintain state?  <span class="p">If the service has to remember its state then it may have to maintain persistent data. A service that maintains an internal state may be more difficult to use as its operation will depend upon its current state. </span>How widely could the service be used within the organization?  <span class="p">If a service can be used widely then its mode of operation may impose a standard approach to this service across its users. This standard approach must be acceptable to all users.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1555.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Could the service be used outside the organization?  <span class="p">If the service can be used outside the organization then the range of potential client systems and users must be determined. In some cases there may be no constraints and in other cases the service may be restricted to a particular user group. For example, an order processing service may be available only to certain customers who maintain accounts with the company.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1556.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Will users’ non-functional requirements vary?  <span class="p">If these do vary then it may be necessary to offer multiple versions of the same service. For example, a service may be offered with different interfaces.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="24" alt="image" src="Image_1557.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark1038">20.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark1038">20.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark1038">20.7  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Detailed discussion concerning the use of appropriate technologies to develop web services is beyond the scope of this book. However, it is worth noting that during web service design the developer should make the minimum assumptions about how a service is going to be used. The interface has to be carefully designed and potential exceptions clearly identified so that they can be reported to the client user. For example, input messages may be in the wrong format, no matter how clearly the required format is defined in WSDL, and this error has to be reported to the client user.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Adopting object-oriented software development is not on its own a sufficient cause for a business to benefit from the reusability that is claimed as one of the benefits of object- orientedness. Businesses thinking of taking advantage of reusability in object-oriented software need to take into account a number of factors.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1558.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Is the organization the right kind to be able to develop reusable components as well as use them?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1559.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">How will the organization systematically move from a situation of little or no reuse to one in which reuse is built into the design of systems from the start?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1560.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">What organizational support systems and software tools are required to enable reuse?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Given a commitment to the introduction of a reuse business, an organization needs to re- engineer its software development operations to provide the structures and support for a reuse culture and to train developers in this approach. For reuse to be effective, it should not be left until the maintenance stage but should be planned into the project from the outset. The architecture of the systems should be designed from the start to support reuse.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark1039">The SELECT Perspective is one methodology that focuses on techniques and project planning to achieve reuse. The RSEB of Jacobson et al. is another approach, and one that advocates an approach based on re-engineering the business and designing architectures for reuse. This approach is based on three processes, which produce a layered architecture: separating the component layer from the application layer, engineering the component layer and building the application layer on top of the component layer.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">CORBA, Java and web services make it easier for developers to produce and distribute reusable software components. The Reusable Asset Specification provides a standard for packaging up the artefacts that comprise a reusable component. Commercially available components include the products of IBM’s SanFrancisco project, which provides business components for general ledger, for accounts receivable and payable and for warehouse and order management. The Faç ade pattern provides a means for hiding the complexity of components from application programmers by means of classes that handle the API to the classes in the component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:183pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">20.1 <span class="s16">What are the benefits of reusable components?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">20.2 <span class="s16">What are some of the obstacles to reuse?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">20.3 <span class="s16">Give Jacobson et al.’s definition of a ‘component’.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 56pt;text-indent: -29pt;text-align: left;">20.4 <span class="s16">Name three mechanisms for creating reusable components in different programming languages.</span></p><p style="padding-top: 2pt;padding-left: 38pt;text-indent: -29pt;text-align: left;"><a href="part38.htm#bookmark1106" style=" color: #006793; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10.5pt;">20.5 </a><a href="part38.htm#bookmark1106" class="s36">What are the three workflows in the revised SELECT Perspective (Apperly et al., 2003)?</a></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 56pt;text-indent: -29pt;text-align: left;">20.6  <span class="s16">How does Allen and Frost’s definition of a component differ from that of Jacobson et al.?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">20.7  <span class="s16">What are the three processes in Jacobson et al.’s approach to reuse, and what is meant by each?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">20.8  <span class="s16">What is the purpose of the Faç ade pattern?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.7529pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:72pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">20.A <span class="s16">Describe the mechanisms that are available in an object-oriented language with which you are familiar for creating reusable components.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 12pt;text-indent: -26pt;text-align: left;">20.B <span class="s16">A data encryption package is required to be added to the security package to provide services to encrypt different data types, such as the Integer, String and</span></p></td></tr></table><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:164pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p class="s16" style="padding-left: 36pt;padding-right: 21pt;text-indent: 0pt;text-align: justify;">Date classes. Draw a class diagram (with packages and classes) to show new classes CryptInteger, CryptString and CryptDate. Access to Encryption and Decryption control classes is to be provided by a single Faç ade class called EncryptionManager. Include these in your diagram in suitable packages.</p><p class="s35" style="padding-top: 1pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">20.C <a href="part31.htm#bookmark1028" class="s36">Redraw the package diagram in Fig. </a><span class="s16">20.11 to include the encryption package and add any new dependencies necessary.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">20.D <span class="s16">Draw a deployment diagram for FoodCo showing the security packages as artefacts, some of which will be on client machines and some of which will be on a server.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">20.E <span class="s16">Complete the design of the security package and implement it in an object- oriented language such as Java, Smalltalk, C# or C++. (This is suitable for a coursework assignment or small project.)</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s37" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_1561.png"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1099" class="s6">Allen and Frost </a><a href="part38.htm#bookmark1106" class="s6">(1998) introduced the SELECT Perspective, while Apperly et al. </a><a href="part38.htm#bookmark1213" class="s6">(2003) have brought it up to date. Jacobson et al. </a>(1997) present a different view of developing a reuse-driven software development process, which builds on the Objectory and object-oriented business re-engineering approaches of Jacobson’s other books. It also uses UML as a notation.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;">Cheesman and Daniels (2001) also provide a straightforward process for specifying component-based systems.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1246" class="s6">For a comparison of the mechanisms involved in CORBA and DCOM (and some other approaches to distributed systems), Orfali and Harkey </a>(1998) provide a clear and readable coverage, which includes detailed instructions on how to implement systems which use these techniques.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1157" class="s6">Daniels et al. </a>(2004) provide an introduction to building web services using Java and explain the related specifications such as UDDI and WSDL.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1169" class="s6">Sommerville (2007) provides a clear introduction to service-oriented architecture and the development of services. Erl </a><a href="part38.htm#bookmark1170" class="s6">(2004, </a><a href="part38.htm#bookmark1172" class="s6">2005) provides detailed guidance on service development. Erl </a>(2009) also catalogues a range of design patterns for service-oriented architecture.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="http://www.devdirect.com/" class="s6" target="_blank">To find the wide range of software add-ins that are available as ActiveX controls, look at the website of a supplier such as </a>www.devdirect.com.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="244" alt="image" src="Image_1562.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:35pt"><td style="width:350pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p class="s88" style="padding-top: 10pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="bookmark1040">LEARNING OBJECTIVES</a><a name="bookmark1041">&zwnj;</a></p></td><td style="width:90pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" bgcolor="#5BA6C6"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="34" height="33" alt="image" src="Image_1563.jpg"/></span></p></td></tr><tr style="height:99pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#A7CDE1;border-left-style:solid;border-left-width:1pt;border-left-color:#A7CDE1;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#A7CDE1;border-right-style:solid;border-right-width:1pt;border-right-color:#A7CDE1" colspan="2" bgcolor="#D8E8F1"><p class="s16" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;">In this chapter you will learn</p><p class="s17" style="padding-left: 54pt;text-indent: -20pt;text-align: left;"><span><img width="20" height="13" alt="image" src="Image_1564.jpg"/></span> <span class="s16">what a software development ‘process’ is, and how this relates to ‘method’ and ‘methodology’</span></p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">why methodologies are used</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">some characteristics of different methodologies</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">the difference between hard and soft methodologies</p><p class="s16" style="padding-left: 54pt;text-indent: 0pt;line-height: 12pt;text-align: left;">some of the issues in choosing an appropriate methodology.</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="153" height="25" alt="image" src="Image_1565.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.1  </a><a href="part4.htm#bookmark4" class="s29">Introduction</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="20" height="61" alt="image" src="Image_1566.png"/></span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1042">The process or method of a software development project refers to the particular tasks carried out and how they are structured over the project lifecycle. Many of these tasks involve the application of the UML techniques described in the earlier parts of this book. The use of a set of modelling or documentation standards such as that provided by UML has a very important part to play, but this is not enough on its own. The techniques must be organized into an appropriate development process if they are to work together. For example, once an analyst has constructed communication diagrams for the main use cases, should the next steps be to convert these into sequence diagrams and write operation specifications, or should he or she now concentrate on preparing a class diagram and developing inheritance and composition structures? All of these tasks need to be completed at some point, but how is the analyst to know which one is appropriate at a specific point in the project? UML itself contains nothing that helps to make this decision, but developers need practical guidance on the many questions that arise when the techniques are applied in a real-life situation.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">In this chapter we describe what is meant by ‘process,’ ‘method’ and ‘methodology’, and</p><p style="text-indent: 0pt;text-align: left;"><span><img width="333" height="24" alt="image" src="Image_1567.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark1044">21.2 </a><a href="part4.htm#bookmark4" class="s29">Process, M ethod and M ethodology</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark1044">21.2 </a><a href="part4.htm#bookmark4" class="s29">Process, M ethod and M ethodology</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28" name="bookmark1044">21.2 </a><a href="part4.htm#bookmark4" class="s29">Process, M ethod and M ethodology</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1043">explain why methodologies are so widely used and why they continue to evolve. Next, some representative methodologies are described, including the USDP, on which we based the development process followed in this book, Atern (the latest version of the Dynamic Systems Development Method, or DSDM) and the agile methodologies Scrum and eXtreme Programming (XP). We then consider the issues in selecting a methodology that is suited both to the context and to the kind of project to be carried out. Finally, we explain the distinction between the so-called soft and hard views of systems development.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The terms ‘process’, ‘method’ and ‘methodology’ are used interchangeably by many authors, but there are significant differences in their meanings. A method is a step-by-step description of the steps involved in doing a job. Since no two projects are exactly alike, any method is specific to one project. A methodology is a set of general principles that guide a practitioner or manager to the choice of the particular method suited to a specific task or project. In object- oriented terms, we could say that a methodology is a type while a method is its instantiation on a particular project.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">To complicate the picture further, ‘process’ has come to be used as a synonym for both methodology and method. For example, in both USDP and the IBM Rational Unified Process (RUP), the term ‘process’ has an all-embracing meaning that includes both the particular development activities and techniques used on a given project, and also the overall framework that describes what the tasks are, how they are carried out and how they are organized. In this book, wherever possible, we stick to using method and methodology for greater clarity.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1045" class="a">Software developers, project managers and their bosses all need to be able to think at different levels of abstraction, depending on the task in hand. In order to run a current project plan, a manager must think at the level of method. In order to plan and organize for the next project, he or she must also be able to think at a higher level, that of methodology. </a>Figure 21.1 summarizes some of the different levels of abstraction involved in software development.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="227" alt="image" src="Image_1568.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1045">Figure 21.1 </a><span class="s21">Increasing levels of abstraction in software development.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1046">21.2.1 </a><b>M ethodology</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1107" class="a">A methodology in the IS domain is, then, a generalized approach to developing information systems. It must cover a number of aspects of the project, although coverage varies from one to another. Avison and Fitzgerald </a>(2006) describe a methodology as a collection of many components.  Typically,  each  methodology  has  procedures,  techniques,  tools  and documentation aids that are intended to help the system developer in his or her efforts to develop an information system. There is usually also a lifecycle or structure that contains and organizes the procedures. Finally, there is some kind of underlying philosophy that captures a particular view of the meaning and purpose of information systems development. (Note that, according to this view, process is merely one aspect of a methodology.)</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Checkland (1997), in a conference address that discussed the potential contribution of the wider systems movement to information systems development, gave a more general definition that captures well the notion of methodology as a guide to method. In his view, a methodology is a set of principles that in any particular situation has to be reduced to a method uniquely suited to that situation.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">The following examples illustrate these aspects.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1569.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1570.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The UML class diagram is a technique, and so is operation specification. Sparx Systems’ Enterprise Architect software is a tool.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1571.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The IBM Rational Unified Process software, which provides information and guidance about how to follow RUP, is a documentation aid.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1572.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The activity represented by ‘find classes by inspecting the use case descriptions’ is an aspect of procedure. So is the advice that an analyst is usually the best person to write test plans.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1573.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The advice that ‘operation specifications should not be written until the class model is reasonably stable’ is an aspect of structure, as it identifies a constraint on the sequence in which two steps should be performed.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1574.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Analysis and design can (reasonably) be viewed as distinct procedures.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1575.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The statement ‘object-oriented development promotes the construction of software which is robust and resilient to change’ is an element of a systems development philosophy.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A package that contains enough information about each of these aspects of the overall development process is fit to be named a methodology. Many attempts have been made to capture  the  essence  of  methodology  for  software  development,  and  the  resulting methodologies are almost as varied as are the projects themselves. In practice, methodologies vary widely in philosophy, in completeness of definition or documentation, in coverage of the lifecycle and even in the type of application to which they are best suited.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark1047">One example of an attempt to define a metamodel for software development is the OMG’s Software Process Engineering Metamodel (SPEM). This uses UML notation for entities that include </a><i>roles</i>, <i>activities</i>, <i>products </i>and <i>phases</i>. The software process followed on a specific project is modelled at the least abstract level and could be represented by instances of real workers, activities and actual modelling products. At the next more abstract level come specific methodologies such as RUP (in SPEM they are called processes). The abstract features of methodologies are themselves modelled by SPEM in UML, as a process metamodel, and these in turn are derived from the still more abstract Meta Object Facility (MOF). The assumptions behind SPEM are in close agreement with the definitions given earlier in this section, although the concerns of the authors of SPEM differ in at least one respect. Part of the underlying rationale of SPEM, as also of MDA, is to move towards automating the process of software development. In order to achieve this, it is necessary to define activities, products and so on with rather more rigour than has usually been needed in the past.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Some authors believe that the idea of a published methodology is misleading, if it is taken to mean that following a methodology leads inevitably to a good product. For example, Daniels (an early and influential contributor to UML) argued in a conference presentation (1995) that an IS methodology is more a means for learning the process of systems development than a recipe for practising it. He compared a methodology to a ladder that, once used, can be thrown away (the metaphor is borrowed from Wittgenstein). We are safe to ‘throw the ladder away’, not because we do not need one, but because, having once climbed it, we know how to build one of our own that is better suited to our needs. In Daniels’s view, the skill and judgement of an experienced developer count for much more than the prescriptive steps of a methodology, however comprehensive the latter may be.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Note that Daniels’s position expresses two key principles of the Agile Manifesto: ‘<i>Individuals and interactions </i>over processes and tools’ and ‘<i>Responding to change </i><a href="part9.htm#bookmark102" class="a">over following a plan’ (the Agile Manifesto was introduced in Chapter </a>3). As we shall see in the following sections, the recent Agile movement has much in common with earlier efforts to build software in a way that is responsive to changing circumstances and to individuals.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Beginning with Section 21.3, we will describe some alternative methodologies with different historical antecedents, and some real differences in approach. But they have many common features and these could be summarized as follows.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1576.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">Avoid getting bogged down in documentation.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1577.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1578.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Be flexible in approach when circumstances change. Devolve control to project team level as far as possible.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1579.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Maintain creativity; do not just follow a rigid, dogmatic process.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1580.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1581.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Involve users in a way that shares ownership of both the problem and the solution. Maximize the productivity of the team.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">This seems like such obvious common sense that it may be hard to understand why common sense on its own is not enough for software development to be successful. However, as we</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark75" class="a">saw in </a>Chapter 2, most reasons for a project to run into difficulty lie in the human aspects, and managing these will always require great skill and care.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">21.2.2 <b>Why use a methodology?</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Over many decades, IS methodologies have been developed and introduced specifically to overcome those problems of software development projects that were perceived to be important at the time. However, to date, no methodology has been wholly successful in fulfilling its objectives, partly because computing is a highly dynamic field, and the nature of both projects and their problems is constantly changing. In a changing world, it is unlikely that yesterday’s solution will ever completely solve today’s problems.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Nevertheless, many advantages have been claimed for the use of a methodology, including the following.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1582.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The use of a methodology helps to produce a better quality product, in terms of documentation standards, acceptability to the user, maintainability and consistency of software. We believe this to be generally true, even if only the minimum necessary set of documentation is maintained—as is recommended by DSDM, for example.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1583.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1048">A methodology can help to ensure that user requirements are met completely. This does not necessarily imply that all requirements must be captured, documented and agreed in advance of any development work.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1584.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Use of a methodology helps the project manager, by giving better control of project execution and a reduction in overall development costs.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1585.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1586.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Methodologies promote communication between project participants, by defining essential participants and interactions and by giving a structure to the whole process. Through the standardization of process and documentation, a methodology can also encourage the transmission of know-how throughout an organization.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">If all these claims could be fulfilled in practice, the benefits would be clear. However, the evidence is mixed. This is mainly because organizations differ so widely in their characteristics, and so do the types of project that they conduct. On both counts, it is very difficult indeed to make a rigorous comparison that would demonstrate the contribution of the methodology to the success or failure of any given project. The picture in the UK at present is that approximately two-thirds of businesses use some form of IS methodology. Even where this actually means little more in practice than an in-house set of standards for documentation and procedures (as it certainly is in at least some cases), this still shows a consistent level of faith in the utility of a methodology of some kind.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="368" height="25" alt="image" src="Image_1587.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.3  </a><a href="part4.htm#bookmark4" class="s29">U nified Software Development Process</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.3  </a><a href="part4.htm#bookmark4" class="s29">U nified Software Development Process</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.3  </a><a href="part4.htm#bookmark4" class="s29">U nified Software Development Process</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part9.htm#bookmark102" class="a" name="bookmark1049">We have already briefly introduced the main principles that underlie USDP (often now just called UP) in Chapters </a><a href="part9.htm#bookmark171" class="a">3 and </a>5. In this section, we present a more detailed picture of the methodology.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Philosophy and principles</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This part of UP should be familiar to anyone who has read much of the rest of this book, since the development process that we have followed is partly based upon and broadly consistent with UP. In particular, UP is a use-case driven, architecture-centric, iterative and incremental process. These terms can be explained briefly as follows.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The starting point for all modelling is some sort of interaction, called a use case, between a user and the software system under consideration. This interaction is the beginning of the modelling activity and also the fundamental unit from which later models are derived. Use cases are thus important in several different ways. Each use case is a thread that links a series of models from requirements to implementation; it is also a unit of delivery that has practical significance to users; it is a constant reminder to the systems developers that only the users’ requirements really matter.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 14pt;text-align: justify;">In UP, the resulting software architecture is an essential theme in modelling from the earliest stages of a project. This is reflected in the stereotyping of the classes that contribute to realizing a use case as boundary, control and entity classes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Phases and workflows</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1050" class="a">Figure </a><a href="part9.htm#bookmark171" class="a">21.2 repeats a diagram shown earlier in Chapter </a>5. This illustrates the relationship between the phases, iterations and workflows of UP. We do not need to dwell on workflows (requirements, analysis, design and so on) here, beyond noting that they are made up of activities, since these are the main subject of the greater part of this book. We explain the UP view of activities a little later in this section. In the paragraphs that immediately follow, we explain the phases of UP and relate these to the activities that are carried out within each phase.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span><img width="492" height="446" alt="image" src="Image_1588.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1050">Figure 21.2 </a><span class="s21">Phases, iterations and workflows in the Unified Process.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">While an activity is something that has particular meaning for the developers who carry it out, a <i>phase </i>is considered primarily from the perspective of the project manager. He or she must necessarily think in terms of milestones that mark the progress of the project along its way to completion. In UP, for example, two key milestones are Initial Operational Capability (which marks the close of the Construction phase) and Product Release (which marks the close of the Transition phase).</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Phases are sequential. A project passes through each phase in turn and then (usually) moves on to the next. The end of a phase is a decision point for the project manager. When each phase is complete, those in charge must decide whether to begin the next phase or to halt development at that point. The focus of the project manager’s attention shifts as the project progresses from one phase to the next.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Within each phase, the activities are carried out in an iterative manner that could be summed up in a very simplistic way as follows:</p><p class="s21" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;line-height: 109%;text-align: left;">Do some investigation, model the requirements, analyse them, do some design, do some coding, test the code, then repeat the process.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1051">There is no set rule that states how many iterations should be conducted within a phase; this is a matter for the project management team to judge, depending on the project characteristics and the available resources. (There is more information about managing object-oriented projects on the book website.)</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Within each phase, the workflows are essentially the same. All four phases include the full range of workflows from requirements to testing, but the emphasis that is given to each workflow changes between the phases. In the earlier phases, the emphasis lies more on the capture, modelling and analysis of requirements, while in the later phases the emphasis moves towards implementation and testing.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">During the inception phase, the essential decision is that of assessing the potential risks of the project in comparison with its potential benefits. This judgement of project viability (or otherwise) during the inception phase resembles the feasibility stage of a Waterfall Lifecycle. The decision will probably be based partly on a similar financial assessment (typically some sort of cost–benefit analysis). One principal difference at this early stage is that the viability of a UP project is much more likely to be judged partly also on the delivery of a small subset of the requirements as working software. During the inception phase, the main activities are thus requirements capture and analysis, followed by a small amount of design, implementation and testing. Another major difference is that, even at this early stage, there is the likelihood of iteration. That this is even possible is due to the fact that the development approach is object- oriented.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">During the elaboration phase, attention shifts to the reduction of cost uncertainties. This is done principally by producing a design for a suitable system that demonstrates how it can be built within an acceptable timescale and budget. As the emphasis shifts towards design, the proportion of time spent on design activities increases significantly. There is a further small increase in the time spent on implementation and testing, but this is still small in relation to the analysis and design activity.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The construction phase concentrates on building, through a series of iterations, a system that is capable of satisfactory operation within its target environment.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Implementation and testing rapidly become core activities in this phase, with a move further away from design and towards testing as each iteration gives way to the next.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark964" class="a">Finally, the transition phase concentrates on achieving the intended full capability of the system. This deals with any defects or problems that have emerged late in the project. It could also include system conversion, if an older system is being replaced (see </a>Chapter 19).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">Workers and activities</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">UP differentiates between the real people who are involved with any project, such as users, analysts, managers and customers, and the more abstract <i>worker</i>. This term denotes someone who plays a specified part in carrying out an activity. Some examples of workers are: use-case specifier, system architect, component engineer and integration tester. There need not be a direct one-to-one mapping between people and workers. An employee may play the part of different workers at different times, and, conversely, a group of people could represent a single worker engaged on an activity.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1052" class="a">Most UP activities can be partially defined in terms of the workers who carry them out, and the artefacts that either serve as inputs or are produced as outputs. </a><a href="part16.htm#bookmark291" class="a">Figure 21.3 illustrates this for the activity Analyse a use case (this can be compared with the process that we follow in </a>Chapter 7).</p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;"><span><img width="477" height="357" alt="image" src="Image_1589.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1052"><span class="s31">Figure 21.3 </span></a>Inputs and outputs of the activity <span class="s89">Analyse a use case </span>(adapted from Jacobson et al., 1999).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1053" class="a">As we mentioned above, a workflow can be seen as a flow of activities. Since each activity can be related to a worker who will carry it out, we can identify which workers will need to participate in the project. Figure </a>21.4 shows the analysis workflow broken down into its constituent activities.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><span><img width="501" height="206" alt="image" src="Image_1590.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1053">Figure 21.4 </a><span class="s21">The UP analysis workflow (adapted from Jacobson et al., 1999).</span><a name="bookmark1054">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Artefacts</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">By now, it should be reasonably clear what the main artefacts are in UP. These clearly include models, such as the use case model or the design class model, and products, such as an implementation package or subsystem.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1210" class="a">However, Jacobson et al. </a>(1999) define an artefact very broadly as almost any kind of information that is created, used or amended by those who are involved in developing the system. This means that the term also covers small-scale things, such as a class specification or an operation signature, and transient things, such as notes and prototypes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1055">S ummary</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1259" class="a">At the time of its release, UP represented the most mature object-oriented methodology that had yet been released. In large part, this is due to its ancestry. Rosenberg and Scott </a>(1999) comment  that  the  Booch  method  provided  good  methods  for  detailed  design  and implementation, OMT had particular strengths in its tools for exploring the problem space and Objectory was particularly strong in its approach to defining the solution space, but that all three ingredients are necessary for overall success. UP strove to bring these together.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Many aspects of UP follow almost inevitably from its basis in object-orientation. For example, no object-oriented approach would be taken seriously if it did not follow an iterative lifecycle.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1103" class="a">However, in at least one respect the UP is distinct from most other object-oriented methodologies that preceded it, and we regard this as probably its greatest weakness. As methodologies go, UP is large and complex. There will inevitably be a significant learning curve involved wherever UP is adopted within an organization. One recent attempt to address this is the Agile Unified Process or AUP (</a><a href="part9.htm#bookmark102" class="a">Ambler, 2009), which we first mentioned in </a>Chapter 3. Although the four-phase lifecycle remains the same, AUP differs from UP in a number of other respects. First, the workflows have changed. Four of UP’s workflows—business modelling, requirements, analysis and design—are combined in AUP into a single discipline called modelling. The purpose of this discipline is to produce models and documents that are ‘just barely good enough’ for the task (Ambler, 2009). AUP also includes three new disciplines that increase the coverage of the lifecycle: configuration management, project management and environment.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The same point about size and complexity is also true for UP’s proprietary sibling, IBM</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">RUP. However, IBM RUP differs significantly in the level of documentation, tool support and other guidance available to the adopter. These make the latter an industrial-strength methodology, which continues to evolve today.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Our experience suggests that complex methodologies tend to be fully adopted only in organizations with sufficient resources to provide thorough training, and with the culture to impose relatively strict discipline. Many software development organizations take from a methodology only what is easiest to implement. The complexity of UP undoubtedly derived from a natural desire to retain the best features of the three contributing methodologies. But this is unlikely to encourage its adoption in any complete form. In some cases, there may be little more than the use of UML and some form of iterative lifecycle. The development approach that we have advocated in this book provides one example of a subset of UP, but many other approaches are possible that adhere to the spirit of UP without slavishly following its every detail. But perhaps in time, with the increasingly widespread adoption of agile approaches, this whole debate may become no more than a historical footnote.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="373" height="25" alt="image" src="Image_1591.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.4  </a><a href="part4.htm#bookmark4" class="s29">Dynamic Systems Development M ethod</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.4  </a><a href="part4.htm#bookmark4" class="s29">Dynamic Systems Development M ethod</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.4  </a><a href="part4.htm#bookmark4" class="s29">Dynamic Systems Development M ethod</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1056">The Dynamic Systems Development Method (DSDM) is a management and control framework for agile project delivery. The DSDM Consortium was originally formed in 1994 to produce an industry standard definition of what at the time was known as Rapid Application Development (RAD). Over the next decade, the same concerns that produced the RAD approach also provided the initial impetus for the agile software development movement.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark1057">The first version of DSDM was released in January 1995. This defined the structure and controls to be used in a RAD project but did not specify a particular development methodology. As a result, DSDM came to be used comfortably alongside object-oriented development techniques, although it did not require them.</a></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The current version of DSDM was released in 2007 and is known as DSDM Atern (or just Atern). Although there has been a change of name, many distinctive features of previous versions of DSDM remain prominent. In particular, this includes its innovative perspective on project requirements. Instead of seeing the requirements as fixed and then attempting to match resources to the project, as most methodologies had done in the past, Atern fixes the resources for the project (including the time available for completion) and then sets out to deliver only what can be achieved within these constraints. Atern is designed, like earlier DSDM versions, so that it can be used in conjunction with other project management</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1165" class="a">methodologies such as PRINCE2™  and also with development methodologies such as RUP. (PRINCE™  is an acronym for PRojects IN Controlled Environments, and is a UK government standard approach to project management. There is more information about PRINCE2™  in the online chapter on Project Management on the book website.) Atern is based upon eight underlying principles (DSDM Consortium, </a>2007).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1592.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Focus on the business need<span class="p">. The essential criterion for acceptance of a deliverable is fitness for business purpose. Atern is entirely focused on delivering the essential functionality at the specified time.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1593.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Deliver on time<span class="p">. In an Atern project, the main variable is the extent to which requirements are met. Delivery deadlines are never sacrificed in order to meet lower priority requirements. This relates to the techniques of timeboxing and MoSCoW prioritization, which are both explained below.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1594.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Collaborate<span class="p">. A collaborative and co-operative approach between all stakeholders is essential. The emphasis here is on the inclusion of all stakeholders in a collaborative development process. Stakeholders not only include team members—who are expected to include end-users—but also others such as resource managers and the quality assurance team. In addition, Atern teams are empowered to make decisions that refine the requirements and possibly even change them without the direct involvement of higher management.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1595.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Never compromise quality<span class="p">. Product quality is not seen as a variable that can be sacrificed in favour of meeting lower priority requirements. Like the delivery deadlines,  this  too  relates  to  the  techniques  of  timeboxing  and  MoSCoW prioritization. It also requires that testing should be integrated throughout the lifecycle. Each software component is tested by the developers for technical compliance and by user team members for functional appropriateness.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1596.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Develop iteratively<span class="p">. Iterative development, just as we have described it throughout this book, is seen as necessary to converge on an accurate business solution.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1597.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Build incrementally from firm foundations<span class="p">. Incremental development allows user feedback to inform the development of later increments. The delivery of partial solutions is considered acceptable if they satisfy an immediate and urgent user need. These solutions can be refined and further developed later.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1598.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Communicate continuously and clearly<span class="p">. A failure to communicate effectively is seen as one of the main reasons why some projects fail to meet their users’ and sponsors’ expectations. The DSDM Atern solution includes the key technique of facilitated workshops (explained below) together with modelling and prototyping.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1599.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1058">Demonstrate control</a><span class="p">. This principle is partly about transparency: all appropriate stakeholders must be kept informed of progress and plans at all times. It is also partly about the philosophy and techniques of project management. Timeboxing is important among the techniques, while the philosophy emphasizes the delivery of products rather than the mere completion of activities.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">It is easy to see common ground between Atern and the UP-based development process that we have followed through this book. In particular, we have shared Atern’s emphasis on iterative and incremental development and its focus on fitness for business purpose. One other useful aspect of the DSDM Atern approach that is not highlighted in the eight principles is the stress on frequent delivery of products. Team meetings in organizations that have adopted DSDM are often characterized by a rule that team members are not permitted to talk about tasks that they are working on now, only about products that they have completed since the last meeting. This helps to maintain the team’s focus on completion and also minimizes the time spent away from productive work in meetings.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">21.4.1 <b>The Atern lifecycle</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The lifecycle has a total of seven phases, although strictly speaking two of these (Pre- and Post-Project) are outside the bounds of the current project:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1600.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1601.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1602.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1603.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1604.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1605.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1606.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Pre-project Feasibility Foundations Exploration Engineering Deployment Post-project.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part31.htm#bookmark1059" class="a">The phases and their relationships are shown graphically in Fig. </a>21.5 and each phase is described in more detail below. Note that the diagram highlights the iteration between phases and within Exploration and Engineering, as it is most to be expected here. However, iteration is possible within all phases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span><img width="520" height="311" alt="image" src="Image_1607.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1059">Figure 21.5 </a><a href="part38.htm#bookmark1165" class="s33">Simplified DSDM lifecycle (adapted from </a><span class="s21">DSDM Consortium, 2007).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">It is interesting to note that both the names and the emphasis of the four main development phases in Atern (Foundations, Exploration, Engineering and Deployment) correspond quite closely to the four phases of UP (see Section 21.3 to make the comparison for yourself).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1608.jpg"/></span></p><p class="s13" style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Pre-project. <span class="p">This phase relates the project to the organization’s wider strategic planning process, and places it within the context of other projects currently being undertaken or planned.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1609.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Feasibility<span class="p">. This phase determines whether the project is suitable for an Atern approach. It typically lasts only weeks, whereas the feasibility stage may last months on a traditionally run project. The study should also answer traditional feasibility questions such as the following:</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1610.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1611.jpg"/></span></p><p style="padding-left: 96pt;text-indent: 0pt;line-height: 106%;text-align: left;">Is the computerized information system technically possible? Will the benefit of the system be outweighed by its costs?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1612.jpg"/></span></p><p style="padding-left: 96pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Will the information system operate acceptably within the organization?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1613.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Foundations<span class="p">. This phase identifies the overall scope of the project and results in agreed high-level functional and non-functional requirements. Although detail is deliberately limited, the outcome of this phase must show how an identified business need will be met by the proposed application.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1614.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Exploration<span class="p">. This phase is concerned with the iterative and incremental development of models and prototypes that elicit the detailed requirements and demonstrate a viable solution. The intention of Atern is to develop prototypes that can ultimately be</span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">delivered as operational systems, so these must be built from the start to be sufficiently robust for operational use and also to satisfy any non-functional requirements such as performance.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1615.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Engineering<span class="p">. During this phase, the prototypes produced during the Exploration phase are developed further to the point where they can be used operationally. The distinction between the two phases is not clear-cut and is more a matter of focus than of sequence. Both phases can even run concurrently. It is not uncommon for a project to move to and fro between Exploration and Engineering on successive increments.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1616.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Deployment<a href="part31.htm#bookmark1059" class="a">. This phase deals with the installation of the latest increment into its operational environment. For a commercial product, this means making it ready for market. For internal development projects it will include user training. There may be a number of passes through Deployment, partly depending on the extent to which the initial requirements have been met. If they have been fully satisfied the project is complete. If some non-functional requirements have yet to be addressed, the project may return to the Engineering phase. If some element of functionality was omitted due to time constraints, the project may return to the Exploration phase. If a new functional area is identified, the project may return to the Foundations phase. The return flows of control are shown with dashed arrows in </a><span class="p">Fig. 21.5.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1617.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Post-Project<span class="p">. It is important following a deployment to review the extent to which the business needs have been met. This gives a link to the strategic planning process, and also means that lessons can be learned by the business as a whole, not just by the current project team (which, in any case, has probably now been disbanded).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1060">21.4.2 </a><b>DSDM Atern techniq ues</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Atern stipulates a number of key techniques, including timeboxing, MoSCoW prioritization, facilitated workshops, iterative development and modelling. We will not say more here about iterative development, which should by now need no further explanation. Nor will we discuss modelling techniques, about which Atern has little to say beyond an insistence that they should be used in preference to purely textual specifications. We will concentrate on the first three techniques, which are explained below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Timeboxing</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is an approach to project planning and control that fixes the resource allocation for a project, or for a part of a project. It limits the time available for the refinement of a product. Overall, an Atern project has a fixed completion date and this defines a timebox for the project as a whole. Smaller timeboxes are identified within this, each with a set of prioritized objectives. Each timebox produces one or more deliverables that allow progress and quality to be assessed. Examples of deliverables include requirements and design artefacts, software increments, documentation and so on. The idea is to deliver, within the agreed time, a product that satisfies the <i>minimum usable subset </i>of all requirements for the product. (This subset of requirements is identified through MoSCoW prioritization, which we discuss below.) Within a timebox, the team members have three major concerns:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1618.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">They must carry out any investigation needed to determine the direction they should take for that part of the project.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1619.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1620.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">They must develop and refine the specified deliverables. They must consolidate their work prior to the final deadline.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="part31.htm#bookmark1061" class="a">This is illustrated in </a>Fig. 21.6.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="207" alt="image" src="Image_1621.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1061">Figure 21.6 </a><span class="s21">The internal structure of a timebox (adapted from DSDM/Stapleton, 2003).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">M oS C oW prioritiz ation</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is a way of prioritizing requirements, without which timeboxing could not work. ‘MoSCoW<i>’ </i>is a mnemonic that stands for ‘Must … Should … Could … Won’t …’.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1622.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1062">‘Must (have)’ requirements are crucial. If these are omitted the system will not operate. In DSDM the set of Must have requirements is known as the minimum usable subset.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1623.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">‘Should (have)’ requirements are important but if necessary the system can still operate without them.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1624.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">‘Could (have)’ requirements are desirable but provide less benefit to the user.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1625.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">‘Won’t (have this time around)’ requirements are expected to be left for development in a later increment or a later project.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">All requirements matter, by definition, but not to the same extent. If the full set cannot be addressed within the scope of a timebox, the MoSCoW categorization helps to focus the development work on those that matter the most from a business perspective.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">F acilitated workshops</p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A facilitated workshop consists of a group of people working together under the guidance of a trained facilitator (who is typically external to the organization), in a controlled environment designed to be free of everyday work distractions, usually under time-constrained conditions. The concept has a venerable history that can be traced back to the Joint Application Development (JAD) workshops pioneered at IBM in Canada in the late 1970s. JAD workshops were innovative for their time in that they specifically involved a range of participants, including the project sponsor (so that the workshop could arrive at binding decisions), users, developers and other experts as necessary—hence the name ‘joint.’ The success of the technique depends to a large extent on the commitment and shared sense of ownership that can be achieved when a diverse group of people work together to solve a problem.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">21.4.3 <b>Project selection in DSDM</b></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1166" class="a">Some earlier publications on DSDM (for example, DSDM Consortium/Stapleton, </a>2003) include advice on how to choose projects that are suitable for a DSDM approach. This advice can be distilled down to two simple rules, which appear to be still relevant to the selection of projects in Atern.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1626.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The system should not be too algorithmically complex, and its main functionality should be visible at the user interface. This is understandable if we consider the key Atern attitude that the system should be focused on the direct provision of useful functionality to business users. Without that, user involvement would be much less relevant.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1627.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">There should be a real business need for early delivery of the software. This is also understandable if we consider the Atern emphasis on delivery of products on time. It is hard to see how the team could continue to take this seriously if there were no pressure to complete.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">One other condition applies more to the managers of the organization as a whole than to the individual project or to the team. It is a prerequisite that senior managers should give their unequivocal support to the use of Atern, since it relies on project teams having a great deal of freedom about how to interpret the requirements for the system on which they are working. The team’s energy and enthusiasm will soon be stifled if their independence turns out to be an illusion.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="107" height="24" alt="image" src="Image_1628.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.5  </a><a href="part4.htm#bookmark4" class="s29">Scrum</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.5  </a><a href="part4.htm#bookmark4" class="s29">Scrum</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.5  </a><a href="part4.htm#bookmark4" class="s29">Scrum</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1268" class="a" name="bookmark1063">Scrum is described by its founder (Schwaber, </a>2009) as ‘a framework within which complex products can be developed’ rather than either a process or a technique. In the terminology we have used in this chapter, this makes it a methodology rather than a method. It has a philosophy, techniques, tools (a number of software tools are now available), procedures and so on, but above all—not surprisingly for an agile methodology—it is designed to be versatile and flexible in use. Scrum has been in use since the early 1990s, but has recently gained momentum and has emerged as one of the most popular agile methods.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">Probably the first thing to strike the novice is the peculiarity of the language used in Scrum.</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">The following are some examples.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1629.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1630.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The name of the methodology itself is derived (very indirectly) from rugby football. People are assigned to roles named <i>pigs </i>and <i>chickens</i>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1631.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The team leader is called a <i>ScrumMaster</i>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1632.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">Work is done in timeboxed cycles of activity known as <i>Sprints</i>, punctuated by daily</p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">ceremonies<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1633.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;text-align: left;">There are artefacts called <i>Backlogs </i>and <i>Burndowns</i>.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Once the vocabulary is mastered, the methodology will begin to make much more sense. In essence, the aim of Scrum is to develop teams that are creative, enthusiastic, empowered and that that work well together. The Scrum approach is designed to leave a great deal of the day- to-day functioning of the team under the control of its members, while ensuring that they remain responsive to their clients and customers. Hence the division of people into <i>pigs</i>—full members of a Scrum team—and <i>chickens</i>—all other stakeholders. The distinction comes from an old joke, one version of which talks about the respective roles of a pig and a chicken in a ham-and-egg breakfast: the pig is committed while the chicken is merely involved (vegetarians, Muslims and Jews may be forgiven for not thinking the joke very funny). One of the rules of a Scrum project (rules are important in Scrum) is that chickens can’t tell pigs how they should do their work, although a particular chicken may have the right to specify the result.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">The most important aspects of the Scrum framework are the roles that make up a Scrum team, the way that timeboxes work, the artefacts that are produced, and the rules that govern the behaviour of participants in a Scrum project. These are briefly explained below.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1634.jpg"/></span></p><p class="s13" style="padding-top: 5pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Roles<span class="p">. Three key roles are involved in implementing the Scrum framework. First, team members do all the development work, and are expected to be completely self- organizing in their approach. Second, the </span>ScrumMaster <span class="p">is in a sense the team leader, but his or her role is not to direct the work of the team members, but instead to coach and motivate them, and to ensure that the Scrum process is followed. A ScrumMaster may also be a team member, but this is not essential. Third, the </span>Product Owner <span class="p">represents the business perspective in relation to the product that is being developed. These three roles count among the pigs (the committed ones) while everyone else is a chicken in relation to this project (involved but not committed).</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1635.jpg"/></span></p><p class="s13" style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1064">Timeboxes</a><span class="p">. The most important of the timeboxed elements is the </span>Sprint<span class="p">, which is where most of the work gets done. A Sprint is a 2–4 week iteration devoted to the production of an increment that is capable of release to the customer. A project consists of a number of consecutive Sprints, most of which result in an increment of completed software. A number of other elements are timeboxed in Scrum, including all meetings. These include the Sprint Planning Meeting, the </span>Daily Scrums <span class="p">that punctuate the progress of each Sprint and the Sprint Review Meeting. These three meetings are collectively known as Scrum’s </span>ceremonies<span class="p">. Daily Scrums resemble team meetings in DSDM Atern, in that they focus on the completion of products rather than ongoing progress with activities.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1636.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Artefacts<span class="p">. Project documentation in Scrum centres on four key artefacts. The </span>Product Backlog <span class="p">documents in priority order all requirements for the current product, typically in the form of ‘user stories’ (see the next section on XP) or use cases. The Product Owner has responsibility for the contents of the Product Backlog and for determining their priority. It is closely related to the </span>Release Burndown<span class="p">, which shows in graphic form an estimate of the total remaining work needed to complete the current project. Both documents are constantly updated during the progress of the project. The </span>Sprint Backlog <span class="p">and </span>Sprint Burndown <span class="p">fulfil a similar purpose at the level of an individual Sprint.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1637.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Rules<span class="p">. These describe the relationships between the various roles, timeboxes and artefacts, and also how people are permitted to behave in certain contexts. One example of a rule is that only team members can talk during a Daily Scrum, although others may be invited to attend. Another rule relates to the completion of work during a Sprint. The purpose of each Sprint is to take one item from the Product Backlog and to turn it into a ‘done’ increment. A done increment is only regarded as such if it meets a definition of ‘done’ that is understood and agreed by the Product Owner. In some cases, an increment may be accepted as done only when all analysis, design and other documentation is complete, together with the fully tested software. In other cases, a done increment may not include documentation, or unit testing, or acceptance testing, or indeed anything other than completed code. Perhaps the most important rule of all in Scrum is that teams are self-organizing and do not have a formal leader imposed on them. Nor is anyone outside the team permitted to tell a team member how to do his or her work.</span></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Beyond an insistence on iterative development, Scrum does not stipulate a particular lifecycle. This distinguishes it from other methodologies, most of which have a clear view of the phases of a project. However, since a Scrum team is expected to be flexible and has a great deal of freedom to decide its sequence of activities, this creates the possibility for Scrum to be adopted in conjunction with a methodology such as UP or DSDM. Scrum also avoids being prescriptive about techniques, but this too leaves a team with freedom to adopt those techniques that they feel are most appropriate to the project. In practice, most Scrum software projects follow an object-oriented development approach with UML as the preferred documentation standard.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="235" height="24" alt="image" src="Image_1638.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.6 </a><a href="part4.htm#bookmark4" class="s29">eX treme Programming</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.6 </a><a href="part4.htm#bookmark4" class="s29">eX treme Programming</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.6 </a><a href="part4.htm#bookmark4" class="s29">eX treme Programming</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1065">The approach known as eXtreme Programming (XP) is a combination of elements of best practice in systems development. It was first publicized by Beck (2004) and incorporates a highly iterative approach to development. It became well known in a relatively short period of time for its use of </a><i>pair programming</i>, though it has other important contributions to make. Pair programming involves writing the program code in pairs and not individually. At first sight it might appear that this approach would significantly increase the staffing level and hence the cost of developing an information system. Advocates of XP claim the reverse. Beck identifies the four underlying principles of XP as communication, simplicity, feedback and courage.<a name="bookmark1066">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1639.jpg"/></span></p><p class="s13" style="padding-top: 3pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Communication<span class="p">. Poor communication is a significant factor in failing projects. XP highlights the importance of good communication among developers and between developers and users.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1640.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Simplicity<span class="p">. Software developers are sometimes tempted to use technology for technology’s sake rather than seeking the simplest effective solution. Developers justify complex solutions as a way of meeting possible future requirements. XP focuses on the simplest solution for the immediate known requirements.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1641.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Feedback<span class="p">. Unjustified optimism is common in systems development. Developers tend to underestimate the time required to complete any particular programming task. This results in poor estimates of project completion, constant chasing of unrealistic deadlines, stressed developers and poor product quality. Feedback in XP is geared to giving the developers frequent and timely feedback from users and from test results. Work estimates are based on the work actually completed in the previous iteration.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1642.jpg"/></span></p><p class="s13" style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Courage<span class="p">. The exhortation to be courageous urges the developer to throw away code that is not quite correct and start again, rather than trying to fix the unfixable. Essentially the developer has to abandon unproductive lines of development, despite the personal emotional investment in work done.</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">XP argues that embracing change is an important key to systems development and that development staff are motivated by the production of quality work.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Requirements capture in XP is based on <i>user stories </i>that describe the requirements. These are written by the user and form the basis of project planning and the development of test harnesses. A user story is very similar to a use case, though some proponents of XP suggest that there are key differences in granularity. A typical user story is about three sentences long and does not include any detail of technology. When the developers are ready to start work they get detailed descriptions of the requirements by sitting face to face with their customer. Beck describes the systems development process as being driven by the user stories in much the same way that the UP is use case driven.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">XP involves the following activities.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1643.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <i>planning game </i>involves quickly defining the scope of the next release from user priorities and technical estimates. The plan is updated regularly as the iteration progresses.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1644.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The information system should be delivered in small releases that incrementally build up functionality through rapid iteration.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1645.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1646.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">A unifying <i>metaphor </i>or high-level <i>shared story </i>focuses the development. The system should be based on a <i>simple design</i>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1647.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Programmers prepare unit tests in advance of software construction and customers define acceptance tests.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1648.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The program code should be restructured to remove duplication, simplify the code and improve flexibility—this is known as <i>refactoring</i><a href="part38.htm#bookmark1177" class="a">, and is discussed in detail by </a>Fowler (1999).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1649.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1650.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">Pair programming means two programmers write code together on one workstation. The code is owned collectively and anyone can change any code.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1651.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">The system is integrated and built frequently each day. This gives the opportunity for regular testing and feedback.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1652.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1653.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a name="bookmark1067">Normally staff should work no more than forty hours a week. A user should be a full-time member of the team.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="8" alt="image" src="Image_1654.jpg"/></span></p><p style="padding-left: 51pt;text-indent: 0pt;line-height: 106%;text-align: left;">All programmers should write code according to agreed standards that emphasize good communication through the code.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">The XP approach is best suited to relatively small projects—say with no more than ten programmers. It relies on clear communicative code and rapid feedback. If circumstances preclude either of these, then XP is not the most appropriate approach.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">One key feature of XP is that the code itself is its own design documentation. This runs counter to many aspects of the approach suggested in this book. We have suggested that</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">requirements are best analysed and suitable designs produced through the use of visual models using UML. Nonetheless, XP offers an interesting insight into a different way of organizing and managing a software development project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="332" height="25" alt="image" src="Image_1655.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.7  </a><a href="part4.htm#bookmark4" class="s29">Issues in Choosing a M ethodology</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.7  </a><a href="part4.htm#bookmark4" class="s29">Issues in Choosing a M ethodology</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.7  </a><a href="part4.htm#bookmark4" class="s29">Issues in Choosing a M ethodology</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1068">The introduction of any methodology to an organization is not a trivial matter. There are many costs, some quite difficult to estimate. Staff must be trained in the techniques, structure and management of the new methodology, documentation must be purchased and software licences must be obtained for CASE tools that support the methodology. The indirect, hidden costs are often underestimated. Productive time is lost during training, and for some time after the change there may be a reduction in productivity and an ongoing need for support from external consultants. This is true whether or not the organization already uses a methodology. Even with careful evaluation before a decision is made, followed by careful planning of the change, it is often still prudent to conduct a full-scale trial of a new methodology on a pilot project, which must also be chosen carefully. It would be unwise to risk the failure of a critical system, yet a pilot project must be sufficiently complex to put the new methodology to a thorough test.</a></p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">The choice of the ‘right’ methodology is also fraught with difficulties, as there are now many</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">hundreds to choose from, and these differ radically in their philosophies, their coverage of the lifecycle and their suitability to particular application domains. Many factors affect the appropriateness of a methodology, including type of project (large, small, routine or mission- critical), application domain (e.g. realtime, safety-critical, user-centred, highly interactive, distributed or batch-mode) and nature of the IS development organization.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1203" class="a">One very influential thinker on the management of software development is Humphrey (1989), whose ‘process maturity framework’ has now evolved into the Software </a>Engineering Institute’s Capability Maturity Model Integration (Ahern et al., 2001). This model suggests that organizations evolve through stages of maturity, which necessarily follow each other in a pre- defined sequence. By analogy, a butterfly must first pass through the stages of egg, then caterpillar, then chrysalis, and it would simply make no sense for one to attempt to fly before it emerged as an adult. The logic for software development is that there is little point in introducing practices too far beyond the organization’s current level of maturity.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark1069">Humphrey originally described five stages. First comes an ‘initial’ level, where development activities are chaotic, and each developer uses ad hoc procedures that they have probably devised themselves. There are no common standards and no dissemination of good practice through the organization, so the success of any project depends solely on the skill and experience of the development team. At this level there is no point in introducing any methodology, since management have neither the skill nor the structures required to control it. Instead, the focus should be on moving to the next ‘repeatable’ level, where an organization has adopted simple development standards and project management procedures. These allow successes to be repeated on later projects and the organization can benefit from a methodology, since management procedures are capable of enforcing its application. However,  while  individual  managers  may  repeat  their  successes,  there  is  no  clear understanding of which specific factors led to each success. It is unlikely that success can be generalized to different kinds of project or application, and the flexibility of the organization is still limited. A prescriptive methodology that defines all steps in some detail is more likely to be successful.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:28pt"><td style="width:440pt;border-top-style:solid;border-top-width:1pt;border-top-color:#E3F0F5;border-left-style:solid;border-left-width:1pt;border-left-color:#E3F0F5;border-right-style:solid;border-right-width:1pt;border-right-color:#E3F0F5" bgcolor="#3395B9"><p class="s101" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Box 21.1 <b>M ethodology and Student Projects</b></p></td></tr><tr style="height:74pt"><td style="width:440pt" bgcolor="#E3F0F5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s102" style="padding-left: 6pt;padding-right: 6pt;text-indent: 0pt;text-align: justify;">We include here some remarks about the role of methodology in student projects. Supervisors of projects at undergraduate and postgraduate levels usually require students to follow some explicit methodology. It is also often a condition for professional accreditation of a degree that students should show that they can choose and apply an appropriate methodology.</p><p class="s102" style="padding-left: 20pt;text-indent: 0pt;text-align: justify;">The requirement is not trivial. The driving force that led to the existence of so many methodologies is the</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><span><img width="588" height="456" alt="image" src="Image_1656.png"/></span></p><p class="s21" style="padding-top: 3pt;padding-left: 12pt;text-indent: 0pt;text-align: justify;">constant struggle by software developers to learn how to avoid past errors, and how to repeat past successes. But what does this mean in practice? What must a student do in order to claim that he or she has ‘followed an appropriate methodology’? Most of the methodologies described in this chapter simply do not fit the context of an assessed student project without at least some adaptation. This is for several reasons:</p><p class="s21" style="padding-top: 5pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">There is typically only one developer, and he or she is usually quite inexperienced. There is often no real client, and no real business need for the product.</p><p class="s21" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">Even if there is a real client, access may be limited when compared to a commercial project. Access to the project supervisor may also be limited when compared to a project manager in a commercial setting.</p><p class="s21" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">The student must usually substitute self-study for formal training and mentoring in processes and tools.</p><p class="s21" style="padding-top: 6pt;padding-left: 12pt;text-indent: 0pt;text-align: justify;">It is hardly surprising that students are sometimes confused about how to cope with this set of challenges. Our suggestions for resolving this confusion are threefold.</p><p class="s21" style="padding-left: 12pt;text-indent: 14pt;text-align: justify;">First, we take the general view that methodologies, like software systems, should be fit for purpose. In other words, the methodology chosen for a project should be one that at least appears likely to be helpful in achieving the project aims. For example, a project expected to use software components in its implementation should make use of techniques fit for specifying components.</p><p class="s21" style="padding-left: 12pt;text-indent: 14pt;text-align: justify;">Second, all methodologies are capable of some adaptation, and very few need be adopted in their entirety. For example, students working alone may benefit from following some aspects of XP, but they will certainly find pair programming to be an irrelevance. Furthermore, there are more marks to be gained by producing explicit analysis and design models that document decisions made along the way, than by slavishly following the principle that the code can serve as its own documentation.</p><p class="s21" style="padding-left: 12pt;text-indent: 14pt;text-align: justify;">Finally, a methodology is as much a means for learning how to do systems development as it is a recipe. This is particularly true for a student project, where it is taken for granted at the outset that the developer has only limited experience. Every student project is intended partly as a learning experience, and this applies as much to the methodology as to any other aspect of the project. For this reason, it is not really important whether the ‘right’ methodology is chosen at the outset. Instead, the student should reflect on his or her chosen methodology during the course of the project, and, at the end, should write up the lessons learned from this reflective evaluation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a name="bookmark1070">An organization at the next, ‘defined’ level has its own definition of the software process and is able to standardize activities throughout the organization. A methodology can now be introduced more readily and is likely to produce greater benefits, since the organization already has a culture of working to defined procedures. But staff still adapt much more readily to a methodology that is in harmony with their current ways of working. The next step is typically to introduce a metrics programme (see the book website for more information about metrics). If successful, this can lift the organization to the ‘managed’ level—but few organizations are yet at this level. Only a tiny handful have reached the final ‘optimizing’ level, where there is a capability for continuous improvement in all activities (corresponding to the general management approach called ‘Total Q uality Management’).</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="271" height="24" alt="image" src="Image_1657.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.8 </a><a href="part4.htm#bookmark4" class="s29">H ard </a><a href="part4.htm#bookmark4" class="s103">v. </a><a href="part4.htm#bookmark4" class="s29">Soft M ethodologies</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.8 </a><a href="part4.htm#bookmark4" class="s29">H ard </a><a href="part4.htm#bookmark4" class="s103">v. </a><a href="part4.htm#bookmark4" class="s29">Soft M ethodologies</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.8 </a><a href="part4.htm#bookmark4" class="s29">H ard </a><a href="part4.htm#bookmark4" class="s103">v. </a><a href="part4.htm#bookmark4" class="s29">Soft M ethodologies</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1071">This chapter would not be complete without some mention of the long-running critical debate that turns on the distinction between </a><i>hard </i>and <i>soft </i><a href="part31.htm#bookmark1072" class="a">methodologies, and that sometimes divides both the profession and the academic community into two opposing camps. The distinction emerged principally from the broad systems movement. While there is no single precise definition of the difference, it is summarized in </a>Fig. 21.7.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="550" height="292" alt="image" src="Image_1658.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1072">Figure 21.7 </a><span class="s21">Some underlying assumptions of hard and soft systems approaches.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">‘Hard’ is usually taken to mean objective, quantifiable or based on rational scientific and engineering principles. In contrast, ‘soft’ involves people issues and is ambiguous and subjective. UP can be seen as deriving mainly from the hard tradition. However, influence of a softer approach can be discerned in DSDM Atern, in Scrum, and also to a lesser extent in techniques such as the user stories in XP and the use case technique, since these aim at eliciting the practical, context-based requirements of individual users.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part38.htm#bookmark1135" class="a">On the whole, those methodologies that might be characterized as principally soft in their orientation tend to focus more on making sure that the ‘right’ system is developed, than on how to actually develop the system. Their intellectual antecedents are diverse. For example, Checkland’s influential Soft Systems Methodology (SSM) </a><a href="part38.htm#bookmark1132" class="a">(Checkland, </a><a href="part38.htm#bookmark1135" class="a">1981; Checkland and Scholes, </a><a href="part38.htm#bookmark1134" class="a">1990; </a><a href="part38.htm#bookmark1135" class="a">Checkland and Holwell, 1998) originally grew out of an attempt to apply </a>hard systems engineering techniques that failed because the problem situations were messy and ill- defined. SSM is grounded in a set of philosophical ideas about the nature of systems at a conceptual level. Its techniques, such as the conceptual model and the rich picture, provide ways of exploring and agreeing the characteristics of the problem situation, before any attempt is made to define a specific system that will help users to meet their goals.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">This is very different from the approach taken by ‘hard’ methodologies. These tend to assume that the purpose and nature of the organization can, to a large extent, be taken for granted, and that every project begins with an identified need for an information system to solve some recognized problem.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part31.htm#bookmark1073" class="a">One way of reconciling the contradiction is to argue that soft and hard methodologies cover different parts of the lifecycle. In this view, a soft methodology is more useful in the earlier stages of the lifecycle, particularly when there is uncertainty about the goals or strategy of the organization as a whole. A hard approach will be more appropriate once any initial uncertainties and ambiguities have been resolved (insofar as this is possible), since the emphasis then shifts to a specific project with relatively clear goals and boundaries. This has led to the suggestion that, in certain situations, hard and soft methodologies can complement each other and can be used together to help overcome some of the perennial difficulties in systems </a><a href="part38.htm#bookmark1175" class="a">development. Flynn </a><a href="part31.htm#bookmark1073" class="a">(1998) proposes a ‘contingency framework’, shown in Figure 21.8, which aims at helping to select an appropriate methodology for a specific </a>organizational context.</p><p style="padding-left: 117pt;text-indent: 0pt;text-align: left;"><span><img width="292" height="228" alt="image" src="Image_1659.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1073">Figure 21.8 </a><a href="part38.htm#bookmark1175" class="s33">The contingency framework can be used to help select an appropriate methodology for a given organizational context (adapted from </a><span class="s21">Flynn, 1998).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;"><a href="part9.htm#bookmark102" class="a">A project is rated along both dimensions, and this helps to indicate an appropriate development approach. ‘Requirements uncertainty’ is the extent to which requirements are unknown or subject to debate or disagreement, and also whether they are expected to change during development. For example, a new system intended primarily to automate an existing manual system may have relatively low requirements uncertainty. Agate’s Campaign Management system might fall into this category. ‘Process uncertainty’ refers to the degree of doubt about the best way to build the proposed system. On this count, too, we would probably categorize the Agate system as ‘low uncertainty.’ There is not likely to be much doubt about the best way to build such a relatively straightforward business system. Applying Flynn’s framework thus leads to the conclusion that we should adopt a ‘linear model’ or hard methodology. ‘Linear’ refers to a sequential lifecycle model like the Waterfall model, which indicates that in some respects this framework is now very dated. As we saw in </a>Chapter 3, few people today would recommend a linear waterfall approach in any but a very few unusual situations. In practice today this would be interpreted as meaning a fully featured methodology with clear tasks and phases, such as UP. Alternatively, it might indicate the procurement of a ready-made solution, in which case much of the lifecycle would indeed be linear.</p><p style="padding-left: 20pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">On the other hand, it may be more difficult to decide on the best process for a new system</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">that will use untried technology, with unpredictable effects on the organization’s employees. A project to introduce electronic commerce to an organization with no previous experience of it might fall in this category. Here, the framework recommends an integrated approach. However, in a contemporary context we would probably interpret this as indicating an agile approach, since this would accommodate uncertainty regarding both the requirements and the process.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">Where the process uncertainty is low but the requirements are highly uncertain, an agile approach such as DSDM or Scrum would also be recommended. Finally, where everything is unclear, a soft systems approach is recommended. Effectively, this means that the character of the problem must be clarified before any commitment can be made to development work.</p><p style="padding-left: 5pt;text-indent: 14pt;text-align: justify;">In seeking to merge together a soft and a hard methodology, the development team is really trying to devise a unique method suited to the project. This implicitly recognizes the complementary nature of their strengths and weaknesses.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="25" alt="image" src="Image_1660.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><a href="part4.htm#bookmark4" class="s28">21.9  </a><a href="part4.htm#bookmark4" class="s29">Summary</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1074">We began this chapter by considering how the concept of methodology differs from method and how both relate to process. These are important distinctions, since the development approach is an important factor in the success or failure of a project, and selection of an appropriate methodology is a necessary precursor to choosing the specific method or process to be followed. Many methodologies have been developed over the years, stemming from different traditions, and each in some way attempting to counter a perceived shortcoming in</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1075">contemporary rivals. The 1990s were a prolific time for the spread of object-oriented methodologies, which have comprehensively replaced the older structured methods in many organizations today. Among the object-oriented methodologies, UP and its derivatives look set to be the survivors. Over the same period, there was also much research into the possible merging of hard and soft methodologies. This was aimed at meeting a wider range of demands, and thus improving the overall success rate of IS development projects. However, the concerns of the soft systems community have to a large extent been subsumed into those of the much more recent Agile movement. Agile development differs in some important respects from earlier methodological approaches, in particular its flexible approach and its emphasis on keeping the quantity of documentation to the absolute minimum that is necessary. Agile methodologies and frameworks such as DSDM, Scrum and XP aim to complement object-oriented development rather than to replace it. As a result, it appears likely that they will continue to evolve alongside UML for the foreseeable future.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Review Questions</p></td></tr><tr style="height:219pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">21.1 <span class="s16">What is the difference between ‘methodology’ and ‘method’?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.2  <span class="s16">Distinguish between ‘task’ and ‘technique’, and give some examples of each.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.3  <span class="s16">What does it mean to say that XP is ‘agile’?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.4  <span class="s16">Explain the key elements in the philosophy of DSDM Atern.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.5 <span class="s16">In what respects does Scrum agree with UP?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.6 <span class="s16">How does Scrum differ from UP?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">21.7  <span class="s16">How does the full UP approach differ from the simplified approach followed in this book?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.8 <span class="s16">Name the five levels of the Capability Maturity Model.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.9  <span class="s16">Distinguish between the hard systems view and the soft systems view.</span></p><p class="s35" style="padding-top: 2pt;padding-left: 38pt;padding-right: 22pt;text-indent: -29pt;text-align: left;">21.10 <span class="s16">Why might a methodology based on a hard systems approach be unsuccessful in a situation where the goals of the organization are unclear?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.11 <span class="s16">What general advantages are claimed for using a methodology?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">21.12 <span class="s16">What might be the disadvantages of using an inappropriate methodology?</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.75291pt" cellspacing="0"><tr style="height:23pt"><td style="width:440pt" bgcolor="#006793"><p class="s34" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Case Study Work, Exercises and Projects</p></td></tr><tr style="height:228pt"><td style="width:440pt;border-left-style:solid;border-left-width:1pt;border-left-color:#006793;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#006793;border-right-style:solid;border-right-width:1pt;border-right-color:#006793" bgcolor="#D8E8F1"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 9pt;padding-right: 21pt;text-indent: 0pt;text-align: justify;">Do some research in your library or on the Internet, and collect material that describes four or more different systems development methodologies. Try to make these as different from each other as possible, for example by choosing one that is agile (e.g. Scrum), one that is object-oriented (e.g. UP), one based on a soft systems view (e.g. SSM) and one from a completely different tradition (e.g. Participatory Design, which we have not covered in this chapter). Then use the following questions as a basis for comparison.</p><p class="s35" style="padding-top: 1pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">21.A <span class="s16">What techniques are used by each methodology? In particular, what aspects of the system do they represent and what techniques do they use to do this?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">21.B <span class="s16">To what extent does each methodology cover the full project lifecycle, from project selection through to implementation and maintenance?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">21.C <span class="s16">How far do you think each methodology can be adapted to suit differing projects or circumstances?</span></p><p class="s35" style="padding-top: 2pt;padding-left: 36pt;padding-right: 21pt;text-indent: -26pt;text-align: justify;">21.D <span class="s16">Can you find a statement that gives an underlying philosophy for each methodology? If not, is it possible to identify the intellectual tradition from which the methodology has been derived?</span></p></td></tr></table><p class="s37" style="padding-top: 3pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Further Reading</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="129" height="2" alt="image" src="Image_1661.png"/></span></p><p class="s7" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="part38.htm#bookmark1165" class="s6">The DSDM Atern Pocketbook (DSDM Consortium, </a>2007) is a brief but readable introduction to this methodology.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1102" class="s6">Ambler </a><a href="http://www.ambysoft.com/" class="s6" target="_blank">(2004) is a very useful resource on agile methods, and Ambler’s website </a>www.ambysoft.com also includes a number of articles and a comprehensive description of AUP.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;">Larman (2003) is another readable introduction to agile development, with chapters devoted to XP, the Unified Process and other agile methodologies.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1174" class="s6">Fitzgerald et al. </a>(2002) is a comparative review of some traditional methodologies (not discussed in this chapter) and some not-so-traditional methodologies that include RUP, DSDM, XP, SSM. There is also some coverage of the role of the CMMI and a helpful discussion of the theoretical background to methodologies and their use.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;">Avison and Fitzgerald (2006), now in its fourth edition, remains a key text for issues in understanding and selecting software development methodologies.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1292" class="s6">V </a>idgen et al. (2002)—though mainly devoted to the development of web information systems, which is beyond the scope of this book—include a useful summary of systems thinking and SSM, and there is also some coverage of PD.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1175" class="s6">Flynn </a>(1998), although older than other texts mentioned here, remains a good introduction to the many traditions behind today’s methodologies, and is also still worthwhile reading for its treatment of the issues that cause difficulty in choosing the ‘right’ way to do systems development.</p><p class="s7" style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1132" class="s6">For more detailed information about SSM, readers should ideally consult the primary sources: </a><a href="part38.htm#bookmark1135" class="s6">Checkland (1981), </a><a href="part38.htm#bookmark1134" class="s6">Checkland and Scholes (1990) and </a>Checkland and Holwell (1998).</p><p style="padding-left: 5pt;text-indent: 9pt;text-align: justify;"><a href="part38.htm#bookmark1220" class="s6">Jacobson et al. (1999) remains the definitive work on UP, </a><a href="part38.htm#bookmark1222" class="s6">while Kruchten </a><a href="part38.htm#bookmark1220" class="s6">(2004) and Kroll and Kruchten (2003) are both good sources on RUP.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part30.htm">&lt; Previous</a><span> | </span><a href="../Simon%20Bennett%2C%20Ray%20Farmer%20-%20Object-Oriented%20Systems%20Analysis%20and%20Design%20Using%20UML%20%282010%2C%20McGraw-Hill%20Education%29%20-%20libgen.li.html">Contents</a><span> | </span><a href="part32.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
